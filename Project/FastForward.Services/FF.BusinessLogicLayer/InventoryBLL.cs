using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Text.RegularExpressions;
using System.Transactions;
using FF.BusinessObjects;
using FF.DataAccessLayer;
using FF.Interfaces;
using System.IO;
using System.Net.Mail;
using FF.BusinessObjects.InventoryNew;
using FF.BusinessObjects.ToursNew;
using FF.BusinessObjects.General;
using FF.BusinessObjects.ReptObj;
using FF.BusinessObjects.Financial;
using FF.BusinessObjects.Sales;
using System.Threading.Tasks;
using FF.BusinessObjects.Security;

namespace FF.BusinessLogicLayer
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class InventoryBLL : IInventory
    {
        public InventoryDAL _inventoryDAL = null;
        public ReptCommonDAL _inventoryRepDAL = null;
        public FMS_InventoryDAL _FMSinventoryDAL = null;
        public SalesDAL _salesDAL = null;
        public SCMCommonDAL _ScmCommonDAL = null;
        public POSCommonDAL _PosCommonDAL = null;
        public STNCommonDAL _StnCommonDAL = null;
        public GeneralDAL _generalDAL = null;
        public POSSCMUploadDAL _posSCMUploadDAL = null;
        public FMS_InventoryDAL _fmsInventoryDal = null;
        public CustServiceDAL _custServiceDAL = null;
        public SecurityDAL _securityDAL = null;
        public FinancialDAL _financialDAL = null;
        public FIXA_InventoryDAL _fixassetDAL = null; 
        private string erroritem = "";
        PriceBookLevelRef _priceBookLevelRef = new PriceBookLevelRef();
        ReptPickHeader _tmpPickHdr = new ReptPickHeader();
        private bool IsSaleFigureRoundUp = true;
        //DateTime GRN_Date;

        //kapila
        public DataTable get_srn_items(string _refNo)
        {
            // _inventoryDAL = new InventoryDAL();
            return new DataTable();
        }
        //kapila
        public DataTable Get_serial_by_itm_stus(string company, string location, string itemCode, string _stus, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_serial_by_itm_stus(company, location, itemCode, _stus, serial);
        }
        //kapila
        public DataTable CHECKRESQTY(string COM, string LOC, string ITM, string STATUS, string USER, decimal QTY)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CHECKRESQTY(COM, LOC, ITM, STATUS, USER, QTY);
        }
        public DataTable getMstSysParam(string _com, string _pty_tp, string _pty_cd, string _rest_tp, string _brand, string _cat)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getMstSysParam(_com, _pty_tp, _pty_cd, _rest_tp, _brand, _cat);
        }
        //kapila 21/6/2017
        public int SaveInventoryRequestData_SR(InventoryRequest _inventoryRequest, List<InventoryRequestItem> _inventoryRequestAutoAppList, MasterAutoNumber _mastAutoNo, out string _docNo, out string _reqdNo, Boolean _isFoundSysPara = false)
        {
            int result = 0;
            int resultR = 0;
            int seqno = 0;
            int itmballine = 1;
            string _errro = "";
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            DataTable _detFound = null;
            string _documentNo = "";
            string _docuNo = "";
            _reqdNo = "";
            if (_mastAutoNo != null) //Insert new record.
            {
                #region New Entry

                try
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    //Save InventoryRequest details to DB.

                    if (_inventoryRequestAutoAppList.Count > 0)     //with auto approval
                    {
                        result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);

                        //Save InventoryRequest Item details.
                        if ((_inventoryRequestAutoAppList != null) && (_inventoryRequestAutoAppList.Count > 0))
                        {
                            foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequestAutoAppList)
                            {
                                _inventoryRequestItem.Itri_seq_no = result;
                                _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                                _inventoryDAL.update_frm_loc(_inventoryRequestItem.Itri_loc, result, _inventoryRequest.Itr_cre_by,"A");
                                //kapila 7/6/2017
                                itmballine = 1;
                                if (_inventoryRequest.Itr_tp == "MRN")
                                {
                                    DataTable _dtItmBal = _inventoryDAL.GetRootBalances(_inventoryRequest.Itr_com, _inventoryRequest.Itr_loc, _inventoryRequestItem.Itri_itm_cd);
                                    foreach (DataRow r in _dtItmBal.Rows)
                                    {
                                        InventoryReqItemBal _reqItmBal = new InventoryReqItemBal();
                                        _reqItmBal.IRB_ITM = _inventoryRequestItem.Itri_itm_cd;
                                        _reqItmBal.IRB_LINE = itmballine;
                                        _reqItmBal.IRB_LOC = r["inl_loc"].ToString();
                                        _reqItmBal.IRB_QTY = Convert.ToInt32(r["inl_qty"]);
                                        _reqItmBal.IRB_REQ_LINE = _inventoryRequestItem.Itri_line_no;
                                        _reqItmBal.IRB_RT_CD = r["frs_cd"].ToString(); ;
                                        _reqItmBal.IRB_SEQ = result;
                                        _reqItmBal.IRB_STUS = r["inl_itm_stus"].ToString(); ;
                                        itmballine = itmballine + 1;
                                        _inventoryDAL.SaveInventoryRequestItmBal(_reqItmBal);
                                    }
                                }
                            }
                            //ADDED BY SACHITH
                            //2012/08/16
                            //SAVE INS_REQ_SER
                            if (_inventoryRequest.InventoryRequestSerialsList != null)
                            {
                                foreach (InventoryRequestSerials _inventoryRequestSerial in _inventoryRequest.InventoryRequestSerialsList)
                                {
                                    _inventoryRequestSerial.Itrs_seq_no = result;
                                    _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestSerial);
                                }
                            }
                            //END
                        }

                        //kapila 3/6/2017 auto generation REQD number
                        string _documentNoR = "";
                        List<string> _REQDList = new List<string>();
                        //   Boolean _isFoundMsySysPara = _inventoryDAL.Is_Found_Mst_Sys_Para(_inventoryRequest.Itr_com, _inventoryRequest.Itr_loc);
                        if (_inventoryRequest.Itr_tp == "MRN")
                        {
                            // _inventoryRequest_R = _inventoryRequest;
                            // _inventoryRequestAutoAppList = _inventoryRequestAutoAppList.Where(x => x.Itri_is_auto_app == 1).ToList();
                            MasterAutoNumber _mastAutoNo_R = new MasterAutoNumber();

                            var _showroom = _inventoryRequestAutoAppList.GroupBy(x => new { x.Itri_loc, x.Itri_is_auto_app }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                            foreach (var shor in _showroom)
                            {
                                var _SelectItemByshowroom = _inventoryRequestAutoAppList.Where(x => x.Itri_loc == shor.Peo.Itri_loc).ToList();


                                #region save

                                var _scanItems = _SelectItemByshowroom.GroupBy(x => new { x.Itri_loc, x.Itri_com, x.PoType }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                                foreach (var itm in _scanItems)
                                {
                                    _mastAutoNo_R.Aut_cate_tp = "LOC";

                                    _mastAutoNo_R.Aut_direction = null;
                                    _mastAutoNo_R.Aut_modify_dt = null;

                                    _mastAutoNo_R.Aut_number = 0;

                                    _mastAutoNo_R.Aut_year = null;

                                    if (itm.Peo.PoType == "Consignment")
                                    {
                                        _inventoryRequest.Itr_tp = "CONSD";
                                        _mastAutoNo_R.Aut_moduleid = "CONSD";
                                        _mastAutoNo_R.Aut_start_char = "CONSD";
                                    }
                                    else
                                    {
                                        if (itm.Peo.PoType == "Purchase")
                                        {
                                            _inventoryRequest.Itr_sub_tp = "PRQ";
                                        }
                                        else
                                        {
                                            _inventoryRequest.Itr_sub_tp = "NOR";
                                        }
                                        _inventoryRequest.Itr_tp = "REQD";
                                        _mastAutoNo_R.Aut_moduleid = "REQD";
                                        _mastAutoNo_R.Aut_start_char = "REQD";

                                    }
                                    _mastAutoNo_R.Aut_cate_cd = _inventoryRequest.Itr_loc;

                                    _inventoryRequest.Itr_loc = _inventoryRequest.Itr_loc;
                                    _mastAutoNo_R.Aut_cate_cd = _inventoryRequest.Itr_loc;
                                    Int32 _autoNoR = _inventoryDAL.GetAutoNumber(_mastAutoNo_R.Aut_moduleid, _mastAutoNo_R.Aut_direction, _mastAutoNo_R.Aut_start_char, _mastAutoNo_R.Aut_cate_tp, _mastAutoNo_R.Aut_cate_cd, _mastAutoNo_R.Aut_modify_dt, _mastAutoNo_R.Aut_year).Aut_number;
                                    _documentNoR = _inventoryRequest.Itr_loc + "-" + _mastAutoNo_R.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoR.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(_mastAutoNo_R);
                                    _inventoryRequest.Itr_req_no = _documentNoR;
                                    _inventoryRequest.Itr_issue_from = itm.Peo.Itri_loc;
                                    _inventoryRequest.Itr_issue_com = itm.Peo.Itri_com;
                                    _inventoryRequest.Itr_rec_to = _inventoryRequest.Itr_loc;
                                    _inventoryRequest.Itr_stus = "A";

                                    _REQDList.Add(_documentNoR);

                                    if (string.IsNullOrEmpty(_reqdNo)) _reqdNo = _documentNoR; else _reqdNo = _reqdNo + "," + _documentNoR;


                                    resultR = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                                    seqno = 0;
                                    var _SelectItem = _inventoryRequestAutoAppList.Where(x => x.Itri_loc == itm.Peo.Itri_loc && x.Itri_com == itm.Peo.Itri_com && x.PoType == itm.Peo.PoType).ToList();
                                    int i = 1;
                                    foreach (InventoryRequestItem _ReqItem in _SelectItem)
                                    {
                                        seqno = _ReqItem.Itri_seq_no;
                                        _ReqItem.Itri_seq_no = resultR;
                                        _ReqItem.Itri_line_no = i;
                                        _ReqItem.Itri_app_qty = _ReqItem.Itri_bqty;
                                        _inventoryDAL.SaveInventoryRequestItem(_ReqItem);
                                        _inventoryDAL.update_frm_loc(_ReqItem.Itri_loc, seqno, _inventoryRequest.Itr_cre_by,"P");
                                        i++;

                                        if (_inventoryRequest.Temp_itr_chnl_allocation)
                                        {
                                            UpdateItemAllocationDataFIFO(_inventoryDAL, _ReqItem, _inventoryRequest);
                                        }
                                        if (_inventoryRequest.TMP_IS_RES_UPDATE)
                                        {
                                            if (!string.IsNullOrEmpty(_ReqItem.Itri_res_no))
                                            {
                                                if (_ReqItem.Itri_res_no != "N/A")
                                                {
                                                    #region update reservation data 08 Nov 2016
                                                    _inrReqDataTmp = _inventoryDAL.GET_INT_REQ_DATA(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_ref }).FirstOrDefault();
                                                    int _result = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                    {
                                                        IRL_CURT_COM = _inventoryRequest.Itr_issue_com,
                                                        IRL_CURT_LOC = _ReqItem.Itri_loc,
                                                        IRL_ORIG_DOC_TP = _inventoryRequest.Itr_sub_tp,
                                                        //  IRL_ORIG_DOC_NO = _inrReqDataTmp.Itr_tp,
                                                        IRL_ORIG_DOC_DT = DateTime.Now,

                                                        IRL_CURT_DOC_TP = _inventoryRequest.Itr_sub_tp,
                                                        IRL_CURT_DOC_NO = _documentNoR,
                                                        IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                        IRL_RES_NO = _ReqItem.Itri_res_no,
                                                        IRL_ITM_CD = _ReqItem.Itri_itm_cd,
                                                        IRL_ITM_STUS = _ReqItem.Itri_itm_stus,
                                                        IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by,
                                                        IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                        IRL_MOD_DT = DateTime.Now,
                                                        IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                        IRL_CRE_DT = DateTime.Now,
                                                        IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                        IRL_RES_QTY = _ReqItem.Itri_qty
                                                    }, 0, _inventoryDAL, out _errro);
                                                    //if (_res <= 0)
                                                    //{
                                                    //    _resUpdateErr = true;
                                                    //}
                                                    #endregion
                                                }
                                            }
                                        }
                                    }

                                }
                                #endregion

                            }
                        }

                    nx:
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                        _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                        //Check Save Req No
                        if (_inventoryDAL.CheckInventoryNo("sp_getreqno", "p_req_no", _documentNo) == 1)
                        {
                            goto nx;
                        }
                        // Update document no in Request Header table.
                        _inventoryDAL.UpdateInventoryRequestDocNo(result, _documentNo);
                        _docNo = _documentNo;
                        if (string.IsNullOrEmpty(_docuNo)) _docuNo = _docNo; else _docuNo = _docuNo + "," + _docNo;

                        //updated by akila 2017/10/13 - Check REQD available and update status in int_req
                        if (_REQDList != null && _REQDList.Count > 0)
                        {
                            InventoryRequest _intReq = new InventoryRequest();
                            _intReq.Itr_stus = "F";
                            _intReq.Itr_com = _inventoryRequest.Itr_com;
                            _intReq.Itr_loc = _inventoryRequest.Itr_loc;
                            _intReq.Itr_req_no = _docNo;
                            _intReq.Itr_mod_by = _inventoryRequest.Itr_mod_by;
                            _intReq.Itr_session_id = _inventoryRequest.Itr_session_id;
                            _inventoryDAL.UpdateInventoryRequestStatusBulk(_intReq);

                            //kapila 6/6/2017
                            foreach (string REQDNO in _REQDList)
                            {
                                _inventoryDAL.Update_MRN_Ref_By_MRN(REQDNO, _docNo);
                            }
                        }
                        else
                        {
                            InventoryRequest _intReq = new InventoryRequest();
                            _intReq.Itr_stus = "P";
                            _intReq.Itr_com = _inventoryRequest.Itr_com;
                            _intReq.Itr_loc = _inventoryRequest.Itr_loc;
                            _intReq.Itr_req_no = _docNo;
                            _intReq.Itr_mod_by = _inventoryRequest.Itr_mod_by;
                            _intReq.Itr_session_id = _inventoryRequest.Itr_session_id;
                            _inventoryDAL.UpdateInventoryRequestStatusBulk(_intReq);
                        }
                        ////kapila 6/6/2017
                        //foreach (string REQDNO in _REQDList)
                        //{
                        //    _inventoryDAL.Update_MRN_Ref_By_MRN(REQDNO, _docNo);
                        //}

                        _detFound = _inventoryDAL.GetInventoryRequestItemsBySeqNo(result.ToString());
                        #region add reservation log update 07 Nov 2016 Lakshan
                        if ((_inventoryRequestAutoAppList != null) && (_inventoryRequestAutoAppList.Count > 0))
                        {
                            foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequestAutoAppList)
                            {
                                #region update reservation det and log add by Lakshan 28 Oct 2016
                                if (_inventoryRequest.Itr_system_module == "MRN" && _inventoryRequest.Temp_is_res_request == true)
                                {
                                    // string _errro = "";
                                    if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                    {
                                        int _res = 0;
                                        _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                        {
                                            IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                            IRD_RES_BQTY = _inventoryRequestItem.Itri_qty
                                        });

                                        if (_res > 0)
                                        {
                                            _res = 0;
                                            _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                            {
                                                IRL_CURT_COM = _inventoryRequest.Itr_com,
                                                IRL_CURT_LOC = _inventoryRequestItem.Itri_loc,
                                                IRL_ORIG_DOC_TP = "INV",
                                                IRL_ORIG_DOC_NO = _inventoryRequestItem.Itri_res_no,
                                                IRL_ORIG_DOC_DT = DateTime.Now,

                                                IRL_CURT_DOC_TP = _inventoryRequest.Itr_tp,
                                                IRL_CURT_DOC_NO = _documentNoR,
                                                IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                                IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                                IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                                IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                IRL_MOD_DT = DateTime.Now,
                                                IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                IRL_CRE_DT = DateTime.Now,
                                                IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                IRL_RES_QTY = _inventoryRequestItem.Itri_qty
                                            }, 0, _inventoryDAL, out _errro);
                                        }
                                        if (_res < 1)
                                        {
                                            _docNo = _errro;
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            return result;
                                        }
                                        if (_res > 0)
                                        {
                                            List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA(new INR_RES_DET()
                                            {
                                                IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                                IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus
                                            });
                                            decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                            if (_resBal == 0)
                                            {
                                                _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                                {
                                                    IRS_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                    IRS_STUS = "F"
                                                });
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                        }

                    }
                        #endregion with auto approval

                    
                    var _loc = _inventoryRequest.InventoryRequestItemList.GroupBy(x => new { x.Itri_loc }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                    InventoryRequest _newInventoryRequest = new InventoryRequest();
                 //   InventoryRequestItem _newInventoryRequestItem = new InventoryRequestItem();
                    _newInventoryRequest.InventoryRequestItemList = _inventoryRequest.InventoryRequestItemList;
                    foreach (var location in _loc)
                    {
                        _inventoryRequest.InventoryRequestItemList = _newInventoryRequest.InventoryRequestItemList.Where(r => r.Itri_loc == location.Peo.Itri_loc).ToList();


                        if (_inventoryRequest.InventoryRequestItemList.Count > 0)  // without auto approval
                        {
                            _inventoryRequest.Itr_req_no = "DOCR-" + DateTime.Now.TimeOfDay.Hours.ToString() + ":" + DateTime.Now.TimeOfDay.Minutes.ToString() + ":" + DateTime.Now.TimeOfDay.Seconds.ToString();
                            _inventoryRequest.Itr_tp = "MRN";
                            _inventoryRequest.Itr_stus = "P";
                            result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                            //result = _inventoryRequest.Itr_seq_no;

                            //Save InventoryRequest Item details.
                            if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                            {
                                foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                                {
                                    _inventoryRequestItem.Itri_seq_no = result;
                                    _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                                    _inventoryDAL.update_frm_loc(_inventoryRequestItem.Itri_loc, result, _inventoryRequest.Itr_cre_by,"P");

                                    //kapila 7/6/2017
                                    itmballine = 1;
                                    if (_inventoryRequest.Itr_tp == "MRN")
                                    {
                                        DataTable _dtItmBal = _inventoryDAL.GetRootBalances(_inventoryRequest.Itr_com, _inventoryRequest.Itr_loc, _inventoryRequestItem.Itri_itm_cd);
                                        foreach (DataRow r in _dtItmBal.Rows)
                                        {
                                            InventoryReqItemBal _reqItmBal = new InventoryReqItemBal();
                                            _reqItmBal.IRB_ITM = _inventoryRequestItem.Itri_itm_cd;
                                            _reqItmBal.IRB_LINE = itmballine;
                                            _reqItmBal.IRB_LOC = r["inl_loc"].ToString();
                                            _reqItmBal.IRB_QTY = Convert.ToInt32(r["inl_qty"]);
                                            _reqItmBal.IRB_REQ_LINE = _inventoryRequestItem.Itri_line_no;
                                            _reqItmBal.IRB_RT_CD = r["frs_cd"].ToString(); ;
                                            _reqItmBal.IRB_SEQ = result;
                                            _reqItmBal.IRB_STUS = r["inl_itm_stus"].ToString(); ;
                                            itmballine = itmballine + 1;
                                            _inventoryDAL.SaveInventoryRequestItmBal(_reqItmBal);
                                        }
                                    }
                                }
                                //ADDED BY SACHITH
                                //2012/08/16
                                //SAVE INS_REQ_SER
                                if (_inventoryRequest.InventoryRequestSerialsList != null)
                                {
                                    foreach (InventoryRequestSerials _inventoryRequestSerial in _inventoryRequest.InventoryRequestSerialsList)
                                    {
                                        _inventoryRequestSerial.Itrs_seq_no = result;
                                        _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestSerial);
                                    }
                                }
                                //END
                            }

                        nx:
                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                            _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                            //Check Save Req No
                            if (_inventoryDAL.CheckInventoryNo("sp_getreqno", "p_req_no", _documentNo) == 1)
                            {
                                goto nx;
                            }
                            // Update document no in Request Header table.
                            _inventoryDAL.UpdateInventoryRequestDocNo(result, _documentNo);
                            _docNo = _documentNo;
                            if (string.IsNullOrEmpty(_docuNo)) _docuNo = _docNo; else _docuNo = _docuNo + "," + _docNo;

                            _detFound = _inventoryDAL.GetInventoryRequestItemsBySeqNo(result.ToString());

                            if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                            {
                                foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                                {
                                    #region update reservation det and log add by Lakshan 28 Oct 2016
                                    if (_inventoryRequest.Itr_system_module == "MRN" && _inventoryRequest.Temp_is_res_request == true)
                                    {
                                        // string _errro = "";
                                        if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                        {
                                            int _res = 0;
                                            _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                            {
                                                IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                                IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                                IRD_RES_BQTY = _inventoryRequestItem.Itri_qty
                                            });

                                            if (_res > 0)
                                            {
                                                _res = 0;
                                                _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                {
                                                    IRL_CURT_COM = _inventoryRequest.Itr_com,
                                                    IRL_CURT_LOC = _inventoryRequestItem.Itri_loc,
                                                    IRL_ORIG_DOC_TP = "INV",
                                                    IRL_ORIG_DOC_NO = _inventoryRequestItem.Itri_res_no,
                                                    IRL_ORIG_DOC_DT = DateTime.Now,

                                                    IRL_CURT_DOC_TP = _inventoryRequest.Itr_tp,
                                                    IRL_CURT_DOC_NO = _documentNo,
                                                    IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                    IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                    IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                                    IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                                    IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                                    IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                    IRL_MOD_DT = DateTime.Now,
                                                    IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                    IRL_CRE_DT = DateTime.Now,
                                                    IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                    IRL_RES_QTY = _inventoryRequestItem.Itri_qty
                                                }, 0, _inventoryDAL, out _errro);
                                            }
                                            if (_res < 1)
                                            {
                                                _docNo = _errro;
                                                result = -1;
                                                _inventoryDAL.TransactionRollback();
                                                return result;
                                            }
                                            if (_res > 0)
                                            {
                                                List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA(new INR_RES_DET()
                                                {
                                                    IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                    IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                                    IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus
                                                });
                                                decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                                if (_resBal == 0)
                                                {
                                                    _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                                    {
                                                        IRS_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                        IRS_STUS = "F"
                                                    });
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                }
                            }

                        }//add by tharanga 2018/09/14
                    }
                #endregion

                    _docNo = _docuNo;

                    if (_detFound == null)
                    {
                        _docNo = "Item list not saved";
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    if (_detFound.Rows.Count <= 0)
                    {
                        _docNo = "Item list not saved";
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    if (result > 0)
                    {
                        _inventoryDAL.UPDATE_PROJECT(_inventoryRequest.Itr_job_no, "U");
                    }
                    _inventoryDAL.TransactionCommit();
                    result = 1;
                }
                catch (Exception ex)
                {
                    result = -1;
                    _inventoryDAL.TransactionRollback();
                    _docNo = ex.Message;
                }
                //  #endregion
            }
            else //Update an existing record.
            {
                //using (TransactionScope scope = new TransactionScope())
                //{
                #region Update Entry
                try
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    //   _inventoryDAL.BeginTransaction();
                    //Update InventoryRequest item details to DB.
                    result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                    int hdr_seqNo = 0;

                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        result = _inventoryDAL.SAVE_LOG_INTREQITM(_inventoryRequest, null, _inventoryRequest.Itr_cre_by);
                        result = _inventoryDAL.SAVE_LOG_INTREQSER(_inventoryRequest, null, _inventoryRequest.Itr_cre_by);

                        hdr_seqNo = _inventoryDAL.DeleteInventoryRequestItemData(_inventoryRequest);

                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            _inventoryRequestItem.Itri_seq_no = hdr_seqNo;
                            _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        }
                    }

                    if ((_inventoryRequest.InventoryRequestSerialsList != null) && (_inventoryRequest.InventoryRequestSerialsList.Count > 0))
                    {
                        foreach (InventoryRequestSerials _inventoryRequestserial in _inventoryRequest.InventoryRequestSerialsList)
                        {
                            _inventoryRequestserial.Itrs_in_seqno = hdr_seqNo;
                            _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestserial);
                        }
                    }
                    #region add reservation log update 07 Nov 2016 Lakshan
                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            #region update reservation det and log add by Lakshan 28 Oct 2016
                            if (_inventoryRequest.Itr_system_module == "MRN" && _inventoryRequest.Temp_is_res_request == true)
                            {
                                string errr = "";
                                if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                {
                                    int _res = 0;
                                    _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                        IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                        IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                        IRD_RES_BQTY = _inventoryRequestItem.Itri_qty
                                    });
                                    if (_res > 0)
                                    {
                                        _res = 0;
                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                        {
                                            IRL_CURT_COM = _inventoryRequest.Itr_com,
                                            IRL_CURT_LOC = _inventoryRequest.Itr_issue_from,
                                            IRL_ORIG_DOC_TP = "INV",
                                            IRL_ORIG_DOC_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                            IRL_CURT_DOC_TP = "MRN",
                                            IRL_CURT_DOC_NO = _inventoryRequest.Itr_req_no,
                                            IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                            IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                            IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                            IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_MOD_DT = DateTime.Now,
                                            IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                            IRL_CRE_DT = DateTime.Now,
                                            IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_RES_QTY = _inventoryRequestItem.Itri_qty
                                        }, 0, _inventoryDAL, out errr);
                                    }
                                    if (_res < 1)
                                    {
                                        _docNo = errr;
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        return result;
                                    }
                                    if (_res > 0)
                                    {
                                        List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA_NEW(new INR_RES_DET()
                                        {
                                            IRD_RES_NO = _inventoryRequestItem.Itri_res_no
                                        });
                                        decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                        if (_resBal == 0)
                                        {
                                            _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                            {
                                                IRS_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRS_STUS = "F"
                                            });
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    #endregion
                    _docNo = string.Empty;
                    //    _inventoryDAL.TransactionCommit();
                    //scope.Complete();
                    //}
                    result = 1;
                }
                catch (Exception ex)
                {
                    result = -1;
                    //     _inventoryDAL.TransactionRollback();
                    _docNo = ex.Message;
                }
                #endregion
            }
            return result;
        }
        public DataTable GetINRSERMST_Rcc(string _company, string _loc, string _serial, string _war, string _inv, string _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetINRSERMST_Rcc(_company, _loc, _serial, _war, _inv, _doc);
        }
        public DataTable GetRootBalances(string _com, string _loc, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRootBalances(_com, _loc, _item);
        }
        public bool Is_Found_Mst_Sys_Para(string _company, string _loc, string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Is_Found_Mst_Sys_Para(_company, _loc, _type);
        }
        public DataTable Get_MRN_Prefer_Loc(string _company, string _Item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_MRN_Prefer_Loc(_company, _Item);
        }
        public DataTable Get_INTHDRByOthDoc(String Com, String Type, String OthDoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_INTHDRByOthDoc(Com, Type, OthDoc);
        }
        public DataTable GetTaxStrucData(string _com, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTaxStrucData(_com, _item);
        }
        //kapila
        public List<ReptPickSerials> GetAvailableSerials(string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailableSerials(company, location);
        }

        //kapila
        public DataTable GetAvailableGvPrefixes(string _itm)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetAvailableGvPrefixes(_itm);
        }
        public DataTable Get_SCV_Area()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_SCV_Area();
        }
        public Int32 Import_SI(string _SI, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _effect = _inventoryDAL.Import_SI(_SI, _loc);

            _inventoryDAL.TransactionCommit();
            return _effect;
        }

        public DataTable getMstSysPara(string _com, string _pty_tp, string _pty_cd, string _rest_tp, string _dir_pry_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getMstSysPara(_com, _pty_tp, _pty_cd, _rest_tp, _dir_pry_cd);
        }
        //kapila
        public DataTable getNextSerialSCM(string _com, string _loc, string _item, string _stus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getNextSerialSCM(_com, _loc, _item, _stus);
        }

        /// <summary>
        /// getSerialSCMToMob By Dulanga 2017-2-2
        /// </summary>
        /// <param name="_com"></param>
        /// <param name="_loc"></param>
        /// <param name="_serial"></param>
        /// <returns></returns>
        public DataTable getSerialSCMToMob(string _com, string _loc, string _serial, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getSerialSCMToMob(_com, _loc, _serial, _item);
        }


        //kapila
        public DataTable IsValid_SCM_Serial(string _com, string _loc, string _item, string _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsValid_SCM_Serial(_com, _loc, _item, _ser);
        }
        //kapila
        public DataTable GetManualDocBookNo(string _Comp, string _Loc, string _DocType, Int32 _NextNo, string _prefix)
        {
            DataTable _dt = null;
            GeneralDAL _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            InventoryDAL _inventoryDAL = new InventoryDAL();
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _dt = _inventoryDAL.GetManualDocBookNo(_Comp, _Loc, _DocType, _NextNo, _prefix);
            else
                _dt = _FMSinventoryDAL.GetManualDocBookNo(_Comp, _Loc, _DocType, _NextNo, _prefix);
            return _dt;
        }

        //kapila
        public Int32 UpdateTempWaraUpload(List<ReptPickSerials> _reptPickSerials, string _docNo, string _custTel, DateTime _docDate, DateTime _poDate, string _invNo)
        {
            Int32 effect = 0;
            Int32 _warPeriod = 0;
            Int32 _line = 1;

            foreach (ReptPickSerials _srl in _reptPickSerials)
            {
                effect = _inventoryDAL.UpdateTempWaraUpload(_docNo, _docDate, _srl.Tus_warr_period, _docNo, _custTel, _poDate, _invNo, _srl.Tus_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_itm_stus, _srl.Tus_unit_price, _srl.Tus_warr_no, _srl.Tus_warr_no, _srl.Tus_orig_grnno, _srl.Tus_orig_grndt, _srl.Tus_orig_supp, _srl.Tus_ser_2);
            }

            effect = 1;
            return effect;
        }
        //kapila
        public DataTable Get_TempIssued_Items(string Com, string _mloc, string _sloc, string Type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_TempIssued_Items(Com, _mloc, _sloc, Type);
        }


        public DataTable GetAllFAMaterialRequestsList(string _com, string _loc, DateTime _from, DateTime _to, string _tp, string _reqno, string _reqby)
        {
            _StnCommonDAL = new STNCommonDAL();
            return _StnCommonDAL.GetAllFAMaterialRequestsList(_com, _loc, _from, _to, _tp, _reqno, _reqby);
        }
        public DataTable GetFAItem(string _item)
        {
            _StnCommonDAL = new STNCommonDAL();
            return _StnCommonDAL.GetFAItem(_item);
        }

        //kapila
        public FA_Inventory_Req_Hdr GetInventoryFARequestData(FA_Inventory_Req_Hdr _inventoryRequest)
        {
            _StnCommonDAL = new STNCommonDAL();

            _StnCommonDAL.ConnectionOpen();

            //Get Header details.
            FA_Inventory_Req_Hdr _inventoryReqResult = _StnCommonDAL.GetInventoryFARequestDataByReqNo(_inventoryRequest);

            if (_inventoryReqResult != null)
            {
                //Get Item details.
                List<FA_Inventory_Req_Itm> _inventoryRequestItemList = _StnCommonDAL.GetInventoryFARequestItemDataByReqNo(_inventoryRequest);

                if (_inventoryRequestItemList != null)
                {
                    _inventoryReqResult.InventoryRequestItemList = _inventoryRequestItemList;
                }

            }

            _StnCommonDAL.ConnectionClose();

            return _inventoryReqResult;
        }
        //kapila
        public int SaveFARequest(FA_Inventory_Req_Hdr _reqHdr, List<FA_Inventory_Req_Itm> _reqItmList, string _moduleID, string _startChar, out string _docno)
        {
            int effect = 0;
            try
            {
                _StnCommonDAL = new STNCommonDAL();
                _StnCommonDAL.ConnectionOpen();
                _StnCommonDAL.BeginTransaction();

                //Int32 _docSeqNo = _inventoryDAL.GetSerialID();
                Int32 _docSeqNo = 1;
                DataTable _dtAutoNo = _StnCommonDAL.GetAutoNumber(_moduleID, _reqHdr.Disp_location);
                if (_dtAutoNo.Rows.Count > 0)
                    _docSeqNo = Convert.ToInt32(_dtAutoNo.Rows[0]["number_n"]);

                string _documentNo = _startChar + "-" + _reqHdr.Disp_location + "-" + _docSeqNo.ToString("00000");

                effect = _StnCommonDAL.UpdateAutoNumber(_moduleID, _startChar, _reqHdr.Disp_location);

                _reqHdr.Disp_reqt_seq = _documentNo;
                effect = _StnCommonDAL.SaveFARequestHeader(_reqHdr);

                foreach (FA_Inventory_Req_Itm _lst in _reqItmList)
                {
                    _lst.Dispd_reqt_seq = _documentNo;
                    _StnCommonDAL.SaveFARequestItems(_lst);
                }

                _StnCommonDAL.TransactionCommit();
                _docno = "";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _docno = "ERROR : " + err.Message.ToString();
                _StnCommonDAL.TransactionRollback();

            }
            return effect;


        }
        //kapila
        public DataTable GetDODetByInvItem(string _company, string _invoice, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDODetByInvItem(_company, _invoice, _item);
        }
        //kapila
        #region oldSaveACInstallRequest
        //public int SaveACInstallRequest(RCC _RCC, List<Service_Req_Hdr> _ReqHdr, List<Service_Req_Det> _ReqDet, List<RCC_Det> _listrccdet, Boolean _isDealer, Boolean _isOnline, MasterAutoNumber _masterAutoNumber, out string _RccNo)
        //{
        //    int effect = 0;
        //    int _defLine = 1;
        //    try
        //    {
        //        _inventoryDAL = new InventoryDAL();
        //        _custServiceDAL = new CustServiceDAL();
        //        _generalDAL = new GeneralDAL();

        //        _inventoryDAL.ConnectionOpen();
        //        _custServiceDAL.ConnectionOpen();
        //        _generalDAL.ConnectionOpen();

        //        _inventoryDAL.BeginTransaction();
        //        _custServiceDAL.BeginTransaction();
        //        _generalDAL.BeginTransaction();

        //        Int32 _docSeqNo = _inventoryDAL.GetSerialID();

        //        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
        //        string _documentNo = _RCC.Inr_loc_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
        //        _RCC.Inr_no = _documentNo;
        //        effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
        //        _RccNo = _documentNo;
        //        effect = _inventoryDAL.SaveRCC(_RCC);


        //        Int32 ReqSeqNo = 0;
        //        ReqSeqNo = _custServiceDAL.GetJobSerialID();   // _inventoryDAL.GetReqSerialID(); 13/5/2016

        //        foreach (Service_Req_Hdr _requestHdr in _ReqHdr)
        //        {
        //            _requestHdr.Srb_seq_no = ReqSeqNo;
        //            _requestHdr.Srb_reqno = _RccNo;
        //            _custServiceDAL.SaveRequestHeader(_requestHdr);
        //        }

        //        foreach (Service_Req_Det _requestDet in _ReqDet)
        //        {
        //            _requestDet.Jrd_seq_no = ReqSeqNo;
        //            _requestDet.Jrd_reqno = _RccNo;
        //            _requestDet.Jrd_sjobno = _RccNo + ".1";
        //            _custServiceDAL.SaveRequestDetail(_requestDet);
        //        }
        //        //kapila 21/11/2016
        //        foreach (RCC_Det _rccdet in _listrccdet)
        //        {
        //            _rccdet.Inrd_line = _defLine;
        //            _rccdet.Inrd_no = _RccNo;
        //            _custServiceDAL.SaveRccDetail(_rccdet);
        //            _defLine = _defLine + 1;
        //        }


        //        _inventoryDAL.TransactionCommit();
        //        _custServiceDAL.TransactionCommit();
        //        _generalDAL.TransactionCommit();
        //        effect = 1;
        //    }
        //    catch (Exception err)
        //    {
        //        effect = -1;
        //        _RccNo = "ERROR : " + err.Message.ToString();
        //        _inventoryDAL.TransactionRollback();
        //        _custServiceDAL.TransactionRollback();
        //        _generalDAL.TransactionRollback();
        //    }
        //    return effect;


        //}
        #endregion
        public int SaveACInstallRequest(RCC _RCC, List<Service_Req_Hdr> _ReqHdr, List<Service_Req_Det> _ReqDet, List<RCC_Det> _listrccdet, Boolean _isDealer, Boolean _isOnline, MasterAutoNumber _masterAutoNumber, out string _RccNo, out string _jobno, List<Service_JOB_HDR> _jobHdrlist, Int32 _warrstus, Boolean _isExternal)
        {
            int effect = 0;
            int _defLine = 1;
            int _req_defLine = 1;
            Int32 _warStusnew = _warrstus;
            Service_JOB_HDR _jobHdr = new Service_JOB_HDR();
            List<Service_job_Det> _jobItemsfilter = new List<Service_job_Det>();
            List<Service_Job_Defects> _jobDefListFiletr = new List<Service_Job_Defects>();
            List<Service_job_Det> _jobItems = new List<Service_job_Det>();
            List<Service_Job_Defects> _jobDefList = new List<Service_Job_Defects>();
            List<Service_Req_Def> _jobreqdeflist = new List<Service_Req_Def>();
            string _brand = string.Empty;
            string _errcopy = "";
            string _jNocopy = "";
            string _receiptNocopy = "";
            string job_no = "";
            try
            {
                _inventoryDAL = new InventoryDAL();
                _custServiceDAL = new CustServiceDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();
                CustServiceBLL _custServiceBLL = new CustServiceBLL();

                _inventoryDAL.ConnectionOpen();
                _custServiceDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();

                _inventoryDAL.BeginTransaction();
                _custServiceDAL.BeginTransaction();
                _generalDAL.BeginTransaction();

                Int32 _docSeqNo = _inventoryDAL.GetSerialID();

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                string _documentNo = _RCC.Inr_loc_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
                _RCC.Inr_no = _documentNo;
                effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                _RccNo = _documentNo;
                effect = _inventoryDAL.SaveRCC(_RCC);


                Int32 ReqSeqNo = 0;
                ReqSeqNo = _custServiceDAL.GetJobSerialID();   // _inventoryDAL.GetReqSerialID(); 13/5/2016

                foreach (Service_Req_Hdr _requestHdr in _ReqHdr)
                {
                    _requestHdr.Srb_seq_no = ReqSeqNo;
                    _requestHdr.Srb_reqno = _RccNo;
                    _custServiceDAL.SaveRequestHeader(_requestHdr);
                }

                foreach (Service_Req_Det _requestDet in _ReqDet)
                {
                    _requestDet.Jrd_seq_no = ReqSeqNo;
                    _requestDet.Jrd_reqno = _RccNo;
                    _requestDet.Jrd_sjobno = _RccNo + ".1";
                    MasterLocation _locs = null;
                    _locs = _generalDAL.GetLocationByLocCode(_jobHdrlist.First().SJB_COM, _jobHdrlist.First().SJB_LOC);
                    if (_locs.Ml_loc_cd != null)
                    {
                        if (_locs.Ml_auto_job_create == 1)
                        {
                            _requestDet.Jrd_used = 1;
                        }
                    }
                    _custServiceDAL.SaveRequestDetail(_requestDet);
                }
                //kapila 21/11/2016
                foreach (RCC_Det _rccdet in _listrccdet)
                {
                    _rccdet.Inrd_line = _defLine;
                    _rccdet.Inrd_no = _RccNo;
                    _custServiceDAL.SaveRccDetail(_rccdet);
                    _defLine = _defLine + 1;
                }
                if (_jobHdrlist != null)
                {


                    #region REQ def
                    Service_Req_Def _jobreqDef = new Service_Req_Def();
                    _jobreqDef.Srdf_req_no = _RccNo;
                    _jobreqDef.Srdf_def_tp = "DEF000015";
                    _jobreqDef.Srdf_def_rmk = "AC INSTALLATION SERVICE";
                    _jobreqDef.Srdf_act = true;
                    _jobreqDef.Srdf_cre_by = _ReqHdr.First().Srb_cre_by;
                    _jobreqDef.Srdf_mod_by = _ReqHdr.First().Srb_mod_by;
                    _jobreqDef.Srdf_req_line = 1;
                    _jobreqDef.Srdf_stage = "J";
                    _jobreqDef.SDT_DESC = "AC INSTALLATION SERVICE";
                    _jobreqdeflist.Add(_jobreqDef);
                    #endregion
                    #region req defect
                    MasterLocation _locsnew = null;
                    _locsnew = _generalDAL.GetLocationByLocCode(_jobHdrlist.First().SJB_COM, _jobHdrlist.First().SJB_LOC);
                    if (_locsnew.Ml_loc_cd != null)
                    {
                        if (_locsnew.Ml_auto_job_create == 1)
                        {
                            foreach (Service_Req_Def _requestDef in _jobreqdeflist)
                            {
                                _requestDef.Srdf_seq_no = ReqSeqNo;
                                _requestDef.Srdf_def_line = _req_defLine;
                                _requestDef.Srdf_req_no = _RccNo;
                                _custServiceDAL.SaveRequestDefDetail(_requestDef);
                                _req_defLine = _req_defLine + 1;
                            }
                        }
                    }
                    #endregion
                    if (_isExternal == false)
                    {


                        #region Create AC instation Job

                        foreach (Service_JOB_HDR job_hdr_copy in _jobHdrlist)
                        {
                            job_hdr_copy.SJB_REQNO = _RccNo;
                            Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> _warrMstDic = null;
                            Dictionary<Service_Req_Hdr, List<Service_Req_Det>> _result = new Dictionary<Service_Req_Hdr, List<Service_Req_Det>>();
                            List<InventorySerialMaster> _warrMst = new List<InventorySerialMaster>();
                            List<InventorySubSerialMaster> _warrMstSub = new List<InventorySubSerialMaster>();
                            List<Service_Tech_Aloc_Hdr> _jobEmpList = new List<Service_Tech_Aloc_Hdr>();
                            #region hdr
                            _jobHdr = new Service_JOB_HDR();
                            _jobHdr.SJB_ADD1 = job_hdr_copy.SJB_ADD1;
                            _jobHdr.SJB_ADD2 = job_hdr_copy.SJB_ADD2;
                            _jobHdr.SJB_ADD3 = job_hdr_copy.SJB_ADD3;
                            _jobHdr.SJB_B_ADD1 = job_hdr_copy.SJB_B_ADD1;
                            _jobHdr.SJB_B_ADD2 = job_hdr_copy.SJB_B_ADD2;
                            _jobHdr.SJB_B_ADD3 = job_hdr_copy.SJB_B_ADD3;
                            _jobHdr.SJB_B_CUST_CD = job_hdr_copy.SJB_B_CUST_CD;
                            _jobHdr.SJB_B_CUST_NAME = job_hdr_copy.SJB_B_CUST_NAME;
                            _jobHdr.SJB_B_CUST_TIT = job_hdr_copy.SJB_B_CUST_TIT;
                            _jobHdr.SJB_B_DL = job_hdr_copy.SJB_B_DL;
                            _jobHdr.SJB_B_EMAIL = job_hdr_copy.SJB_B_EMAIL;
                            _jobHdr.SJB_B_FAX = job_hdr_copy.SJB_B_FAX;
                            _jobHdr.SJB_B_MOBINO = job_hdr_copy.SJB_B_MOBINO;
                            _jobHdr.SJB_B_NIC = job_hdr_copy.SJB_B_NIC;
                            _jobHdr.SJB_B_PHNO = job_hdr_copy.SJB_B_PHNO;
                            _jobHdr.SJB_B_PP = job_hdr_copy.SJB_B_PP;
                            _jobHdr.SJB_B_TOWN = job_hdr_copy.SJB_B_TOWN;
                            _jobHdr.SJB_CHG = job_hdr_copy.SJB_CHG;
                            _jobHdr.SJB_CHG_CD = job_hdr_copy.SJB_CHG_CD;
                            _jobHdr.SJB_CNT_ADD1 = job_hdr_copy.SJB_CNT_ADD1;
                            _jobHdr.SJB_CNT_ADD2 = job_hdr_copy.SJB_CNT_ADD2;
                            _jobHdr.SJB_CNT_PERSON = job_hdr_copy.SJB_CNT_PERSON;
                            _jobHdr.SJB_CNT_PHNO = job_hdr_copy.SJB_CNT_PHNO;
                            _jobHdr.SJB_COM = job_hdr_copy.SJB_COM;
                            _jobHdr.SJB_CRE_BY = job_hdr_copy.SJB_CRE_BY;

                            _jobHdr.SJB_CRE_DT = job_hdr_copy.SJB_CRE_DT;
                            _jobHdr.SJB_CUST_CD = job_hdr_copy.SJB_CUST_CD;
                            _jobHdr.SJB_CUST_NAME = job_hdr_copy.SJB_CUST_NAME;
                            _jobHdr.SJB_CUST_TIT = job_hdr_copy.SJB_CUST_TIT;
                            _jobHdr.SJB_CUSTEXPTDT = job_hdr_copy.SJB_CUSTEXPTDT;
                            _jobHdr.SJB_DL = job_hdr_copy.SJB_DL;
                            _jobHdr.SJB_DT = job_hdr_copy.SJB_DT;
                            _jobHdr.SJB_ED_DT = job_hdr_copy.SJB_ED_DT;
                            _jobHdr.SJB_EMAIL = job_hdr_copy.SJB_EMAIL;
                            _jobHdr.SJB_FAXNO = job_hdr_copy.SJB_FAXNO;
                            _jobHdr.SJB_INFM_ADD1 = job_hdr_copy.SJB_INFM_ADD1;
                            _jobHdr.SJB_INFM_ADD2 = job_hdr_copy.SJB_INFM_ADD2;
                            _jobHdr.SJB_INFM_PERSON = job_hdr_copy.SJB_INFM_PERSON;
                            _jobHdr.SJB_INFM_PHNO = job_hdr_copy.SJB_INFM_PHNO;
                            _jobHdr.SJB_JOB_RMK = job_hdr_copy.SJB_JOB_RMK;
                            _jobHdr.SJB_JOBCAT = job_hdr_copy.SJB_JOBCAT;
                            _jobHdr.SJB_JOBNO = job_hdr_copy.SJB_JOBNO;
                            _jobHdr.SJB_JOBSTAGE = job_hdr_copy.SJB_JOBSTAGE;
                            _jobHdr.SJB_JOBSTAGE_TEXT = job_hdr_copy.SJB_JOBSTAGE_TEXT;
                            _jobHdr.SJB_JOBSTP = job_hdr_copy.SJB_JOBSTP;
                            _jobHdr.SJB_JOBTP = job_hdr_copy.SJB_JOBTP;
                            _jobHdr.SJB_LASTPRINTBY = job_hdr_copy.SJB_LASTPRINTBY;
                            _jobHdr.SJB_MANUALREF = job_hdr_copy.SJB_MANUALREF;
                            _jobHdr.SJB_MOBINO = job_hdr_copy.SJB_MOBINO;
                            _jobHdr.SJB_MOD_BY = job_hdr_copy.SJB_MOD_BY;

                            _jobHdr.SJB_MOD_DT = job_hdr_copy.SJB_MOD_DT;
                            _jobHdr.SJB_NIC = job_hdr_copy.SJB_NIC;
                            _jobHdr.SJB_NOOFPRINT = job_hdr_copy.SJB_NOOFPRINT;
                            _jobHdr.SJB_ORDERNO = job_hdr_copy.SJB_ORDERNO;
                            _jobHdr.SJB_OTHERREF = job_hdr_copy.SJB_OTHERREF;
                            _jobHdr.SJB_PHNO = job_hdr_copy.SJB_PHNO;
                            _jobHdr.SJB_POD_NO = job_hdr_copy.SJB_POD_NO;
                            _jobHdr.SJB_PP = job_hdr_copy.SJB_PP;
                            _jobHdr.SJB_PRORITY = job_hdr_copy.SJB_PRORITY;
                            _jobHdr.SJB_REC_LOC = job_hdr_copy.SJB_REC_LOC;
                            _jobHdr.SJB_RECALL = job_hdr_copy.SJB_RECALL;
                            _jobHdr.SJB_REQNO = _RccNo;
                            _jobHdr.SJB_RMK = job_hdr_copy.SJB_RMK;
                            _jobHdr.sjb_scv_add1 = job_hdr_copy.sjb_scv_add1;
                            _jobHdr.sjb_scv_add2 = job_hdr_copy.sjb_scv_add2;
                            _jobHdr.sjb_scv_add3 = job_hdr_copy.sjb_scv_add3;
                            _jobHdr.sjb_scv_add4 = job_hdr_copy.sjb_scv_add4;
                            _jobHdr.SJB_SEQ_NO = job_hdr_copy.SJB_SEQ_NO;
                            _jobHdr.SJB_SESSION_ID = job_hdr_copy.SJB_SESSION_ID;
                            _jobHdr.SJB_ST_DT = job_hdr_copy.SJB_ST_DT;
                            _jobHdr.SJB_STAGE_DES = job_hdr_copy.SJB_STAGE_DES;
                            _jobHdr.SJB_STUS = job_hdr_copy.SJB_STUS;
                            _jobHdr.SJB_SUBSTAGE = job_hdr_copy.SJB_SUBSTAGE;
                            _jobHdr.SJB_TECH_RMK = job_hdr_copy.SJB_TECH_RMK;
                            _jobHdr.SJB_TOWN = job_hdr_copy.SJB_TOWN;
                            _jobHdr.SJB_LOC = job_hdr_copy.SJB_LOC;

                            #endregion

                            int _returnStatus = 0;
                            string _returnMsg = string.Empty;

                            List<Service_Req_Det> _reqDet = new List<Service_Req_Det>();
                            Service_Req_Hdr _reqHdr = new Service_Req_Hdr();

                            // _reqHdr = new Service_Req_Hdr();

                            string _ser = null;
                            string _warr = null;
                            string _regno = null;
                            string _invcno = null;
                            string _err = null;
                            string _jobcom = null;
                            string _jobloc = null;
                            int _jbline = 1;
                            foreach (Service_Req_Det _requestDet in _ReqDet)
                            {
                                Service_job_Det _jobDt = new Service_job_Det();
                                _jobDt.Jbd_seq_no = 0;
                                _jobDt.Jbd_jobno = "";
                                _jobDt.Jbd_jobline = _jbline;
                                _jobDt.Jbd_sjobno = "";

                                //_jobDt.Jbd_loc = BaseCls.GlbUserDefLoca;
                                //_jobDt.Jbd_pc = BaseCls.GlbUserDefProf;

                                _jobDt.Jbd_loc = _requestDet.Jrd_loc;
                                _jobDt.Jbd_pc = _requestDet.Jrd_pc;
                                _jobDt.Jbd_itm_cd = _requestDet.Jrd_itm_cd;
                                MasterItem _item = _inventoryDAL.GetItem("", _jobDt.Jbd_itm_cd);
                                _jobDt.Jbd_itm_stus = "SER";
                                _jobDt.Jbd_itm_desc = _item.Mi_shortdesc;
                                _jobDt.Jbd_brand = _item.Mi_brand;
                                _jobDt.Jbd_model = _item.Mi_model;
                                _jobDt.Jbd_itm_cost = 0;
                                _jobDt.Jbd_ser1 = _requestDet.Jrd_ser1;
                                _jobDt.Jbd_ser2 = _requestDet.Jrd_ser2;
                                _jobDt.Jbd_warr = _requestDet.Jrd_warr;
                                _jobDt.Jbd_regno = "N/A";
                                _jobDt.Jbd_milage = 0;
                                _jobDt.Jbd_warr_stus = _requestDet.Jrd_warr_stus;
                                _jobDt.Jbd_onloan = 0;
                                _jobDt.Jbd_availabilty = 1;
                                _jobDt.Jbd_msnno = "";
                                _jobDt.Jbd_itmtp = _item.Mi_itm_tp;
                                _jobDt.Jbd_cate1 = _item.Mi_cate_1;
                                _jobDt.Jbd_custnotes = "";
                                _jobDt.Jbd_isstockupdate = 0;
                                _jobDt.Jbd_isgatepass = 0;
                                _jobDt.Jbd_iswrn = 0;
                                _jobDt.Jbd_warrstartdt = _requestDet.Jrd_warrstartdt;
                                _jobDt.Jbd_warrperiod = _requestDet.Jrd_warrperiod;
                                _jobDt.Jbd_warrrmk = _requestDet.Jrd_warrrmk;
                                _jobDt.Jbd_supp_cd = _requestDet.Jrd_supp_cd;
                                _jobDt.Jbd_warrreplace = 0;
                                _jobDt.Jbd_date_pur = _requestDet.Jrd_date_pur;
                                _jobDt.Jbd_invc_no = _requestDet.Jrd_invc_no;
                                _jobDt.Jbd_invc_showroom = _requestDet.Jrd_invc_showroom;
                                _jobDt.Jbd_isexternalitm = 0;
                                _jobDt.Jbd_conf_desc = "";
                                _jobDt.Jbd_isagreement = "0";
                                _jobDt.Jbd_stage = Convert.ToDecimal(1.1);
                                _jobDt.Jbd_com = _requestDet.Jrd_com;
                                _jobDt.Jbd_ser_id = _requestDet.Jrd_ser_id;
                                _jobDt.Jbd_supp_cd = _requestDet.Jrd_supp_cd;
                                _jobDt.Jbd_act = 1;
                                _jobDt.Jbd_reqline = 1;
                                _jobDt.Jbd_reqno = _RccNo;
                                Service_Job_Defects _jobDef = new Service_Job_Defects();
                                _jobDef.SRD_DEF_LINE = 1;
                                _jobDef.SRD_DEF_TP = "DEF000015";
                                _jobDef.SRD_DEF_RMK = "AC INSTALLATION SERVICE";
                                _jobDef.SRD_JOB_LINE = _jbline;
                                _jobDef.jbd_itm_cd = _requestDet.Jrd_itm_cd;
                                _jobDef.jbd_ser1 = _requestDet.Jrd_ser1;
                                _jobDef.SDT_DESC = _item.Mi_shortdesc;
                                _jobDef.jbd_req_no = _RccNo;

                                _jobDefListFiletr.Add(_jobDef);


                                _jobItemsfilter.Add(_jobDt);
                                _jbline = _jobDt.Jbd_jobline + 1;
                            }


                            _brand = _jobItemsfilter.First().Jbd_brand;




                            MasterAutoNumber _jobAutonew = new MasterAutoNumber();
                            if (_ReqDet.First().Jrd_loc == "RIT1B")
                                _jobAutonew.Aut_cate_cd = _ReqDet.First().Jrd_pc;
                            else
                                _jobAutonew.Aut_cate_cd = _ReqDet.First().Jrd_loc;




                            _jobAutonew.Aut_cate_tp = "LOC";
                            _jobAutonew.Aut_moduleid = "SVJOB";
                            _jobAutonew.Aut_direction = 0;
                            _jobAutonew.Aut_year = _ReqHdr.First().Srb_dt.Year;




                            MasterLocationNew _mstLocNew = _generalDAL.GetMasterLocations(new MasterLocationNew() { Ml_loc_cd = _ReqDet.First().Jrd_loc, Ml_com_cd = _ReqDet.First().Jrd_com }).FirstOrDefault();
                            MasterLocationPriorityHierarchy _locHir = _generalDAL.GET_MST_LOC_INFO_DATA(_ReqDet.First().Jrd_loc, "SCHNL");
                            string _chnl = "";
                            if (_mstLocNew != null)
                            {
                                _chnl = _mstLocNew.Ml_cate_1;
                            }
                            if (_locHir != null)
                            {
                                _chnl = _locHir.Mli_val;
                            }


                            MasterLocation _locs = null;
                            _locs = _generalDAL.GetLocationByLocCode(_jobHdrlist.First().SJB_COM, _jobHdrlist.First().SJB_LOC);
                            if (_locs.Ml_loc_cd != null)
                            {
                                if (_locs.Ml_auto_job_create == 1)
                                {
                                    List<ImageUploadDTO> ImageUploadDTOlist = new List<ImageUploadDTO>();
                                    Int32 eff = _custServiceBLL.Save_Job_common(_jobHdr, _jobItemsfilter, _jobDefListFiletr, _jobEmpList, null, null, null, ImageUploadDTOlist, null, _chnl, _ReqDet.First().Jrd_itmtp, _brand, _warStusnew, _jobAutonew, out  _errcopy, out  job_no, out  _receiptNocopy, null, 1, null,
                                        _custServiceDAL, _generalDAL, _inventoryDAL, _inventoryRepDAL, _salesDAL, true);

                                }

                            }


                        }

                        #endregion
                    }
                }
                _jobno = job_no;
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                effect = 1;
            }
            catch (Exception err)
            {
                _jobno = _errcopy;
                effect = -1;
                _RccNo = "ERROR : " + err.Message.ToString();
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            return effect;


        }

        //kapila
        public Int32 CheckValidServiceAgent(string _item, string _com, string _loc)
        {
            Int32 _eff = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _eff = _inventoryDAL.CheckValidServiceAgent(_item, _com, _loc);
            _inventoryDAL.ConnectionClose();
            return _eff;
        } 
        //kapila
        public List<InventorySerialN> GetIntSerList_new(string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetIntSerList_new(_docNo);
        }
        //kapila
        public DataTable GetBatchwiseExpDates(string _com, string _loc, string _item, string _stus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBatchwiseExpDates(_com, _loc, _item, _stus);
        }
        public Int16 DeleteTempPickObjs(Int32 _seq)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.DeleteTempPickObjs(_seq);
            _inventoryRepDAL.ConnectionClose();
            return 1;
        }
        //kapila 19/8/2015
        #region confirm temp GRN
        public Int16 ConfirmTempGRN(List<InventoryHeader> _listInvH, out string _docNo)
        {
            Int16 effect = 0;
            List<ReptPickSerials> _reptPickSerials = new List<ReptPickSerials>();
            List<ReptPickSerialsSub> _reptPickSerialsSub = new List<ReptPickSerialsSub>();

            try
            {
                #region


                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (InventoryHeader Hdr in _listInvH)
                {

                    _reptPickSerials = _inventoryDAL.Get_Int_Ser(Hdr.Ith_doc_no);

                    List<PurchaseOrderDelivery> _purchaseOrderDeliveryList = new List<PurchaseOrderDelivery>();
                    _purchaseOrderDeliveryList = _inventoryDAL.GetConsignmentItemDetails(Hdr.Ith_com, Hdr.Ith_oth_docno, Hdr.Ith_loc);

                    if (_reptPickSerials != null)
                    {
                        var _scanItems = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_line }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                        foreach (var itm in _scanItems)
                        {
                            foreach (PurchaseOrderDelivery _invItem in _purchaseOrderDeliveryList)
                                if (itm.Peo.Tus_itm_cd == _invItem.MasterItem.Mi_cd && itm.Peo.Tus_itm_line == _invItem.Podi_line_no)
                                {
                                    _invItem.Actual_qty = itm.theCount; // Current scan qty
                                }
                        }
                    }

                    foreach (ReptPickSerials ser in _reptPickSerials)
                    {
                        ser.Tus_orig_grncom = Hdr.Ith_com;
                        ser.Tus_orig_grndt = Hdr.Ith_doc_date;
                        ser.Tus_orig_grnno = Hdr.Ith_seq_no.ToString();
                        ser.Tus_orig_supp = Hdr.Ith_bus_entity;

                        ser.Tus_exist_grncom = Hdr.Ith_com;
                        ser.Tus_exist_grndt = Hdr.Ith_doc_date;
                        ser.Tus_exist_grnno = Hdr.Ith_seq_no.ToString();
                        ser.Tus_exist_supp = Hdr.Ith_bus_entity;

                        ser.Tus_base_doc_no = ser.Tus_doc_no;
                        ser.Tus_base_itm_line = ser.Tus_itm_line;
                    }

                    //Update the balance quentites in pur_det & pur_del tables for each item.
                    if (_purchaseOrderDeliveryList != null)
                    {
                        foreach (PurchaseOrderDelivery item in _purchaseOrderDeliveryList)
                        {
                            _inventoryDAL.UpdateConsignReceiptBalanceQty(item.Podi_seq_no, item.Podi_line_no, item.Podi_del_line_no, Hdr.Ith_loc, item.MasterItem.Mi_cd, item.Actual_qty);
                        }
                    }
                    effect = SaveInwardScanSerial_TempSavedGRN(Hdr, _reptPickSerials, _reptPickSerialsSub);

                    ////   effect = UpdateInventoryAutoNumber(Hdr, _masterAutoNumber, "+", out _docNo);
                    //kapila 20/7/2015 - update batch no by GRH no
                    ////     _inventoryDAL.UpdateMovementDocNo_Batch(_inventoryMovementHeader.Ith_seq_no, _docNo);
                    //Add PO Status Part by Chamal 15-11-2012
                    ////              _inventoryDAL.UpdatePOStatus(_inventoryMovementHeader.Ith_oth_docno, _inventoryMovementHeader.Ith_cre_by);


                }
                _docNo = "";
                //_inventoryRepDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _salesDAL.TransactionCommit();

                // _tr.Complete();
                //}
                #endregion Consignment Receipt Note *** Chamal 12-05-2012 ***
            }
            catch (Exception err)
            {
                _docNo = "ERROR : " + err.Message.ToString();
                effect = -1;
                //_inventoryRepDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                // return -1;
            }

            return effect;
        }
        #endregion

        #region Inventory Common Functions - Include -Item Master,Invnetory InWard/OutWard and Scan Serial

        public DataTable GetPendingTemSavedGRN(string _com, string _loc, string _pono)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPendingTemSavedGRN(_com, _loc, _pono);
        }
        public DataTable getItemByType(string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemByType(_type);
        }

        public DataTable GetPendingRCC(string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPendingRCC(_com);
        }

        public Boolean IsAgentParaExist(string _com, string _code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsAgentParaExist(_com, _code);
        }

        //kapila
        public DataTable GetSuplierByItem(string _com, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSuplierByItem(_com, _item);
        }

        //kapila
        public int Process_Return_StandBy(List<Service_TempIssue> oMainList, InventoryHeader _invOutHeader, InventoryHeader _invINHeader, List<ReptPickSerials> _reptPickOutSerials, List<ReptPickSerials> _reptPickINSerials, List<ReptPickSerialsSub> _reptPickOutSerialsSub, List<ReptPickSerialsSub> _reptPickINSerialsSub, MasterAutoNumber _inventoryAuto, MasterAutoNumber _inventoryAutoIN, MasterAutoNumber _ReqInsAuto, Int32 _seq, Int32 _seqLine, out string _err)
        {
            int effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                _custServiceDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();

                Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                _invOutHeader.Ith_seq_no = UserSeqNo;
                _invOutHeader.Ith_doc_no = Convert.ToString(UserSeqNo);

                //AOD OUT
                effect = SaveOutwardScanSerial(_invOutHeader, _reptPickOutSerials, _reptPickOutSerialsSub, null, false);
                string documentNo = "";
                effect = UpdateInventoryAutoNumber(_invOutHeader, _inventoryAuto, "-", out documentNo);

                //update temp issue
                int SeqNum = _custServiceDAL.GetTempIssueSeq();

                string DocNum = string.Empty;
                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);
                DocNum = _invINHeader.Ith_loc + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_ReqInsAuto);

                if (_invOutHeader.Ith_manual_ref == "Transfer Job")
                {
                    //AOD IN
                    //effect = SaveInwardScanSerial(_invINHeader, _reptPickINSerials, _reptPickINSerialsSub);
                    string _otherloc = _invOutHeader.Ith_loc;
                    _invINHeader.Ith_loc = _invOutHeader.Ith_oth_loc;
                    _invINHeader.Ith_oth_loc = _otherloc;
                    _invINHeader.Ith_oth_docno = documentNo;
                    _invINHeader.Ith_direct = true;
                    string _defbin = _inventoryDAL.GetDefaultBinCode(_invOutHeader.Ith_com, _invINHeader.Ith_loc);

                    MasterAutoNumber _aodinAuto = new MasterAutoNumber();
                    _aodinAuto.Aut_cate_cd = _invINHeader.Ith_loc;
                    _aodinAuto.Aut_cate_tp = "LOC";
                    _aodinAuto.Aut_direction = 1;
                    _aodinAuto.Aut_modify_dt = null;
                    _aodinAuto.Aut_year = _invINHeader.Ith_doc_date.Date.Year;
                    _aodinAuto.Aut_moduleid = "AOD";
                    _aodinAuto.Aut_start_char = "AOD";
                    List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_reptPickOutSerials, _invINHeader, _defbin);
                    _invINHeader.Ith_seq_no = 0;

                    SaveInwardScanSerial(_invINHeader, _aodinserial, _reptPickINSerialsSub);
                    string _aodInNo = string.Empty;
                    effect = UpdateInventoryAutoNumber(_invINHeader, _aodinAuto, "+", out _aodInNo);

                    foreach (Service_TempIssue item in oMainList)
                    {
                        //List<Service_TempIssue> Saveditem = _custServiceDAL.Get_ServiceWIP_TempIssued_Items_BY_SEQ(_IssueItemList[oMainList.IndexOf(item)].Item1);

                        ////Service_TempIssue selectedItem = Saveditem.Find(x => x.STI_ISSUEITMCD == item.STI_ISSUEITMCD && x.STI_ISSUEITMSTUS == item.STI_ISSUEITMSTUS);
                        //Service_TempIssue selectedItem = Saveditem.Find(x => x.STI_LINE == _IssueItemList[oMainList.IndexOf(item)].Item2);

                        item.STI_SEQNO = SeqNum;
                        item.STI_DOC = DocNum;
                        effect = _custServiceDAL.Save_scv_tempIssue(item);

                        //selectedItem.STI_REFDOCNO = DocNum;
                        //selectedItem.STI_REFDOCLINE = item.STI_LINE;
                        //selectedItem.STI_ISSUEITMQTY = selectedItem.STI_ISSUEITMQTY - item.STI_ISSUEITMQTY;

                        //selectedItem.STI_CROSS_SEQNO = item.STI_SEQNO;
                        //selectedItem.STI_CROSS_LINE = item.STI_LINE;
                        effect = _custServiceDAL.sp_upd_tmp_isu_return(_seq, _seqLine);
                    }
                }
                else
                {
                    effect = _custServiceDAL.UPDATE_TMP_ISSUE_RETURN(1, documentNo, 1, _seq, _seqLine, 0, 0, 1);
                }
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();
                effect = 1;
                _err = documentNo;
                return effect;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                return -1;
            }
        }

        //kapila
        public Int16 Process_Canibalize(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            Int16 effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();


                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        //kapila
        public Int32 UpdateTempWaraCust(string _customercode, string _customername, string _customeraddressinvoce, string _customerphoneno, string _warrantyno)
        {
            Int32 _eff = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _eff = _inventoryDAL.UpdateTempWaraCust(_customercode, _customername, _customeraddressinvoce, _customerphoneno, _warrantyno);
            _inventoryDAL.ConnectionClose();
            return _eff;
        }

        //kapila 
        public Boolean checkDealerInvoice(string _inv)
        {
            Boolean _isDealer = true;
            _inventoryDAL = new InventoryDAL();
            _isDealer = _inventoryDAL.checkDealerInvoice(_inv, 1);
            if (_isDealer == false)
                _isDealer = _inventoryDAL.checkDealerInvoice(_inv, 0);

            return _isDealer;

        }

        //Written by chamal de silva on 23/08/2012
        public Boolean CheckUserPermission(string _user, string _company, string _party, string _permissionCode)
        {
            bool _val = false;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _val = _inventoryDAL.CheckUserPermission(_user, _company, _party, _permissionCode);
            _inventoryDAL.ConnectionClose();
            return _val;
        }

        //Code By - Prabhath on 19/03/2012
        public MasterItem GetItem(string _company, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItem(_company, _item);
        }

        //Code By - Miginda on 26/04/2012
        public List<MasterItemComponent> GetItemComponents(string _mainItemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemComponents(_mainItemCode);
        }

        //Serial Scan Common Control - Code By - Prabhath on 12/03/2012
        #region Serial Scan

        /// <summary>
        /// Return company item status
        /// </summary>
        /// <param name="_company">Company code</param>
        /// <returns> Status/Description </returns>
        public DataTable GetAllCompanyStatus(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllCompanyStatus(_company);
        }

        /// <summary>
        /// Return location bin
        /// </summary>
        /// <param name="_company">Company Code</param>
        /// <param name="_location">Location Code</param>
        /// <returns>Bin code/Description</returns>
        public DataTable GetAllLocationBin(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllLocationBin(_company, _location);
        }

        //Code By - Prabhath on 26/03/2012
        public bool IsItemSerialized_1(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsItemSerialized_1(_item);
        }

        //Code By - Prabhath on 26/03/2012
        public bool IsItemSerialized_2(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsItemSerialized_2(_item);
        }

        //Code By - Prabhath on 26/03/2012
        public bool IsItemSerialized_3(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsItemSerialized_3(_item);
        }

        //Code By - Prabhath on 26/03/2012
        public bool IsItemHaveSubItem(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsItemHaveSubItem(_item);
        }

        //Code By - Prabhath on 27/03/2012
        public bool IsUOMDecimalAllow(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsUOMDecimalAllow(_item);
        }

        //Code By - Prabhath on 27/03/2012
        public List<InventorySerialRefN> GetItemDetailBySerial(string _company, string _location, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemDetailBySerial(_company, _location, _serial);
        }

        public DataTable GetAllScanSerials(string _company, string _location, string _user, Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSerials(_company, _location, _user, _userseqno, _doctype);
        }

        public List<ReptPickSerials> GetAllScanSerialsList(string _company, string _location, string _user, Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSerialsList(_company, _location, _user, _userseqno, _doctype);
        }
        public List<ReptPickSerials> GetAllScanSerialsListNew(string _company, string _location, string _user, Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSerialsListNew(_company, _location, _user, _userseqno, _doctype);
        }

        public List<InventorySubSerialMaster> GetAvailablesubSerils(Int32 _serialid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailablesubSerils(_serialid);
        }
        public List<InventorySubSerialMaster> GetAvailablesubSerilsMain(Int32 _serialid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailablesubSerilsMain(_serialid);
        }

        public DataTable GetAllScanSubSerials(Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSubSerials(_userseqno, _doctype);
        }

        public List<ReptPickSerialsSub> GetAllScanSubSerialsList(Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSubSerialsList(_userseqno, _doctype);
        }

        //TODO: HW
        public DataTable GetAllScanRequestItems(Int32 _userSeqNo)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanRequestItems(_userSeqNo);
        }

        //TODO: HW
        public List<ReptPickItems> GetAllScanRequestItemsList(Int32 _userSeqNo)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanRequestItemsList(_userSeqNo);
        }

        public ReptPickHeader GetAllScanSerialParameters(string _company, string _user, Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSerialParameters(_company, _user, _userseqno, _doctype);
        }

        public DataTable getTempPOItems(string _com, string _PO)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.getTempPOItems(_com, _PO);
        }
        public Int16 SaveAllScanSerials(ReptPickSerials _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerials != null)
            {
                if (string.IsNullOrEmpty(_reptPickSerials.Tus_pkg_uom_tp))
                {
                    effect = _inventoryRepDAL.SavePickedItemSerials(_reptPickSerials);
                }
                else
                {
                    effect = _inventoryRepDAL.SavePickedItemSerialsMac(_reptPickSerials);
                }
            }
            if (_reptPickSerialsSub != null)
            {
                _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            }
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            return effect;
        }

        public ReptPickSerials GetAvailableSerIDInformation(string _com, string _loc, string _itemCode, string _serial1, string _serial2, string _serialid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailableSerIDInformation(_com, _loc, _itemCode, _serial1, _serial2, _serialid);
        }

        #endregion Serial Scan

        #region save temp GRN
        public Int16 SaveTempGRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, List<PurchaseOrderDelivery> _purchaseOrderDeliveryList, out string _docNo)
        {
            Int16 effect = 0;
            try
            {
                #region

                //using (TransactionScope _tr = new TransactionScope())
                // {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (ReptPickSerials ser in _reptPickSerials)
                {
                    ser.Tus_orig_grncom = _inventoryMovementHeader.Ith_com;
                    ser.Tus_orig_grndt = _inventoryMovementHeader.Ith_doc_date;
                    ser.Tus_orig_grnno = _inventoryMovementHeader.Ith_seq_no.ToString();
                    ser.Tus_orig_supp = _inventoryMovementHeader.Ith_bus_entity;

                    ser.Tus_exist_grncom = _inventoryMovementHeader.Ith_com;
                    ser.Tus_exist_grndt = _inventoryMovementHeader.Ith_doc_date;
                    ser.Tus_exist_grnno = _inventoryMovementHeader.Ith_seq_no.ToString();
                    ser.Tus_exist_supp = _inventoryMovementHeader.Ith_bus_entity;

                    ser.Tus_base_doc_no = ser.Tus_doc_no;
                    ser.Tus_base_itm_line = ser.Tus_itm_line;
                }

                //Update the balance quentites in pur_det & pur_del tables for each item.
                if (_purchaseOrderDeliveryList != null)
                {
                    foreach (PurchaseOrderDelivery item in _purchaseOrderDeliveryList)
                    {
                        _inventoryDAL.UpdateConsignReceiptBalanceQty(item.Podi_seq_no, item.Podi_line_no, item.Podi_del_line_no, _inventoryMovementHeader.Ith_loc, item.MasterItem.Mi_cd, item.Actual_qty);
                    }
                }
                effect = SaveInwardScanSerial_Temp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                //kapila 20/7/2015 - update batch no by GRH no
                _inventoryDAL.UpdateMovementDocNo_Batch(_inventoryMovementHeader.Ith_seq_no, _docNo);
                //Add PO Status Part by Chamal 15-11-2012
                ////              _inventoryDAL.UpdatePOStatus(_inventoryMovementHeader.Ith_oth_docno, _inventoryMovementHeader.Ith_cre_by);



                //_inventoryRepDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _salesDAL.TransactionCommit();

                // _tr.Complete();
                //}
                #endregion Consignment Receipt Note *** Chamal 12-05-2012 ***
            }
            catch (Exception err)
            {
                _docNo = "ERROR : " + err.Message.ToString();
                effect = -1;
                //_inventoryRepDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                // return -1;
            }

            return effect;
        }
        #endregion

        #region Consignment Receipt Note *** Chamal 12-05-2012 ***

        //Modify by rukshan 30/sep/2015
        public Int16 ConsignmentReceipt(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, List<PurchaseOrderDelivery> _purchaseOrderDeliveryList, out string _docNo, bool _ISTEMP = false)
        {
            Int16 effect = 0;
            try
            {
                Int32 _usrSeq = 0;
                List<ReptPickSerials> _tmpValSerList = new List<ReptPickSerials>();
                #region

                //using (TransactionScope _tr = new TransactionScope())
                // {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _financialDAL = new FinancialDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                if (_ISTEMP == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _inventoryDAL.TransactionCommit();

                    effect = 1;
                }

                else
                {

                    foreach (ReptPickSerials ser in _reptPickSerials)
                    {
                        ser.Tus_orig_grncom = _inventoryMovementHeader.Ith_com;
                        ser.Tus_orig_grndt = _inventoryMovementHeader.Ith_doc_date;
                        ser.Tus_orig_grnno = _inventoryMovementHeader.Ith_seq_no.ToString();
                        ser.Tus_orig_supp = _inventoryMovementHeader.Ith_bus_entity;

                        ser.Tus_exist_grncom = _inventoryMovementHeader.Ith_com;
                        ser.Tus_exist_grndt = _inventoryMovementHeader.Ith_doc_date;
                        ser.Tus_exist_grnno = _inventoryMovementHeader.Ith_seq_no.ToString();
                        ser.Tus_exist_supp = _inventoryMovementHeader.Ith_bus_entity;

                        if (_inventoryMovementHeader.Ith_anal_10 == false)
                        {
                            ser.Tus_base_doc_no = ser.Tus_doc_no;
                            ser.Tus_base_itm_line = ser.Tus_itm_line;
                        }
                        else
                        {
                            ser.Tus_base_doc_no = ser.Tus_doc_no;
                            ser.Tus_base_itm_line = ser.Tus_itm_line;
                        }

                        //Rukshan by on 10/Aug/2016
                        string _warrantyno = string.Empty;
                        if (string.IsNullOrEmpty(ser.Tus_warr_no))
                        {
                            _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + ser.Tus_ser_id.ToString();
                            ser.Tus_warr_no = _warrantyno;
                        }


                    }

                    //foreach (ReptPickSerials ser1 in _reptPickSerials)
                    //{
                    //    Console.Write(ser1.Tus_orig_grncom);
                    //    Console.Write(ser1.Tus_base_doc_no);
                    //}

                    //Update the balance quentites in pur_det & pur_del tables for each item.
                    if (_purchaseOrderDeliveryList != null)
                    {
                        List<PurchaseOrderDelivery> PODeliveryList = new List<PurchaseOrderDelivery>();
                        bool _invalidLoc = false;
                        PODeliveryList = _inventoryDAL.GetConsignmentItemDetails(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_docno, null);
                        if (PODeliveryList != null)
                        {
                            if (PODeliveryList.Count > 0)
                            {
                                var _po = PODeliveryList.Where(c => c.Podi_loca != _inventoryMovementHeader.Ith_loc).ToList();
                                if (_po != null)
                                {
                                    if (_po.Count > 0)
                                    {
                                        if (_inventoryMovementHeader.Ith_gen_frm == "SCMWEB")
                                        {
                                            _invalidLoc = true;
                                        }
                                        else _invalidLoc = false;
                                    }
                                }
                            }
                        }
                        foreach (PurchaseOrderDelivery item in _purchaseOrderDeliveryList)
                        {
                            decimal _udtQty = 0;
                            if (_invalidLoc)
                            {
                                _udtQty = item.Actual_qty;
                                List<PurchaseOrderDelivery> delTbl = _inventoryDAL.Collect_PODetails(item.Podi_seq_no, item.Podi_line_no);
                                foreach (PurchaseOrderDelivery _item in delTbl)
                                {
                                    while (_udtQty > 0)
                                    {
                                        if (_udtQty >= _item.Podi_bal_qty)
                                        {
                                            _inventoryDAL.Update_GRN_BalQty_WithNonLocations(item.Podi_seq_no, item.Podi_line_no, _item.Podi_del_line_no, item.MasterItem.Mi_cd, _udtQty);
                                            _udtQty = _udtQty - _item.Podi_bal_qty;
                                        }
                                        else
                                        {
                                            _inventoryDAL.Update_GRN_BalQty_WithNonLocations(item.Podi_seq_no, item.Podi_line_no, _item.Podi_del_line_no, item.MasterItem.Mi_cd, _udtQty);
                                            _udtQty = 0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                _inventoryDAL.UpdateConsignReceiptBalanceQty(item.Podi_seq_no, item.Podi_line_no, item.Podi_del_line_no, _inventoryMovementHeader.Ith_loc, item.MasterItem.Mi_cd, item.Actual_qty);
                            }
                        }
                    }
                    #region add by lakshan 10Nov2017
                    _usrSeq = _reptPickSerials[0].Tus_usrseq_no;
                    _tmpValSerList = _inventoryRepDAL.GET_TEMP_PICK_SER_DATA(new ReptPickSerials() { Tus_usrseq_no = _usrSeq });
                    #endregion
                    effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    //kapila 20/7/2015 - update batch no by GRH no
                    string _batchNo = "";
                    //if (_inventoryMovementHeader.Ith_com == "AST")    //kapila 13/11/2015
                    MasterProfitCenter _PC = new MasterProfitCenter();
                    _PC = _inventoryDAL.GetProfitCenter(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_pc);

                    if (_inventoryMovementHeader.Ith_com == "ABL" && _PC.Mpc_chnl == "ABT")    //kapila 2/2/2017
                    {
                        MasterAutoNumber _masterAutoBatch = new MasterAutoNumber();
                        _masterAutoBatch.Aut_cate_cd = _inventoryMovementHeader.Ith_com; ;
                        _masterAutoBatch.Aut_cate_tp = "COM";
                        _masterAutoBatch.Aut_direction = 1;
                        _masterAutoBatch.Aut_modify_dt = null;
                        _masterAutoBatch.Aut_moduleid = "BATCH";
                        _masterAutoBatch.Aut_number = 0;
                        _masterAutoBatch.Aut_start_char = "BATCH";
                        _masterAutoBatch.Aut_year = _inventoryMovementHeader.Ith_doc_date.Date.Year;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoBatch.Aut_moduleid, _masterAutoBatch.Aut_direction, _masterAutoBatch.Aut_start_char, _masterAutoBatch.Aut_cate_tp, _masterAutoBatch.Aut_cate_cd, _masterAutoBatch.Aut_modify_dt, _masterAutoBatch.Aut_year).Aut_number;
                        _batchNo = Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + _inventoryMovementHeader.Ith_doc_date.Month.ToString("00", CultureInfo.InvariantCulture) + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                        //  _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        int _e = _inventoryDAL.UpdateAutoNumber(_masterAutoBatch);

                    }
                    else
                    {
                        _batchNo = _docNo;
                    }
                    if (!_inventoryMovementHeader.TMP_IS_BATCH_NO_NOT_UPDATE)
                    {
                        _inventoryDAL.UpdateMovementDocNo_Batch(_inventoryMovementHeader.Ith_seq_no, _batchNo);
                    }
                    //Add PO Status Part by Chamal 15-11-2012     
                    _inventoryDAL.UpdatePOStatus(_inventoryMovementHeader.Ith_oth_docno, _inventoryMovementHeader.Ith_cre_by);

                    //ADDED BY SACHITH
                    //2014/01/13
                    #region sachith
                    foreach (ReptPickSerials ser in _reptPickSerials)
                    {
                        //try
                        //{
                        //get item
                        if (!string.IsNullOrEmpty(ser.Tus_itm_cd))
                        {
                            MasterItem _mstItm = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, ser.Tus_itm_cd);
                            //fac process
                            if (_mstItm.Mi_fac_base)
                            {
                                DataTable _dt = _inventoryDAL.GetMasterFactor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_doc_date);
                                //process only if factor table has records
                                if (_dt != null && _dt.Rows.Count > 0)
                                {
                                    decimal _value1 = Convert.ToDecimal(ser.Tus_ser_2);
                                    decimal _value2 = Convert.ToDecimal(ser.Tus_ser_3);
                                    decimal _value3 = Convert.ToDecimal(_dt.Rows[0]["MFR_RT"]);
                                    DateTime _from = Convert.ToDateTime(_dt.Rows[0]["MFR_FROM_DT"]);
                                    DateTime _to = Convert.ToDateTime(_dt.Rows[0]["MFR_TO_DT"]);
                                    decimal _factor = _value1 * _value2 * _value3;

                                    PriceBookLevelRef _defPB = _salesDAL.GetCompanyDefaultPBPlevel(_inventoryMovementHeader.Ith_com);
                                    if (_defPB != null)
                                    {
                                        //fill object
                                        PriceSerialRef _price = new PriceSerialRef();
                                        //_price.Mict_tax_rate = 0;
                                        //_price.Mict_taxrate_cd = "";
                                        //_price.Sadd_pc = "";
                                        //_price.Sapd_with_tax = 0;
                                        //_price.Sapl_is_serialized = true;
                                        //_price.Sapl_itm_stuts = ser.Tus_itm_stus;
                                        //_price.Sapl_vat_calc = false;
                                        //_price.Sarpt_cd = "";
                                        //_price.Sarpt_desc = "";
                                        //_price.Sarpt_indi = 0;
                                        //_price.Sarpt_is_com = false;
                                        _price.Sars_circular_no = _docNo;
                                        _price.Sars_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                        _price.Sars_cre_when = _inventoryMovementHeader.Ith_cre_when;
                                        _price.Sars_customer_cd = "";
                                        _price.Sars_day_attempt = 0;
                                        _price.Sars_hp_allowed = 0;
                                        _price.Sars_is_cancel = false;
                                        // _price.Sars_is_fix_qty = 0;
                                        _price.Sars_itm_cd = ser.Tus_itm_cd;
                                        _price.Sars_itm_price = _factor;
                                        _price.Sars_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                        _price.Sars_mod_when = _inventoryMovementHeader.Ith_cre_when;
                                        _price.Sars_pb_seq = _inventoryDAL.GetSerialID();
                                        _price.Sars_pbook = _defPB.Sapl_pb;
                                        _price.Sars_price_lvl = _defPB.Sapl_pb_lvl_cd;
                                        _price.Sars_price_type = 0;
                                        _price.Sars_price_type_desc = "";
                                        _price.Sars_promo_cd = "";
                                        _price.Sars_update_dt = DateTime.Now;
                                        _price.Sars_val_frm = _from;
                                        _price.Sars_val_to = _to;
                                        _price.Sars_warr_remarks = "";
                                        _price.Sars_ser_no = ser.Tus_ser_1;

                                        _salesDAL.Save_Serial_Price(_price);
                                    }
                                }
                            }
                        }

                        //}
                        //catch (Exception) { }
                    }
                    #endregion
                    //END

                    //Rukshan 02/oct/2015
                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }
                    if (_inventoryMovementHeader.Ith_cate_tp == "IMPORTS")
                    {
                        //string _foundserial = CHECKSERILA_COM(_reptPickSerials, _inventoryDAL);
                        //if (!string.IsNullOrEmpty(_foundserial))
                        //{
                        //    _docNo = _foundserial;
                        //    _inventoryRepDAL.TransactionRollback();
                        //    _inventoryDAL.TransactionRollback();
                        //    _ScmCommonDAL.TransactionRollback();
                        //    _salesDAL.TransactionRollback();
                        //    effect = -1;
                        //    return effect;
                        //}
                        _inventoryDAL.Update_Cost_hdr_grn(_inventoryMovementHeader.Ith_oth_docno);
                        _inventoryDAL.Update_req_hdr_grn(_inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_docno, _inventoryMovementHeader.Tobond);
                        // need a solution
                        #region
                        if (_inventoryMovementHeader.UpdateResLog)
                        {
                            ImportsBLHeader _BL = _inventoryDAL.GET_BLHDD_DOC(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_docno);
                            if (_BL != null)
                            {
                                List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                                int res = 0;
                                List<INR_RES_DET> _res = _inventoryDAL.GET_RES_DOC(_inventoryMovementHeader.Ith_com, _BL.Ib_bl_no);
                                if (_res != null)
                                {
                                    if (_res.Count > 0)
                                    {

                                        foreach (INR_RES_DET _item in _res)
                                        {
                                            var serCount = (from c in _reptPickSerials
                                                            where c.Tus_itm_cd == _item.IRD_ITM_CD
                                                            select c.Tus_qty).Sum();

                                            if (serCount > 0)
                                            {
                                                Int32 effect2 = _inventoryDAL.UpdateLocation_Batch_Res(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _item.IRD_ITM_CD, _item.IRD_ITM_STUS, _inventoryMovementHeader.Ith_cre_by, serCount, _BL.Ib_bl_no);
                                                #region

                                                _resLogAvaData = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(
                                                new INR_RES_LOG()
                                                {
                                                    IRL_RES_NO = _item.IRD_RES_NO,
                                                    IRL_ITM_CD = _item.IRD_ITM_CD,
                                                    IRL_ITM_STUS = _item.IRD_ITM_STUS,
                                                });
                                                if (_resLogAvaData.Count > 0)
                                                {

                                                    res = InrResLogDataManage(new INR_RES_LOG()
                                                     {
                                                         IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                                         IRL_CURT_LOC = _resLogAvaData[0].IRL_CURT_LOC,
                                                         IRL_ORIG_DOC_TP = "INV",
                                                         IRL_ORIG_DOC_NO = _item.IRD_RES_NO,
                                                         IRL_ORIG_DOC_DT = DateTime.Now,

                                                         IRL_CURT_DOC_TP = "GRN",
                                                         IRL_CURT_DOC_NO = _inventoryMovementHeader.Ith_doc_no,
                                                         IRL_CURT_DOC_DT = DateTime.Now,
                                                         IRL_RES_NO = _item.IRD_RES_NO,
                                                         IRL_ITM_CD = _item.IRD_ITM_CD,
                                                         IRL_ITM_STUS = _item.IRD_ITM_STUS,
                                                         IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_cre_by,
                                                         IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                         IRL_MOD_DT = DateTime.Now,
                                                         IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                         IRL_CRE_DT = DateTime.Now,
                                                         IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                         IRL_RES_QTY = serCount,
                                                         IRL_RES_WP = 1
                                                     }, 0, _inventoryDAL, out _docNo);
                                                }
                                                if (res < 1)
                                                {
                                                    effect = -1;
                                                    _docNo = "Precess Terminated ! Rservation update fail";
                                                    //_inventoryDAL.TransactionRollback();
                                                    _inventoryRepDAL.TransactionRollback();
                                                    _inventoryDAL.TransactionRollback();
                                                    _ScmCommonDAL.TransactionRollback();
                                                    _salesDAL.TransactionRollback();
                                                    effect = -1;
                                                    return effect;


                                                }

                                                #endregion

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }

                    #region update item allocation data 10 Jan 2017
                    if (_inventoryMovementHeader.TMP_IS_ALLOCATION)
                    {
                        if (_purchaseOrderDeliveryList != null)
                        {
                            foreach (PurchaseOrderDelivery item in _purchaseOrderDeliveryList)
                            {

                                _generalDAL = new GeneralDAL();
                                MasterLocationNew _mstLocNew = _generalDAL.GetMasterLocations(new MasterLocationNew() { Ml_loc_cd = _inventoryMovementHeader.Ith_loc, Ml_com_cd = _inventoryMovementHeader.Ith_com }).FirstOrDefault();
                                List<InventoryAllocateDetails> _chnlAllocation = new List<InventoryAllocateDetails>();
                                _chnlAllocation = _inventoryDAL.GET_ALLINR_STOCK_ALOC_DATA(new InventoryAllocateDetails
                                {
                                    Isa_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                    Isa_com = _inventoryMovementHeader.Ith_com,
                                    Isa_itm_cd = item.MasterItem.Mi_cd,
                                    Isa_itm_stus = ""
                                });

                                if (_chnlAllocation.Count > 0)
                                {
                                    MasterItemAllocate _list = new MasterItemAllocate();
                                    _list.Isa_act = true;
                                    _list.Isa_aloc_bqty = item.Actual_qty;
                                    _list.Isa_aloc_qty = item.Actual_qty;
                                    _list.Isa_chnl = _chnlAllocation[0].Isa_chnl;
                                    _list.Isa_com = _inventoryMovementHeader.Ith_com;
                                    _list.Isa_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    _list.Isa_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                    _list.Isa_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                                    _list.Isa_doc_no = _docNo;
                                    _list.Isa_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                                    _list.Isa_dt = DateTime.Now;
                                    _list.Isa_itm_cd = item.Podi_itm_cd;
                                    _list.Isa_itm_stus = item.Podi_itm_stus;
                                    var _serListTmp = _reptPickSerials.Where(c => c.Tus_base_doc_no == _inventoryMovementHeader.Ith_oth_docno &&
                                        c.Tus_base_itm_line == item.Podi_line_no).FirstOrDefault();
                                    if (_serListTmp != null)
                                    {
                                        _list.Isa_itm_stus = _serListTmp.Tus_itm_stus;
                                    }
                                    _list.Isa_loc = _inventoryMovementHeader.Ith_loc;
                                    _list.Isa_tp = "I";
                                    _list.Isa_itm_cd = item.MasterItem.Mi_cd;
                                    _list.Isa_session_id = _inventoryMovementHeader.Ith_session_id;
                                    _list.Isa_ref_no = _inventoryMovementHeader.Ith_oth_docno;
                                    int _effect = _inventoryDAL.SaveStockAllocate(_list);
                                    if (_effect > 0)
                                    {
                                        _list.Isa_cnl_by = _inventoryMovementHeader.Ith_cre_by;
                                        _list.Isa_cnl_dt = _inventoryMovementHeader.Ith_cre_when;
                                        _list.Isa_cnl_session_id = _inventoryMovementHeader.Ith_session_id;
                                        _list.Isa_aloc_bqty = item.Actual_qty;
                                        _list.Isa_seq = _chnlAllocation[0].Isa_seq;
                                        //effect = _inventoryDAL.UPDATEALLOCATION_BALANCE_GRN(_list);
                                        #region Add by allocation update 25 jun 2017 by lakshan
                                        InventoryAllocateDetails _tmpBalUpdate = new InventoryAllocateDetails();
                                        _tmpBalUpdate.Isa_seq = _list.Isa_seq;
                                        _tmpBalUpdate.Isa_com = _list.Isa_com;
                                        _tmpBalUpdate.Isa_chnl = _list.Isa_chnl;
                                        _tmpBalUpdate.Isa_itm_cd = _list.Isa_itm_cd;
                                        _tmpBalUpdate.Isa_itm_stus = "";
                                        _tmpBalUpdate.Isa_aloc_bqty = _list.Isa_aloc_bqty;
                                        _tmpBalUpdate.Isa_dt = DateTime.Now;
                                        _inventoryDAL.UpdateItemAllocationData(_tmpBalUpdate);
                                        #endregion
                                    }

                                }
                            }

                        }
                    }

                    #endregion
                    //if (effect == 1)
                    //{
                    //    List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                    //    _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                    //    if (_BATCH.Count == 0)
                    //    {

                    //        _docNo = "Precess Terminated ! Inventory Balance not updated ";
                    //        effect = -1;
                    //        //_inventoryRepDAL.TransactionRollback();
                    //        //_inventoryDAL.TransactionRollback();
                    //        _inventoryRepDAL.TransactionRollback();
                    //        _inventoryDAL.TransactionRollback();
                    //        _ScmCommonDAL.TransactionRollback();
                    //        _salesDAL.TransactionRollback();
                    //       // return;

                    //    }
                    //}

                    //_inventoryRepDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_ScmCommonDAL.ConnectionClose();
                    List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                    _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                    // _inventoryDAL.Get_Int_Ser(documentNo);
                    // bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                    #region 16Feb2018 delete temp_pick_hdr add by lakshan
                    PurchaseOrder _tmpPoHdr = _inventoryDAL.GET_PUR_HDR_DATA(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_docno);
                    if (_tmpPoHdr != null)
                    {
                        if (_tmpPoHdr.Poh_stus == "F")
                        {
                            _inventoryRepDAL.DELETE_TEMP_PICK_HDR_PARTIAL(_inventoryMovementHeader.Ith_oth_docno, _inventoryMovementHeader.Ith_doc_tp);
                        }
                    }
                    #endregion
                    #region validation add by lakshan 10Nov2017
                    if (_inventoryMovementHeader.TmpGrnValidate)
                    {

                        decimal _picQty = _tmpValSerList.Sum(c => c.Tus_qty);
                        decimal _intBatchQty = 0;
                        decimal _intBatchQtyForIntSer = 0;
                        decimal _inrBatchQty = 0;
                        decimal _intSerQty = 0;
                        decimal _inrSerQty = 0;
                        List<InventorySerialN> _intSerSaved = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                        List<InventorySerialN> _inrSerSaved = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                        List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                        List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                        List<InventoryBatchRefN> _inrBatchSaved = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);

                        _intBatchQty = _intBatchSaved.Sum(c => c.Itb_bal_qty1);
                        _intBatchQtyForIntSer = _intBatchSaved.Where(c => c.Tmp_is_serialized != -1).ToList().Sum(c => c.Itb_bal_qty1);
                        _inrBatchQty = _inrBatchSaved.Sum(c => c.Inb_qty);
                        _intSerQty = _intSerSaved.Count;
                        _inrSerQty = _inrSerSaved.Sum(c => c.Ins_available);
                        if (_picQty != _intBatchQty)
                        {
                            _docNo = "Process Terminated ! Pick serial data invalid ! [Pick Qty VS GRN Qty]";
                            effect = -1;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            return effect;
                        }
                        if (_intBatchQty != _inrBatchQty)
                        {
                            _docNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                            effect = -1;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            return effect;
                        }
                        if (_intBatchQtyForIntSer > _intSerQty)
                        {
                            _docNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                            effect = -1;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            return effect;
                        }
                        if (_intBatchQtyForIntSer > _inrSerQty)
                        {
                            _docNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                            effect = -1;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            return effect;
                        }
                    }
                    #endregion
                    if (_BATCH.Count == 0)
                    {
                        effect = -1;
                        _docNo = "Precess Terminated ! Inventory Balance not updated. Please try again in a few seconds.";
                        //_inventoryDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        effect = -1;
                        return effect;
                    }
                    if (_inventoryMovementHeader.Ith_gen_frm == "SCMWEB")
                    {
                        _inventoryDAL.UpdateGrnIsInProgress(_inventoryMovementHeader.Ith_oth_docno, _inventoryMovementHeader.Ith_cre_by, 0);
                    }

                    //Check Correct To Bond Item
                    if (_financialDAL.CheckIsAutoEntry(_inventoryMovementHeader.Ith_com, "GRN") == true && _inventoryMovementHeader.Ith_cate_tp == "IMPORTS")
                    {
                        DataTable _grndt = _inventoryDAL.GetGrnCorrectItemsByDoc(_inventoryMovementHeader.Ith_doc_no, _inventoryMovementHeader.Ith_com);
                        if (_grndt != null && _grndt.Rows.Count>0)
                        {
                            int p = 0;
                            foreach (var _row in _grndt.Rows)
                            {
                                bool iscorrect = _inventoryDAL.IsCorrectGrn(_grndt.Rows[p]["inb_job_no"].ToString(), _grndt.Rows[p]["inb_base_itmcd"].ToString(), Convert.ToInt32(_grndt.Rows[p]["inb_base_refline"].ToString()));
                                if (iscorrect==false)
                                {
                                    effect = -1;
                                    _docNo = "Controller-Incorrect GRN " + _grndt.Rows[p]["inb_job_no"].ToString() + " " + _grndt.Rows[p]["inb_base_itmcd"].ToString() + " " + _grndt.Rows[p]["inb_base_refline"].ToString();
                                    //_inventoryDAL.TransactionRollback();
                                    _inventoryRepDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _ScmCommonDAL.TransactionRollback();
                                    _salesDAL.TransactionRollback();
                                    effect = -1;
                                    return effect;
                                }
                                p++;
                            }
                        }
                    }



                    _inventoryDAL.TransactionCommit();
                    _ScmCommonDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();





                    //kapila 20/7/2015 -send mail if cost is higher than avg cost
                    //send mail
                    #region send mail
                    _inventoryDAL.ConnectionOpen();
                    _generalDAL.ConnectionOpen();


                    MasterCompany _masterComp = null;
                    _masterComp = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com);

                    if (_masterComp.Mc_anal26 != null)
                    {
                        List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, "GRN_COST");
                        if (_mail != null)
                            if (_mail.Count > 0)
                            {
                                string _itmDetails = "";
                                string _tmpItemDet = "";
                                Decimal _per = 0;
                                Boolean _isFound = false;
                                MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);

                                DataTable _dtPO = _generalDAL.getBatchItems(_inventoryMovementHeader.Ith_com, _docNo);
                                foreach (DataRow r in _dtPO.Rows)
                                {
                                    DataTable _dtPrice = _generalDAL.getPOPrice((string)r["itb_base_ref_no"], (Int32)r["itb_base_itmline"]);
                                    if (_dtPrice.Rows.Count > 0)
                                    {
                                        DataTable _dtAvgCost = _generalDAL.getAvgCost(_inventoryMovementHeader.Ith_com, _mstLoc.Ml_cate_1, (string)r["itb_itm_cd"], (string)r["itb_itm_stus"], (DateTime)r["ith_doc_date"]);
                                        if (_dtAvgCost.Rows.Count > 0)
                                        {
                                            if (Convert.ToDecimal(_dtPrice.Rows[0]["pod_act_unit_price"]) > Convert.ToDecimal(_dtAvgCost.Rows[0]["iac_avg_cost"]))
                                            {
                                                if (_masterComp.Mc_anal26 > 0)
                                                {
                                                    _per = (Convert.ToDecimal(_dtPrice.Rows[0]["pod_act_unit_price"]) - Convert.ToDecimal(_dtAvgCost.Rows[0]["iac_avg_cost"])) / Convert.ToDecimal(_dtAvgCost.Rows[0]["iac_avg_cost"]) * 100;
                                                    if (Convert.ToDecimal(_masterComp.Mc_anal26) < _per)
                                                    {
                                                        _isFound = true;
                                                        _tmpItemDet = "";
                                                        _tmpItemDet = "Item Code : " + (string)r["itb_itm_cd"] + " - " + "Average Cost :" + Convert.ToDecimal(_dtAvgCost.Rows[0]["iac_avg_cost"]) + " - " + "GRN Value :" + Convert.ToDecimal(_dtPrice.Rows[0]["pod_act_unit_price"]);
                                                        _itmDetails += "\n " + _tmpItemDet + " \n";
                                                    }
                                                }
                                                else
                                                {
                                                    _isFound = true;
                                                    _tmpItemDet = "";
                                                    _tmpItemDet = "Item Code : " + (string)r["itb_itm_cd"] + " - " + "Average Cost :" + Convert.ToDecimal(_dtAvgCost.Rows[0]["iac_avg_cost"]) + " - " + "GRN Value :" + Convert.ToDecimal(_dtPrice.Rows[0]["pod_act_unit_price"]);
                                                    _itmDetails += "\n " + _tmpItemDet + " \n";
                                                }
                                            }
                                        }
                                    }

                                }



                                //foreach (VehicleInsuarance _insu in _vehIns)
                                //{
                                //    _tmpItemDet = "";
                                //    _tmpItemDet = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis;
                                //    _itmDetails += "\n " + _tmpItemDet + " \n";
                                //}
                                if (_isFound == true)
                                {
                                    foreach (MsgInformation _info in _mail)
                                    {
                                        SmtpClient smtpClient = new SmtpClient();
                                        MailMessage message = new MailMessage();

                                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                        smtpClient.Host = _generalDAL.GetMailHost();
                                        smtpClient.Port = 25;
                                        message.From = fromAddress;

                                        string _email = "";

                                        _email = "Dear Sir/Madam, \n\n" + _email;
                                        _email += "Cost difference for the GRN No :" + _docNo + " \n";
                                        _email = _email + _itmDetails;
                                        _email += _generalDAL.GetMailFooterMsg();

                                        message.To.Add(_info.Mmi_email);
                                        message.Subject = "GRN Cost Difference";
                                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                        //message.Bcc.Add(new MailAddress(""));
                                        message.IsBodyHtml = false;
                                        message.Body = _email;
                                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                        // Send SMTP mail
                                        smtpClient.Send(message);
                                    }
                                }
                            }
                    }

                    #region Wimal @ 13/08/2018 - send GRN notification to Technicial  -
                    List<MsgInformation> _grnmail = _generalDAL.GetMsgInformation(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, "GRN_NOTE");
                    if (_grnmail != null)
                    {
                    if (_grnmail.Count > 0)
                    {
                        int days = _grnmail[0].Mmi_dividesectiondays;
                        //DateTime.Now.Date.Add(days * -1)
                        List<InventoryRequest> oRequestHeaders = _inventoryDAL.GET_REQUEST_FOR_DISPATCHNEW(_inventoryMovementHeader.Ith_com, null, null, null, "MRN", _inventoryMovementHeader.Ith_loc, null, null, DateTime.Now.Date.AddDays(days * -1), Convert.ToDateTime(DateTime.Now), 1);
                        List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                        List<InventoryRequestItem> _invallReqItm = new List<InventoryRequestItem>();
                        string strPndGRNitm = "";
                        foreach (var oRequestHeader in oRequestHeaders)
                        {
                            List<InventoryRequestItem> _invReqItm = _inventoryDAL.GET_INT_REQ_ITM_DATA(new InventoryRequestItem() { Itri_seq_no = oRequestHeader.Itr_seq_no });
                            var lstPndGRNitm = (from req in _invReqItm
                                                join grn in _intBatchSaved
                                                on req.Itri_itm_cd equals grn.Inb_itm_cd
                                                where (req.Itri_bqty > 0)
                                                select new
                                                {
                                                    req.Itri_itm_cd
                                                }).ToList();

                            foreach (var pndGRNitm in lstPndGRNitm)
                            {
                                MasterItem _mIt = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, pndGRNitm.Itri_itm_cd);
                                if (strPndGRNitm != "")
                                {
                                    strPndGRNitm = strPndGRNitm + pndGRNitm.Itri_itm_cd + " - " + _mIt.Mi_shortdesc + " \n";
                                }
                                else
                                {
                                    strPndGRNitm = pndGRNitm.Itri_itm_cd + " - " + _mIt.Mi_shortdesc + " \n";
                                }
                            }
                        }

                        if (strPndGRNitm != "")
                        {
                            foreach (MsgInformation _info in _grnmail)
                            {

                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Following dispatch pending items received from " + _docNo + " \n\n";
                                _email = _email + strPndGRNitm;
                                _email += _generalDAL.GetMailFooterMsg();

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "ITEM GRN FOR PENDING MRN ";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }
                    }
                }
                    #endregion

                    _inventoryDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                    #endregion
                    // _tr.Complete();
                    //}
                }
                #endregion Consignment Receipt Note *** Chamal 12-05-2012 ***

            }
            catch (Exception err)
            {
                _docNo = "ERROR : " + err.Message.ToString();
                effect = -1;
                //_inventoryRepDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                // return -1;
            }

            return effect;
        }

        #endregion Inventory Common Functions - Include -Item Master,Invnetory InWard/OutWard and Scan Serial

        #region Consignment Return Note *** Chamal 12-05-2012 ***

        public Int16 ConsignmentReturn(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, bool _ISTEMP = false)
        {
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                Int16 effect = 0;

                if (_ISTEMP == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out documentNo);
                    _inventoryDAL.TransactionCommit();
                    return 1;
                }
                else
                {
                    effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out documentNo);

                    //Sahan Issue Fix
                    //(22)When recalling a “Temp Save” Document # the system should not allow to save again and again. Each time a new consignment # is gerated for the same adjustment # (Adj # : RAMP-ADJ-TEMP-15-00020 ) 

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }

                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    return effect;
                }
            }
            catch (Exception err)
            {
                documentNo = "ERROR : " + err.Message.ToString();

                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

                return -1;
            }
        }

        #endregion Consignment Return Note *** Chamal 12-05-2012 ***

        #region GRN *** Chamal 11-05-2012 ***

        public Int16 GRNEntry(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            Int16 effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _ScmCommonDAL.ConnectionOpen();
                string _docNos = string.Empty;

                //Added by Prabhath on 5/9/2013
                //Purpose : Checking for available duplicates

                #region Checking for the serial/serial id duplicate

                string _company = _inventoryMovementHeader.Ith_com;
                string _location = _inventoryMovementHeader.Ith_loc;
                string _item = string.Empty;
                string _serial = string.Empty;
                Int64 _id = 0;
                StringBuilder _build = new StringBuilder();
                foreach (ReptPickSerials _srl in _reptPickSerials)
                {
                    _item = _srl.Tus_itm_cd; _serial = _srl.Tus_ser_1; _id = _srl.Tus_ser_id;
                    DataTable _byid = _inventoryDAL.CheckSerialByID(_company, _location, _id);
                    DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_company, _location, _item, _serial);
                    if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null)
                            _build.Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                        else
                            _build.AppendLine().Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                }
                if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                {
                    _docNo = "Please check the below item(s). These serial(s)/serial id(s) are already available in your location.\n " + _build.ToString();
                    effect = -1;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _ScmCommonDAL.TransactionRollback();
                    return effect;
                }
                #endregion Checking for the serial/serial id duplicate

                try
                {
                    effect = GRN(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out  _docNos);
                    UpdateRefDocumentSerial(_reptPickSerials, _inventoryMovementHeader.Ith_oth_docno);
                }
                catch (Exception ex)
                {
                    _docNos = ex.Message;
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _ScmCommonDAL.ConnectionClose();
                _docNo = _docNos;
                _tr.Complete();
                return effect;
            }
        }

        public Int16 GRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            string _docNos = string.Empty;
            Int16 effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNos);
            _docNo = _docNos;
            return effect;
        }

        #endregion GRN *** Chamal 11-05-2012 ***

        #region Adjustment Plus *** Chamal 04-05-2012 ***
        public Int16 ADJPlusOld(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false)
        {
            Int16 effect = 0;
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _inventoryDAL.TransactionCommit();

                    effect = 1;
                }
                else
                {

                    effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    //comented by kapila 17/7/2015
                    //_inventoryDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);

                    if (_inventoryMovementHeader.Ith_sub_tp != null)
                    {
                        if (_inventoryMovementHeader.Ith_sub_tp == "QUO")
                        {
                            _inventoryDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "R", _inventoryMovementHeader.Ith_mod_by);
                        }
                    }

                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _ScmCommonDAL.TransactionCommit();

                    //_inventoryRepDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_ScmCommonDAL.ConnectionClose();

                    //_tr.Complete();

                    //}

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }

                    effect = 1;
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }

        public Int16 ADJPlus(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false,bool Isfixdb = false)
        {
            Int16 effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();

            //    _fixassetDAL = new FIXA_InventoryDAL();

                //if (Isfixdb)
                //{

                 //   _fixassetDAL.ConnectionOpen();
                  //  _fixassetDAL.BeginTransaction();
                //}
                //else
                //{
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                //}

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
              
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

             
                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //if (Isfixdb)
                    //{
                    //     _fixassetDAL.TransactionCommit();
                    //}
                    //else
                    //{
                    _inventoryDAL.TransactionCommit();
                  //  }

                 
                   
                    effect = 1;
                }
                else
                {

                    #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                    List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                    TmpValidation _tmpLocBalVal = new TmpValidation();
                    InventoryLocation _tmpLocBal = new InventoryLocation();
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
                    {
                        var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                        foreach (var _outSer in _serialItemData)
                        {
                            _tmpLocBalVal = new TmpValidation();
                            _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                            _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                            _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                            _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                            _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                            _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _inventoryMovementHeader.Ith_com,
                                Inl_loc = _inventoryMovementHeader.Ith_loc,
                                Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                                Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                            });
                            _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                            _locBalanceDataList.Add(_tmpLocBalVal);
                        }
                    }
                    #endregion
                    effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    //comented by kapila 17/7/2015
                    //_inventoryDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);

                    if (_inventoryMovementHeader.Ith_sub_tp != null)
                    {
                        if (_inventoryMovementHeader.Ith_sub_tp == "QUO")
                        {
                            _inventoryDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "R", _inventoryMovementHeader.Ith_mod_by);
                        }
                    }
                    #region Validate Aod Save by Lakshan 06/Sep/2016
                    #region Cheak Batch
                    if (effect != -1)
                    {
                        List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                        _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                        bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                        if (_BATCH.Count == 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated ";
                        }
                        if (effect != -1)
                        {
                            if (_count == false)
                            {
                                bool _chkBatch = true;
                                MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                if (_mstLocation != null)
                                {
                                    if (!_mstLocation.Ml_is_serial)
                                    {
                                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                        {
                                            _chkBatch = false;
                                        }
                                    }
                                }
                                if (_chkBatch)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                    }
                    #endregion
                    #region Cheak int Itm
                    if (effect != -1)
                    {
                        bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                        if (_intItmErr == false)
                        {
                            effect = -1;
                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        }
                    }
                    #endregion

                    #region Check Serials
                    if (effect == 1)
                    {
                        //Added by Chamal to check serial ID duplicate 05-Sep-2016
                        List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                        _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                        var _varSer = from c in _serList
                                      group c by c.Tus_ser_id into grp
                                      where grp.Count() > 1
                                      select new { SerialID = grp.Key, Count = grp.Count() };
                        if (_varSer != null && _varSer.Count() > 0)
                        {
                            string _errorSerialID = string.Empty;
                            foreach (var item in _varSer)
                            {
                                if (string.IsNullOrEmpty(_errorSerialID))
                                {
                                    _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                                else
                                {
                                    _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                            }
                            effect = -1;
                            _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        }
                    }
                    #endregion

                    #region validate serial count and batch count
                    #region set var data 19 oct 2016
                    decimal _updatedQty = 0;
                    decimal _batchQty = 0;
                    decimal _serQty = 0;
                    List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                    if (_invBatchData != null)
                    {
                        if (_invBatchData.Count > 0)
                        {
                            _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                            _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                        }
                    }
                    #endregion
                    if (_batchQty != _serQty)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                    }
                    #endregion

                    #region validate location balance update correctly 27 Nov 2016
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                    {
                        foreach (var _itemVal in _locBalanceDataList)
                        {
                            _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _itemVal.Inl_com,
                                Inl_loc = _itemVal.Inl_loc,
                                Inl_itm_cd = _itemVal.Inl_itm_cd,
                                Inl_itm_stus = _itemVal.Inl_itm_stus
                            });
                            _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                            _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_aft_save - _itemVal.Inl_qty_bef_save;
                            if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                            {
                                _itemVal.Inl_err_ava = 1;
                            }
                        }
                        var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                        if (_balUpdteErr != null)
                        {
                            if (_balUpdteErr.Count > 0)
                            {
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                            }
                        }
                    }
                    #endregion

                    #endregion
                    if (effect == 1)
                    {
                        _inventoryRepDAL.TransactionCommit();

                        //if (Isfixdb)
                        //{
                        //    _fixassetDAL.TransactionCommit();
                        //}
                        //else
                        //{
                        _inventoryDAL.TransactionCommit();
                     //   }
               
                            
            
                        
                        _ScmCommonDAL.TransactionCommit();

                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                        effect = 1;
                    }
                    else
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory data not updated.";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                       // _fixassetDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
               // _fixassetDAL.TransactionRollback();
            }
            return effect;
        }
        public Int16 ADJPlus2(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, InventoryDAL INVDAL, ReptCommonDAL REPCOMDAL, SCMCommonDAL SCMCOMDAL, bool IsTemp = false)
        {
            Int16 effect = 0;
            try
            {

                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _inventoryDAL.TransactionCommit();

                    effect = 1;
                }
                else
                {

                    #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                    List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                    TmpValidation _tmpLocBalVal = new TmpValidation();
                    InventoryLocation _tmpLocBal = new InventoryLocation();
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
                    {
                        var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                        foreach (var _outSer in _serialItemData)
                        {
                            _tmpLocBalVal = new TmpValidation();
                            _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                            _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                            _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                            _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                            _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                            _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _inventoryMovementHeader.Ith_com,
                                Inl_loc = _inventoryMovementHeader.Ith_loc,
                                Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                                Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                            });
                            _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                            _locBalanceDataList.Add(_tmpLocBalVal);
                        }
                    }
                    #endregion
                    effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);

                    if (effect==-2)
                    {
                        effect = -2;
                        _docNo = "Duplicate Serial Found ";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        return effect;
                    }

                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    //comented by kapila 17/7/2015
                    //_inventoryDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);

                    if (_inventoryMovementHeader.Ith_sub_tp != null)
                    {
                        if (_inventoryMovementHeader.Ith_sub_tp == "QUO")
                        {
                            _inventoryDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "R", _inventoryMovementHeader.Ith_mod_by);
                        }
                    }
                    #region Validate Aod Save by Lakshan 06/Sep/2016
                    #region Cheak Batch
                    if (effect != -1)
                    {
                        List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                        _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                        bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                        if (_BATCH.Count == 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated ";
                        }
                        if (effect != -1)
                        {
                            if (_count == false)
                            {
                                bool _chkBatch = true;
                                MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                if (_mstLocation != null)
                                {
                                    if (!_mstLocation.Ml_is_serial)
                                    {
                                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                        {
                                            _chkBatch = false;
                                        }
                                    }
                                }
                                if (_chkBatch)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                    }
                    #endregion
                    #region Cheak int Itm
                    if (effect != -1)
                    {
                        bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                        if (_intItmErr == false)
                        {
                            effect = -1;
                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        }
                    }
                    #endregion

                    #region Check Serials
                    if (effect == 1)
                    {
                        //Added by Chamal to check serial ID duplicate 05-Sep-2016
                        List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                        _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                        var _varSer = from c in _serList
                                      group c by c.Tus_ser_id into grp
                                      where grp.Count() > 1
                                      select new { SerialID = grp.Key, Count = grp.Count() };
                        if (_varSer != null && _varSer.Count() > 0)
                        {
                            string _errorSerialID = string.Empty;
                            foreach (var item in _varSer)
                            {
                                if (string.IsNullOrEmpty(_errorSerialID))
                                {
                                    _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                                else
                                {
                                    _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                            }
                            effect = -1;
                            _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        }
                    }
                    #endregion

                    #region validate serial count and batch count
                    #region set var data 19 oct 2016
                    decimal _updatedQty = 0;
                    decimal _batchQty = 0;
                    decimal _serQty = 0;
                    List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                    if (_invBatchData != null)
                    {
                        if (_invBatchData.Count > 0)
                        {
                            _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                            _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                        }
                    }
                    #endregion
                    if (_batchQty != _serQty)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                    }
                    #endregion

                    #region validate location balance update correctly 27 Nov 2016
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                    {
                        foreach (var _itemVal in _locBalanceDataList)
                        {
                            _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _itemVal.Inl_com,
                                Inl_loc = _itemVal.Inl_loc,
                                Inl_itm_cd = _itemVal.Inl_itm_cd,
                                Inl_itm_stus = _itemVal.Inl_itm_stus
                            });
                            _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                            _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_aft_save - _itemVal.Inl_qty_bef_save;
                            if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                            {
                                _itemVal.Inl_err_ava = 1;
                            }
                        }
                        var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                        if (_balUpdteErr != null)
                        {
                            if (_balUpdteErr.Count > 0)
                            {
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                            }
                        }
                    }
                    #endregion

                    #endregion
                    if (effect == 1)
                    {

                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                        effect = 1;
                    }
                    else
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory data not updated.";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }
        #endregion Adjustment Plus *** Chamal 04-05-2012 ***

        #region Adjustment Minus *** Chamal 04-05-2012 ***
        public Int16 ADJMinusOld(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false)
        {
            Int16 effect = 0;
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _inventoryDAL.TransactionCommit();

                    effect = 1;
                }
                else
                {
                    effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);

                    if (effect == 0)
                    {
                        effect = -1;
                        _docNo = "Didn't Update Items!!! Please Check ";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return effect;
                    }

                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //Rukshan 10/oct/2015
                    if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                    {
                        foreach (ReptPickSerials _serial in _reptPickSerials)
                        {
                            // decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                            decimal Issesqty = _serial.Tus_isqty;
                            _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                        }

                    }

                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();

                    //_inventoryRepDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_tr.Complete();

                    //}

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }

                    effect = 1;
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        public Int16 ADJMinus(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false)
        {
            Int16 effect = 0;
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                TmpValidation _tmpLocBalVal = new TmpValidation();
                InventoryLocation _tmpLocBal = new InventoryLocation();
                if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
                {
                    var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                    foreach (var _outSer in _serialItemData)
                    {
                        _tmpLocBalVal = new TmpValidation();
                        _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                        _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                        _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                        _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                        _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                        {
                            Inl_com = _inventoryMovementHeader.Ith_com,
                            Inl_loc = _inventoryMovementHeader.Ith_loc,
                            Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                            Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                        });
                        _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                        _locBalanceDataList.Add(_tmpLocBalVal);
                    }
                }
                #endregion
                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _inventoryDAL.TransactionCommit();

                    effect = 1;
                }
                else
                {
                    effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);

                    if (effect == 0)
                    {
                        effect = -1;
                        _docNo = "Didn't Update Items!!! Please Check ";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return effect;
                    }
                    if (effect == -2)
                    {
                        effect = -1;
                        _docNo = "Item not availeble!!! Please Check ";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return effect;
                    }
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //Rukshan 10/oct/2015
                    if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                    {
                        foreach (ReptPickSerials _serial in _reptPickSerials)
                        {
                            // decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                            decimal Issesqty = _serial.Tus_isqty;
                            _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                        }

                    }
                    #region Validate Aod Save by Lakshan 06/Sep/2016
                    #region Cheak Batch
                    if (effect != -1)
                    {
                        List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                        _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                        bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                        if (_BATCH.Count == 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated ";
                        }
                        if (effect != -1)
                        {
                            if (_count == false)
                            {
                                bool _chkBatch = true;
                                MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                if (_mstLocation != null)
                                {
                                    if (!_mstLocation.Ml_is_serial)
                                    {
                                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                        {
                                            _chkBatch = false;
                                        }
                                    }
                                }
                                if (_chkBatch)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                    }
                    #endregion
                    #region Cheak int Itm
                    if (effect != -1)
                    {
                        bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                        if (_intItmErr == false)
                        {
                            effect = -1;
                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        }
                    }
                    #endregion

                    #region Check Serials
                    if (effect == 1)
                    {
                        //Added by Chamal to check serial ID duplicate 05-Sep-2016
                        List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                        _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                        var _varSer = from c in _serList
                                      group c by c.Tus_ser_id into grp
                                      where grp.Count() > 1
                                      select new { SerialID = grp.Key, Count = grp.Count() };
                        if (_varSer != null && _varSer.Count() > 0)
                        {
                            string _errorSerialID = string.Empty;
                            foreach (var item in _varSer)
                            {
                                if (string.IsNullOrEmpty(_errorSerialID))
                                {
                                    _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                                else
                                {
                                    _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                            }
                            effect = -1;
                            _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        }
                    }
                    #endregion

                    #region validate serial count and batch count
                    #region set var data 19 oct 2016
                    decimal _updatedQty = 0;
                    decimal _batchQty = 0;
                    decimal _serQty = 0;
                    List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                    if (_invBatchData != null)
                    {
                        if (_invBatchData.Count > 0)
                        {
                            _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                            _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                        }
                    }
                    #endregion
                    if (_batchQty != _serQty)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                    }
                    #endregion

                    #region validate location balance update correctly 27 Nov 2016
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                    {
                        foreach (var _itemVal in _locBalanceDataList)
                        {
                            _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _itemVal.Inl_com,
                                Inl_loc = _itemVal.Inl_loc,
                                Inl_itm_cd = _itemVal.Inl_itm_cd,
                                Inl_itm_stus = _itemVal.Inl_itm_stus
                            });
                            _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                            _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_bef_save - _itemVal.Inl_qty_aft_save;
                            if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                            {
                                _itemVal.Inl_err_ava = 1;
                            }
                        }
                        var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                        if (_balUpdteErr != null)
                        {
                            if (_balUpdteErr.Count > 0)
                            {
                                string s = "";
                                foreach (var item in _balUpdteErr)
                                {
                                    s = s + "/" + item.Inl_itm_cd;
                                }
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                            }
                        }
                    }
                    #endregion

                    #endregion
                    if (effect == 1)
                    {
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        //_inventoryRepDAL.ConnectionClose();
                        //_inventoryDAL.ConnectionClose();
                        //_tr.Complete();
                        //}
                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                    }
                    else
                    {
                        effect = -1;
                        if (string.IsNullOrEmpty(_docNo))
                        {
                            _docNo = "Data not update correctly";
                        }
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return effect;
                    }
                    effect = 1;
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        public Int16 ADJMinus2(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, ReptCommonDAL repcomdal, InventoryDAL invdal, bool IsTemp = false)
        {
            Int16 effect = 0;

            #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
            List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
            TmpValidation _tmpLocBalVal = new TmpValidation();
            InventoryLocation _tmpLocBal = new InventoryLocation();
            if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
            {
                var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                foreach (var _outSer in _serialItemData)
                {
                    _tmpLocBalVal = new TmpValidation();
                    _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                    _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                    _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                    _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                    _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                    _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                    {
                        Inl_com = _inventoryMovementHeader.Ith_com,
                        Inl_loc = _inventoryMovementHeader.Ith_loc,
                        Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                        Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                    });
                    _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                    _locBalanceDataList.Add(_tmpLocBalVal);
                }
            }
            #endregion
            if (IsTemp == true)
            {
                effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                _inventoryDAL.TransactionCommit();

                effect = 1;
            }
            else
            {
                effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);

                if (effect == 0)
                {
                    effect = -1;
                    _docNo = "Didn't Update Items!!! Please Check ";
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    return effect;
                }

                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                //kapila 19/11/2014
                if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                    UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                //Rukshan 10/oct/2015
                if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                {
                    foreach (ReptPickSerials _serial in _reptPickSerials)
                    {
                        // decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                        decimal Issesqty = _serial.Tus_isqty;
                        _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                    }

                }
                #region Validate Aod Save by Lakshan 06/Sep/2016
                #region Cheak Batch
                if (effect != -1)
                {
                    List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                    _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                    bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                    if (_BATCH.Count == 0)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated ";
                    }
                    if (effect != -1)
                    {
                        if (_count == false)
                        {
                            bool _chkBatch = true;
                            MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                            if (_mstLocation != null)
                            {
                                if (!_mstLocation.Ml_is_serial)
                                {
                                    if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                    {
                                        _chkBatch = false;
                                    }
                                }
                            }
                            if (_chkBatch)
                            {
                                effect = -1;
                                _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                            }
                        }
                    }
                }
                #endregion
                #region Cheak int Itm
                if (effect != -1)
                {
                    bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                    if (_intItmErr == false)
                    {
                        effect = -1;
                        _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                    }
                }
                #endregion

                #region Check Serials
                if (effect == 1)
                {
                    //Added by Chamal to check serial ID duplicate 05-Sep-2016
                    List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                    _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                    var _varSer = from c in _serList
                                  group c by c.Tus_ser_id into grp
                                  where grp.Count() > 1
                                  select new { SerialID = grp.Key, Count = grp.Count() };
                    if (_varSer != null && _varSer.Count() > 0)
                    {
                        string _errorSerialID = string.Empty;
                        foreach (var item in _varSer)
                        {
                            if (string.IsNullOrEmpty(_errorSerialID))
                            {
                                _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                            }
                            else
                            {
                                _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                            }
                        }
                        effect = -1;
                        _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    }
                }
                #endregion

                #region validate serial count and batch count
                #region set var data 19 oct 2016
                decimal _updatedQty = 0;
                decimal _batchQty = 0;
                decimal _serQty = 0;
                List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                if (_invBatchData != null)
                {
                    if (_invBatchData.Count > 0)
                    {
                        _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                        _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                    }
                }
                #endregion
                if (_batchQty != _serQty)
                {
                    effect = -1;
                    _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                }
                #endregion

                #region validate location balance update correctly 27 Nov 2016
                if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                {
                    foreach (var _itemVal in _locBalanceDataList)
                    {
                        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                        {
                            Inl_com = _itemVal.Inl_com,
                            Inl_loc = _itemVal.Inl_loc,
                            Inl_itm_cd = _itemVal.Inl_itm_cd,
                            Inl_itm_stus = _itemVal.Inl_itm_stus
                        });
                        _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                        _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_bef_save - _itemVal.Inl_qty_aft_save;
                        if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                        {
                            _itemVal.Inl_err_ava = 1;
                        }
                    }
                    var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                    if (_balUpdteErr != null)
                    {
                        if (_balUpdteErr.Count > 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                        }
                    }
                }
                #endregion

                #endregion
                if (effect == 1)
                {

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }
                }
                else
                {
                    effect = -1;
                    _docNo = string.IsNullOrEmpty(_docNo) ? "Data not update correctly" : _docNo;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    return effect;
                }
                effect = 1;
            }

            return effect;
        }
        #endregion Adjustment Minus *** Chamal 04-05-2012 ***

        //kapila 19/11/2014
        public Int32 UpdateTempWaraByFGAP(List<ReptPickSerials> _reptPickSerials, string _docNo, DateTime _docDate)
        {
            Int32 effect = 0;
            Int32 _warPeriod = 0;
            Int32 _line = 1;

            foreach (ReptPickSerials _srl in _reptPickSerials)
            {
                MasterItemWarrantyPeriod _mstItmWar = new MasterItemWarrantyPeriod();
                _mstItmWar = _inventoryDAL.GetItemWarrantyDetail(_srl.Tus_itm_cd, _srl.Tus_itm_stus);
                _warPeriod = _mstItmWar.Mwp_val;
                effect = _inventoryDAL.UpdateTempWara(_docNo, _line, _docDate, _warPeriod, "N/A", "N/A", "N/A", "N/A", "N/A", Convert.ToDateTime(DateTime.Now).Date, "N/A", _srl.Tus_loc, _srl.Tus_itm_stus, 0, "N/A", "N/A", "N/A", _srl.Tus_warr_no, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_itm_model,
                    "Y", _srl.Tus_loc, _srl.Tus_cre_by, _srl.Tus_exist_grndt);
                _line = _line + 1;
            }

            effect = 1;
            return effect;
        }

        #region AOD Receipt *** Chamal 28-05-2012 ***
        public Int16 AODReceiptOld(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false)
        {
            _docNo = "";
            Int16 effect = 0;
            try
            {
                List<ReptPickSerials> _unAssembaleLst = null;
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();

                #region Pick Serial Object data  add by Lakshan As per the chamal 12 Sep 2016
                /*
                //Only for SCM WEB
                List<ReptPickSerials> _newRepTempPickSer = new List<ReptPickSerials>();
                MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);
                bool _serPicByPda = false;
                if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                {
                    #region validate Serial Data
                    List<InventoryBatchN> _aodData = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                    var _scanItems = _aodData.GroupBy(x => new { x.Inb_itm_cd, x.Inb_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Itb_bal_qty1) });
                    var _scanSer = _repPickSerList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                    bool _QtyAvaInAod = true;
                    foreach (var item in _scanItems)
                    {
                        var _itmData = _scanSer.Where(c => c.Peo.Tus_itm_cd == item.Peo.Inb_itm_cd && c.Peo.Tus_itm_stus==item.Peo.Inb_itm_stus && c.theCount > item.theCount).FirstOrDefault();
                        if (_itmData!=null)
                        {
                            _QtyAvaInAod = false;
                            break;
                        }
                    }
                    if (!_QtyAvaInAod)
                    {
                        _docNo = "Aod out item quentity exceed !";
                        effect = -1;
                        return effect;
                    }
                    #endregion
                    foreach (var v in _repPickSerList)
                    {
                        v.Tus_tmp_qty_to_pick = v.Tus_qty;
                    }

                    if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                    {
                        _serPicByPda = false;
                    }
                    else
                    {
                        _serPicByPda = true;
                    }
                    List<ReptPickSerials> _withSerIdList = _repPickSerList.Where(c => c.Tus_ser_id != 0).ToList();
                    List<ReptPickSerials> _withotSerIdList = _repPickSerList.Where(c => c.Tus_ser_id == 0).ToList();
                    List<InventoryBatchN> _tmpBatchList = new List<InventoryBatchN>();
                    ReptPickSerials _newPickSer = new ReptPickSerials();

                    #region Withserial
                    if (_withSerIdList.Count > 0 )
                    {
                        List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                        {
                            Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                            Ins_com = _inventoryMovementHeader.Ith_oth_com,
                            Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                        });
                        foreach (var _withSer in _withSerIdList)
                        {
                            foreach (var _intSer in _intSerList)
                            {
                                if (_withSer.TmpSerPick)
                                {
                                    continue;
                                }
                                if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
                                {
                                    _withSer.Tus_doc_no = _intSer.Ins_doc_no;
                                    _withSer.Tus_itm_line = _intSer.Ins_itm_line;
                                    _withSer.Tus_batch_line = _intSer.Ins_batch_line;
                                    _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
                                    _withSer.Tus_unit_price = _intSer.Ins_unit_price;
                                    _withSer.Tus_ser_line = _intSer.Ins_ser_line;
                                    decimal _actRate = 0;
                                    var _tmpBatchData = GET_INT_BATCH_DATA(new InventoryBatchN()
                                    {
                                        Inb_doc_no = _intSer.Ins_doc_no,
                                        Inb_itm_line = _intSer.Ins_itm_line,
                                        Inb_batch_line = _intSer.Ins_batch_line
                                    }).FirstOrDefault();
                                    if (_tmpBatchData != null)
                                    {
                                        if (_mstLoc.Ml_cate_1 == "DFS")
                                        {
                                            _actRate = GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                            _withSer.Tus_unit_cost = _actRate;
                                            _withSer.Tus_unit_price = _actRate;
                                        }

                                        _withSer.Tus_job_no = _tmpBatchData.Inb_job_no;
                                        _withSer.Tus_job_line = _tmpBatchData.Inb_job_line;
                                        _withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
                                    }
                                    _withSer.TmpSerPick = true;
                                    //if(out dfs)
                                    // select * from int_batch where doc no =? and item line =? and batch line =? -->  job no , job line no, res no, res line no
                                    //temp pick ser job no, job line no,  res no , res line no
                                }
                            }
                            if (_withSer.TmpSerPick)
                            {
                                _newRepTempPickSer.Add(_withSer);
                            }
                        }
                    }
                    #endregion

                    #region Without Serial
                    //if (_withotSerIdList.Count > 0 && !_serPicByPda)
                    if (_withotSerIdList.Count > 0)
                    {
                        List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                        foreach (var _ser in _withotSerIdList)
                        {
                            foreach (var _batch in _batchList)
                            {
                                if (!_ser.TmpSerPick)
                                {
                                    if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                    {
                                        _ser.Tus_doc_no = _batch.Inb_doc_no;
                                        _ser.Tus_itm_line = _batch.Inb_itm_line;
                                        _ser.Tus_batch_line = _batch.Inb_batch_line;
                                        _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                        _ser.Tus_unit_price = _batch.Inb_unit_price;
                                        if (_mstLoc.Ml_cate_1 == "DFS")
                                        {
                                            decimal _actRate =
                                                GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                            _ser.Tus_unit_cost = _actRate;
                                            _ser.Tus_unit_price = _actRate;
                                            _ser.Tus_job_no = _batch.Inb_job_no;
                                            _ser.Tus_job_line = _batch.Inb_job_line;
                                            _ser.Tus_res_no = _batch.Inb_res_no;
                                            _ser.Tus_res_line = _batch.Inb_res_lineno;
                                        }
                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                        Int32 _serLine = 0;
                                        if (_newRepTempPickSer.Count > 0)
                                        {
                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                            if (v != null)
                                            {
                                                if (v.Count > 0)
                                                {
                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                }
                                            }
                                        }
                                        _ser.Tus_ser_line = _serLine + 1;
                                        // select * from int_batch where doc no =? and item line =? and batch line =? -->  itb_base_ref_no , job line no, res no, res line no
                                        //temp pick ser job no, job line no,  res no , res line no
                                        _newRepTempPickSer.Add(_ser);
                                    }
                                    else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                    {
                                        _ser.Tus_qty = _batch.Itb_bal_qty1;
                                        _ser.Tus_doc_no = _batch.Inb_doc_no;
                                        _ser.Tus_itm_line = _batch.Inb_itm_line;
                                        _ser.Tus_batch_line = _batch.Inb_batch_line;
                                        _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                        _ser.Tus_unit_price = _batch.Inb_unit_price;
                                        if (_mstLoc.Ml_cate_1 == "DFS")
                                        {
                                            decimal _actRate =
                                                GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                            _ser.Tus_unit_cost = _actRate;
                                            _ser.Tus_unit_price = _actRate;
                                            _ser.Tus_job_no = _batch.Inb_job_no;
                                            _ser.Tus_job_line = _batch.Inb_job_line;
                                            _ser.Tus_res_no = _batch.Inb_res_no;
                                            _ser.Tus_res_line = _batch.Inb_res_lineno;
                                        }
                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                        Int32 _serLine = 0;
                                        if (_newRepTempPickSer.Count > 0)
                                        {
                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                            if (v != null)
                                            {if (v.Count > 0){_serLine = v.Max(c => c.Tus_ser_line);}}
                                        }
                                        _ser.Tus_ser_line = _serLine + 1;
                                        _newRepTempPickSer.Add(_ser);
                                    }
                                }
                            }
                        }
                    }
                    #endregion
                }*/
                #endregion

                #region SetVariable add by lakshan 13 Sep 2016
                /*   List<ReptPickSerials> _reptPickSerials = new List<ReptPickSerials>();
                if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                {
                    decimal _FromSerCount = _repPickSerList.Sum(c => c.Tus_qty); decimal _ToSerCount = _newRepTempPickSer.Sum(c => c.Tus_qty);
                    if (_FromSerCount != _ToSerCount)
                    {
                        effect = -1;
                        _docNo = "Serial count mismatch !";
                        return effect;
                    }
                    else
                    {
                        _reptPickSerials = _newRepTempPickSer;
                    }
                }
                else
                {
                    _reptPickSerials = _repPickSerList;
                }*/
                #endregion

                _inventoryDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                if (IsTemp == true)
                {
                    _inventoryRepDAL.ConnectionOpen();
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);
                    _inventoryDAL.TransactionCommit();
                    effect = 1;
                }
                else
                {
                    #region Validation check duplicate serial(s)

                    MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    bool _isCheckLocAge = false;
                    DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
                    if (_dtloctp.Rows.Count > 0)
                    {
                        if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;
                    }

                    StringBuilder _build = new StringBuilder();
                    foreach (ReptPickSerials _srl in _reptPickSerials)
                    {
                        DataTable _byid = _inventoryDAL.CheckSerialByID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_ser_id);
                        DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                        if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));

                        MasterItem _mIt = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, _srl.Tus_itm_cd);
                        if (_mIt.Mi_itm_stus.Contains("R"))
                        {
                            if (_mIt.Mi_fgitm_cd != "N/A")
                            {
                                if (_unAssembaleLst == null) _unAssembaleLst = new List<ReptPickSerials>();
                                _srl.Tus_new_status = _mIt.Mi_fgitm_cd;
                                DataTable _fcost = _inventoryDAL.GetFinishGoodCost(_mIt.Mi_fgitm_cd);
                                decimal _cost = 0;
                                if (_fcost != null && _fcost.Rows.Count > 0) _cost = _fcost.Rows[0].Field<decimal>("ASM_COST");
                                _srl.Tus_serial_id = Convert.ToString(_cost);
                                _unAssembaleLst.Add(_srl);
                            }
                        }

                        if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                        {
                            if (_isCheckLocAge == true)
                            {
                                if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                                {
                                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                    _srl.Tus_isownmrn = 0;
                                }
                                //Check MRN
                                //DataTable _dtLastAOD = _inventoryDAL.GetPerviousAODInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_ser_id);
                                //if (_dtLastAOD.Rows.Count > 0)
                                //{
                                //    _srl.Tus_isownmrn = Convert.ToInt32(_dtLastAOD.Rows[0]["ITS_ISOWNMRN"].ToString());
                                //    break;
                                //}
                                //else
                                //{
                                //    _srl.Tus_isownmrn = 0;
                                //}

                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                                {
                                    if (_srl.Tus_ageloc != _inventoryMovementHeader.Ith_loc)
                                    {
                                        _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                        //Check MRN
                                        if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                        { _srl.Tus_isownmrn = 1; }
                                        else
                                        { _srl.Tus_isownmrn = 0; }
                                    }
                                }
                                else
                                {
                                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                    //Check MRN
                                    if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                    { _srl.Tus_isownmrn = 1; }
                                    else
                                    { _srl.Tus_isownmrn = 0; }
                                }
                            }
                        }
                        else
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            _srl.Tus_isownmrn = 0;
                        }
                    }
                    if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                    {
                        _docNo = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString(); effect = -1;
                        _inventoryDAL.ConnectionClose();
                        return effect;
                    }

                    _inventoryDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                    #endregion

                    _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();
                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryRepDAL.BeginTransaction();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _ScmCommonDAL.ConnectionOpen();
                    _ScmCommonDAL.BeginTransaction();
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        //if (_reptPickSerials.Count < 1)
                        //{
                        //    effect = -1;
                        //    _docNo = "Serial data not found !";
                        //}
                    }

                    //if (effect != -1)
                    //{
                    effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    UpdateRefDocumentSerial(_reptPickSerials, _inventoryMovementHeader.Ith_oth_docno);
                    //}

                    if (effect == 1)
                    {
                        #region MyRegion
                        if (_unAssembaleLst != null)
                        {
                            MasterAutoNumber _autonoMinus = new MasterAutoNumber();
                            _autonoMinus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                            _autonoMinus.Aut_cate_tp = "LOC"; _autonoMinus.Aut_direction = null; _autonoMinus.Aut_modify_dt = null; _autonoMinus.Aut_moduleid = "ADJ"; _autonoMinus.Aut_number = 5; _autonoMinus.Aut_start_char = "ADJ"; _autonoMinus.Aut_year = null;
                            MasterAutoNumber _autonoPlus = new MasterAutoNumber();
                            _autonoPlus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                            _autonoPlus.Aut_cate_tp = "LOC"; _autonoPlus.Aut_direction = null; _autonoPlus.Aut_modify_dt = null; _autonoPlus.Aut_moduleid = "ADJ"; _autonoPlus.Aut_number = 5; _autonoPlus.Aut_start_char = "ADJ"; _autonoPlus.Aut_year = null;
                            InventoryHeader _hdrMinus = new InventoryHeader();
                            _hdrMinus = _inventoryMovementHeader;
                            _hdrMinus.Ith_acc_no = string.Empty;
                            _hdrMinus.Ith_anal_1 = string.Empty;
                            _hdrMinus.Ith_anal_2 = string.Empty;
                            _hdrMinus.Ith_anal_3 = string.Empty;
                            _hdrMinus.Ith_anal_4 = string.Empty;
                            _hdrMinus.Ith_anal_5 = string.Empty;
                            _hdrMinus.Ith_anal_6 = _inventoryMovementHeader.Ith_seq_no;
                            _hdrMinus.Ith_anal_7 = 0;
                            _hdrMinus.Ith_anal_8 = DateTime.MinValue;
                            _hdrMinus.Ith_anal_9 = DateTime.MinValue;
                            _hdrMinus.Ith_anal_10 = false;
                            _hdrMinus.Ith_anal_11 = false;
                            _hdrMinus.Ith_anal_12 = false;
                            _hdrMinus.Ith_bus_entity = string.Empty;
                            _hdrMinus.Ith_cate_tp = "STUS";
                            _hdrMinus.Ith_com = _inventoryMovementHeader.Ith_com;
                            _hdrMinus.Ith_com_docno = string.Empty;
                            _hdrMinus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrMinus.Ith_cre_when = DateTime.Now;
                            _hdrMinus.Ith_del_add1 = string.Empty;
                            _hdrMinus.Ith_del_add2 = string.Empty;
                            _hdrMinus.Ith_del_code = string.Empty;
                            _hdrMinus.Ith_del_party = string.Empty;
                            _hdrMinus.Ith_del_town = string.Empty;
                            _hdrMinus.Ith_direct = false;
                            _hdrMinus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                            _hdrMinus.Ith_doc_no = string.Empty;
                            _hdrMinus.Ith_doc_tp = "ADJ";
                            _hdrMinus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                            _hdrMinus.Ith_entry_no = string.Empty;
                            _hdrMinus.Ith_entry_tp = "STTUS";
                            _hdrMinus.Ith_git_close = true;
                            _hdrMinus.Ith_git_close_date = DateTime.MinValue;
                            _hdrMinus.Ith_git_close_doc = string.Empty;
                            _hdrMinus.Ith_isprinted = false;
                            _hdrMinus.Ith_is_manual = false;
                            _hdrMinus.Ith_job_no = string.Empty;
                            _hdrMinus.Ith_loading_point = string.Empty;
                            _hdrMinus.Ith_loading_user = string.Empty;
                            _hdrMinus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                            _hdrMinus.Ith_manual_ref = string.Empty;
                            _hdrMinus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrMinus.Ith_mod_when = DateTime.Now;
                            _hdrMinus.Ith_noofcopies = 0;
                            _hdrMinus.Ith_oth_loc = string.Empty;
                            _hdrMinus.Ith_oth_docno = "N/A";
                            _hdrMinus.Ith_remarks = string.Empty;
                            _hdrMinus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                            _hdrMinus.Ith_stus = "A";
                            _hdrMinus.Ith_sub_tp = "SYS";
                            _hdrMinus.Ith_vehi_no = string.Empty;
                            _hdrMinus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                            InventoryHeader _hdrPlus = new InventoryHeader();
                            _hdrPlus.Ith_channel = _hdrMinus.Ith_channel;
                            _hdrPlus.Ith_sbu = _hdrMinus.Ith_sbu;
                            _hdrPlus.Ith_acc_no = string.Empty;
                            _hdrPlus.Ith_anal_1 = string.Empty;
                            _hdrPlus.Ith_anal_2 = string.Empty;
                            _hdrPlus.Ith_anal_3 = string.Empty;
                            _hdrPlus.Ith_anal_4 = string.Empty;
                            _hdrPlus.Ith_anal_5 = string.Empty;
                            _hdrPlus.Ith_anal_6 = 0;
                            _hdrPlus.Ith_anal_7 = 0;
                            _hdrPlus.Ith_anal_8 = DateTime.MinValue;
                            _hdrPlus.Ith_anal_9 = DateTime.MinValue;
                            _hdrPlus.Ith_anal_10 = false;
                            _hdrPlus.Ith_anal_11 = false;
                            _hdrPlus.Ith_anal_12 = false;
                            _hdrPlus.Ith_bus_entity = string.Empty;
                            _hdrPlus.Ith_cate_tp = "STTUS";
                            _hdrPlus.Ith_com = _inventoryMovementHeader.Ith_com;
                            _hdrPlus.Ith_com_docno = string.Empty;
                            _hdrPlus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrPlus.Ith_cre_when = DateTime.Now;
                            _hdrPlus.Ith_del_add1 = string.Empty;
                            _hdrPlus.Ith_del_add2 = string.Empty;
                            _hdrPlus.Ith_del_code = string.Empty;
                            _hdrPlus.Ith_del_party = string.Empty;
                            _hdrPlus.Ith_del_town = string.Empty;
                            _hdrPlus.Ith_direct = true;
                            _hdrPlus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                            _hdrPlus.Ith_doc_no = string.Empty;
                            _hdrPlus.Ith_doc_tp = "ADJ";
                            _hdrPlus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                            _hdrPlus.Ith_entry_no = string.Empty;
                            _hdrPlus.Ith_entry_tp = "STTUS";
                            _hdrPlus.Ith_git_close = true;
                            _hdrPlus.Ith_git_close_date = DateTime.MinValue;
                            _hdrPlus.Ith_git_close_doc = string.Empty;
                            _hdrPlus.Ith_isprinted = false;
                            _hdrPlus.Ith_is_manual = false;
                            _hdrPlus.Ith_job_no = string.Empty;
                            _hdrPlus.Ith_loading_point = string.Empty;
                            _hdrPlus.Ith_loading_user = string.Empty;
                            _hdrPlus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                            _hdrPlus.Ith_manual_ref = string.Empty;
                            _hdrPlus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrPlus.Ith_mod_when = DateTime.Now;
                            _hdrPlus.Ith_noofcopies = 0;
                            _hdrPlus.Ith_oth_loc = string.Empty;
                            _hdrPlus.Ith_oth_docno = "N/A";
                            _hdrPlus.Ith_remarks = string.Empty;
                            _hdrPlus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                            _hdrPlus.Ith_stus = "A";
                            _hdrPlus.Ith_sub_tp = "STTUS";
                            _hdrPlus.Ith_vehi_no = string.Empty;
                            _hdrPlus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                            string _adjm = string.Empty;
                            string _adjp = string.Empty;
                            List<ReptPickSerials> _UnAssLst = new List<ReptPickSerials>();
                            foreach (ReptPickSerials _one in _unAssembaleLst)
                            {
                                ReptPickSerials _two = _inventoryDAL.Get_all_details_on_serialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _one.Tus_bin, _one.Tus_itm_cd, _one.Tus_ser_id);
                                if (_two != null && !string.IsNullOrEmpty(_two.Tus_com))
                                {
                                    _two.Tus_new_status = _one.Tus_new_status; _two.Tus_serial_id = _one.Tus_serial_id;
                                    _UnAssLst.Add(_two);
                                }
                            }
                            InventoryAssembleToFinishGoodCommon(_hdrMinus, _hdrPlus, _UnAssLst, null, _autonoMinus, _autonoPlus, out _adjm, out _adjp);
                            _docNo += "," + _adjm + "," + _adjp;
                        }
                        #endregion
                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                    }

                    //Tharaka partialy add item - update balance qty
                    /*MasterLocation oIn_location = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    MasterLocation oOut_location = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);

                    if (oIn_location.Ml_is_serial && !oOut_location.Ml_is_serial)
                    {
                        DataTable oItmBatch = _inventoryDAL.GET_INTBATCH_BY_DOC(_inventoryMovementHeader.Ith_oth_docno);
                        var distinctIds = oItmBatch.AsEnumerable().Select(s => new { itemCode = s.Field<string>("itb_itm_cd"), itmStatus = s.Field<string>("itb_itm_stus"), Qty = s.Field<decimal>("itb_qty"), BalQty = s.Field<decimal>("itb_bal_qty2"), }).Distinct().ToList();

                        foreach (var item in distinctIds)
                        {
                            ReptPickSerials oSelectedItem = _reptPickSerials.Find(x => x.Tus_itm_cd == item.itemCode && x.Tus_itm_stus == item.itmStatus);
                            if (oSelectedItem != null && oSelectedItem.Tus_qty != item.BalQty)
                            {

                                
                            }
                            //Int32 errValue = Convert.ToInt32("te");
                        }
                    }*/
                    if (effect == 1)
                    {
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                    }
                    else
                    {
                        _docNo = "Process terminated !";
                        effect = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception ex)
            {
                _docNo = ex.Message;
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }
        public Int16 AODReceiptCorrect(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _repPickSerList, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false)
        {
            _docNo = "";
            Int16 effect = 0;
            try
            {
                List<ReptPickSerials> _unAssembaleLst = null;
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();

                #region Pick Serial Object data resetup add by Lakshan As per the chamal 12 Sep 2016
                //Only for SCM WEB
                List<ReptPickSerials> _newRepTempPickSer = new List<ReptPickSerials>();
                if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                {
                    MasterLocation _mstAodInLoc = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    MasterLocation _mstAodOutLoc = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);
                    foreach (var item in _repPickSerList)
                    {
                        if (string.IsNullOrEmpty(item.Tus_bin))
                        {
                            item.Tus_bin = _inventoryDAL.GetDefaultBinCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                        }
                    }
                    bool _serPicByPda = false;
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    #region validate Serial Data
                    List<InventoryBatchN> _aodData = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                    var _scanItems = _aodData.GroupBy(x => new { x.Inb_itm_cd, x.Inb_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Itb_bal_qty1) });
                    var _scanSer = _repPickSerList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                    bool _QtyAvaInAod = true;
                    foreach (var item in _scanItems)
                    {
                        var _itmData = _scanSer.Where(c => c.Peo.Tus_itm_cd == item.Peo.Inb_itm_cd && c.Peo.Tus_itm_stus == item.Peo.Inb_itm_stus && c.theCount > item.theCount).FirstOrDefault();
                        if (_itmData != null)
                        {
                            _QtyAvaInAod = false;
                            break;
                        }
                    }
                    if (!_QtyAvaInAod)
                    {
                        _docNo = "Aod out item quentity exceed !";
                        effect = -1;
                        return effect;
                    }

                    foreach (var v in _repPickSerList)
                    {
                        v.Tus_tmp_qty_to_pick = v.Tus_qty;
                    }
                    #endregion
                    #region Chk serial pick from pda or other
                    //if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                    //{
                    //    _serPicByPda = false;
                    //}
                    //else
                    //{
                    //    _serPicByPda = true;
                    //}
                    #endregion
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    List<ReptPickSerials> _withSerIdList = _repPickSerList.Where(c => c.Tus_ser_id != 0).ToList();
                    List<ReptPickSerials> _withotSerIdList = _repPickSerList.Where(c => c.Tus_ser_id == 0).ToList();

                    List<InventoryBatchN> _tmpBatchList = new List<InventoryBatchN>();
                    ReptPickSerials _newPickSer = new ReptPickSerials();

                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                    {
                        #region Get INT_SERDATA For DFS Location
                        List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                        {
                            Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                            Ins_com = _inventoryMovementHeader.Ith_oth_com,
                            Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                        });
                        Int32 _serialIdZeroDataAvailable = 0;
                        if (_intSerList.Count > 0)
                        {
                            _serialIdZeroDataAvailable = _intSerList.Where(c => c.Ins_ser_id == 0).ToList().Count();
                        }
                        #endregion
                        if (_intSerList.Count > 0 && _serialIdZeroDataAvailable < 1)
                        {
                            #region With Serial Id
                            foreach (var _withSer in _withSerIdList)
                            {
                                foreach (var _intSer in _intSerList)
                                {
                                    if (_withSer.TmpSerPick)
                                    {
                                        continue;
                                    }
                                    if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
                                    {
                                        _withSer.Tus_doc_no = _intSer.Ins_doc_no;
                                        _withSer.Tus_itm_line = _intSer.Ins_itm_line;
                                        _withSer.Tus_batch_line = _intSer.Ins_batch_line;
                                        _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
                                        _withSer.Tus_unit_price = _intSer.Ins_unit_price;
                                        _withSer.Tus_ser_line = _intSer.Ins_ser_line;

                                        decimal _actRate = 0;
                                        var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                                        {
                                            Inb_doc_no = _intSer.Ins_doc_no,
                                            Inb_itm_line = _intSer.Ins_itm_line,
                                            Inb_batch_line = _intSer.Ins_batch_line
                                        }).FirstOrDefault();
                                        if (_tmpBatchData != null)
                                        {
                                            _withSer.Tus_unit_cost = _tmpBatchData.Inb_unit_cost; //If out DFS take cost from cost sheet
                                            _withSer.Tus_unit_price = _tmpBatchData.Inb_unit_price;
                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                            {
                                                decimal _TmpSActRt = 0;
                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                                if (_dt != null)
                                                {
                                                    if (_dt.Rows.Count > 0)
                                                    {
                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                    }
                                                }
                                                _withSer.Tus_unit_cost = _actRate;
                                                _withSer.Tus_unit_price = _actRate;
                                                _withSer.Tus_base_doc_no = _tmpBatchData.Inb_base_ref_no;
                                                _withSer.Tus_base_itm_line = _tmpBatchData.Inb_base_refline;
                                                // _withSer.Tus_job_no = _tmpBatchData.Inb_job_no;
                                                //_withSer.Tus_job_line = _tmpBatchData.Inb_job_line;
                                                //_withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
                                                //_withSer.Tus_res_line = _tmpBatchData.Inb_res_lineno;
                                            }
                                        }
                                        //  Int32 _ser = _inventoryDAL.UpdateIntSerReserved(_intSer);
                                        _withSer.TmpSerPick = true;
                                    }
                                }
                                if (_withSer.TmpSerPick)
                                {
                                    _newRepTempPickSer.Add(_withSer);
                                }
                            }
                            #endregion
                            #region Without Serial id
                            if (_withotSerIdList.Count > 0)
                            {
                                List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                foreach (var _ser in _withotSerIdList)
                                {
                                    foreach (var _batch in _batchList)
                                    {
                                        if (!_ser.TmpSerPick)
                                        {
                                            if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                            {
                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                if (_mstItem.Mi_is_ser1 != 0)
                                                {
                                                    #region is serial
                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                    _ser.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _ser.Tus_itm_cd = _mstItem.Mi_cd;
                                                    _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                    _ser.Tus_itm_model = _mstItem.Mi_model;
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _ser.Tus_unit_cost = _actRate;
                                                        _ser.Tus_unit_price = _actRate;
                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        // _ser.Tus_job_no = _batch.Inb_job_no;
                                                        // _ser.Tus_job_line = _batch.Inb_job_line;
                                                        // _ser.Tus_res_no = _batch.Inb_res_no;
                                                        // _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _ser.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_ser);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region mst_itm not equal 0
                                                    for (int i = 0; i < _ser.Tus_qty; i++)
                                                    {
                                                        _newPickSer = new ReptPickSerials();
                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                        //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                        _newPickSer.Tus_qty = 1;

                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                        {
                                                            Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                            Ins_batch_line = _batch.Inb_batch_line
                                                        }).FirstOrDefault();
                                                        if (_inSerAodOutNotRes != null)
                                                        {
                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                        }
                                                        else
                                                        {
                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        }
                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                            _newPickSer.Tus_unit_price = _actRate;
                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                            // _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                        _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
                                                                && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_newPickSer);
                                                    }
                                                    #endregion
                                                }
                                            }
                                            else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                            {
                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                if (_mstItem.Mi_is_ser1 != 0)
                                                {
                                                    #region is serial equal 1
                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                    _ser.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _ser.Tus_itm_cd = _mstItem.Mi_cd;
                                                    _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                    _ser.Tus_itm_model = _mstItem.Mi_model;
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _ser.Tus_unit_cost = _actRate;
                                                        _ser.Tus_unit_price = _actRate;
                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        //_ser.Tus_job_no = _batch.Inb_job_no;
                                                        //_ser.Tus_job_line = _batch.Inb_job_line;
                                                        //_ser.Tus_res_no = _batch.Inb_res_no;
                                                        //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _ser.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_ser);

                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region Mi_is_ser1 equl 0
                                                    for (int i = 0; i < _batch.Itb_bal_qty1; i++)
                                                    {
                                                        _newPickSer = new ReptPickSerials();
                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                        // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                        _newPickSer.Tus_qty = 1;
                                                        _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                            _newPickSer.Tus_unit_price = _actRate;
                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                            //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                        _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                        }
                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_ser);
                                                    }
                                                    #endregion
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                            #region WitSerial id not in int_ser
                            if (_withSerIdList.Count > 0)
                            {
                                foreach (var _serId in _withSerIdList)
                                {
                                    foreach (var _batch in _batchList)
                                    {
                                        if (!_serId.TmpSerPick)
                                        {
                                            if (_serId.Tus_itm_cd == _batch.Inb_itm_cd && _serId.Tus_itm_stus == _batch.Inb_itm_stus && _serId.Tus_qty <= _batch.Itb_bal_qty1)
                                            {
                                                _serId.Tus_doc_no = _batch.Inb_doc_no;
                                                _serId.Tus_itm_line = _batch.Inb_itm_line;
                                                _serId.Tus_batch_line = _batch.Inb_batch_line;
                                                _serId.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                _serId.Tus_unit_price = _batch.Inb_unit_price;
                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                {
                                                    decimal _actRate = 0;
                                                    decimal _TmpSActRt = 0;
                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                    if (_dt != null)
                                                    {
                                                        if (_dt.Rows.Count > 0)
                                                        {
                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                        }
                                                    }
                                                    _serId.Tus_unit_cost = _actRate;
                                                    _serId.Tus_unit_price = _actRate;
                                                    _serId.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                    _serId.Tus_base_itm_line = _batch.Inb_base_refline;
                                                    // _serId.Tus_job_no = _batch.Inb_job_no;
                                                    // _serId.Tus_job_line = _batch.Inb_job_line;
                                                    // _serId.Tus_res_no = _batch.Inb_res_no;
                                                    //_serId.Tus_res_line = _batch.Inb_res_lineno;
                                                }
                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _serId.Tus_qty;
                                                _serId.Tus_tmp_qty_to_pick = _serId.Tus_tmp_qty_to_pick - _serId.Tus_qty;
                                                _serId.TmpSerPick = _serId.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                Int32 _serLine = 0;
                                                if (_newRepTempPickSer.Count > 0)
                                                {
                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _serId.Tus_doc_no && c.Tus_itm_line == _serId.Tus_itm_line && c.Tus_batch_line == _serId.Tus_batch_line).ToList();
                                                    if (v != null)
                                                    {
                                                        if (v.Count > 0)
                                                        {
                                                            _serLine = v.Max(c => c.Tus_ser_line);
                                                        }
                                                    }
                                                }
                                                _serId.Tus_ser_line = _serLine + 1;
                                                _newRepTempPickSer.Add(_serId);
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            #region Without Serial id
                            if (_withotSerIdList.Count > 0)
                            {
                                //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                foreach (var _ser in _withotSerIdList)
                                {
                                    foreach (var _batch in _batchList)
                                    {
                                        if (!_ser.TmpSerPick)
                                        {
                                            if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                            {
                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                if (_mstItem.Mi_is_ser1 != 0)
                                                {
                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _ser.Tus_unit_cost = _actRate;
                                                        _ser.Tus_unit_price = _actRate;
                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        // _ser.Tus_job_no = _batch.Inb_job_no;
                                                        // _ser.Tus_job_line = _batch.Inb_job_line;
                                                        // _ser.Tus_res_no = _batch.Inb_res_no;
                                                        // _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _ser.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_ser);
                                                }
                                                else
                                                {
                                                    #region Equal Or Less Balance Qty
                                                    for (int i = 0; i < _ser.Tus_qty; i++)
                                                    {
                                                        _newPickSer = new ReptPickSerials();
                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                        //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                        _newPickSer.Tus_qty = 1;
                                                        _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                            _newPickSer.Tus_unit_price = _actRate;
                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                            // _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                        _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
                                                                && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_newPickSer);
                                                    }
                                                    #endregion
                                                }
                                            }
                                            else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                            {
                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                if (_mstItem.Mi_is_ser1 != 0)
                                                {
                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _ser.Tus_unit_cost = _actRate;
                                                        _ser.Tus_unit_price = _actRate;
                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        //_ser.Tus_job_no = _batch.Inb_job_no;
                                                        //_ser.Tus_job_line = _batch.Inb_job_line;
                                                        //_ser.Tus_res_no = _batch.Inb_res_no;
                                                        //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _ser.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_ser);
                                                }
                                                else
                                                {
                                                    #region Grater Than Batch Qty
                                                    for (int i = 0; i < _batch.Itb_bal_qty1; i++)
                                                    {
                                                        _newPickSer = new ReptPickSerials();
                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                        // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                        _newPickSer.Tus_qty = 1;
                                                        _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                            _newPickSer.Tus_unit_price = _actRate;
                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                            //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                        _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                        }
                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_ser);
                                                    }
                                                    #endregion
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        #region Withserial
                        if (_withSerIdList.Count > 0)
                        {
                            List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                            {
                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                Ins_com = _inventoryMovementHeader.Ith_oth_com,
                                Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                            });
                            foreach (var _withSer in _withSerIdList)
                            {
                                foreach (var _intSer in _intSerList)
                                {
                                    if (_withSer.TmpSerPick)
                                    {
                                        continue;
                                    }
                                    if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
                                    {
                                        _withSer.Tus_doc_no = _intSer.Ins_doc_no;
                                        _withSer.Tus_itm_line = _intSer.Ins_itm_line;
                                        _withSer.Tus_batch_line = _intSer.Ins_batch_line;
                                        _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
                                        _withSer.Tus_unit_price = _intSer.Ins_unit_price;
                                        _withSer.Tus_ser_line = _intSer.Ins_ser_line;
                                        decimal _actRate = 0;
                                        var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                                        {
                                            Inb_doc_no = _intSer.Ins_doc_no,
                                            Inb_itm_line = _intSer.Ins_itm_line,
                                            Inb_batch_line = _intSer.Ins_batch_line
                                        }).FirstOrDefault();
                                        if (_tmpBatchData != null)
                                        {
                                            _withSer.Tus_unit_cost = _tmpBatchData.Inb_unit_cost; //If out DFS take cost from cost sheet
                                            _withSer.Tus_unit_price = _tmpBatchData.Inb_unit_price;
                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                            {
                                                decimal _TmpSActRt = 0;
                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                                if (_dt != null)
                                                {
                                                    if (_dt.Rows.Count > 0)
                                                    {
                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                    }
                                                }
                                                _withSer.Tus_unit_cost = _actRate;
                                                _withSer.Tus_unit_price = _actRate;
                                                _withSer.Tus_base_doc_no = _tmpBatchData.Inb_base_ref_no;
                                                _withSer.Tus_base_itm_line = _tmpBatchData.Inb_base_refline;
                                            }

                                            //_withSer.Tus_job_no = _tmpBatchData.Inb_job_no;
                                            //_withSer.Tus_job_line = _tmpBatchData.Inb_job_line;
                                            //_withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
                                        }
                                        // Int32 _ser = _inventoryDAL.UpdateIntSerReserved(_intSer);
                                        _withSer.TmpSerPick = true;
                                    }
                                }
                                if (_withSer.TmpSerPick)
                                {
                                    _newRepTempPickSer.Add(_withSer);
                                }
                            }
                        }
                        #endregion

                        #region Without Serial
                        //if (_withotSerIdList.Count > 0 && !_serPicByPda)
                        if (_withotSerIdList.Count > 0)
                        {
                            List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                            foreach (var _ser in _withotSerIdList)
                            {
                                foreach (var _batch in _batchList)
                                {
                                    if (!_ser.TmpSerPick)
                                    {
                                        if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                        {
                                            #region Equal Or Less Balance Qty
                                            MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                            if (_mstItem.Mi_is_ser1 != 0)
                                            {
                                                #region Equal
                                                _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                {
                                                    decimal _actRate = 0;
                                                    decimal _TmpSActRt = 0;
                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                    if (_dt != null)
                                                    {
                                                        if (_dt.Rows.Count > 0)
                                                        {
                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                        }
                                                    }
                                                    _ser.Tus_unit_cost = _actRate;
                                                    _ser.Tus_unit_price = _actRate;
                                                    _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                    _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                    // _ser.Tus_job_no = _batch.Inb_job_no;
                                                    // _ser.Tus_job_line = _batch.Inb_job_line;
                                                    //_ser.Tus_res_no = _batch.Inb_res_no;
                                                    //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                }
                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                Int32 _serLine = 0;
                                                if (_newRepTempPickSer.Count > 0)
                                                {
                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                    if (v != null)
                                                    {
                                                        if (v.Count > 0)
                                                        {
                                                            _serLine = v.Max(c => c.Tus_ser_line);
                                                        }
                                                    }
                                                }
                                                _ser.Tus_ser_line = _serLine + 1;
                                                _newRepTempPickSer.Add(_ser);
                                                #endregion
                                            }
                                            else
                                            {
                                                #region loop serial
                                                for (int i = 0; i < _ser.Tus_qty; i++)
                                                {
                                                    _newPickSer = new ReptPickSerials();
                                                    _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                    _newPickSer.Tus_bin = _ser.Tus_bin;
                                                    _newPickSer.Tus_com = _ser.Tus_com;
                                                    _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                    _newPickSer.Tus_cre_dt = DateTime.Now;
                                                    _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                    _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                    _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                    _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                    _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;

                                                    _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                    _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                    _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                    _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                    _newPickSer.Tus_loc = _ser.Tus_loc;
                                                    _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                    _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                    _newPickSer.Tus_ser_1 = "N/A";//
                                                    _newPickSer.Tus_ser_2 = "N/A";//
                                                    _newPickSer.Tus_ser_3 = "N/A";//
                                                    _newPickSer.Tus_ser_4 = "N/A";//

                                                    _newPickSer.Tus_qty = 1;
                                                    _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//

                                                    _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                    _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                    _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                    _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _newPickSer.Tus_unit_cost = _actRate;
                                                        _newPickSer.Tus_unit_price = _actRate;
                                                        _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        //_newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                        //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                        //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                        //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _newPickSer.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_newPickSer);
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                        {
                                            MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                            if (_mstItem.Mi_is_ser1 != 0)
                                            {
                                                #region Mi_is_ser1 equql 0
                                                _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                {
                                                    decimal _actRate = 0;
                                                    decimal _TmpSActRt = 0;
                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                    if (_dt != null)
                                                    {
                                                        if (_dt.Rows.Count > 0)
                                                        {
                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                        }
                                                    }
                                                    _ser.Tus_unit_cost = _actRate;
                                                    _ser.Tus_unit_price = _actRate;
                                                    _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                    _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                    //_ser.Tus_job_no = _batch.Inb_job_no;
                                                    //_ser.Tus_job_line = _batch.Inb_job_line;
                                                    //_ser.Tus_res_no = _batch.Inb_res_no;
                                                    //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                }
                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                Int32 _serLine = 0;
                                                if (_newRepTempPickSer.Count > 0)
                                                {
                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                    if (v != null)
                                                    {
                                                        if (v.Count > 0)
                                                        {
                                                            _serLine = v.Max(c => c.Tus_ser_line);
                                                        }
                                                    }
                                                }
                                                _ser.Tus_ser_line = _serLine + 1;
                                                _newRepTempPickSer.Add(_ser);
                                                #endregion
                                            }
                                            else
                                            {
                                                #region loop serial
                                                for (int i = 0; i < _batch.Itb_bal_qty1; i++)
                                                {
                                                    _newPickSer = new ReptPickSerials();
                                                    _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                    _newPickSer.Tus_bin = _ser.Tus_bin;
                                                    _newPickSer.Tus_com = _ser.Tus_com;
                                                    _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                    _newPickSer.Tus_cre_dt = DateTime.Now;
                                                    _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                    _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                    _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                    _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                    _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;

                                                    _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                    _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                    _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                    _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                    _newPickSer.Tus_loc = _ser.Tus_loc;
                                                    _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                    _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                    _newPickSer.Tus_ser_1 = "N/A";//
                                                    _newPickSer.Tus_ser_2 = "N/A";//
                                                    _newPickSer.Tus_ser_3 = "N/A";//
                                                    _newPickSer.Tus_ser_4 = "N/A";//

                                                    _newPickSer.Tus_qty = _batch.Itb_bal_qty1;
                                                    _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                    _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                    _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                    _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _newPickSer.Tus_unit_cost = _actRate;
                                                        _newPickSer.Tus_unit_price = _actRate;
                                                        _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;

                                                        //_newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                        // _newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                        //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                        //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                    _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                    _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                    }
                                                    _newPickSer.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_newPickSer);
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                }
                _inventoryDAL.TransactionCommit();
                #endregion

                #region SetVariable add by lakshan 13 Sep 2016
                List<ReptPickSerials> _reptPickSerials = new List<ReptPickSerials>();
                if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                {
                    decimal _FromSerCount = _repPickSerList.Sum(c => c.Tus_qty); decimal _ToSerCount = _newRepTempPickSer.Sum(c => c.Tus_qty);
                    if (_FromSerCount != _ToSerCount)
                    {
                        effect = -1;
                        _docNo = "Serial count mismatch !";
                        return effect;
                    }
                    else
                    {
                        _reptPickSerials = _newRepTempPickSer;
                    }
                }
                else
                {
                    _reptPickSerials = _repPickSerList;
                }
                #endregion



                _inventoryDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                if (IsTemp == true)
                {
                    _inventoryRepDAL.ConnectionOpen();
                    effect = SaveMovementTemp(_inventoryMovementHeader, _repPickSerList, _reptPickSerialsSub, out _docNo);
                    _inventoryDAL.TransactionCommit();
                    effect = 1;
                }
                else
                {
                    _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();


                    #region Validation check duplicate serial(s)

                    MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    bool _isCheckLocAge = false;
                    DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
                    if (_dtloctp.Rows.Count > 0)
                    {
                        if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;
                    }

                    StringBuilder _build = new StringBuilder();
                    foreach (ReptPickSerials _srl in _reptPickSerials)
                    {
                        DataTable _byid = _inventoryDAL.CheckSerialByID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_ser_id);
                        DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                        if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));

                        MasterItem _mIt = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, _srl.Tus_itm_cd);
                        if (_mIt.Mi_itm_stus.Contains("R"))
                        {
                            if (_mIt.Mi_fgitm_cd != "N/A")
                            {
                                if (_unAssembaleLst == null) _unAssembaleLst = new List<ReptPickSerials>();
                                _srl.Tus_new_status = _mIt.Mi_fgitm_cd;
                                DataTable _fcost = _inventoryDAL.GetFinishGoodCost(_mIt.Mi_fgitm_cd);
                                decimal _cost = 0;
                                if (_fcost != null && _fcost.Rows.Count > 0) _cost = _fcost.Rows[0].Field<decimal>("ASM_COST");
                                _srl.Tus_serial_id = Convert.ToString(_cost);
                                _unAssembaleLst.Add(_srl);
                            }
                        }

                        if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                        {
                            if (_isCheckLocAge == true)
                            {
                                if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                                {
                                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                    _srl.Tus_isownmrn = 0;
                                }
                                //Check MRN
                                //DataTable _dtLastAOD = _inventoryDAL.GetPerviousAODInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_ser_id);
                                //if (_dtLastAOD.Rows.Count > 0)
                                //{
                                //    _srl.Tus_isownmrn = Convert.ToInt32(_dtLastAOD.Rows[0]["ITS_ISOWNMRN"].ToString());
                                //    break;
                                //}
                                //else
                                //{
                                //    _srl.Tus_isownmrn = 0;
                                //}

                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                                {
                                    if (_srl.Tus_ageloc != _inventoryMovementHeader.Ith_loc)
                                    {
                                        _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                        //Check MRN
                                        if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                        { _srl.Tus_isownmrn = 1; }
                                        else
                                        { _srl.Tus_isownmrn = 0; }
                                    }
                                }
                                else
                                {
                                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                    //Check MRN
                                    if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                    { _srl.Tus_isownmrn = 1; }
                                    else
                                    { _srl.Tus_isownmrn = 0; }
                                }
                            }
                        }
                        else
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            _srl.Tus_isownmrn = 0;
                        }
                    }
                    if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                    {
                        _docNo = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString(); effect = -1;
                        _inventoryDAL.ConnectionClose();
                        return effect;
                    }

                    _inventoryDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                    #endregion

                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryRepDAL.BeginTransaction();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _ScmCommonDAL.ConnectionOpen();
                    _ScmCommonDAL.BeginTransaction();

                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        if (_reptPickSerials.Count < 1)
                        {
                            effect = -1;
                            _docNo = "Serial data not found !";
                        }
                    }

                    if (effect != -1)
                    {
                        effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                        effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                        UpdateRefDocumentSerial(_reptPickSerials, _inventoryMovementHeader.Ith_oth_docno);
                    }

                    if (effect == 1)
                    {
                        #region MyRegion
                        if (_unAssembaleLst != null)
                        {
                            MasterAutoNumber _autonoMinus = new MasterAutoNumber();
                            _autonoMinus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                            _autonoMinus.Aut_cate_tp = "LOC"; _autonoMinus.Aut_direction = null; _autonoMinus.Aut_modify_dt = null; _autonoMinus.Aut_moduleid = "ADJ"; _autonoMinus.Aut_number = 5; _autonoMinus.Aut_start_char = "ADJ"; _autonoMinus.Aut_year = null;
                            MasterAutoNumber _autonoPlus = new MasterAutoNumber();
                            _autonoPlus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                            _autonoPlus.Aut_cate_tp = "LOC"; _autonoPlus.Aut_direction = null; _autonoPlus.Aut_modify_dt = null; _autonoPlus.Aut_moduleid = "ADJ"; _autonoPlus.Aut_number = 5; _autonoPlus.Aut_start_char = "ADJ"; _autonoPlus.Aut_year = null;
                            InventoryHeader _hdrMinus = new InventoryHeader();
                            _hdrMinus = _inventoryMovementHeader;
                            _hdrMinus.Ith_acc_no = string.Empty;
                            _hdrMinus.Ith_anal_1 = string.Empty;
                            _hdrMinus.Ith_anal_2 = string.Empty;
                            _hdrMinus.Ith_anal_3 = string.Empty;
                            _hdrMinus.Ith_anal_4 = string.Empty;
                            _hdrMinus.Ith_anal_5 = string.Empty;
                            _hdrMinus.Ith_anal_6 = _inventoryMovementHeader.Ith_seq_no;
                            _hdrMinus.Ith_anal_7 = 0;
                            _hdrMinus.Ith_anal_8 = DateTime.MinValue;
                            _hdrMinus.Ith_anal_9 = DateTime.MinValue;
                            _hdrMinus.Ith_anal_10 = false;
                            _hdrMinus.Ith_anal_11 = false;
                            _hdrMinus.Ith_anal_12 = false;
                            _hdrMinus.Ith_bus_entity = string.Empty;
                            _hdrMinus.Ith_cate_tp = "STUS";
                            _hdrMinus.Ith_com = _inventoryMovementHeader.Ith_com;
                            _hdrMinus.Ith_com_docno = string.Empty;
                            _hdrMinus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrMinus.Ith_cre_when = DateTime.Now;
                            _hdrMinus.Ith_del_add1 = string.Empty;
                            _hdrMinus.Ith_del_add2 = string.Empty;
                            _hdrMinus.Ith_del_code = string.Empty;
                            _hdrMinus.Ith_del_party = string.Empty;
                            _hdrMinus.Ith_del_town = string.Empty;
                            _hdrMinus.Ith_direct = false;
                            _hdrMinus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                            _hdrMinus.Ith_doc_no = string.Empty;
                            _hdrMinus.Ith_doc_tp = "ADJ";
                            _hdrMinus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                            _hdrMinus.Ith_entry_no = string.Empty;
                            _hdrMinus.Ith_entry_tp = "STTUS";
                            _hdrMinus.Ith_git_close = true;
                            _hdrMinus.Ith_git_close_date = DateTime.MinValue;
                            _hdrMinus.Ith_git_close_doc = string.Empty;
                            _hdrMinus.Ith_isprinted = false;
                            _hdrMinus.Ith_is_manual = false;
                            _hdrMinus.Ith_job_no = string.Empty;
                            _hdrMinus.Ith_loading_point = string.Empty;
                            _hdrMinus.Ith_loading_user = string.Empty;
                            _hdrMinus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                            _hdrMinus.Ith_manual_ref = string.Empty;
                            _hdrMinus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrMinus.Ith_mod_when = DateTime.Now;
                            _hdrMinus.Ith_noofcopies = 0;
                            _hdrMinus.Ith_oth_loc = string.Empty;
                            _hdrMinus.Ith_oth_docno = "N/A";
                            _hdrMinus.Ith_remarks = string.Empty;
                            _hdrMinus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                            _hdrMinus.Ith_stus = "A";
                            _hdrMinus.Ith_sub_tp = "SYS";
                            _hdrMinus.Ith_vehi_no = string.Empty;
                            _hdrMinus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                            InventoryHeader _hdrPlus = new InventoryHeader();
                            _hdrPlus.Ith_channel = _hdrMinus.Ith_channel;
                            _hdrPlus.Ith_sbu = _hdrMinus.Ith_sbu;
                            _hdrPlus.Ith_acc_no = string.Empty;
                            _hdrPlus.Ith_anal_1 = string.Empty;
                            _hdrPlus.Ith_anal_2 = string.Empty;
                            _hdrPlus.Ith_anal_3 = string.Empty;
                            _hdrPlus.Ith_anal_4 = string.Empty;
                            _hdrPlus.Ith_anal_5 = string.Empty;
                            _hdrPlus.Ith_anal_6 = 0;
                            _hdrPlus.Ith_anal_7 = 0;
                            _hdrPlus.Ith_anal_8 = DateTime.MinValue;
                            _hdrPlus.Ith_anal_9 = DateTime.MinValue;
                            _hdrPlus.Ith_anal_10 = false;
                            _hdrPlus.Ith_anal_11 = false;
                            _hdrPlus.Ith_anal_12 = false;
                            _hdrPlus.Ith_bus_entity = string.Empty;
                            _hdrPlus.Ith_cate_tp = "STTUS";
                            _hdrPlus.Ith_com = _inventoryMovementHeader.Ith_com;
                            _hdrPlus.Ith_com_docno = string.Empty;
                            _hdrPlus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrPlus.Ith_cre_when = DateTime.Now;
                            _hdrPlus.Ith_del_add1 = string.Empty;
                            _hdrPlus.Ith_del_add2 = string.Empty;
                            _hdrPlus.Ith_del_code = string.Empty;
                            _hdrPlus.Ith_del_party = string.Empty;
                            _hdrPlus.Ith_del_town = string.Empty;
                            _hdrPlus.Ith_direct = true;
                            _hdrPlus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                            _hdrPlus.Ith_doc_no = string.Empty;
                            _hdrPlus.Ith_doc_tp = "ADJ";
                            _hdrPlus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                            _hdrPlus.Ith_entry_no = string.Empty;
                            _hdrPlus.Ith_entry_tp = "STTUS";
                            _hdrPlus.Ith_git_close = true;
                            _hdrPlus.Ith_git_close_date = DateTime.MinValue;
                            _hdrPlus.Ith_git_close_doc = string.Empty;
                            _hdrPlus.Ith_isprinted = false;
                            _hdrPlus.Ith_is_manual = false;
                            _hdrPlus.Ith_job_no = string.Empty;
                            _hdrPlus.Ith_loading_point = string.Empty;
                            _hdrPlus.Ith_loading_user = string.Empty;
                            _hdrPlus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                            _hdrPlus.Ith_manual_ref = string.Empty;
                            _hdrPlus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrPlus.Ith_mod_when = DateTime.Now;
                            _hdrPlus.Ith_noofcopies = 0;
                            _hdrPlus.Ith_oth_loc = string.Empty;
                            _hdrPlus.Ith_oth_docno = "N/A";
                            _hdrPlus.Ith_remarks = string.Empty;
                            _hdrPlus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                            _hdrPlus.Ith_stus = "A";
                            _hdrPlus.Ith_sub_tp = "STTUS";
                            _hdrPlus.Ith_vehi_no = string.Empty;
                            _hdrPlus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                            string _adjm = string.Empty;
                            string _adjp = string.Empty;
                            List<ReptPickSerials> _UnAssLst = new List<ReptPickSerials>();
                            foreach (ReptPickSerials _one in _unAssembaleLst)
                            {
                                ReptPickSerials _two = _inventoryDAL.Get_all_details_on_serialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _one.Tus_bin, _one.Tus_itm_cd, _one.Tus_ser_id);
                                if (_two != null && !string.IsNullOrEmpty(_two.Tus_com))
                                {
                                    _two.Tus_new_status = _one.Tus_new_status; _two.Tus_serial_id = _one.Tus_serial_id;
                                    _UnAssLst.Add(_two);
                                }
                            }
                            InventoryAssembleToFinishGoodCommon(_hdrMinus, _hdrPlus, _UnAssLst, null, _autonoMinus, _autonoPlus, out _adjm, out _adjp);
                            _docNo += "," + _adjm + "," + _adjp;
                        }
                        #endregion
                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                    }

                    //Tharaka partialy add item - update balance qty
                    /*MasterLocation oIn_location = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    MasterLocation oOut_location = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);

                    if (oIn_location.Ml_is_serial && !oOut_location.Ml_is_serial)
                    {
                        DataTable oItmBatch = _inventoryDAL.GET_INTBATCH_BY_DOC(_inventoryMovementHeader.Ith_oth_docno);
                        var distinctIds = oItmBatch.AsEnumerable().Select(s => new { itemCode = s.Field<string>("itb_itm_cd"), itmStatus = s.Field<string>("itb_itm_stus"), Qty = s.Field<decimal>("itb_qty"), BalQty = s.Field<decimal>("itb_bal_qty2"), }).Distinct().ToList();

                        foreach (var item in distinctIds)
                        {
                            ReptPickSerials oSelectedItem = _reptPickSerials.Find(x => x.Tus_itm_cd == item.itemCode && x.Tus_itm_stus == item.itmStatus);
                            if (oSelectedItem != null && oSelectedItem.Tus_qty != item.BalQty)
                            {

                                
                            }
                            //Int32 errValue = Convert.ToInt32("te");
                        }
                    }*/
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        if (effect == 1)
                        {
                            foreach (ReptPickSerials _one in _reptPickSerials)
                            {
                                _inventoryDAL.UpdateAODOUTPickItem(_inventoryMovementHeader.Ith_oth_docno, _one.Tus_ser_id);
                            }
                            if (_reptPickSerials.Count > 0)
                            {
                                _inventoryDAL.UpdateAODOUT(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_docno);
                                _inventoryRepDAL.DeleteTempPickObjs(_reptPickSerials[0].Tus_usrseq_no);
                            }
                        }
                    }
                    if (effect == 1)
                    {
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                    }
                    else
                    {
                        _docNo = "Process terminated !";
                        effect = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception ex)
            {
                _docNo = ex.Message;
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }

        public Int16 AODReceipt(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _repPickSerList, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false)
        {
            _docNo = "";
            Int16 effect = 0;
            try
            {
                List<ReptPickSerials> _unAssembaleLst = null;
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();
                _inventoryDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();

                if (IsTemp == true)
                {
                    #region Temp Save
                    _inventoryRepDAL.ConnectionOpen();
                    effect = SaveMovementTemp(_inventoryMovementHeader, _repPickSerList, _reptPickSerialsSub, out _docNo);
                    _inventoryDAL.TransactionCommit();
                    effect = 1;
                    #endregion
                }
                else
                {
                    #region Save Process
                    _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();
                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryDAL.ConnectionOpen();
                    _ScmCommonDAL.ConnectionOpen();

                    _inventoryRepDAL.BeginTransaction();
                    _inventoryDAL.BeginTransaction();
                    _ScmCommonDAL.BeginTransaction();

                    #region Pick Serial Object data resetup add by Lakshan As per the chamal 12 Sep 2016
                    //Only for SCM WEB
                    List<ReptPickSerials> _newRepTempPickSer = new List<ReptPickSerials>();
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        MasterLocation _mstAodInLoc = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                        MasterLocation _mstAodOutLoc = _generalDAL.GetAllLocationByLocCode(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc, 1);
                        #region validate serial is available in company 27 Nov 2016
                        if (_inventoryMovementHeader.TMP_CHK_SER_IS_AVA)
                        {
                            if (_mstAodOutLoc.Ml_is_serial == false)
                            {
                                List<InventorySerialN> _intSerListData = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                                {
                                    Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                    Ins_com = _inventoryMovementHeader.Ith_oth_com,
                                    Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                                });
                                if (_intSerListData != null)
                                {
                                    if (_intSerListData.Count < 1)
                                    {
                                        var _validateSerialList = _repPickSerList.Where(c => c.Tus_ser_1 != "N/A").ToList();
                                        string _foundserial = CHECKSERILA_COM(_validateSerialList, _inventoryDAL);
                                        if (!string.IsNullOrEmpty(_foundserial))
                                        {
                                            _inventoryRepDAL.ConnectionClose();
                                            _inventoryDAL.ConnectionClose();
                                            _ScmCommonDAL.ConnectionClose();
                                            _docNo = _foundserial;
                                            effect = -1;
                                            return effect;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        foreach (var item in _repPickSerList)
                        {
                            if (string.IsNullOrEmpty(item.Tus_bin))
                            {
                                item.Tus_bin = _inventoryDAL.GetDefaultBinCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                            }
                        }
                        #region validate Serial Data
                        List<InventoryBatchN> _aodData = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                        var _scanItems = _aodData.GroupBy(x => new { x.Inb_itm_cd, x.Inb_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Itb_bal_qty1) });
                        var _scanSer = _repPickSerList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                        bool _QtyAvaInAod = true;
                        foreach (var item in _scanItems)
                        {
                            var _itmData = _scanSer.Where(c => c.Peo.Tus_itm_cd == item.Peo.Inb_itm_cd && c.Peo.Tus_itm_stus == item.Peo.Inb_itm_stus && c.theCount > item.theCount).FirstOrDefault();
                            if (_itmData != null)
                            {
                                _QtyAvaInAod = false;
                                break;
                            }
                        }
                        if (!_QtyAvaInAod)
                        {
                            _docNo = "Aod out item quentity exceed !";
                            effect = -1;
                            return effect;
                        }
                        foreach (var _pickSer in _repPickSerList)
                        {
                            foreach (var _aodD in _aodData)
                            {
                                if (_pickSer.Tus_itm_cd == _aodD.Inb_itm_cd && _pickSer.Tus_itm_stus == _aodD.Inb_itm_stus)
                                {
                                    _pickSer.Tus_ser_ver = 1;
                                }
                            }
                        }
                        var _notAvaSerList = _repPickSerList.Where(c => c.Tus_ser_ver != 1).ToList();
                        if (_notAvaSerList != null)
                        {
                            if (_notAvaSerList.Count > 0)
                            {
                                _inventoryRepDAL.ConnectionClose();
                                _inventoryDAL.ConnectionClose();
                                _ScmCommonDAL.ConnectionClose();
                                _docNo = "Invalid item status please check the item status !";
                                effect = -1;
                                return effect;
                            }
                        }
                        foreach (var v in _repPickSerList)
                        {
                            v.Tus_tmp_qty_to_pick = v.Tus_qty;
                        }
                        #endregion
                        List<ReptPickSerials> _withSerIdList = _repPickSerList.Where(c => c.Tus_ser_id != 0).ToList();
                        List<ReptPickSerials> _withotSerIdList = _repPickSerList.Where(c => c.Tus_ser_id == 0).ToList();

                        List<InventoryBatchN> _tmpBatchList = new List<InventoryBatchN>();
                        ReptPickSerials _newPickSer = new ReptPickSerials();

                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                        {
                            #region Get INT_SERDATA For DFS Location
                            List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                            {
                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                Ins_com = _inventoryMovementHeader.Ith_oth_com,
                                Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                            });
                            Int32 _serialIdZeroDataAvailable = 0;
                            if (_intSerList.Count > 0)
                            {
                                _serialIdZeroDataAvailable = _intSerList.Where(c => c.Ins_ser_id == 0).ToList().Count();
                            }
                            #endregion
                            if (_intSerList.Count > 0 && _serialIdZeroDataAvailable < 1)
                            {
                                #region With Serial Id
                                foreach (var _withSer in _withSerIdList)
                                {
                                    foreach (var _intSer in _intSerList)
                                    {
                                        if (_withSer.TmpSerPick)
                                        {
                                            continue;
                                        }
                                        if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
                                        {
                                            _withSer.Tus_doc_no = _intSer.Ins_doc_no;
                                            _withSer.Tus_itm_line = _intSer.Ins_itm_line;
                                            _withSer.Tus_batch_line = _intSer.Ins_batch_line;
                                            _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
                                            _withSer.Tus_unit_price = _intSer.Ins_unit_price;
                                            _withSer.Tus_ser_line = _intSer.Ins_ser_line;

                                            #region Make grn Data 11 Oct 2016
                                            _withSer.Tus_warr_no = _intSer.Ins_warr_no;
                                            _withSer.Tus_warr_period = _intSer.Ins_warr_period;
                                            _withSer.Tus_orig_grncom = _intSer.Ins_orig_grncom;
                                            _withSer.Tus_orig_grnno = _intSer.Ins_orig_grnno;
                                            _withSer.Tus_orig_grndt = _intSer.Ins_orig_grndt;
                                            _withSer.Tus_orig_supp = _intSer.Ins_orig_supp;
                                            _withSer.Tus_exist_grncom = _intSer.Ins_exist_grncom;
                                            _withSer.Tus_exist_grnno = _intSer.Ins_exist_grnno;
                                            _withSer.Tus_exist_grndt = _intSer.Ins_exist_grndt;
                                            _withSer.Tus_exist_supp = _intSer.Ins_exist_supp;
                                            #endregion

                                            decimal _actRate = 0;
                                            var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                                            {
                                                Inb_doc_no = _intSer.Ins_doc_no,
                                                Inb_itm_line = _intSer.Ins_itm_line,
                                                Inb_batch_line = _intSer.Ins_batch_line
                                            }).FirstOrDefault();
                                            if (_tmpBatchData != null)
                                            {
                                                _withSer.Tus_unit_cost = _tmpBatchData.Inb_unit_cost; //If out DFS take cost from cost sheet
                                                _withSer.Tus_unit_price = _tmpBatchData.Inb_unit_price;
                                                _withSer.Tus_new_itm_cd = _tmpBatchData.Inb_base_itmcd;
                                                _withSer.Tus_batch_no = _tmpBatchData.Inb_batch_no;
                                                if (!string.IsNullOrEmpty(_tmpBatchData.Inb_res_no) && _tmpBatchData.Inb_res_no != "N/A")
                                                {
                                                    _withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
                                                    _withSer.Tus_res_line = _tmpBatchData.Inb_res_lineno;
                                                }

                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                {
                                                    decimal _TmpSActRt = 0;
                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                                    if (_dt != null)
                                                    {
                                                        if (_dt.Rows.Count > 0)
                                                        {
                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                        }
                                                    }
                                                    _withSer.Tus_unit_cost = _actRate;
                                                    _withSer.Tus_unit_price = _actRate;
                                                    _withSer.Tus_base_doc_no = _tmpBatchData.Inb_base_ref_no;
                                                    _withSer.Tus_base_itm_line = _tmpBatchData.Inb_base_refline;
                                                }
                                            }
                                            _withSer.TmpSerPick = true;
                                        }
                                    }
                                    if (_withSer.TmpSerPick)
                                    {
                                        _newRepTempPickSer.Add(_withSer);
                                    }
                                }
                                #endregion
                                #region Without Serial id
                                if (_withotSerIdList.Count > 0)
                                {
                                    List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                    //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                    foreach (var _ser in _withotSerIdList)
                                    {
                                        foreach (var _batch in _batchList)
                                        {
                                            if (!_ser.TmpSerPick)
                                            {
                                                if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                                {
                                                    MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                    if (_mstItem.Mi_is_ser1 != 0)
                                                    {
                                                        #region is serial
                                                        _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                        _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                        _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                        _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                        {
                                                            _ser.Tus_res_no = _batch.Inb_res_no;
                                                            _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                        _ser.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _ser.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                        _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _ser.Tus_itm_model = _mstItem.Mi_model;
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _ser.Tus_unit_cost = _actRate;
                                                            _ser.Tus_unit_price = _actRate;
                                                            _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            // _ser.Tus_job_no = _batch.Inb_job_no;
                                                            // _ser.Tus_job_line = _batch.Inb_job_line;
                                                            // _ser.Tus_res_no = _batch.Inb_res_no;
                                                            // _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _ser.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_ser);
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region mst_itm not equal 0
                                                        for (int i = 0; i < _ser.Tus_qty; i++)
                                                        {
                                                            _newPickSer = new ReptPickSerials();
                                                            _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                            _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                            _newPickSer.Tus_bin = _ser.Tus_bin;
                                                            _newPickSer.Tus_com = _ser.Tus_com;
                                                            _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                            _newPickSer.Tus_cre_dt = DateTime.Now;
                                                            _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                            _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                            _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                            //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                            _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                            _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                            _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                            _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                            _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                            _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                            _newPickSer.Tus_loc = _ser.Tus_loc;
                                                            _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                            _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                            _newPickSer.Tus_ser_1 = "N/A";//
                                                            _newPickSer.Tus_ser_2 = "N/A";//
                                                            _newPickSer.Tus_ser_3 = "N/A";//
                                                            _newPickSer.Tus_ser_4 = "N/A";//

                                                            _newPickSer.Tus_qty = 1;
                                                            #region Genrate Ser ID
                                                            InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                            {
                                                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                                Ins_itm_line = _batch.Inb_itm_line,
                                                                Ins_batch_line = _batch.Inb_batch_line
                                                            }).FirstOrDefault();
                                                            if (_inSerAodOutNotRes != null)
                                                            {
                                                                _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                                #region Make grn Data 11 Oct 2016
                                                                _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
                                                                _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
                                                                _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
                                                                _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
                                                                _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
                                                                _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
                                                                _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
                                                                _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
                                                                _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
                                                                _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                            }
                                                            #endregion
                                                            _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                            _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                            _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                            _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
                                                            _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                            _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                            {
                                                                _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                            {
                                                                decimal _actRate = 0;
                                                                decimal _TmpSActRt = 0;
                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                if (_dt != null)
                                                                {
                                                                    if (_dt.Rows.Count > 0)
                                                                    {
                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                    }
                                                                }
                                                                _newPickSer.Tus_unit_cost = _actRate;
                                                                _newPickSer.Tus_unit_price = _actRate;
                                                                _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                // _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                            _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                            _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                            Int32 _serLine = 0;
                                                            if (_newRepTempPickSer.Count > 0)
                                                            {
                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
                                                                    && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                if (v != null)
                                                                {
                                                                    if (v.Count > 0)
                                                                    {
                                                                        _serLine = v.Max(c => c.Tus_ser_line);
                                                                    }
                                                                }
                                                            }
                                                            _newPickSer.Tus_ser_line = _serLine + 1;
                                                            _newRepTempPickSer.Add(_newPickSer);
                                                        }
                                                        #endregion
                                                    }
                                                }
                                                else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                                {
                                                    MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                    if (_mstItem.Mi_is_ser1 != 0)
                                                    {
                                                        #region is serial equal 1
                                                        _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                        _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                        _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                        _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                        _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                        {
                                                            _ser.Tus_res_no = _batch.Inb_res_no;
                                                            _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _ser.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _ser.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                        _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _ser.Tus_itm_model = _mstItem.Mi_model;
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _ser.Tus_unit_cost = _actRate;
                                                            _ser.Tus_unit_price = _actRate;
                                                            _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            //_ser.Tus_job_no = _batch.Inb_job_no;
                                                            //_ser.Tus_job_line = _batch.Inb_job_line;
                                                            //_ser.Tus_res_no = _batch.Inb_res_no;
                                                            //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _ser.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_ser);

                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region Mi_is_ser1 equl 0
                                                        for (int i = 0; i < _batch.Itb_bal_qty1; i++)
                                                        {
                                                            _newPickSer = new ReptPickSerials();
                                                            _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                            _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                            _newPickSer.Tus_bin = _ser.Tus_bin;
                                                            _newPickSer.Tus_com = _ser.Tus_com;
                                                            _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                            _newPickSer.Tus_cre_dt = DateTime.Now;
                                                            _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                            _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                            _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                            // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                            _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                            _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                            _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                            _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                            _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                            _newPickSer.Tus_loc = _ser.Tus_loc;
                                                            _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                            _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                            _newPickSer.Tus_ser_1 = "N/A";//
                                                            _newPickSer.Tus_ser_2 = "N/A";//
                                                            _newPickSer.Tus_ser_3 = "N/A";//
                                                            _newPickSer.Tus_ser_4 = "N/A";//

                                                            _newPickSer.Tus_qty = 1;
                                                            #region Genrate Ser ID
                                                            InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                            {
                                                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                                Ins_itm_line = _batch.Inb_itm_line,
                                                                Ins_batch_line = _batch.Inb_batch_line
                                                            }).FirstOrDefault();
                                                            if (_inSerAodOutNotRes != null)
                                                            {
                                                                _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                                #region Make grn Data 11 Oct 2016
                                                                _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
                                                                _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
                                                                _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
                                                                _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
                                                                _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
                                                                _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
                                                                _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
                                                                _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
                                                                _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
                                                                _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                            }
                                                            #endregion
                                                            _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                            _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                            _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                            _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                            _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                            _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                            {
                                                                _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                            {
                                                                decimal _actRate = 0;
                                                                decimal _TmpSActRt = 0;
                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                if (_dt != null)
                                                                {
                                                                    if (_dt.Rows.Count > 0)
                                                                    {
                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                    }
                                                                }
                                                                _newPickSer.Tus_unit_cost = _actRate;
                                                                _newPickSer.Tus_unit_price = _actRate;
                                                                _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                            _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                            _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                            Int32 _serLine = 0;
                                                            if (_newRepTempPickSer.Count > 0)
                                                            {
                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                if (v != null)
                                                                { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                            }
                                                            _newPickSer.Tus_ser_line = _serLine + 1;
                                                            _newRepTempPickSer.Add(_ser);
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                #region WitSerial id not in int_ser
                                if (_withSerIdList.Count > 0)
                                {
                                    foreach (var _serId in _withSerIdList)
                                    {
                                        foreach (var _batch in _batchList)
                                        {
                                            if (!_serId.TmpSerPick)
                                            {
                                                if (_serId.Tus_itm_cd == _batch.Inb_itm_cd && _serId.Tus_itm_stus == _batch.Inb_itm_stus && _serId.Tus_qty <= _batch.Itb_bal_qty1)
                                                {
                                                    _serId.Tus_doc_no = _batch.Inb_doc_no;
                                                    _serId.Tus_itm_line = _batch.Inb_itm_line;
                                                    _serId.Tus_batch_line = _batch.Inb_batch_line;
                                                    _serId.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _serId.Tus_unit_price = _batch.Inb_unit_price;
                                                    _serId.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                    _serId.Tus_batch_no = _batch.Inb_batch_no;
                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                    {
                                                        _serId.Tus_res_no = _batch.Inb_res_no;
                                                        _serId.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    #region Make grn Data 11 Oct 2016
                                                    InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                    if (_invHdr != null)
                                                    {
                                                        _serId.Tus_orig_grncom = _invHdr.Ith_com;
                                                        _serId.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                        _serId.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                        _serId.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                        _serId.Tus_exist_grncom = _invHdr.Ith_com;
                                                        _serId.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                        _serId.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                        _serId.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                    }
                                                    #endregion
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _serId.Tus_unit_cost = _actRate;
                                                        _serId.Tus_unit_price = _actRate;
                                                        _serId.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _serId.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        // _serId.Tus_job_no = _batch.Inb_job_no;
                                                        // _serId.Tus_job_line = _batch.Inb_job_line;
                                                        // _serId.Tus_res_no = _batch.Inb_res_no;
                                                        //_serId.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _serId.Tus_qty;
                                                    _serId.Tus_tmp_qty_to_pick = _serId.Tus_tmp_qty_to_pick - _serId.Tus_qty;
                                                    _serId.TmpSerPick = _serId.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _serId.Tus_doc_no && c.Tus_itm_line == _serId.Tus_itm_line && c.Tus_batch_line == _serId.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _serId.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_serId);
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                                #region Without Serial id
                                if (_withotSerIdList.Count > 0)
                                {
                                    //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                    foreach (var _ser in _withotSerIdList)
                                    {
                                        foreach (var _batch in _batchList)
                                        {
                                            if (!_ser.TmpSerPick)
                                            {
                                                if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                                {
                                                    MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                    if (_mstItem.Mi_is_ser1 != 0)
                                                    {
                                                        _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                        _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                        _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                        _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                        _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                        _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                        {
                                                            _ser.Tus_res_no = _batch.Inb_res_no;
                                                            _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _ser.Tus_unit_cost = _actRate;
                                                            _ser.Tus_unit_price = _actRate;
                                                            _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            // _ser.Tus_job_no = _batch.Inb_job_no;
                                                            // _ser.Tus_job_line = _batch.Inb_job_line;
                                                            // _ser.Tus_res_no = _batch.Inb_res_no;
                                                            // _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _ser.Tus_ser_line = _serLine + 1;
                                                        #region Make grn Data 11 Oct 2016
                                                        InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                        if (_invHdr != null)
                                                        {
                                                            _ser.Tus_orig_grncom = _invHdr.Ith_com;
                                                            _ser.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                            _ser.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                            _ser.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                            _ser.Tus_exist_grncom = _invHdr.Ith_com;
                                                            _ser.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                            _ser.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                            _ser.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                        }
                                                        #endregion
                                                        _newRepTempPickSer.Add(_ser);
                                                    }
                                                    else
                                                    {
                                                        #region Equal Or Less Balance Qty
                                                        for (int i = 0; i < _ser.Tus_qty; i++)
                                                        {
                                                            _newPickSer = new ReptPickSerials();
                                                            _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                            _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                            _newPickSer.Tus_bin = _ser.Tus_bin;
                                                            _newPickSer.Tus_com = _ser.Tus_com;
                                                            _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                            _newPickSer.Tus_cre_dt = DateTime.Now;
                                                            _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                            _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                            _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                            //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                            _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                            _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                            _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                            _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                            _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                            _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                            _newPickSer.Tus_loc = _ser.Tus_loc;
                                                            _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                            _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                            _newPickSer.Tus_ser_1 = "N/A";//
                                                            _newPickSer.Tus_ser_2 = "N/A";//
                                                            _newPickSer.Tus_ser_3 = "N/A";//
                                                            _newPickSer.Tus_ser_4 = "N/A";//

                                                            _newPickSer.Tus_qty = 1;
                                                            #region Genrate Ser ID
                                                            InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                            {
                                                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                                Ins_itm_line = _batch.Inb_itm_line,
                                                                Ins_batch_line = _batch.Inb_batch_line
                                                            }).FirstOrDefault();
                                                            if (_inSerAodOutNotRes != null)
                                                            {
                                                                _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                            }
                                                            else
                                                            {
                                                                _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                            }
                                                            #endregion
                                                            _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                            _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                            _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                            _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
                                                            _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                            _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                            {
                                                                _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                            {
                                                                decimal _actRate = 0;
                                                                decimal _TmpSActRt = 0;
                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                if (_dt != null)
                                                                {
                                                                    if (_dt.Rows.Count > 0)
                                                                    {
                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                    }
                                                                }
                                                                _newPickSer.Tus_unit_cost = _actRate;
                                                                _newPickSer.Tus_unit_price = _actRate;
                                                                _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                // _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                            _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                            _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                            Int32 _serLine = 0;
                                                            if (_newRepTempPickSer.Count > 0)
                                                            {
                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
                                                                    && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                if (v != null)
                                                                {
                                                                    if (v.Count > 0)
                                                                    {
                                                                        _serLine = v.Max(c => c.Tus_ser_line);
                                                                    }
                                                                }
                                                            }
                                                            _newPickSer.Tus_ser_line = _serLine + 1;
                                                            #region Make grn Data 11 Oct 2016
                                                            InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                            if (_invHdr != null)
                                                            {
                                                                _newPickSer.Tus_orig_grncom = _invHdr.Ith_com;
                                                                _newPickSer.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                _newPickSer.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                _newPickSer.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                _newPickSer.Tus_exist_grncom = _invHdr.Ith_com;
                                                                _newPickSer.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                _newPickSer.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                _newPickSer.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                            }
                                                            #endregion
                                                            _newRepTempPickSer.Add(_newPickSer);
                                                        }
                                                        #endregion
                                                    }
                                                }
                                                else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                                {
                                                    MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                    if (_mstItem.Mi_is_ser1 != 0)
                                                    {
                                                        _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                        _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                        _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                        _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                        _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                        _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                        {
                                                            _ser.Tus_res_no = _batch.Inb_res_no;
                                                            _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _ser.Tus_unit_cost = _actRate;
                                                            _ser.Tus_unit_price = _actRate;
                                                            _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            //_ser.Tus_job_no = _batch.Inb_job_no;
                                                            //_ser.Tus_job_line = _batch.Inb_job_line;
                                                            //_ser.Tus_res_no = _batch.Inb_res_no;
                                                            //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _ser.Tus_ser_line = _serLine + 1;
                                                        #region Make grn Data 11 Oct 2016
                                                        InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                        if (_invHdr != null)
                                                        {
                                                            _ser.Tus_orig_grncom = _invHdr.Ith_com;
                                                            _ser.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                            _ser.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                            _ser.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                            _ser.Tus_exist_grncom = _invHdr.Ith_com;
                                                            _ser.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                            _ser.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                            _ser.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                        }
                                                        #endregion
                                                        _newRepTempPickSer.Add(_ser);
                                                    }
                                                    else
                                                    {
                                                        #region Grater Than Batch Qty
                                                        int sr = 0;

                                                        //while(int i =int(_batch.Itb_bal_qty1); i < _batch.Itb_bal_qty1; i--)
                                                        while (_batch.Itb_bal_qty1 > 0)
                                                        {
                                                            _newPickSer = new ReptPickSerials();
                                                            _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                            _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                            _newPickSer.Tus_bin = _ser.Tus_bin;
                                                            _newPickSer.Tus_com = _ser.Tus_com;
                                                            _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                            _newPickSer.Tus_cre_dt = DateTime.Now;
                                                            _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                            _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                            _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                            _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                            // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                            _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                            _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                            _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                            _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                            _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                            _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                            _newPickSer.Tus_loc = _ser.Tus_loc;
                                                            _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                            _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                            _newPickSer.Tus_ser_1 = "N/A";//
                                                            _newPickSer.Tus_ser_2 = "N/A";//
                                                            _newPickSer.Tus_ser_3 = "N/A";//
                                                            _newPickSer.Tus_ser_4 = "N/A";//

                                                            _newPickSer.Tus_qty = 1;
                                                            #region Genrate Ser ID
                                                            InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                            {
                                                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                                Ins_itm_line = _batch.Inb_itm_line,
                                                                Ins_batch_line = _batch.Inb_batch_line
                                                            }).FirstOrDefault();
                                                            if (_inSerAodOutNotRes != null)
                                                            {
                                                                _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                            }
                                                            else
                                                            {
                                                                _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                            }
                                                            #endregion
                                                            _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                            _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                            _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                            _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                            _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                            _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                            {
                                                                _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                            {
                                                                decimal _actRate = 0;
                                                                decimal _TmpSActRt = 0;
                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                if (_dt != null)
                                                                {
                                                                    if (_dt.Rows.Count > 0)
                                                                    {
                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                    }
                                                                }
                                                                _newPickSer.Tus_unit_cost = _actRate;
                                                                _newPickSer.Tus_unit_price = _actRate;
                                                                _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                            }
                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                            _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                            _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                            Int32 _serLine = 0;
                                                            if (_newRepTempPickSer.Count > 0)
                                                            {
                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                if (v != null)
                                                                { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                            }
                                                            _newPickSer.Tus_ser_line = _serLine + 1;
                                                            #region Make grn Data 11 Oct 2016
                                                            InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                            if (_invHdr != null)
                                                            {
                                                                _newPickSer.Tus_orig_grncom = _invHdr.Ith_com;
                                                                _newPickSer.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                _newPickSer.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                _newPickSer.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                _newPickSer.Tus_exist_grncom = _invHdr.Ith_com;
                                                                _newPickSer.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                _newPickSer.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                _newPickSer.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                            }
                                                            #endregion
                                                            _newRepTempPickSer.Add(_newPickSer);
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                        }
                        else
                        {
                            #region Withserial not dfs
                            if (_withSerIdList.Count > 0)
                            {
                                List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                                {
                                    Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                    Ins_com = _inventoryMovementHeader.Ith_oth_com,
                                    Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                                });
                                foreach (var _withSer in _withSerIdList)
                                {
                                    foreach (var _intSer in _intSerList)
                                    {
                                        if (_withSer.TmpSerPick)
                                        {
                                            continue;
                                        }
                                        if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
                                        {
                                            _withSer.Tus_doc_no = _intSer.Ins_doc_no;
                                            _withSer.Tus_itm_line = _intSer.Ins_itm_line;
                                            _withSer.Tus_batch_line = _intSer.Ins_batch_line;
                                            _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
                                            _withSer.Tus_unit_price = _intSer.Ins_unit_price;
                                            _withSer.Tus_ser_line = _intSer.Ins_ser_line;
                                            decimal _actRate = 0;
                                            var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                                            {
                                                Inb_doc_no = _intSer.Ins_doc_no,
                                                Inb_itm_line = _intSer.Ins_itm_line,
                                                Inb_batch_line = _intSer.Ins_batch_line
                                            }).FirstOrDefault();
                                            if (_tmpBatchData != null)
                                            {
                                                _withSer.Tus_unit_cost = _tmpBatchData.Inb_unit_cost; //If out DFS take cost from cost sheet
                                                _withSer.Tus_unit_price = _tmpBatchData.Inb_unit_price;
                                                _withSer.Tus_new_itm_cd = _tmpBatchData.Inb_base_itmcd;
                                                _withSer.Tus_batch_no = _tmpBatchData.Inb_batch_no;
                                                if (!string.IsNullOrEmpty(_tmpBatchData.Inb_res_no) && _tmpBatchData.Inb_res_no != "N/A")
                                                {
                                                    _withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
                                                    _withSer.Tus_res_line = _tmpBatchData.Inb_res_lineno;
                                                }
                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                {
                                                    decimal _TmpSActRt = 0;
                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                                    if (_dt != null)
                                                    {
                                                        if (_dt.Rows.Count > 0)
                                                        {
                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                        }
                                                    }
                                                    _withSer.Tus_unit_cost = _actRate;
                                                    _withSer.Tus_unit_price = _actRate;
                                                    _withSer.Tus_base_doc_no = _tmpBatchData.Inb_base_ref_no;
                                                    _withSer.Tus_base_itm_line = _tmpBatchData.Inb_base_refline;
                                                }
                                            }
                                            #region Make grn Data 11 Oct 2016
                                            _withSer.Tus_warr_no = _intSer.Ins_warr_no;
                                            _withSer.Tus_warr_period = _intSer.Ins_warr_period;
                                            _withSer.Tus_orig_grncom = _intSer.Ins_orig_grncom;
                                            _withSer.Tus_orig_grnno = _intSer.Ins_orig_grnno;
                                            _withSer.Tus_orig_grndt = _intSer.Ins_orig_grndt;
                                            _withSer.Tus_orig_supp = _intSer.Ins_orig_supp;
                                            _withSer.Tus_exist_grncom = _intSer.Ins_exist_grncom;
                                            _withSer.Tus_exist_grnno = _intSer.Ins_exist_grnno;
                                            _withSer.Tus_exist_supp = _intSer.Ins_exist_supp;
                                            _withSer.Tus_exist_grndt = _intSer.Ins_exist_grndt;
                                            #endregion
                                            _withSer.TmpSerPick = true;
                                        }
                                    }
                                    if (_withSer.TmpSerPick)
                                    {
                                        _newRepTempPickSer.Add(_withSer);
                                    }
                                }
                            }
                            #endregion

                            #region Without Serial
                            //if (_withotSerIdList.Count > 0 && !_serPicByPda)
                            if (_withotSerIdList.Count > 0)
                            {
                                List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                _batchList = _batchList.OrderBy(x => x.Inb_itm_cd).ThenBy(x => x.Inb_itm_line).ThenBy(x => x.Inb_batch_line).ToList();
                                _withotSerIdList = _withotSerIdList.OrderBy(x => x.Tus_itm_cd).ThenBy(x => x.Tus_itm_line).ThenBy(x => x.Tus_batch_line).ToList();
                                foreach (var _ser in _withotSerIdList)
                                {
                                    foreach (var _batch in _batchList)
                                    {
                                        if (!_ser.TmpSerPick)
                                        {
                                            if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                            {
                                                #region Equal Or Less Balance Qty
                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                if (_mstItem.Mi_is_ser1 != 0)
                                                {
                                                    #region is ser !=0
                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                    _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                    _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                    {
                                                        _ser.Tus_res_no = _batch.Inb_res_no;
                                                        _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _ser.Tus_unit_cost = _actRate;
                                                        _ser.Tus_unit_price = _actRate;
                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        // _ser.Tus_job_no = _batch.Inb_job_no;
                                                        // _ser.Tus_job_line = _batch.Inb_job_line;
                                                        //_ser.Tus_res_no = _batch.Inb_res_no;
                                                        //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _ser.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_ser);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region loop serial
                                                    for (int i = 0; i < _ser.Tus_qty; i++)
                                                    {
                                                        _newPickSer = new ReptPickSerials();
                                                        _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;

                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                        _newPickSer.Tus_qty = 1;
                                                        #region Genrate Ser ID
                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                        {
                                                            Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                            Ins_batch_line = _batch.Inb_batch_line
                                                        }).FirstOrDefault();
                                                        if (_inSerAodOutNotRes != null)
                                                        {
                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                            #region Make grn Data 11 Oct 2016
                                                            _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
                                                            _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
                                                            _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
                                                            _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
                                                            _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
                                                            _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
                                                            _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
                                                            _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
                                                            _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
                                                            _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        }
                                                        #endregion
                                                        // _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                        _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                        {
                                                            _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                            _newPickSer.Tus_unit_price = _actRate;
                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                            //_newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                            //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                        _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                        _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            {
                                                                if (v.Count > 0)
                                                                {
                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                }
                                                            }
                                                        }
                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_newPickSer);
                                                    }
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                            else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1 && _batch.Itb_bal_qty1 > 0)
                                            {
                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                if (_mstItem.Mi_is_ser1 != 0)
                                                {
                                                    #region Mi_is_ser1 equql 0
                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                    _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                    _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                    {
                                                        _ser.Tus_res_no = _batch.Inb_res_no;
                                                        _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                    {
                                                        decimal _actRate = 0;
                                                        decimal _TmpSActRt = 0;
                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                        if (_dt != null)
                                                        {
                                                            if (_dt.Rows.Count > 0)
                                                            {
                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                            }
                                                        }
                                                        _ser.Tus_unit_cost = _actRate;
                                                        _ser.Tus_unit_price = _actRate;
                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                        //_ser.Tus_job_no = _batch.Inb_job_no;
                                                        //_ser.Tus_job_line = _batch.Inb_job_line;
                                                        //_ser.Tus_res_no = _batch.Inb_res_no;
                                                        //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                    }
                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                    Int32 _serLine = 0;
                                                    if (_newRepTempPickSer.Count > 0)
                                                    {
                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                        if (v != null)
                                                        {
                                                            if (v.Count > 0)
                                                            {
                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                            }
                                                        }
                                                    }
                                                    _ser.Tus_ser_line = _serLine + 1;
                                                    _newRepTempPickSer.Add(_ser);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region loop serial
                                                    //for (int i = 0; i < _batch.Itb_bal_qty1; i++)
                                                    //{
                                                    while (_batch.Itb_bal_qty1 > 0)
                                                    {
                                                        _newPickSer = new ReptPickSerials();
                                                        _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;

                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                        _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                        _newPickSer.Tus_qty = 1;
                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                        _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                        {
                                                            _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        #region Genrate Ser ID
                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                        {
                                                            Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                            Ins_batch_line = _batch.Inb_batch_line
                                                        }).FirstOrDefault();
                                                        if (_inSerAodOutNotRes != null)
                                                        {
                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                            #region Make grn Data 11 Oct 2016
                                                            _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
                                                            _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
                                                            _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
                                                            _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
                                                            _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
                                                            _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
                                                            _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
                                                            _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
                                                            _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
                                                            _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                        }
                                                        #endregion
                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                        {
                                                            decimal _actRate = 0;
                                                            decimal _TmpSActRt = 0;
                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                            if (_dt != null)
                                                            {
                                                                if (_dt.Rows.Count > 0)
                                                                {
                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                }
                                                            }
                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                            _newPickSer.Tus_unit_price = _actRate;
                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;

                                                            //_newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                            // _newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                            //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                        }
                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                        _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                        //_ser.Tus_qty = _ser.Tus_qty - _newPickSer.Tus_qty;
                                                        Int32 _serLine = 0;
                                                        if (_newRepTempPickSer.Count > 0)
                                                        {
                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                            if (v != null)
                                                            { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                        }
                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                        _newRepTempPickSer.Add(_newPickSer);
                                                    }
                                                    #endregion
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    //  _inventoryDAL.TransactionCommit();
                    #endregion
                    decimal _aodInPickQty = 0;
                    #region SetVariable add by lakshan 13 Sep 2016
                    List<ReptPickSerials> _reptPickSerials = new List<ReptPickSerials>();
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        decimal _FromSerCount = _repPickSerList.Sum(c => c.Tus_qty); decimal _ToSerCount = _newRepTempPickSer.Sum(c => c.Tus_qty);
                        //string s1 = "";
                        //string s2 = "";
                        //foreach (var item in _repPickSerList)
                        //{
                        //    s1 = s1 + "," + item.Tus_ser_id.ToString();
                        //}
                        //foreach (var item in _newRepTempPickSer)
                        //{
                        //    s2 = s2 +","+ item.Tus_ser_id.ToString();
                        //}
                        if (_FromSerCount != _ToSerCount)
                        {
                            effect = -1;
                            _docNo = "Serial count mismatch !";
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();

                            _inventoryRepDAL.ConnectionClose();
                            _inventoryDAL.ConnectionClose();
                            _ScmCommonDAL.ConnectionClose();
                            return effect;
                        }
                        else
                        {
                            _reptPickSerials = _newRepTempPickSer;
                        }
                    }
                    else
                    {
                        _reptPickSerials = _repPickSerList;
                    }
                    #endregion

                    #region Validation check duplicate serial(s)

                    MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    bool _isCheckLocAge = false;
                    DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
                    if (_dtloctp.Rows.Count > 0)
                    {
                        if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;
                    }

                    StringBuilder _build = new StringBuilder();
                    foreach (ReptPickSerials _srl in _reptPickSerials)
                    {
                        DataTable _byid = _inventoryDAL.CheckSerialByID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_ser_id);
                        DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                        if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));

                        MasterItem _mIt = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, _srl.Tus_itm_cd);
                        if (_mIt.Mi_itm_stus.Contains("R") && _inventoryMovementHeader.Ith_gen_frm != "SCMWEB")//Add by lakshan as per the dharshana 13Feb2018
                        {
                            if (_mIt.Mi_fgitm_cd != "N/A")
                            {
                                if (_unAssembaleLst == null) _unAssembaleLst = new List<ReptPickSerials>();
                                _srl.Tus_new_status = _mIt.Mi_fgitm_cd;
                                DataTable _fcost = _inventoryDAL.GetFinishGoodCost(_mIt.Mi_fgitm_cd);
                                decimal _cost = 0;
                                if (_fcost != null && _fcost.Rows.Count > 0) _cost = _fcost.Rows[0].Field<decimal>("ASM_COST");
                                _srl.Tus_serial_id = Convert.ToString(_cost);
                                _unAssembaleLst.Add(_srl);
                            }
                        }

                        if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                        {
                            if (_isCheckLocAge == true)
                            {
                                if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                                {
                                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                    _srl.Tus_isownmrn = 0;
                                }
                                //Check MRN
                                //DataTable _dtLastAOD = _inventoryDAL.GetPerviousAODInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_ser_id);
                                //if (_dtLastAOD.Rows.Count > 0)
                                //{
                                //    _srl.Tus_isownmrn = Convert.ToInt32(_dtLastAOD.Rows[0]["ITS_ISOWNMRN"].ToString());
                                //    break;
                                //}
                                //else
                                //{
                                //    _srl.Tus_isownmrn = 0;
                                //}

                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                                {
                                    if (_srl.Tus_ageloc != _inventoryMovementHeader.Ith_loc)
                                    {
                                        _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                        //Check MRN
                                        if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                        { _srl.Tus_isownmrn = 1; }
                                        else
                                        { _srl.Tus_isownmrn = 0; }
                                    }
                                }
                                else
                                {
                                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                    //Check MRN
                                    if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                    { _srl.Tus_isownmrn = 1; }
                                    else
                                    { _srl.Tus_isownmrn = 0; }
                                }
                            }
                        }
                        else
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            _srl.Tus_isownmrn = 0;
                        }
                    }
                    if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                    {
                        _docNo = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString(); effect = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();

                        _inventoryRepDAL.ConnectionClose();
                        _inventoryDAL.ConnectionClose();
                        _ScmCommonDAL.ConnectionClose();
                        return effect;
                    }
                    #endregion
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        if (_reptPickSerials.Count < 1)
                        {
                            effect = -1;
                            _docNo = "Serial data not found !";
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();

                            _inventoryRepDAL.ConnectionClose();
                            _inventoryDAL.ConnectionClose();
                            _ScmCommonDAL.ConnectionClose();

                            return effect;
                        }
                        else
                        {
                            _aodInPickQty = _reptPickSerials.Sum(c => c.Tus_qty);
                            //if (_inventoryMovementHeader.Tmp_is_kd_operation == true)
                            //{
                            //    _reptPickSerials.ToList().ForEach(c => c.Tus_itm_stus = "KDINS");
                            //}
                        }
                    }

                    //kapila 9/11/2016
                    if (_inventoryMovementHeader.Ith_acc_no != "SCMWEB")
                    {
                        //MasterLocation _mstAod_OutLoc = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);
                        //REST BY sACHIN 2018/09/04

                        MasterLocation _mstAod_OutLoc = _generalDAL.GetallLocationInfor(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);
                        if (_mstAod_OutLoc==null)
                        {
                            _docNo = "Location not fount " + _inventoryMovementHeader.Ith_oth_loc;
                            effect = -1;
                            throw new System.ArgumentException("Location not Found ", _inventoryMovementHeader.Ith_oth_loc);
                        }
                        if (_mstAod_OutLoc.Ml_cate_1 == "DFS")
                        {
                            decimal _actRate = 0;
                            decimal _TmpSActRt = 0;

                            List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                            {
                                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                                Ins_com = _inventoryMovementHeader.Ith_oth_com,
                                Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                            });

                            foreach (var item in _repPickSerList)
                            {
                                foreach (var _intSer in _intSerList)
                                {
                                    if (_intSer.Ins_ser_id == item.Tus_ser_id)      //kapila 28/4/2017
                                    {
                                        var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                                        {
                                            Inb_doc_no = _intSer.Ins_doc_no,
                                            Inb_itm_line = _intSer.Ins_itm_line,
                                            Inb_batch_line = _intSer.Ins_batch_line
                                        }).FirstOrDefault();

                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                        if (_dt != null)
                                        {
                                            if (_dt.Rows.Count > 0)
                                            {
                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                            }
                                        }
                                        item.Tus_unit_cost = _actRate;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (effect != -1)
                    {
                        effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                        //subodana 2018-jun-08
                        if (effect == -2)
                        {
                            _docNo  = "Dupplicate Serial!!!";
                            effect = -1;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            return effect;
                        }
                        effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                        UpdateRefDocumentSerial(_reptPickSerials, _inventoryMovementHeader.Ith_oth_docno);
                    }
                    bool _resUpdateErr = false;
                    string _errro = "";
                    //kapila comented on 5/3/2017
                    // if (effect == 1 && _inventoryMovementHeader.Ith_acc_no == "SCMWEB" && _inventoryMovementHeader.TMP_IS_RES_UPDATE)
                    if (effect == 1 && _inventoryMovementHeader.TMP_IS_RES_UPDATE)
                    {
                        #region Reservation Carry forward 17 Oct 2016
                        MasterLocation _mstInLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                        //if (_mstInLoc.Ml_loc_tp == "WH")
                        //{
                        #region location tp walidation
                        InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _inventoryMovementHeader.Ith_oth_docno, Ith_com = _inventoryMovementHeader.Ith_oth_com }).FirstOrDefault();
                        if (_invHdr != null)
                        {
                            if (_invHdr.Ith_doc_tp == "AOD" && _invHdr.Ith_direct == false)
                            {
                                List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_invHdr.Ith_doc_no);
                                InventoryBatchN _tmpBatchObj = new InventoryBatchN();
                                INR_RES_LOG _inrResLog = new INR_RES_LOG();
                                if (_batchList != null)
                                {
                                    if (_batchList.Count > 0)
                                    {
                                        var _tblocainv =
                                        from _pickSerials in _reptPickSerials
                                        where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no && _pickSerials.Tus_com == _pickSerials.Tus_com && _pickSerials.Tus_loc == _pickSerials.Tus_loc
                                        group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                                        select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };
                                        foreach (var locaitems in _tblocainv)
                                        {
                                            _tmpBatchObj = _batchList.Where(c => c.Inb_itm_cd == locaitems.itemcode && c.Inb_itm_stus == locaitems.itemstatus).FirstOrDefault();
                                            if (_tmpBatchObj != null)
                                            {
                                                if (!string.IsNullOrEmpty(_tmpBatchObj.Inb_res_no) && _tmpBatchObj.Inb_res_no != "N/A")
                                                {
                                                    bool _isResUpdate = true;
                                                    #region  remove reservation update customer is N/A or null
                                                    if (_mstInLoc != null)
                                                    {
                                                        //if 1 not going inside added by nuwan advaiced by darhsna 2019/Feb/11
                                                        Int32 chklocty = _inventoryDAL.checkLocationWHType(_mstInLoc.Ml_loc_tp);
                                                        //if (_mstInLoc.Ml_loc_tp != "WH")
                                                        if (chklocty==0)
                                                        {
                                                            INR_RES _tmpResObj = new INR_RES() { IRS_COM = _tmpBatchObj.Inb_com, IRS_RES_NO = _tmpBatchObj.Inb_res_no };
                                                            INR_RES _resHdrObj = _inventoryDAL.GET_INR_RES_DATA(_tmpResObj).FirstOrDefault();
                                                            if (_resHdrObj != null)
                                                            {
                                                                if (string.IsNullOrEmpty(_resHdrObj.IRS_CUST_CD) || _resHdrObj.IRS_CUST_CD == "N/A")
                                                                {
                                                                    _isResUpdate = false;
                                                                    if (string.IsNullOrEmpty(_resHdrObj.IRS_CUST_CD))
                                                                    {
                                                                        _isResUpdate = false;
                                                                    }
                                                                    if (_resHdrObj.IRS_CUST_CD == "N/A")
                                                                    {
                                                                        _isResUpdate = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion
                                                    if (_isResUpdate)
                                                    {
                                                        #region res update
                                                        //------------------
                                                        List<INR_RES_LOG> _inrResLogList = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(
                                                        new INR_RES_LOG()
                                                        {
                                                            IRL_RES_NO = _tmpBatchObj.Inb_res_no,
                                                            IRL_ITM_CD = locaitems.itemcode,
                                                            IRL_ITM_STUS = locaitems.itemstatus,
                                                            IRL_CURT_COM = "GIT",
                                                            IRL_CURT_LOC = "GIT",
                                                            IRL_CURT_DOC_NO = _inventoryMovementHeader.Ith_oth_docno,
                                                            IRL_CURT_DOC_TP = "AOD-OUT",
                                                            IRL_ACT = 1,
                                                        });
                                                        if (_inrResLogList != null)
                                                        {
                                                            if (_inrResLogList.Count > 0)
                                                            {
                                                                decimal _toResQty = locaitems.itemqty;
                                                                while (_toResQty > 0)
                                                                {
                                                                    decimal _reAvaCount = 0;
                                                                    if (_inrResLogList.Count > 0)
                                                                    {
                                                                        _reAvaCount = _inrResLogList.Sum(c => c.IRL_RES_BQTY);
                                                                    }
                                                                    if (_reAvaCount <= 0)
                                                                    {
                                                                        break;
                                                                    }
                                                                    foreach (var _inrResLogItm in _inrResLogList)
                                                                    {
                                                                        #region reser
                                                                        if (_toResQty > 0)
                                                                        {
                                                                            if (_inrResLogItm.IRL_RES_BQTY >= _toResQty)
                                                                            {
                                                                                #region aod in qty equal res qty
                                                                                int _res = _inventoryDAL.UpdateLocationRes(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, locaitems.itemcode,
                                                                                locaitems.itemstatus, _inventoryMovementHeader.Ith_cre_by, _toResQty);

                                                                                if (_res > 0)
                                                                                {
                                                                                    #region A
                                                                                    _errro = "";
                                                                                    _res = 0;
                                                                                    _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                                                    {
                                                                                        IRL_CURT_COM = _inventoryMovementHeader.Ith_oth_com,
                                                                                        IRL_CURT_LOC = _inventoryMovementHeader.Ith_oth_loc,
                                                                                        IRL_ORIG_DOC_TP = "AOD-OUT",
                                                                                        IRL_ORIG_DOC_NO = _inventoryMovementHeader.Ith_oth_docno,
                                                                                        IRL_ORIG_DOC_DT = DateTime.Now,

                                                                                        IRL_CURT_DOC_TP = "AOD-IN",
                                                                                        IRL_CURT_DOC_NO = _docNo,
                                                                                        IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                                                                        IRL_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                        IRL_ITM_CD = locaitems.itemcode,
                                                                                        IRL_ITM_STUS = locaitems.itemstatus,
                                                                                        IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_mod_by,
                                                                                        IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                        IRL_MOD_DT = DateTime.Now,
                                                                                        IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                                                        IRL_CRE_DT = DateTime.Now,
                                                                                        IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                        IRL_RES_QTY = _toResQty,
                                                                                        TMP_AOD_IN_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                        TMP_AOD_IN_COM = _inventoryMovementHeader.Ith_com
                                                                                    }, 0, _inventoryDAL, out _errro);
                                                                                    if (_res > 0)
                                                                                    {
                                                                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                                                        {
                                                                                            IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                                                                            IRL_CURT_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                            IRL_ORIG_DOC_TP = "AOD-IN",
                                                                                            IRL_ORIG_DOC_NO = _docNo,
                                                                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                                                                            IRL_CURT_DOC_TP = "INV",
                                                                                            IRL_CURT_DOC_NO = _tmpBatchObj.Inb_res_no,
                                                                                            IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                                                                            IRL_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                            IRL_ITM_CD = locaitems.itemcode,
                                                                                            IRL_ITM_STUS = locaitems.itemstatus,
                                                                                            IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_mod_by,
                                                                                            IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                            IRL_MOD_DT = DateTime.Now,
                                                                                            IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                                                            IRL_CRE_DT = DateTime.Now,
                                                                                            IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                            IRL_RES_QTY = _toResQty,
                                                                                            TMP_AOD_IN_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                            TMP_AOD_IN_COM = _inventoryMovementHeader.Ith_com
                                                                                        }, 0, _inventoryDAL, out _errro);

                                                                                        if (_res > 0)
                                                                                        {
                                                                                            if (_inventoryMovementHeader.Ith_sub_tp != "EX" &&
                                                                                                _inventoryMovementHeader.Ith_sub_tp != "RE" &&
                                                                                                _inventoryMovementHeader.Ith_sub_tp != "BOI" && _inventoryMovementHeader.Ith_sub_tp != "EXP")
                                                                                            {
                                                                                                decimal _minBal = _toResQty * -1;
                                                                                                _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                                                                                {
                                                                                                    IRD_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                                    IRD_ITM_CD = locaitems.itemcode,
                                                                                                    IRD_ITM_STUS = locaitems.itemstatus,
                                                                                                    IRD_RES_BQTY = _minBal
                                                                                                });
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (_res <= 0)
                                                                                    {
                                                                                        _resUpdateErr = true;
                                                                                    }
                                                                                    _inventoryDAL.UPDATE_INR_RES_AOD_IN(new INR_RES()
                                                                                    {
                                                                                        IRS_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                        IRS_ANAL_2 = _inventoryMovementHeader.Ith_loc,
                                                                                        IRS_STUS = "A"
                                                                                    });
                                                                                    #endregion
                                                                                }
                                                                                _toResQty = _toResQty - _toResQty;
                                                                                _inrResLogItm.IRL_RES_BQTY = _inrResLogItm.IRL_RES_BQTY - _toResQty;
                                                                                #endregion
                                                                            }
                                                                            else
                                                                            {
                                                                                #region res bal less than in qty
                                                                                int _res = _inventoryDAL.UpdateLocationRes(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, locaitems.itemcode,
                                                                                locaitems.itemstatus, _inventoryMovementHeader.Ith_cre_by, _inrResLogItm.IRL_RES_BQTY);

                                                                                if (_res > 0)
                                                                                {
                                                                                    #region r
                                                                                    _res = 0;
                                                                                    _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                                                    {
                                                                                        IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                                                                        IRL_CURT_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                        IRL_ORIG_DOC_TP = "AOD-OUT",
                                                                                        IRL_ORIG_DOC_NO = _inventoryMovementHeader.Ith_oth_docno,
                                                                                        IRL_ORIG_DOC_DT = DateTime.Now,

                                                                                        IRL_CURT_DOC_TP = "AOD-IN",
                                                                                        IRL_CURT_DOC_NO = _docNo,
                                                                                        IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                                                                        IRL_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                        IRL_ITM_CD = locaitems.itemcode,
                                                                                        IRL_ITM_STUS = locaitems.itemstatus,
                                                                                        IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_mod_by,
                                                                                        IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                        IRL_MOD_DT = DateTime.Now,
                                                                                        IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                                                        IRL_CRE_DT = DateTime.Now,
                                                                                        IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                        IRL_RES_QTY = _inrResLogItm.IRL_RES_BQTY,
                                                                                        TMP_AOD_IN_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                        TMP_AOD_IN_COM = _inventoryMovementHeader.Ith_com
                                                                                    }, 0, _inventoryDAL, out _errro);
                                                                                    if (_res > 0)
                                                                                    {
                                                                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                                                        {
                                                                                            IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                                                                            IRL_CURT_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                            IRL_ORIG_DOC_TP = "AOD-IN",
                                                                                            IRL_ORIG_DOC_NO = _docNo,
                                                                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                                                                            IRL_CURT_DOC_TP = "INV",
                                                                                            IRL_CURT_DOC_NO = _tmpBatchObj.Inb_res_no,
                                                                                            IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                                                                            IRL_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                            IRL_ITM_CD = locaitems.itemcode,
                                                                                            IRL_ITM_STUS = locaitems.itemstatus,
                                                                                            IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_mod_by,
                                                                                            IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                            IRL_MOD_DT = DateTime.Now,
                                                                                            IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                                                            IRL_CRE_DT = DateTime.Now,
                                                                                            IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                                                            IRL_RES_QTY = _inrResLogItm.IRL_RES_BQTY,
                                                                                            TMP_AOD_IN_LOC = _inventoryMovementHeader.Ith_loc,
                                                                                            TMP_AOD_IN_COM = _inventoryMovementHeader.Ith_com
                                                                                        }, 0, _inventoryDAL, out _errro);
                                                                                        if (_res > 0)
                                                                                        {
                                                                                            //_res = _inventoryDAL.UPDATE_INR_RES_DET_BAL(new INR_RES_DET()
                                                                                            //{
                                                                                            //    IRD_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                            //    IRD_ITM_CD = locaitems.itemcode,
                                                                                            //    IRD_ITM_STUS = locaitems.itemstatus,
                                                                                            //    IRD_RES_BQTY = _inrResLog.IRL_RES_QTY
                                                                                            //});
                                                                                            if (_inventoryMovementHeader.Ith_sub_tp != "EX" &&
                                                                                                _inventoryMovementHeader.Ith_sub_tp != "RE" &&
                                                                                                _inventoryMovementHeader.Ith_sub_tp != "BOI" && _inventoryMovementHeader.Ith_sub_tp != "EXP")
                                                                                            {
                                                                                                decimal _minBal = _inrResLogItm.IRL_RES_BQTY * -1;
                                                                                                _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                                                                                {
                                                                                                    IRD_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                                    IRD_ITM_CD = locaitems.itemcode,
                                                                                                    IRD_ITM_STUS = locaitems.itemstatus,
                                                                                                    IRD_RES_BQTY = _minBal
                                                                                                });
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (_res <= 0)
                                                                                    {
                                                                                        _resUpdateErr = true;
                                                                                    }

                                                                                    _inventoryDAL.UPDATE_INR_RES_AOD_IN(new INR_RES()
                                                                                    {
                                                                                        IRS_RES_NO = _tmpBatchObj.Inb_res_no,
                                                                                        IRS_ANAL_2 = _inventoryMovementHeader.Ith_loc,
                                                                                        IRS_STUS = "A"
                                                                                    });
                                                                                    #endregion
                                                                                }
                                                                                _toResQty = _toResQty - _inrResLogItm.IRL_RES_BQTY;
                                                                                _inrResLogItm.IRL_RES_BQTY = _inrResLogItm.IRL_RES_BQTY - _inrResLogItm.IRL_RES_BQTY;

                                                                                #endregion
                                                                            }
                                                                        }
                                                                        #endregion
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        //}
                        #endregion
                    }
                    if (effect == 1)
                    {
                        #region MyRegion
                        if (_unAssembaleLst != null)
                        {
                            MasterAutoNumber _autonoMinus = new MasterAutoNumber();
                            _autonoMinus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                            _autonoMinus.Aut_cate_tp = "LOC"; _autonoMinus.Aut_direction = null; _autonoMinus.Aut_modify_dt = null; _autonoMinus.Aut_moduleid = "ADJ"; _autonoMinus.Aut_number = 5; _autonoMinus.Aut_start_char = "ADJ"; _autonoMinus.Aut_year = null;
                            MasterAutoNumber _autonoPlus = new MasterAutoNumber();
                            _autonoPlus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                            _autonoPlus.Aut_cate_tp = "LOC"; _autonoPlus.Aut_direction = null; _autonoPlus.Aut_modify_dt = null; _autonoPlus.Aut_moduleid = "ADJ"; _autonoPlus.Aut_number = 5; _autonoPlus.Aut_start_char = "ADJ"; _autonoPlus.Aut_year = null;
                            InventoryHeader _hdrMinus = new InventoryHeader();
                            _hdrMinus = _inventoryMovementHeader;
                            _hdrMinus.Ith_acc_no = string.Empty;
                            _hdrMinus.Ith_anal_1 = string.Empty;
                            _hdrMinus.Ith_anal_2 = string.Empty;
                            _hdrMinus.Ith_anal_3 = string.Empty;
                            _hdrMinus.Ith_anal_4 = string.Empty;
                            _hdrMinus.Ith_anal_5 = string.Empty;
                            _hdrMinus.Ith_anal_6 = _inventoryMovementHeader.Ith_seq_no;
                            _hdrMinus.Ith_anal_7 = 0;
                            _hdrMinus.Ith_anal_8 = DateTime.MinValue;
                            _hdrMinus.Ith_anal_9 = DateTime.MinValue;
                            _hdrMinus.Ith_anal_10 = false;
                            _hdrMinus.Ith_anal_11 = false;
                            _hdrMinus.Ith_anal_12 = false;
                            _hdrMinus.Ith_bus_entity = string.Empty;
                            _hdrMinus.Ith_cate_tp = "STUS";
                            _hdrMinus.Ith_com = _inventoryMovementHeader.Ith_com;
                            _hdrMinus.Ith_com_docno = string.Empty;
                            _hdrMinus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrMinus.Ith_cre_when = DateTime.Now;
                            _hdrMinus.Ith_del_add1 = string.Empty;
                            _hdrMinus.Ith_del_add2 = string.Empty;
                            _hdrMinus.Ith_del_code = string.Empty;
                            _hdrMinus.Ith_del_party = string.Empty;
                            _hdrMinus.Ith_del_town = string.Empty;
                            _hdrMinus.Ith_direct = false;
                            _hdrMinus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                            _hdrMinus.Ith_doc_no = string.Empty;
                            _hdrMinus.Ith_doc_tp = "ADJ";
                            _hdrMinus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                            _hdrMinus.Ith_entry_no = string.Empty;
                            _hdrMinus.Ith_entry_tp = "STTUS";
                            _hdrMinus.Ith_git_close = true;
                            _hdrMinus.Ith_git_close_date = DateTime.MinValue;
                            _hdrMinus.Ith_git_close_doc = string.Empty;
                            _hdrMinus.Ith_isprinted = false;
                            _hdrMinus.Ith_is_manual = false;
                            _hdrMinus.Ith_job_no = string.Empty;
                            _hdrMinus.Ith_loading_point = string.Empty;
                            _hdrMinus.Ith_loading_user = string.Empty;
                            _hdrMinus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                            _hdrMinus.Ith_manual_ref = string.Empty;
                            _hdrMinus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrMinus.Ith_mod_when = DateTime.Now;
                            _hdrMinus.Ith_noofcopies = 0;
                            _hdrMinus.Ith_oth_loc = string.Empty;
                            _hdrMinus.Ith_oth_docno = "N/A";
                            _hdrMinus.Ith_remarks = string.Empty;
                            _hdrMinus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                            _hdrMinus.Ith_stus = "A";
                            _hdrMinus.Ith_sub_tp = "SYS";
                            _hdrMinus.Ith_vehi_no = string.Empty;
                            _hdrMinus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                            InventoryHeader _hdrPlus = new InventoryHeader();
                            _hdrPlus.Ith_channel = _hdrMinus.Ith_channel;
                            _hdrPlus.Ith_sbu = _hdrMinus.Ith_sbu;
                            _hdrPlus.Ith_acc_no = string.Empty;
                            _hdrPlus.Ith_anal_1 = string.Empty;
                            _hdrPlus.Ith_anal_2 = string.Empty;
                            _hdrPlus.Ith_anal_3 = string.Empty;
                            _hdrPlus.Ith_anal_4 = string.Empty;
                            _hdrPlus.Ith_anal_5 = string.Empty;
                            _hdrPlus.Ith_anal_6 = 0;
                            _hdrPlus.Ith_anal_7 = 0;
                            _hdrPlus.Ith_anal_8 = DateTime.MinValue;
                            _hdrPlus.Ith_anal_9 = DateTime.MinValue;
                            _hdrPlus.Ith_anal_10 = false;
                            _hdrPlus.Ith_anal_11 = false;
                            _hdrPlus.Ith_anal_12 = false;
                            _hdrPlus.Ith_bus_entity = string.Empty;
                            _hdrPlus.Ith_cate_tp = "STTUS";
                            _hdrPlus.Ith_com = _inventoryMovementHeader.Ith_com;
                            _hdrPlus.Ith_com_docno = string.Empty;
                            _hdrPlus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrPlus.Ith_cre_when = DateTime.Now;
                            _hdrPlus.Ith_del_add1 = string.Empty;
                            _hdrPlus.Ith_del_add2 = string.Empty;
                            _hdrPlus.Ith_del_code = string.Empty;
                            _hdrPlus.Ith_del_party = string.Empty;
                            _hdrPlus.Ith_del_town = string.Empty;
                            _hdrPlus.Ith_direct = true;
                            _hdrPlus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                            _hdrPlus.Ith_doc_no = string.Empty;
                            _hdrPlus.Ith_doc_tp = "ADJ";
                            _hdrPlus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                            _hdrPlus.Ith_entry_no = string.Empty;
                            _hdrPlus.Ith_entry_tp = "STTUS";
                            _hdrPlus.Ith_git_close = true;
                            _hdrPlus.Ith_git_close_date = DateTime.MinValue;
                            _hdrPlus.Ith_git_close_doc = string.Empty;
                            _hdrPlus.Ith_isprinted = false;
                            _hdrPlus.Ith_is_manual = false;
                            _hdrPlus.Ith_job_no = string.Empty;
                            _hdrPlus.Ith_loading_point = string.Empty;
                            _hdrPlus.Ith_loading_user = string.Empty;
                            _hdrPlus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                            _hdrPlus.Ith_manual_ref = string.Empty;
                            _hdrPlus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _hdrPlus.Ith_mod_when = DateTime.Now;
                            _hdrPlus.Ith_noofcopies = 0;
                            _hdrPlus.Ith_oth_loc = string.Empty;
                            _hdrPlus.Ith_oth_docno = "N/A";
                            _hdrPlus.Ith_remarks = string.Empty;
                            _hdrPlus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                            _hdrPlus.Ith_stus = "A";
                            _hdrPlus.Ith_sub_tp = "STTUS";
                            _hdrPlus.Ith_vehi_no = string.Empty;
                            _hdrPlus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                            string _adjm = string.Empty;
                            string _adjp = string.Empty;
                            List<ReptPickSerials> _UnAssLst = new List<ReptPickSerials>();
                            foreach (ReptPickSerials _one in _unAssembaleLst)
                            {
                                ReptPickSerials _two = _inventoryDAL.Get_all_details_on_serialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _one.Tus_bin, _one.Tus_itm_cd, _one.Tus_ser_id);
                                if (_two != null && !string.IsNullOrEmpty(_two.Tus_com))
                                {
                                    _two.Tus_new_status = _one.Tus_new_status; _two.Tus_serial_id = _one.Tus_serial_id;
                                    _UnAssLst.Add(_two);
                                }
                            }
                            InventoryAssembleToFinishGoodCommon(_hdrMinus, _hdrPlus, _UnAssLst, null, _autonoMinus, _autonoPlus, out _adjm, out _adjp);
                            _docNo += "," + _adjm + "," + _adjp;
                        }
                        #endregion
                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                    }
                    #region Comment
                    //Tharaka partialy add item - update balance qty
                    /*MasterLocation oIn_location = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                    MasterLocation oOut_location = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);

                    if (oIn_location.Ml_is_serial && !oOut_location.Ml_is_serial)
                    {
                        DataTable oItmBatch = _inventoryDAL.GET_INTBATCH_BY_DOC(_inventoryMovementHeader.Ith_oth_docno);
                        var distinctIds = oItmBatch.AsEnumerable().Select(s => new { itemCode = s.Field<string>("itb_itm_cd"), itmStatus = s.Field<string>("itb_itm_stus"), Qty = s.Field<decimal>("itb_qty"), BalQty = s.Field<decimal>("itb_bal_qty2"), }).Distinct().ToList();

                        foreach (var item in distinctIds)
                        {
                            ReptPickSerials oSelectedItem = _reptPickSerials.Find(x => x.Tus_itm_cd == item.itemCode && x.Tus_itm_stus == item.itmStatus);
                            if (oSelectedItem != null && oSelectedItem.Tus_qty != item.BalQty)
                            {

                                
                            }
                            //Int32 errValue = Convert.ToInt32("te");
                        }
                    }*/
                    #endregion
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        if (effect == 1)
                        {
                            foreach (ReptPickSerials _one in _reptPickSerials)
                            {
                                _inventoryDAL.UpdateAODOUTPickItem(_inventoryMovementHeader.Ith_oth_docno, _one.Tus_ser_id);
                            }
                            if (_reptPickSerials.Count > 0)
                            {
                                _inventoryDAL.UpdateAODOUT(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_docno);
                                _inventoryRepDAL.DeleteTempPickObjs(_reptPickSerials[0].Tus_usrseq_no);
                            }
                        }
                    }

                    #region aod in data validate 24 Oct 2016
                    if (effect == 1)
                    {
                        #region Cheak Batch
                        if (effect != -1)
                        {
                            List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                            _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                            bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                            if (_BATCH.Count == 0)
                            {
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated ";
                            }
                            if (effect == 1)
                            {
                                if (_count == false)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                        #endregion
                        #region Cheak int Itm
                        if (effect != -1)
                        {
                            bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                            if (_intItmErr == false)
                            {
                                effect = -1;
                                _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                            }
                        }
                        #endregion

                        #region Check Serials
                        if (effect == 1)
                        {
                            //Added by Chamal to check serial ID duplicate 05-Sep-2016
                            List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                            _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                            var _varSer = from c in _serList
                                          group c by c.Tus_ser_id into grp
                                          where grp.Count() > 1
                                          select new { SerialID = grp.Key, Count = grp.Count() };
                            if (_varSer != null && _varSer.Count() > 0)
                            {
                                string _errorSerialID = string.Empty;
                                foreach (var item in _varSer)
                                {
                                    if (string.IsNullOrEmpty(_errorSerialID))
                                    {
                                        _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                    }
                                    else
                                    {
                                        _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                    }
                                }
                                effect = -1;
                                _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                                // _genInventoryDocument = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                                // _genInvDoc = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                            }
                        }
                        #endregion
                        if (_inventoryMovementHeader.TMP_PROJECT_NAME == "SCMWEB" || _inventoryMovementHeader.TMP_PROJECT_NAME == "SCM2")
                        {
                            decimal _intBatchQty = 0;
                            decimal _intBatchQtyForIntSer = 0;
                            decimal _inrBatchQty = 0;
                            decimal _intSerQty = 0;
                            decimal _inrSerQty = 0;
                            List<InventorySerialN> _intSerSaved = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                            List<InventorySerialN> _inrSerSaved = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                            List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                            List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                            List<InventoryBatchRefN> _inrBatchSaved = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);

                            _intBatchQty = _intBatchSaved.Sum(c => c.Itb_bal_qty1);
                            _intBatchQtyForIntSer = _intBatchSaved.Where(c => c.Tmp_is_serialized != -1).ToList().Sum(c => c.Itb_bal_qty1);
                            _inrBatchQty = _inrBatchSaved.Sum(c => c.Inb_qty);
                            _intSerQty = _intSerSaved.Count;
                            _inrSerQty = _inrSerSaved.Sum(c => c.Ins_available);
                            if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                            {
                                if (_aodInPickQty != _intBatchQty)
                                {
                                    _docNo = _errro = "Process Terminated ! Pick serial data invalid ! [Pick Qty VS AOD IN Qty]";
                                    effect = -1;
                                    _inventoryRepDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _ScmCommonDAL.TransactionRollback();
                                    return effect;
                                }
                            }
                            if (_intBatchQty != _inrBatchQty)
                            {
                                _docNo = _errro = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                                effect = -1;
                                _inventoryRepDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _ScmCommonDAL.TransactionRollback();
                                return effect;
                            }
                            if (_intBatchQtyForIntSer != _intSerQty)
                            {
                                _docNo = _errro = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                                effect = -1;
                                _inventoryRepDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _ScmCommonDAL.TransactionRollback();
                                return effect;
                            }
                            if (_intBatchQtyForIntSer != _inrSerQty)
                            {
                                _docNo = _errro = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                                effect = -1;
                                _inventoryRepDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _ScmCommonDAL.TransactionRollback();
                                return effect;
                            }
                            DateTime _maxGrnDt = new DateTime(2030, 12, 31);
                            DateTime _MinGrnDt = new DateTime(1990, 01, 01);
                            foreach (var _insSerItm in _inrSerSaved)
                            {
                                if (_insSerItm.Ins_orig_grndt < _MinGrnDt)
                                {
                                    effect = -1;
                                    _docNo = "GRN Date is invalid ! [" + _insSerItm.Ins_ser_id + "]";
                                    _inventoryRepDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _ScmCommonDAL.TransactionRollback();
                                    return effect;
                                }
                                if (_insSerItm.Ins_orig_grndt > _maxGrnDt)
                                {
                                    effect = -1;
                                    _docNo = "GRN Date is invalid ! [" + _insSerItm.Ins_ser_id + "]";
                                    _inventoryRepDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _ScmCommonDAL.TransactionRollback();
                                    return effect;
                                }
                            }
                        }
                    }
                    #endregion

                    #region send mail data 24 Oct 2016
                    if (_inventoryMovementHeader.TmpSendMail)
                    {

                    }
                    #endregion

                    if (_resUpdateErr)
                    {
                        _docNo = _errro = ""; ;
                        effect = -1;
                    }

                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        #region MyRegion
                        List<InventoryBatchN> _lstOutBatch = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _inventoryMovementHeader.Ith_oth_docno });
                        decimal _outBatchCount = 0;
                        if (_lstOutBatch.Count > 0)
                        {
                            _outBatchCount = _lstOutBatch.Sum(c => c.Itb_bal_qty1);
                            if (_outBatchCount > 0)
                            {
                                _inventoryDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "A", _inventoryMovementHeader.Ith_mod_by);
                            }
                        }
                        #endregion

                    }
                    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                    {
                        #region KD Job Create
                        if (_inventoryMovementHeader.Tmp_is_kd_operation)
                        {
                            MasterLocation _locMst = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                            if (_locMst != null)
                            {
                                if (_locMst.Ml_loc_tp == "ASSKD")
                                {
                                    string _docNoAdjMinus = "", _docNoAdjPlus = "";
                                    List<ReptPickSerialsSub> _tmpSubSerials = new List<ReptPickSerialsSub>();
                                    List<ReptPickSerials> _adjMinusSerials = new List<ReptPickSerials>();
                                    List<ReptPickSerials> _adjPlusSerials = new List<ReptPickSerials>();
                                    List<InventoryBatchRefN> _intBatchData = new List<InventoryBatchRefN>();
                                    List<InventoryBatchN> _intBatchDataPlus = new List<InventoryBatchN>();
                                    List<InventorySerialN> _intSerData = new List<InventorySerialN>();
                                    #region KD ADJ Mines Create
                                    MasterAutoNumber _mstAutokdAdjMinus = new MasterAutoNumber();
                                    #region Fill MasterAutoNumber
                                    _mstAutokdAdjMinus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                                    _mstAutokdAdjMinus.Aut_cate_tp = "LOC";
                                    _mstAutokdAdjMinus.Aut_direction = null;
                                    _mstAutokdAdjMinus.Aut_modify_dt = null;
                                    _mstAutokdAdjMinus.Aut_moduleid = "ADJ";
                                    _mstAutokdAdjMinus.Aut_number = 5;
                                    _mstAutokdAdjMinus.Aut_start_char = "ADJ";
                                    _mstAutokdAdjMinus.Aut_year = null;
                                    #endregion
                                    InventoryHeader _invHdrAdjMinus = new InventoryHeader();
                                    #region Fill InventoryHeader
                                    DataTable dt_location = _inventoryDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                    foreach (DataRow r in dt_location.Rows)
                                    {
                                        _invHdrAdjMinus.Ith_sbu = (string)r["ML_OPE_CD"];
                                        if (System.DBNull.Value != r["ML_CATE_2"])
                                        {
                                            _invHdrAdjMinus.Ith_channel = (string)r["ML_CATE_2"];
                                        }
                                        else
                                        {
                                            _invHdrAdjMinus.Ith_channel = string.Empty;
                                        }
                                    }
                                    _invHdrAdjMinus.Ith_anal_1 = "";
                                    _invHdrAdjMinus.Ith_anal_2 = "";
                                    _invHdrAdjMinus.Ith_anal_3 = "";
                                    _invHdrAdjMinus.Ith_anal_4 = "";
                                    _invHdrAdjMinus.Ith_anal_5 = "";
                                    _invHdrAdjMinus.Ith_anal_6 = 0;
                                    _invHdrAdjMinus.Ith_anal_7 = 0;
                                    _invHdrAdjMinus.Ith_anal_8 = DateTime.MinValue;
                                    _invHdrAdjMinus.Ith_anal_9 = DateTime.MinValue;
                                    _invHdrAdjMinus.Ith_anal_10 = false;
                                    _invHdrAdjMinus.Ith_anal_11 = false;
                                    _invHdrAdjMinus.Ith_anal_12 = false;
                                    _invHdrAdjMinus.Ith_bus_entity = "";
                                    _invHdrAdjMinus.Ith_cate_tp = "NOR";
                                    _invHdrAdjMinus.Ith_com = _inventoryMovementHeader.Ith_com;
                                    _invHdrAdjMinus.Ith_com_docno = "";
                                    _invHdrAdjMinus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    _invHdrAdjMinus.Ith_cre_when = DateTime.Now;
                                    _invHdrAdjMinus.Ith_del_add1 = "";
                                    _invHdrAdjMinus.Ith_del_add2 = "";
                                    _invHdrAdjMinus.Ith_del_code = "";
                                    _invHdrAdjMinus.Ith_del_party = "";
                                    _invHdrAdjMinus.Ith_del_town = "";
                                    _invHdrAdjMinus.Ith_direct = false;
                                    _invHdrAdjMinus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                                    _invHdrAdjMinus.Ith_doc_no = string.Empty;
                                    _invHdrAdjMinus.Ith_doc_tp = "ADJ";
                                    _invHdrAdjMinus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                    //_invHdrAdjMinus.Ith_entry_no = _ISTEMP ? txtUserSeqNo.Text : txtOtherRef.Text.ToString().Trim();
                                    //_invHdrAdjMinus.Ith_entry_tp = txtAdjSubType.Text.ToString().Trim();
                                    _invHdrAdjMinus.Ith_git_close = true;
                                    _invHdrAdjMinus.Ith_git_close_date = DateTime.MinValue;
                                    _invHdrAdjMinus.Ith_git_close_doc = string.Empty;
                                    _invHdrAdjMinus.Ith_isprinted = false;//????
                                    _invHdrAdjMinus.Ith_is_manual = false;//????
                                    _invHdrAdjMinus.Ith_job_no = "";
                                    _invHdrAdjMinus.Ith_loading_point = string.Empty;
                                    _invHdrAdjMinus.Ith_loading_user = string.Empty;
                                    _invHdrAdjMinus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                                    _invHdrAdjMinus.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                                    _invHdrAdjMinus.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                                    _invHdrAdjMinus.Ith_mod_when = DateTime.Now;
                                    _invHdrAdjMinus.Ith_noofcopies = 0;
                                    _invHdrAdjMinus.Ith_oth_loc = _inventoryMovementHeader.Ith_loc;
                                    _invHdrAdjMinus.Ith_remarks = "";// txtRemarks.Text;
                                    _invHdrAdjMinus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                                    _invHdrAdjMinus.Ith_stus = "A";
                                    _invHdrAdjMinus.Ith_sub_tp = "NOR";
                                    _invHdrAdjMinus.Ith_vehi_no = string.Empty;
                                    _invHdrAdjMinus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                                    _invHdrAdjMinus.Ith_pc = _inventoryMovementHeader.Ith_pc;
                                    _invHdrAdjMinus.Ith_anal_10 = false;
                                    _invHdrAdjMinus.Ith_anal_2 = "";
                                    _invHdrAdjMinus.Ith_oth_docno = _docNo;
                                    _invHdrAdjMinus.Ith_acc_no = "SCMWEB-KD";
                                    #endregion
                                    //_reptPickSerials
                                    #region out serial object fill
                                    _intBatchData = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                                    _intSerData = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                                    MasterItem _mstItem = new MasterItem();
                                    ReptPickSerials _tmpPickSer = new ReptPickSerials();
                                    foreach (var _bat in _intBatchData)
                                    {
                                        _mstItem = _generalDAL.GetItemMaster(_bat.Inb_itm_cd);
                                        if (_mstItem.Mi_is_ser1 == 1)
                                        {
                                            var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                                               && c.Ins_itm_line == _bat.Inb_itm_line
                                               && c.Ins_batch_line == _bat.Inb_batch_line
                                               && c.Ins_itm_cd == _bat.Inb_itm_cd
                                               && c.Ins_itm_stus == _bat.Inb_itm_stus
                                               ).ToList();
                                            bool _isIntSerAva = false;
                                            if (_serList != null)
                                            {
                                                if (_serList.Count == _bat.Inb_qty)
                                                {
                                                    _isIntSerAva = true;
                                                }
                                            }
                                            if (_isIntSerAva)
                                            {
                                                #region is serial available
                                                foreach (var _ser in _serList)
                                                {
                                                    _tmpPickSer = new ReptPickSerials();
                                                    _tmpPickSer.Tus_doc_no = _docNo;
                                                    _tmpPickSer.Tus_seq_no = _inventoryMovementHeader.Ith_seq_no;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                                    _tmpPickSer.Tus_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                                                    _tmpPickSer.Tus_com = _bat.Inb_com;
                                                    _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                                    _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_itm_stus = _bat.Inb_itm_stus;
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                                    _tmpPickSer.Tus_qty = 1;
                                                    _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                                    _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                                    _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                                    _tmpPickSer.Tus_ser_3 = "N/A";
                                                    _tmpPickSer.Tus_ser_4 = "N/A";
                                                    _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                                    _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                    _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                                    _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                                    _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                                    _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                                    _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                                    _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                                    _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                                    _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                                    _tmpPickSer.Tus_warr_no = _ser.Ins_warr_no;
                                                    _tmpPickSer.Tus_warr_period = _ser.Ins_warr_period;
                                                    _adjMinusSerials.Add(_tmpPickSer);
                                                }
                                                #endregion
                                            }
                                        }
                                        else if (_mstItem.Mi_is_ser1 == 0)
                                        {
                                            var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                                                && c.Ins_itm_line == _bat.Inb_itm_line
                                                && c.Ins_batch_line == _bat.Inb_batch_line
                                                && c.Ins_itm_cd == _bat.Inb_itm_cd
                                                && c.Ins_itm_stus == _bat.Inb_itm_stus
                                                ).ToList();
                                            bool _isIntSerAva = false;
                                            if (_serList != null)
                                            {
                                                if (_serList.Count == _bat.Inb_qty)
                                                {
                                                    _isIntSerAva = true;
                                                }
                                            }
                                            if (_isIntSerAva)
                                            {
                                                #region is serial available
                                                foreach (var _ser in _serList)
                                                {
                                                    _tmpPickSer = new ReptPickSerials();
                                                    _tmpPickSer.Tus_doc_no = _docNo;
                                                    _tmpPickSer.Tus_seq_no = _inventoryMovementHeader.Ith_seq_no;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                                    _tmpPickSer.Tus_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                                                    _tmpPickSer.Tus_com = _bat.Inb_com;
                                                    _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                                    _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_itm_stus = _bat.Inb_itm_stus;
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                                    _tmpPickSer.Tus_qty = 1;
                                                    _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                                    _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                                    _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                                    _tmpPickSer.Tus_ser_3 = "N/A";
                                                    _tmpPickSer.Tus_ser_4 = "N/A";
                                                    _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                                    _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                    _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                                    _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                                    _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                                    _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                                    _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                                    _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                                    _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                                    _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                                    _tmpPickSer.Tus_warr_no = _ser.Ins_warr_no;
                                                    _tmpPickSer.Tus_warr_period = _ser.Ins_warr_period;
                                                    _adjMinusSerials.Add(_tmpPickSer);
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region is serial not available
                                                _tmpPickSer = new ReptPickSerials();
                                                _tmpPickSer.Tus_doc_no = _docNo;
                                                _tmpPickSer.Tus_seq_no = _inventoryMovementHeader.Ith_seq_no;
                                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                //_tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                                _tmpPickSer.Tus_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                                                _tmpPickSer.Tus_com = _bat.Inb_com;
                                                _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                                _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                _tmpPickSer.Tus_itm_stus = _bat.Inb_itm_stus;
                                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                                _tmpPickSer.Tus_qty = _bat.Inb_qty;
                                                //   _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                                _tmpPickSer.Tus_ser_1 = "N/A";
                                                _tmpPickSer.Tus_ser_2 = "N/A";
                                                _tmpPickSer.Tus_ser_3 = "N/A";
                                                _tmpPickSer.Tus_ser_4 = "N/A";
                                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                                //_tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                                //_tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                                //_tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                                //_tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                                //_tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                                //_tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                                //_tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                                //_tmpPickSer.Tus_warr_no = _ser.Ins_warr_no;
                                                _adjMinusSerials.Add(_tmpPickSer);
                                                #endregion
                                            }

                                        }
                                    }
                                    #endregion
                                    effect = SaveOutwardScanSerial(_invHdrAdjMinus, _adjMinusSerials, _tmpSubSerials, null, false);
                                    effect = UpdateInventoryAutoNumber(_invHdrAdjMinus, _mstAutokdAdjMinus, "-", out _docNoAdjMinus);
                                    #endregion
                                    #region KD ADJ Plus Create
                                    MasterAutoNumber _mstAutoAdjPlus = new MasterAutoNumber();
                                    #region Fill MasterAutoNumber
                                    _mstAutoAdjPlus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                                    _mstAutoAdjPlus.Aut_cate_tp = "LOC";
                                    _mstAutoAdjPlus.Aut_direction = null;
                                    _mstAutoAdjPlus.Aut_modify_dt = null;
                                    _mstAutoAdjPlus.Aut_moduleid = "ADJ";
                                    _mstAutoAdjPlus.Aut_number = 5;
                                    _mstAutoAdjPlus.Aut_start_char = "ADJ";
                                    _mstAutoAdjPlus.Aut_year = null;
                                    #endregion

                                    InventoryHeader _invHdrAdjPlus = new InventoryHeader();
                                    #region Fill InventoryHeader
                                    _invHdrAdjPlus.Ith_channel = _invHdrAdjMinus.Ith_channel;
                                    _invHdrAdjPlus.Ith_anal_1 = "";
                                    _invHdrAdjPlus.Ith_anal_2 = "";
                                    _invHdrAdjPlus.Ith_anal_3 = "";
                                    _invHdrAdjPlus.Ith_anal_4 = "";
                                    _invHdrAdjPlus.Ith_anal_5 = "";
                                    _invHdrAdjPlus.Ith_anal_6 = 0;
                                    _invHdrAdjPlus.Ith_anal_7 = 0;
                                    _invHdrAdjPlus.Ith_anal_8 = DateTime.MinValue;
                                    _invHdrAdjPlus.Ith_anal_9 = DateTime.MinValue;
                                    _invHdrAdjPlus.Ith_anal_10 = false;
                                    _invHdrAdjPlus.Ith_anal_11 = false;
                                    _invHdrAdjPlus.Ith_anal_12 = false;
                                    _invHdrAdjPlus.Ith_bus_entity = "";
                                    _invHdrAdjPlus.Ith_cate_tp = "NOR";
                                    _invHdrAdjPlus.Ith_com = _inventoryMovementHeader.Ith_com;
                                    _invHdrAdjPlus.Ith_com_docno = "";
                                    _invHdrAdjPlus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    _invHdrAdjPlus.Ith_cre_when = DateTime.Now;
                                    _invHdrAdjPlus.Ith_del_add1 = "";
                                    _invHdrAdjPlus.Ith_del_add2 = "";
                                    _invHdrAdjPlus.Ith_del_code = "";
                                    _invHdrAdjPlus.Ith_del_party = "";
                                    _invHdrAdjPlus.Ith_del_town = "";
                                    _invHdrAdjPlus.Ith_direct = true;
                                    _invHdrAdjPlus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date.Date;
                                    _invHdrAdjPlus.Ith_doc_no = string.Empty;
                                    _invHdrAdjPlus.Ith_doc_tp = "ADJ";
                                    _invHdrAdjPlus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                    //inHeader.Ith_entry_no = _ISTEMP ? txtUserSeqNo.Text : txtOtherRef.Text.ToString().Trim();
                                    //inHeader.Ith_entry_tp = txtAdjSubType.Text.ToString().Trim();
                                    _invHdrAdjPlus.Ith_git_close = true;
                                    _invHdrAdjPlus.Ith_git_close_date = DateTime.MinValue;
                                    _invHdrAdjPlus.Ith_git_close_doc = string.Empty;
                                    _invHdrAdjPlus.Ith_isprinted = false;//????
                                    _invHdrAdjPlus.Ith_is_manual = false;//????
                                    //_invHdrAdjPlus.Ith_job_no = txtAssJobNo.Text.ToUpper().Trim();
                                    _invHdrAdjPlus.Ith_loading_point = string.Empty;
                                    _invHdrAdjPlus.Ith_loading_user = string.Empty;
                                    _invHdrAdjPlus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                                    _invHdrAdjPlus.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                                    _invHdrAdjPlus.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                                    _invHdrAdjPlus.Ith_mod_when = DateTime.Now;
                                    _invHdrAdjPlus.Ith_noofcopies = 0;
                                    _invHdrAdjPlus.Ith_oth_loc = _inventoryMovementHeader.Ith_loc;
                                    _invHdrAdjPlus.Ith_remarks = "";// txtRemarks.Text;
                                    _invHdrAdjPlus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                                    _invHdrAdjPlus.Ith_stus = "A";
                                    _invHdrAdjPlus.Ith_sub_tp = "NOR";
                                    _invHdrAdjPlus.Ith_vehi_no = string.Empty;
                                    _invHdrAdjPlus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;

                                    _invHdrAdjPlus.Ith_anal_10 = false;
                                    _invHdrAdjPlus.Ith_anal_2 = "";
                                    //}

                                    ////_invHdrAdjPlus.Ith_sub_docno = txtDocumentNo.Text.Trim();
                                    ////_invHdrAdjPlus.Ith_oth_docno = txtDocumentNo.Text.Trim();
                                    _invHdrAdjPlus.Ith_pc = _inventoryMovementHeader.Ith_pc;
                                    _invHdrAdjPlus.Ith_oth_docno = _docNoAdjMinus;
                                    _invHdrAdjPlus.Ith_acc_no = "SCMWEB-KD";
                                    #endregion
                                    #region out serial object fill
                                    _intBatchDataPlus = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_invHdrAdjMinus.Ith_seq_no);
                                    _intSerData = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_invHdrAdjMinus.Ith_seq_no);
                                    foreach (var _bat in _intBatchDataPlus)
                                    {
                                        _mstItem = _generalDAL.GetItemMaster(_bat.Inb_itm_cd);
                                        if (_mstItem.Mi_is_ser1 == 1)
                                        {
                                            var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                                               && c.Ins_itm_line == _bat.Inb_itm_line
                                               && c.Ins_batch_line == _bat.Inb_batch_line
                                               && c.Ins_itm_cd == _bat.Inb_itm_cd
                                               && c.Ins_itm_stus == _bat.Inb_itm_stus
                                               ).ToList();
                                            bool _isIntSerAva = false;
                                            if (_serList != null)
                                            {
                                                if (_serList.Count == _bat.Inb_qty)
                                                {
                                                    _isIntSerAva = true;
                                                }
                                            }
                                            if (_isIntSerAva)
                                            {
                                                #region is serial available
                                                foreach (var _ser in _serList)
                                                {
                                                    _tmpPickSer = new ReptPickSerials();
                                                    _tmpPickSer.Tus_doc_no = _docNoAdjMinus;
                                                    _tmpPickSer.Tus_seq_no = _invHdrAdjMinus.Ith_seq_no;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                                    _tmpPickSer.Tus_doc_dt = _invHdrAdjMinus.Ith_doc_date;
                                                    _tmpPickSer.Tus_com = _bat.Inb_com;
                                                    _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                                    _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_itm_stus = "KDINS";
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                                    _tmpPickSer.Tus_qty = 1;
                                                    _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                                    _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                                    _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                                    _tmpPickSer.Tus_ser_3 = "N/A";
                                                    _tmpPickSer.Tus_ser_4 = "N/A";
                                                    _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                                    _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                    _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                                    _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                                    _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                                    _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                                    _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                                    _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                                    _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                                    _tmpPickSer.Tus_base_doc_no = _docNoAdjMinus;
                                                    _tmpPickSer.Tus_base_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_warr_no = _ser.Ins_warr_no;
                                                    _tmpPickSer.Tus_warr_period = _ser.Ins_warr_period;
                                                    _adjPlusSerials.Add(_tmpPickSer);
                                                }
                                                #endregion
                                            }
                                        }
                                        else if (_mstItem.Mi_is_ser1 == 0)
                                        {
                                            var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                                                && c.Ins_itm_line == _bat.Inb_itm_line
                                                && c.Ins_batch_line == _bat.Inb_batch_line
                                                && c.Ins_itm_cd == _bat.Inb_itm_cd
                                                && c.Ins_itm_stus == _bat.Inb_itm_stus
                                                ).ToList();
                                            bool _isIntSerAva = false;
                                            if (_serList != null)
                                            {
                                                if (_serList.Count == _bat.Inb_qty)
                                                {
                                                    _isIntSerAva = true;
                                                }
                                            }
                                            if (_isIntSerAva)
                                            {
                                                #region is serial available
                                                foreach (var _ser in _serList)
                                                {
                                                    _tmpPickSer = new ReptPickSerials();
                                                    _tmpPickSer.Tus_doc_no = _docNoAdjMinus;
                                                    _tmpPickSer.Tus_seq_no = _invHdrAdjMinus.Ith_seq_no;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                                    _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                                    _tmpPickSer.Tus_doc_dt = _invHdrAdjMinus.Ith_doc_date;
                                                    _tmpPickSer.Tus_com = _bat.Inb_com;
                                                    _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                                    _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_itm_stus = "KDINS";
                                                    _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                    _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                                    _tmpPickSer.Tus_qty = 1;
                                                    _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                                    _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                                    _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                                    _tmpPickSer.Tus_ser_3 = "N/A";
                                                    _tmpPickSer.Tus_ser_4 = "N/A";
                                                    _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                                    _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                    _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                    _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                                    _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                                    _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                                    _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                                    _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                                    _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                                    _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                                    _tmpPickSer.Tus_base_doc_no = _docNoAdjMinus;
                                                    _tmpPickSer.Tus_base_itm_line = _bat.Inb_itm_line;
                                                    _tmpPickSer.Tus_base_doc_no = _docNoAdjMinus;
                                                    _tmpPickSer.Tus_warr_no = _ser.Ins_warr_no;
                                                    _tmpPickSer.Tus_warr_period = _ser.Ins_warr_period;
                                                    _adjPlusSerials.Add(_tmpPickSer);
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region is serial not available
                                                _tmpPickSer = new ReptPickSerials();
                                                _tmpPickSer.Tus_doc_no = _docNoAdjMinus;
                                                _tmpPickSer.Tus_seq_no = _invHdrAdjMinus.Ith_seq_no;
                                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                                //_tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                                _tmpPickSer.Tus_doc_dt = _invHdrAdjMinus.Ith_doc_date;
                                                _tmpPickSer.Tus_com = _bat.Inb_com;
                                                _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                                _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                _tmpPickSer.Tus_itm_stus = "KDINS";
                                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                                _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                                _tmpPickSer.Tus_qty = _bat.Inb_qty;
                                                //   _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                                _tmpPickSer.Tus_ser_1 = "N/A";
                                                _tmpPickSer.Tus_ser_2 = "N/A";
                                                _tmpPickSer.Tus_ser_3 = "N/A";
                                                _tmpPickSer.Tus_ser_4 = "N/A";
                                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                //_tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                                //_tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                                //_tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                                //_tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                                //_tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                                //_tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                                //_tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                                _tmpPickSer.Tus_base_doc_no = _docNoAdjMinus;
                                                _tmpPickSer.Tus_base_itm_line = _bat.Inb_itm_line;
                                                _adjPlusSerials.Add(_tmpPickSer);
                                                #endregion
                                            }

                                        }
                                    }
                                    #endregion
                                    effect = SaveInwardScanSerial(_invHdrAdjPlus, _adjPlusSerials, _tmpSubSerials);
                                    effect = UpdateInventoryAutoNumber(_invHdrAdjPlus, _mstAutoAdjPlus, "+", out _docNoAdjPlus);
                                    #endregion
                                    #region Job Data Save
                                    #region job header generation
                                    //------------------Job Header Filling---------------------------------
                                    Service_JOB_HDR _jobHdr = new Service_JOB_HDR();
                                    MasterLocation _loc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc);
                                    //_jobHdr.SJB_SEQ_NO;
                                    _jobHdr.SJB_JOBNO = _docNo;
                                    _jobHdr.SJB_DT = _inventoryMovementHeader.Ith_doc_date;
                                    _jobHdr.SJB_COM = _inventoryMovementHeader.Ith_com;
                                    _jobHdr.SJB_JOBCAT = "WW";
                                    _jobHdr.SJB_JOBTP = "E";
                                    _jobHdr.SJB_JOBSTP = "RCC";
                                    _jobHdr.SJB_MANUALREF = _inventoryMovementHeader.Ith_manual_ref;
                                    _jobHdr.SJB_OTHERREF = "";
                                    _jobHdr.SJB_REQNO = "";
                                    _jobHdr.SJB_JOBSTAGE = 2;
                                    _jobHdr.SJB_RMK = "";
                                    _jobHdr.SJB_PRORITY = "NORMAL";
                                    //_jobHdr.SJB_ST_DT = _inventoryMovementHeader.Ith_doc_date;
                                    //_jobHdr.sjb_ed_dt  = DateTime.mi     
                                    _jobHdr.SJB_NOOFPRINT = 0;
                                    //_jobHdr.SJB_LASTPRINTBY 
                                    //_jobHdr.sjb_orderno     
                                    _jobHdr.SJB_CUSTEXPTDT = DateTime.Now.Date;
                                    //_jobHdr.sjb_substage  
                                    _jobHdr.SJB_CUST_CD = _loc.Ml_loc_cd;
                                    _jobHdr.SJB_CUST_NAME = _loc.Ml_loc_desc;
                                    _jobHdr.SJB_MOBINO = _loc.Ml_tel;
                                    _jobHdr.SJB_ADD1 = _loc.Ml_add1;
                                    _jobHdr.SJB_ADD2 = _loc.Ml_add2;
                                    // _jobHdr.sjb_add3        
                                    _jobHdr.SJB_TOWN = _loc.Ml_town_cd;
                                    //_jobHdr.sjb_cust_tit    
                                    //_jobHdr.sjb_nic         
                                    //_jobHdr.sjb_dl          
                                    //_jobHdr.sjb_pp          
                                    //_jobHdr.sjb_mobino      
                                    //_jobHdr.sjb_add1        
                                    //_jobHdr.sjb_add2        
                                    //_jobHdr.sjb_add3        
                                    //_jobHdr.sjb_town        
                                    //_jobHdr.sjb_phno        
                                    //_jobHdr.sjb_faxno       
                                    //_jobHdr.sjb_email       
                                    //_jobHdr.sjb_cnt_person  
                                    //_jobHdr.sjb_cnt_add1    
                                    //_jobHdr.sjb_cnt_add2    
                                    //_jobHdr.sjb_cnt_phno    
                                    //_jobHdr.sjb_job_rmk     
                                    //_jobHdr.sjb_tech_rmk    
                                    _jobHdr.SJB_B_CUST_CD = "N/A";
                                    //_jobHdr.sjb_b_cust_tit  
                                    //_jobHdr.sjb_b_cust_name 
                                    //_jobHdr.sjb_b_nic       
                                    //_jobHdr.sjb_b_dl        
                                    //_jobHdr.sjb_b_pp        
                                    //_jobHdr.sjb_b_mobino    
                                    //_jobHdr.sjb_b_add1      
                                    //_jobHdr.sjb_b_add2      
                                    //_jobHdr.sjb_b_add3      
                                    //_jobHdr.sjb_b_town      
                                    //_jobHdr.sjb_b_phno      
                                    //_jobHdr.sjb_b_fax       
                                    //_jobHdr.sjb_b_email     
                                    //_jobHdr.sjb_infm_person 
                                    //_jobHdr.sjb_infm_add1   
                                    //_jobHdr.sjb_infm_add2   
                                    //_jobHdr.sjb_infm_phno
                                    _jobHdr.SJB_STUS = "P";

                                    _jobHdr.SJB_CRE_BY = _inventoryMovementHeader.Ith_cre_by;
                                    _jobHdr.SJB_CRE_DT = DateTime.Now;
                                    _jobHdr.SJB_MOD_BY = _inventoryMovementHeader.Ith_cre_by;
                                    _jobHdr.SJB_MOD_DT = DateTime.Now;
                                    //_jobHdr.sjb_chg_cd      
                                    //_jobHdr.sjb_chg         
                                    _jobHdr.SJB_SESSION_ID = _inventoryMovementHeader.Ith_session_id;
                                    //_jobHdr.sjb_find_key    
                                    //_jobHdr.sjb_pod_no      
                                    _jobHdr.SJB_REC_LOC = _inventoryMovementHeader.Ith_oth_loc;
                                    Service_Chanal_parameter oChnlPara = _generalDAL.GetChannelParamers(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                    if (oChnlPara != null)
                                    {
                                        MasterBusinessEntity _busEntity = _inventoryDAL.GET_MST_BUSENTITY_DATA(_inventoryMovementHeader.Ith_com, oChnlPara.sp_def_debt_cd).FirstOrDefault();
                                        if (_busEntity != null)
                                        {
                                            _jobHdr.SJB_B_CUST_CD = _busEntity.Mbe_cd;
                                            _jobHdr.SJB_B_CUST_NAME = _busEntity.Mbe_name;
                                            _jobHdr.SJB_B_MOBINO = _busEntity.Mbe_mob;
                                            _jobHdr.SJB_B_ADD1 = _busEntity.Mbe_add1;
                                            _jobHdr.SJB_B_ADD2 = _busEntity.Mbe_add2;
                                        }
                                    }
                                    else
                                    {

                                    }
                                    #endregion
                                    #region job detail generation
                                    //-------------------Job Detail Filling--------------------------------
                                    List<InventoryBatchN> _intBatJobList = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                                    List<InventorySerialN> _intSerJobList = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                                    List<Service_job_Det> sevJobDetList = new List<Service_job_Det>();
                                    foreach (var _batch in _intBatJobList)
                                    {
                                        MasterItem _mstItm = _generalDAL.GetItemMaster(_batch.Inb_itm_cd);
                                        if (_mstItm != null)
                                        {
                                            if (_mstItm.Mi_is_ser1 == 1)
                                            {
                                                #region is serialized
                                                List<InventorySerialN> _serilisedList = _intSerJobList.Where(c => c.Ins_itm_cd == _mstItm.Mi_cd && c.Ins_itm_line == _batch.Inb_itm_line && c.Ins_batch_line == _batch.Inb_batch_line).ToList();
                                                if (_serilisedList != null)
                                                {
                                                    foreach (var _serierlizedSer in _serilisedList)
                                                    {
                                                        Service_job_Det sevDet = new Service_job_Det();
                                                        sevDet.Jbd_jobno = _docNo;
                                                        // sevDet.Jbd_jobline = sevJobDetList.Count > 0 ? sevJobDetList.Max(c => c.Jbd_jobline) + 1 : 1;
                                                        sevDet.Jbd_jobline = 1;
                                                        sevDet.Jbd_sjobno = _docNo + "-" + sevDet.Jbd_jobline;
                                                        sevDet.Jbd_loc = _inventoryMovementHeader.Ith_loc;
                                                        sevDet.Jbd_pc = _inventoryMovementHeader.Ith_pc;
                                                        sevDet.Jbd_itm_cd = _serierlizedSer.Ins_itm_cd;
                                                        sevDet.Jbd_itm_stus = _serierlizedSer.Ins_itm_stus;
                                                        sevDet.Jbd_itm_desc = _mstItm.Mi_shortdesc;
                                                        sevDet.Jbd_brand = _mstItm.Mi_brand;
                                                        sevDet.Jbd_model = _mstItm.Mi_model;
                                                        sevDet.Jbd_itm_cost = _serierlizedSer.Ins_unit_cost;
                                                        sevDet.Jbd_ser1 = _serierlizedSer.Ins_ser_1;
                                                        sevDet.Jbd_ser2 = _serierlizedSer.Ins_ser_2;
                                                        sevDet.Jbd_warr_stus = 1;
                                                        sevDet.Jbd_warrperiod = _serierlizedSer.Ins_warr_period;
                                                        sevDet.Jbd_warr = _serierlizedSer.Ins_warr_no;
                                                        //sevDet.Jbd_regno =
                                                        //sevDet.Jbd_milage =
                                                        //sevDet.Jbd_onloan =
                                                        //sevDet.Jbd_chg_warr_stdt =
                                                        //sevDet.Jbd_chg_warr_rmk =
                                                        //sevDet.Jbd_isinsurance =
                                                        sevDet.Jbd_cate1 = _mstItm.Mi_cate_1;
                                                        sevDet.Jbd_availabilty = 1;
                                                        sevDet.jbd_isstockupdate = 1;
                                                        InventoryHeader _invH = _inventoryDAL.Get_Int_Hdr(_inventoryMovementHeader.Ith_doc_no);
                                                        if (_invH != null)
                                                        {
                                                            sevDet.Jbd_aodissueloc = _invH.Ith_loc;
                                                            sevDet.Jbd_aodissuedt = _invH.Ith_doc_date;
                                                            sevDet.Jbd_aodissueno = _invH.Ith_doc_no;
                                                        }
                                                        sevDet.Jbd_aodrecno = _docNo;

                                                        //sevDet.Jbd_ser_term =
                                                        //sevDet.Jbd_lastwarr_stdt =
                                                        //sevDet.Jbd_issued =
                                                        //sevDet.Jbd_mainitmcd =
                                                        //sevDet.Jbd_mainitmser =
                                                        //sevDet.Jbd_mainitmwarr =
                                                        //sevDet.Jbd_itmmfc =
                                                        //sevDet.Jbd_mainitmmfc =
                                                        //sevDet.Jbd_usejob =
                                                        //sevDet.Jbd_msnno =
                                                        //sevDet.Jbd_itmtp =
                                                        //sevDet.Jbd_serlocchr =
                                                        //sevDet.Jbd_custnotes =
                                                        //sevDet.Jbd_mainreqno =
                                                        //sevDet.Jbd_mainreqloc =
                                                        //sevDet.Jbd_mainjobno =
                                                        //sevDet.Jbd_reqitmtp =
                                                        //sevDet.Jbd_reqno =
                                                        //sevDet.Jbd_reqline =
                                                        //sevDet.Jbd_isgatepass =
                                                        //sevDet.Jbd_iswrn =
                                                        //sevDet.Jbd_warrrmk =
                                                        //sevDet.Jbd_warrstartdt =
                                                        //sevDet.Jbd_warrreplace =
                                                        //sevDet.Jbd_date_pur =
                                                        //sevDet.Jbd_invc_no =
                                                        //sevDet.Jbd_waraamd_seq =
                                                        //sevDet.Jbd_waraamd_by =
                                                        //sevDet.Jbd_waraamd_dt =
                                                        //sevDet.Jbd_invc_showroom =
                                                        //sevDet.Jbd_aodissueloc =
                                                        //sevDet.Jbd_aodissuedt =
                                                        //sevDet.Jbd_aodissueno =
                                                        //sevDet.Jbd_aodrecno =
                                                        //sevDet.Jbd_techst_dt =
                                                        //sevDet.Jbd_techfin_dt =
                                                        //sevDet.Jbd_msn_no =
                                                        //sevDet.Jbd_isexternalitm =
                                                        //sevDet.Jbd_conf_dt =
                                                        //sevDet.Jbd_conf_cd =
                                                        //sevDet.Jbd_conf_desc =
                                                        //sevDet.Jbd_conf_rmk =
                                                        //sevDet.Jbd_tranf_by =
                                                        //sevDet.Jbd_tranf_dt =
                                                        //sevDet.Jbd_do_invoice =
                                                        //sevDet.Jbd_insu_com =
                                                        //sevDet.Jbd_agreeno =
                                                        //sevDet.Jbd_issrn =
                                                        //sevDet.Jbd_isagreement =
                                                        //sevDet.Jbd_cust_agreeno =
                                                        //sevDet.Jbd_quo_no =
                                                        //sevDet.Jbd_stage =
                                                        sevDet.Jbd_com = _serierlizedSer.Ins_com;
                                                        sevDet.Jbd_ser_id = _serierlizedSer.Ins_ser_id.ToString();
                                                        //sevDet.Jbd_techst_dt_man =
                                                        //sevDet.Jbd_techfin_dt_man =
                                                        //sevDet.Jbd_reqwcn =
                                                        //sevDet.Jbd_reqwcndt =
                                                        //sevDet.Jbd_reqwcnsysdt =
                                                        //sevDet.Jbd_sentwcn =
                                                        //sevDet.Jbd_recwcn =
                                                        //sevDet.Jbd_takewcn =
                                                        //sevDet.Jbd_takewcndt =
                                                        //sevDet.Jbd_takewcnsysdt =
                                                        sevDet.Jbd_supp_cd = _serierlizedSer.Ins_exist_supp;
                                                        //sevDet.Jbd_part_cd =
                                                        //sevDet.Jbd_oem_no =
                                                        //sevDet.Jbd_case_id =
                                                        sevDet.Jbd_act = 1;
                                                        //sevDet.Jbd_oldjobline =
                                                        //sevDet.Jbd_tech_rmk =
                                                        //sevDet.Jbd_tech_custrmk =
                                                        //sevDet.Jbd_tech_cls_tp =
                                                        //sevDet.Jbd_isfocapp =
                                                        //sevDet.Jbd_swarr_stus =
                                                        //sevDet.Jbd_swarrperiod =
                                                        //sevDet.Jbd_swarrrmk =
                                                        //sevDet.Jbd_swarrstartdt =
                                                        //sevDet.Jbd_tech_cls_rmk =
                                                        //sevDet.JBD_REJECT_BY =
                                                        //sevDet.JBD_REJECT_DT =
                                                        //sevDet.Jbd_reqwcn =
                                                        //sevDet.jbd_is_reason =
                                                        //sevDet.Jbd_is_closed =
                                                        //sevDet.jbd_closed_user =
                                                        //sevDet.jbd_closed_date =
                                                        //sevDet.Jbd_is_fgap =
                                                        //sevDet.Jbd_rep_perc =
                                                        //sevDet.jbd_sw_stus =
                                                        //sevDet.jbd_pb =
                                                        //sevDet.jbd_pblvl =
                                                        //sevDet.jbd_allow_mrn =
                                                        //sevDet.jbd_allow_by =
                                                        //sevDet.jbd_allow_date =
                                                        //sevDet.jbd_allow_remark =
                                                        //sevDet.jbd_del_sale_dt =
                                                        sevJobDetList.Add(sevDet);
                                                    }
                                                }
                                                #endregion
                                            }
                                            else if (_mstItm.Mi_is_ser1 == 0)
                                            {
                                                #region is non serialized
                                                List<InventorySerialN> _serilisedList = _intSerJobList.Where(c => c.Ins_itm_cd == _mstItm.Mi_cd && c.Ins_itm_line == _batch.Inb_itm_line && c.Ins_batch_line == _batch.Inb_batch_line).ToList();
                                                if (_serilisedList != null)
                                                {
                                                    foreach (var _serierlizedSer in _serilisedList)
                                                    {
                                                        Service_job_Det sevDet = new Service_job_Det();
                                                        sevDet.Jbd_jobno = _docNo;
                                                        // sevDet.Jbd_jobline = sevJobDetList.Count > 0 ? sevJobDetList.Max(c => c.Jbd_jobline) + 1 : 1;
                                                        sevDet.Jbd_jobline = 1;
                                                        sevDet.Jbd_sjobno = _docNo + "-" + sevDet.Jbd_jobline;
                                                        sevDet.Jbd_loc = _inventoryMovementHeader.Ith_loc;
                                                        sevDet.Jbd_pc = _inventoryMovementHeader.Ith_pc;
                                                        sevDet.Jbd_itm_cd = _serierlizedSer.Ins_itm_cd;
                                                        sevDet.Jbd_itm_stus = _serierlizedSer.Ins_itm_stus;
                                                        sevDet.Jbd_itm_desc = _mstItm.Mi_shortdesc;
                                                        sevDet.Jbd_brand = _mstItm.Mi_brand;
                                                        sevDet.Jbd_model = _mstItm.Mi_model;
                                                        sevDet.Jbd_itm_cost = _serierlizedSer.Ins_unit_cost;
                                                        sevDet.Jbd_ser1 = _serierlizedSer.Ins_ser_1;
                                                        sevDet.Jbd_ser2 = _serierlizedSer.Ins_ser_2;
                                                        sevDet.Jbd_warr_stus = _mstItm.Mi_warr ? 1 : 0;
                                                        sevDet.Jbd_warrperiod = _serierlizedSer.Ins_warr_period;
                                                        sevDet.Jbd_warr = _serierlizedSer.Ins_warr_no;
                                                        //sevDet.Jbd_regno =
                                                        //sevDet.Jbd_milage =
                                                        //sevDet.Jbd_onloan =
                                                        //sevDet.Jbd_chg_warr_stdt =
                                                        //sevDet.Jbd_chg_warr_rmk =
                                                        //sevDet.Jbd_isinsurance =
                                                        sevDet.Jbd_cate1 = _mstItm.Mi_cate_1;
                                                        //sevDet.Jbd_ser_term =
                                                        //sevDet.Jbd_lastwarr_stdt =
                                                        //sevDet.Jbd_issued =
                                                        //sevDet.Jbd_mainitmcd =
                                                        //sevDet.Jbd_mainitmser =
                                                        //sevDet.Jbd_mainitmwarr =
                                                        //sevDet.Jbd_itmmfc =
                                                        //sevDet.Jbd_mainitmmfc =
                                                        sevDet.Jbd_cate1 = _mstItm.Mi_cate_1;
                                                        sevDet.Jbd_availabilty = 1;
                                                        sevDet.jbd_isstockupdate = 1;
                                                        InventoryHeader _invH = _inventoryDAL.Get_Int_Hdr(_inventoryMovementHeader.Ith_doc_no);
                                                        if (_invH != null)
                                                        {
                                                            sevDet.Jbd_aodissueloc = _invH.Ith_loc;
                                                            sevDet.Jbd_aodissuedt = _invH.Ith_doc_date;
                                                            sevDet.Jbd_aodissueno = _invH.Ith_doc_no;
                                                        }
                                                        sevDet.Jbd_aodrecno = _docNo;
                                                        //sevDet.Jbd_usejob =
                                                        //sevDet.Jbd_msnno =
                                                        //sevDet.Jbd_itmtp =
                                                        //sevDet.Jbd_serlocchr =
                                                        //sevDet.Jbd_custnotes =
                                                        //sevDet.Jbd_mainreqno =
                                                        //sevDet.Jbd_mainreqloc =
                                                        //sevDet.Jbd_mainjobno =
                                                        //sevDet.Jbd_reqitmtp =
                                                        //sevDet.Jbd_reqno =
                                                        //sevDet.Jbd_reqline =
                                                        //sevDet.jbd_isstockupdate =
                                                        //sevDet.Jbd_isgatepass =
                                                        //sevDet.Jbd_iswrn =
                                                        //sevDet.Jbd_warrrmk =
                                                        //sevDet.Jbd_warrstartdt =
                                                        //sevDet.Jbd_warrreplace =
                                                        //sevDet.Jbd_date_pur =
                                                        //sevDet.Jbd_invc_no =
                                                        //sevDet.Jbd_waraamd_seq =
                                                        //sevDet.Jbd_waraamd_by =
                                                        //sevDet.Jbd_waraamd_dt =
                                                        //sevDet.Jbd_invc_showroom =
                                                        //sevDet.Jbd_aodissueloc =
                                                        //sevDet.Jbd_aodissuedt =
                                                        //sevDet.Jbd_aodissueno =
                                                        //sevDet.Jbd_aodrecno =
                                                        //sevDet.Jbd_techst_dt =
                                                        //sevDet.Jbd_techfin_dt =
                                                        //sevDet.Jbd_msn_no =
                                                        //sevDet.Jbd_isexternalitm =
                                                        //sevDet.Jbd_conf_dt =
                                                        //sevDet.Jbd_conf_cd =
                                                        //sevDet.Jbd_conf_desc =
                                                        //sevDet.Jbd_conf_rmk =
                                                        //sevDet.Jbd_tranf_by =
                                                        //sevDet.Jbd_tranf_dt =
                                                        //sevDet.Jbd_do_invoice =
                                                        //sevDet.Jbd_insu_com =
                                                        //sevDet.Jbd_agreeno =
                                                        //sevDet.Jbd_issrn =
                                                        //sevDet.Jbd_isagreement =
                                                        //sevDet.Jbd_cust_agreeno =
                                                        //sevDet.Jbd_quo_no =
                                                        //sevDet.Jbd_stage =
                                                        sevDet.Jbd_com = _serierlizedSer.Ins_com;
                                                        sevDet.Jbd_ser_id = _serierlizedSer.Ins_ser_id.ToString();
                                                        //sevDet.Jbd_techst_dt_man =
                                                        //sevDet.Jbd_techfin_dt_man =
                                                        //sevDet.Jbd_reqwcn =
                                                        //sevDet.Jbd_reqwcndt =
                                                        //sevDet.Jbd_reqwcnsysdt =
                                                        //sevDet.Jbd_sentwcn =
                                                        //sevDet.Jbd_recwcn =
                                                        //sevDet.Jbd_takewcn =
                                                        //sevDet.Jbd_takewcndt =
                                                        //sevDet.Jbd_takewcnsysdt =
                                                        sevDet.Jbd_supp_cd = _serierlizedSer.Ins_exist_supp;
                                                        //sevDet.Jbd_part_cd =
                                                        //sevDet.Jbd_oem_no =
                                                        //sevDet.Jbd_case_id =
                                                        sevDet.Jbd_act = 1;
                                                        //sevDet.Jbd_oldjobline =
                                                        //sevDet.Jbd_tech_rmk =
                                                        //sevDet.Jbd_tech_custrmk =
                                                        //sevDet.Jbd_tech_cls_tp =
                                                        //sevDet.Jbd_isfocapp =
                                                        //sevDet.Jbd_swarr_stus =
                                                        //sevDet.Jbd_swarrperiod =
                                                        //sevDet.Jbd_swarrrmk =
                                                        //sevDet.Jbd_swarrstartdt =
                                                        //sevDet.Jbd_tech_cls_rmk =
                                                        //sevDet.JBD_REJECT_BY =
                                                        //sevDet.JBD_REJECT_DT =
                                                        //sevDet.Jbd_reqwcn =
                                                        //sevDet.jbd_is_reason =
                                                        //sevDet.Jbd_is_closed =
                                                        //sevDet.jbd_closed_user =
                                                        //sevDet.jbd_closed_date =
                                                        //sevDet.Jbd_is_fgap =
                                                        //sevDet.Jbd_rep_perc =
                                                        //sevDet.jbd_sw_stus =
                                                        //sevDet.jbd_pb =
                                                        //sevDet.jbd_pblvl =
                                                        //sevDet.jbd_allow_mrn =
                                                        //sevDet.jbd_allow_by =
                                                        //sevDet.jbd_allow_date =
                                                        //sevDet.jbd_allow_remark =
                                                        //sevDet.jbd_del_sale_dt =
                                                        sevJobDetList.Add(sevDet);
                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                //mines item
                                                #region is non serialized
                                                //List<InventorySerialN> _serilisedList = _intSerJobList.Where(c => c.Ins_itm_cd == _mstItm.Mi_cd && c.Ins_itm_line == _batch.Inb_itm_line && c.Ins_batch_line == _batch.Inb_batch_line).ToList();
                                                //if (_serilisedList != null)
                                                //{
                                                //    foreach (var _serierlizedSer in _serilisedList)
                                                //    {
                                                //        ServiceJobDetail sevDet = new ServiceJobDetail();
                                                //        sevDet.Jbd_jobline = sevJobDetList.Count > 0 ? sevJobDetList.Max(c => c.Jbd_jobline) + 1 : 1;
                                                //        sevDet.Jbd_itm_cd = _serierlizedSer.Ins_itm_cd;
                                                //        sevDet.Jbd_itm_stus = "KDINS";
                                                //        sevDet.Jbd_itm_desc = _mstItm.Mi_shortdesc;
                                                //        sevDet.Jbd_model = _mstItm.Mi_model;
                                                //        sevDet.Jbd_ser1 = _serierlizedSer.Ins_ser_1;
                                                //        sevDet.Jbd_warr_stus = _mstItm.Mi_warr;
                                                //        sevDet.Jbd_warrperiod = _serierlizedSer.Ins_warr_period;
                                                //        sevDet.Jbd_warr = _serierlizedSer.Ins_warr_no;
                                                //        sevDet.Jbd_invoiceno = "";
                                                //    }
                                                //}
                                                //else
                                                //{
                                                //    while (_batch.Inb_qty > 0)
                                                //    {
                                                //        _batch.Inb_qty = _batch.Inb_qty - 1;
                                                //        ServiceJobDetail sevDet = new ServiceJobDetail();
                                                //        sevDet.Jbd_jobline = sevJobDetList.Count > 0 ? sevJobDetList.Max(c => c.Jbd_jobline) + 1 : 1;
                                                //        sevDet.Jbd_itm_cd = _batch.Inb_itm_cd;
                                                //        sevDet.Jbd_itm_stus = "KDINS";
                                                //        sevDet.Jbd_itm_desc = _mstItm.Mi_shortdesc;
                                                //        sevDet.Jbd_model = _mstItm.Mi_model;
                                                //        sevDet.Jbd_ser1 = "N/A";
                                                //        sevDet.Jbd_warr_stus = _mstItm.Mi_warr;

                                                //        //    sevDet.Jbd_warrperiod = _serierlizedSer.Ins_warr_period;
                                                //        //  sevDet.Jbd_warr = _serierlizedSer.Ins_warr_no;
                                                //        sevDet.Jbd_invoiceno = "";
                                                //        sevJobDetList.Add(sevDet);
                                                //    }
                                                //}
                                                #endregion
                                            }
                                        }
                                    }
                                    #endregion
                                    //_jobHdr.SJB_SEQ_NO = _inventoryDAL.GetJobSerialID();
                                    //_inventoryDAL.Save_Job_Header(_jobHdr);

                                    MasterAutoNumber _autoKD = new MasterAutoNumber();
                                    #region Fill MasterAutoNumber
                                    _autoKD.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                                    _autoKD.Aut_cate_tp = "LOC";
                                    _autoKD.Aut_direction = null;
                                    _autoKD.Aut_modify_dt = null;
                                    _autoKD.Aut_moduleid = "KD";
                                    _autoKD.Aut_number = 0;
                                    _autoKD.Aut_start_char = "KD";
                                    _autoKD.Aut_year = null;
                                    #endregion

                                    #region Job Detail save
                                    foreach (var item in sevJobDetList)
                                    {
                                        Int32 _KdAutoNo = _inventoryDAL.GetAutoNumber(_autoKD.Aut_moduleid, _autoKD.Aut_direction, _autoKD.Aut_start_char, _autoKD.Aut_cate_tp, _autoKD.Aut_cate_cd, _autoKD.Aut_modify_dt, _autoKD.Aut_year).Aut_number;
                                        string _KDJobNo = _inventoryMovementHeader.Ith_loc + "/" + _autoKD.Aut_start_char + "/" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "/" + _KdAutoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        effect = _inventoryDAL.UpdateAutoNumber(_autoKD);
                                        _jobHdr.SJB_JOBNO = _KDJobNo;
                                        _jobHdr.SJB_OTHERREF = _KDJobNo;
                                        _jobHdr.SJB_SEQ_NO = _inventoryDAL.GetJobSerialID();

                                        _jobHdr.SJB_OTHERREF = _inventoryMovementHeader.Ith_oth_docno;

                                        _inventoryDAL.Save_Job_Header(_jobHdr);

                                        item.Jbd_isstockupdate = 1;
                                        InventoryHeader _invH = _inventoryDAL.Get_Int_Hdr(_inventoryMovementHeader.Ith_oth_docno);
                                        if (_invH != null)
                                        {
                                            item.Jbd_aodissueloc = _invH.Ith_loc;
                                            item.Jbd_aodissuedt = _invH.Ith_doc_date;
                                            item.Jbd_aodissueno = _invH.Ith_doc_no;
                                        }
                                        item.Jbd_seq_no = _jobHdr.SJB_SEQ_NO;
                                        item.Jbd_jobno = _KDJobNo;
                                        item.Jbd_sjobno = _KDJobNo + "-1";
                                        item.Jbd_aodrecno = _docNo;
                                        item.Jbd_stage = 2;
                                        _inventoryDAL.UpdateJobDetailWeb(item);

                                        #region Job detail Log update
                                        Service_Job_StageLog oLog1 = new Service_Job_StageLog();
                                        oLog1.SJL_REQNO = "";
                                        oLog1.SJL_JOBNO = _KDJobNo;
                                        oLog1.SJL_JOBLINE = item.Jbd_jobline;
                                        oLog1.SJL_COM = item.Jbd_com;
                                        oLog1.SJL_LOC = item.Jbd_loc;
                                        oLog1.SJL_JOBSTAGE = 2;
                                        oLog1.SJL_CRE_BY = _jobHdr.SJB_CRE_BY;
                                        oLog1.SJL_CRE_DT = DateTime.Now;
                                        oLog1.SJL_SESSION_ID = _jobHdr.SJB_SESSION_ID;
                                        oLog1.SJL_INFSUP = 0;
                                        _inventoryDAL.Save_ServiceJobStageLog(oLog1);
                                        #endregion
                                        #region save Service_Job_Defects
                                        Service_Job_Defects _jobDef = new Service_Job_Defects();
                                        _jobDef.SRD_SEQ_NO = _jobHdr.SJB_SEQ_NO;
                                        _jobDef.SRD_JOB_NO = _KDJobNo;
                                        _jobDef.SRD_JOB_LINE = item.Jbd_jobline;
                                        _jobDef.SRD_STAGE = "J";
                                        _jobDef.SRD_DEF_TP = oChnlPara.SP_DEFECTDESCRIPTION;
                                        //_lstJobDef.SRD_DEF_LINE = _subLine;
                                        _jobDef.SRD_CRE_BY = _jobHdr.SJB_CRE_BY;
                                        _jobDef.SRD_MOD_BY = _jobHdr.SJB_CRE_BY;
                                        _jobDef.SRD_ACT = 1;
                                        _inventoryDAL.UpdateJobDefects(_jobDef);
                                        #endregion
                                    }
                                    #endregion
                                    #endregion
                                }
                            }
                        }
                        #endregion
                    }

                    //updated by akila 2018/02/12 - check AOD IN & OUT serial count
                    #region Check AOD IN & OUT serial count
                    //if (_inventoryMovementHeader.Ith_acc_no != "SCMWEB")
                    //{
                    //    List<InventoryBatchN> _lstOutBatch = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _inventoryMovementHeader.Ith_oth_docno });
                    //    decimal _outBatchCount = 0;
                    //    if (_lstOutBatch.Count > 0)
                    //    {
                    //        _outBatchCount = _lstOutBatch.Sum(c => c.Itb_bal_qty1);
                    //        if (_outBatchCount == 0)
                    //        {
                    //            List<InventorySerialN> _outSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                    //            {
                    //                Ins_doc_no = _inventoryMovementHeader.Ith_oth_docno,
                    //                Ins_com = _inventoryMovementHeader.Ith_oth_com,
                    //                Ins_loc = _inventoryMovementHeader.Ith_oth_loc
                    //            });

                    //            List<InventorySerialN> _inSerList = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    //            //List<InventorySerialN> _inSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                    //            //{
                    //            //    Ins_doc_no = _inventoryMovementHeader.Ith_doc_no,
                    //            //    Ins_com = _inventoryMovementHeader.Ith_com,
                    //            //    Ins_loc = _inventoryMovementHeader.Ith_loc
                    //            //});

                    //            if (_outSerList.Count != _inSerList.Count)
                    //            {
                    //                _docNo = "AOD IN and OUT serial count is mismatch";
                    //                _inventoryRepDAL.TransactionRollback();
                    //                _inventoryDAL.TransactionRollback();
                    //                _ScmCommonDAL.TransactionRollback();
                    //                return -1;
                    //            }
                    //        }
                    //    }
                    //}
                    #endregion

                    if (effect == 1)
                    {
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                    }
                    else
                    {
                        _docNo = "Process terminated !";
                        effect = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                _docNo = ex.Message;
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }

        #endregion AOD Receipt *** Chamal 28-05-2012 ***

        #region AOD Issue *** Chamal 09-06-2012 ***

        public Int16 AODIssue(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                var _lst = (from n in _reptPickSerials
                            group n by new { n.Tus_itm_cd } into r
                            select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_qty = r.Sum(p => p.Tus_qty) }).ToList();
                foreach (var s in _lst)
                {
                    string _item = s.Tus_itm_cd;
                    decimal _qty = s.Tus_qty;
                    _inventoryDAL.UpdateRequestItem(_inventoryMovementHeader.Ith_manual_ref, _item, _qty);
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _tr.Complete();
                return effect;
            }
        }

        #endregion AOD Issue *** Chamal 09-06-2012 ***

        #region Purchase Return *** Chamal 09-06-2012 ***

        public Int16 PRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);
                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _tr.Complete();
                return effect;
            }
        }

        #endregion Purchase Return *** Chamal 09-06-2012 ***

        //#region Sales Return *** Chamal 28-05-2012 ***
        public Int16 SRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _ScmCommonDAL.ConnectionOpen();
                Int16 effect = 0;

                //Added by Prabhath on 5/9/2013
                //Purpose : Checking for available duplicates

                #region Checking for the serial/serial id duplicate

                string _company = _inventoryMovementHeader.Ith_com;
                string _location = _inventoryMovementHeader.Ith_loc;
                string _item = string.Empty;
                string _serial = string.Empty;
                Int64 _id = 0;
                StringBuilder _build = new StringBuilder();
                foreach (ReptPickSerials _srl in _reptPickSerials)
                {
                    _item = _srl.Tus_itm_cd; _serial = _srl.Tus_ser_1; _id = _srl.Tus_ser_id;
                    DataTable _byid = _inventoryDAL.CheckSerialByID(_company, _location, _id);
                    DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_company, _location, _item, _serial);
                    if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null)
                            _build.Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                        else
                            _build.AppendLine().Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                }
                if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                {
                    _docNo = "Please check the below item(s). These serial(s)/serial id(s) are already available in your location.\n " + _build.ToString();
                    effect = -1;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _ScmCommonDAL.TransactionRollback();
                    return effect;
                }
                #endregion Checking for the serial/serial id duplicate

                effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);
                UpdateRefDocumentSerial(_reptPickSerials, _inventoryMovementHeader.Ith_oth_docno);

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _ScmCommonDAL.ConnectionClose();
                _tr.Complete();
                return effect;
            }
        }

        //#endregion

        #region Sales Return *** Chamal / edit by darshana 28-07-2012 ***

        public Int16 SRNWithCreditNote(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, ReptCommonDAL _invRepDAL, InventoryDAL _invDAL, SCMCommonDAL _scmDAL)
        {
            _inventoryDAL = _invDAL;
            _inventoryRepDAL = _invRepDAL;
            _ScmCommonDAL = _scmDAL;

            Int16 effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

            return effect;
        }

        #endregion Sales Return *** Chamal / edit by darshana 28-07-2012 ***

        #region Sales Return *** Darshana 06-02-2014 ***

        public Int16 AODWithCreditNote(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, ReptCommonDAL _invRepDAL, InventoryDAL _invDAL, SCMCommonDAL _scmDAL)
        {
            _inventoryDAL = _invDAL;
            _inventoryRepDAL = _invRepDAL;
            _ScmCommonDAL = _scmDAL;

            Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

            return effect;
        }

        #endregion Sales Return *** Darshana 06-02-2014 ***

        #region Delivery Order - Quotation Based
        public Int16 DeliveryOrderEntryQuotation_Based(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, InventoryHeader _inventoryMovementHeaderGRN, List<ReptPickSerials> _reptPickSerialsGRN, List<ReptPickSerialsSub> _reptPickSerialsSubGRN, MasterAutoNumber _masterAutoNumberGRN, out string documentNoGRN, bool IsGRN, List<InvoiceVoucher> Voucher, List<Transport> _traList = null)
        {
            Int16 effect = 0;
            //using (TransactionScope _tr = new TransactionScope())
            //{
            //_salesDAL = new SalesDAL();
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                //_ScmCommonDAL = new SCMCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                //_ScmCommonDAL.ConnectionOpen();
                //_ScmCommonDAL.BeginTransaction();

                string documentNoDO = string.Empty;
                string documentNoGRNNo = string.Empty;

                effect = DeliveryOrderEntryQuotation_Based(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out documentNoDO, _inventoryRepDAL, _inventoryDAL, false);
                documentNo = documentNoDO;
                if (IsGRN)
                    effect = GRN(_inventoryMovementHeaderGRN, _reptPickSerialsGRN, _reptPickSerialsSubGRN, _masterAutoNumberGRN, out documentNoGRNNo);
                if (Voucher != null) if (Voucher.Count > 0) foreach (InvoiceVoucher _vou in Voucher) _inventoryDAL.UpdateDeliverVoucher(_inventoryMovementHeader.Ith_com, _vou.Stvo_inv_no, _vou.Stvo_gv_itm, Convert.ToString(_vou.Stvo_bookno), Convert.ToString(_vou.Stvo_pageno), _inventoryMovementHeader.Ith_cre_by);

                documentNoGRN = documentNoGRNNo;

                //Add by Lakshan 2016 May 03
                if (_traList != null)
                {
                    foreach (Transport item in _traList)
                    {
                        if (item.Slip_no_auto_gen)
                        {
                            if (item.MstAuto != null)
                            {
                                Int32 _autoNo = _inventoryDAL.GetAutoNumber(item.MstAuto.Aut_moduleid, item.MstAuto.Aut_direction, item.MstAuto.Aut_start_char, item.MstAuto.Aut_cate_tp,
                                    item.MstAuto.Aut_cate_cd, item.MstAuto.Aut_modify_dt, item.MstAuto.Aut_year).Aut_number;
                                string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + item.Mbe_curr_slip_cd + "-" + "CO" + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(item.MstAuto);
                                item.Itrn_ref_no = _documentNo;
                            }
                        }
                        item.Itrn_ref_doc = documentNoGRNNo;
                        item.Itrn_trns_no = _inventoryMovementHeader.Ith_doc_no;
                        _generalDAL.Save_Int_Transport(item);
                    }
                }
                //

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                //_ScmCommonDAL.TransactionCommit();

                //_inventoryRepDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();

                //_tr.Complete();
                //return effect;
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                documentNo = "ERROR : " + err.Message.ToString();
                documentNoGRN = documentNo;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                // _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }
        public Int16 DeliveryOrderEntryQuotation_Based(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, ReptCommonDAL _invRepDAL, InventoryDAL _invDAL, bool _withInvoice)
        {
            if (_withInvoice == true)
            {
                _inventoryDAL = _invDAL;
                _inventoryRepDAL = _invRepDAL;
            }

            //InvoiceHeader _salesHeader = new InvoiceHeader();
            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            List<ReptPickSerials> _cons = new List<ReptPickSerials>();
            List<ReptPickSerials> _notcons = new List<ReptPickSerials>();

            DataTable _newSeqNosTable = new DataTable();
            _newSeqNosTable.Columns.Add("DocType", typeof(string));
            _newSeqNosTable.Columns.Add("SeqNo", typeof(int));

            //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
            MasterCompany _masterComp = null;
            _masterComp = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com);

            if (_masterComp.Mc_anal13 == 0)
            {
                #region Consignment stock transfer to normal stock
                var _consSupp = from _ListConsSupp in _reptPickSerials
                                where _ListConsSupp.Tus_itm_stus == "CONS"
                                group _ListConsSupp by new { _ListConsSupp.Tus_orig_supp } into list
                                select new { supp = list.Key.Tus_orig_supp };
                foreach (var listsSupp in _consSupp)
                {
                    InventoryHeader ConsPickHeader = new InventoryHeader();
                    ReptPickSerials ConsPickSerials = new ReptPickSerials();

                    Boolean _isVatClaim = false;
                    string _suppTaxCate = string.Empty;

                    MasterBusinessEntity _supDet = new MasterBusinessEntity();
                    _supDet = _inventoryDAL.GetBusinessCompanyDetail(_inventoryMovementHeader.Ith_com, listsSupp.supp.ToString(), null, null, "S");
                    if (_supDet != null)
                    {
                        _isVatClaim = _supDet.Mbe_is_tax;
                        _suppTaxCate = _supDet.Mbe_cate;
                    }
                    else
                    {
                        //MessageBox.Show("Cannot find supplier details.", "Purchase Order", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //return;
                    }

                    _cons = new List<ReptPickSerials>();

                    #region Fill Consignment Header Object
                    ConsPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
                    ConsPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
                    ConsPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
                    ConsPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
                    ConsPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
                    ConsPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
                    ConsPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
                    ConsPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
                    ConsPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
                    ConsPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
                    ConsPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
                    ConsPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
                    ConsPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
                    //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
                    ConsPickHeader.Ith_bus_entity = listsSupp.supp;
                    ConsPickHeader.Ith_cate_tp = "CONSIGN";
                    ConsPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
                    ConsPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
                    ConsPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
                    ConsPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    ConsPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
                    ConsPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
                    ConsPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
                    ConsPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
                    ConsPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
                    ConsPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
                    //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
                    ConsPickHeader.Ith_direct = false;
                    ConsPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                    ConsPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString(); // ADJ Seq No
                    //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                    ConsPickHeader.Ith_doc_tp = "ADJ";
                    ConsPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
                    ConsPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
                    ConsPickHeader.Ith_entry_tp = "SYS";
                    ConsPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
                    ConsPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
                    ConsPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
                    ConsPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
                    ConsPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
                    ConsPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
                    ConsPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
                    ConsPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
                    ConsPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
                    ConsPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                    ConsPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    ConsPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
                    ConsPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
                    ConsPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
                    ConsPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
                    ConsPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
                    ConsPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
                    ConsPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // ADJ Seq No
                    ConsPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                    ConsPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
                    ConsPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
                    ConsPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
                    ConsPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
                    _newSeqNosTable.Rows.Add("ADJ", ConsPickHeader.Ith_seq_no);
                    #endregion Fill Consignment Header Object

                    var _consPickSerials = from _ListConsPickSerials in _reptPickSerials
                                           where _ListConsPickSerials.Tus_itm_stus == "CONS" && _ListConsPickSerials.Tus_orig_supp == listsSupp.supp
                                           select new ReptPickSerials
                                           {
                                               #region Seelct * From ReptPickSerials
                                               Tus_batch_line = _ListConsPickSerials.Tus_batch_line,
                                               Tus_bin = _ListConsPickSerials.Tus_bin,
                                               Tus_com = _ListConsPickSerials.Tus_com,
                                               Tus_cre_by = _ListConsPickSerials.Tus_cre_by,
                                               Tus_cre_dt = _ListConsPickSerials.Tus_cre_dt,
                                               Tus_cross_batchline = _ListConsPickSerials.Tus_cross_batchline,
                                               Tus_cross_itemline = _ListConsPickSerials.Tus_cross_itemline,
                                               Tus_cross_seqno = _ListConsPickSerials.Tus_cross_seqno,
                                               Tus_cross_serline = _ListConsPickSerials.Tus_cross_serline,
                                               Tus_doc_dt = _ListConsPickSerials.Tus_doc_dt,
                                               //Tus_doc_no = ConsPickHeader.Ith_seq_no.ToString(), //Doc No
                                               Tus_doc_no = _ListConsPickSerials.Tus_doc_no, //Doc No
                                               Tus_exist_grncom = _ListConsPickSerials.Tus_exist_grncom,
                                               Tus_exist_grndt = _ListConsPickSerials.Tus_exist_grndt,
                                               Tus_exist_grnno = _ListConsPickSerials.Tus_exist_grnno,
                                               Tus_exist_supp = _ListConsPickSerials.Tus_exist_supp,
                                               Tus_itm_brand = _ListConsPickSerials.Tus_itm_brand,
                                               Tus_itm_cd = _ListConsPickSerials.Tus_itm_cd,
                                               Tus_itm_desc = _ListConsPickSerials.Tus_itm_desc,
                                               Tus_itm_line = _ListConsPickSerials.Tus_itm_line,
                                               Tus_itm_model = _ListConsPickSerials.Tus_itm_model,
                                               Tus_itm_stus = _ListConsPickSerials.Tus_itm_stus,
                                               Tus_loc = _ListConsPickSerials.Tus_loc,
                                               Tus_orig_grncom = _ListConsPickSerials.Tus_orig_grncom,
                                               Tus_orig_grndt = _ListConsPickSerials.Tus_orig_grndt,
                                               Tus_orig_grnno = _ListConsPickSerials.Tus_orig_grnno,
                                               Tus_orig_supp = _ListConsPickSerials.Tus_orig_supp,
                                               Tus_out_date = _ListConsPickSerials.Tus_out_date,
                                               Tus_qty = _ListConsPickSerials.Tus_qty,
                                               //Tus_seq_no = ConsPickHeader.Ith_seq_no, //Seq No
                                               Tus_seq_no = _ListConsPickSerials.Tus_seq_no, //Seq No
                                               Tus_serial_id = _ListConsPickSerials.Tus_serial_id,
                                               Tus_ser_1 = _ListConsPickSerials.Tus_ser_1,
                                               Tus_ser_2 = _ListConsPickSerials.Tus_ser_2,
                                               Tus_ser_3 = _ListConsPickSerials.Tus_ser_3,
                                               Tus_ser_4 = _ListConsPickSerials.Tus_ser_4,
                                               Tus_ser_id = _ListConsPickSerials.Tus_ser_id,
                                               Tus_ser_line = _ListConsPickSerials.Tus_ser_line,
                                               Tus_session_id = _ListConsPickSerials.Tus_session_id,
                                               Tus_unit_cost = _ListConsPickSerials.Tus_unit_cost,
                                               Tus_unit_price = _ListConsPickSerials.Tus_unit_price,
                                               Tus_usrseq_no = ConsPickHeader.Ith_seq_no, //Scan Seq No
                                               Tus_warr_no = _ListConsPickSerials.Tus_warr_no,
                                               Tus_new_status = _ListConsPickSerials.Tus_new_status,
                                               Tus_new_remarks = _ListConsPickSerials.Tus_new_remarks,
                                               Tus_warr_period = _ListConsPickSerials.Tus_warr_period
                                               #endregion Seelct * From ReptPickSerials
                                           };

                    foreach (var listsConsPickSerials in _consPickSerials)
                    {
                        #region Fill Consignment Serials Object
                        ConsPickSerials = new ReptPickSerials();
                        ConsPickSerials.Tus_batch_line = listsConsPickSerials.Tus_batch_line;
                        ConsPickSerials.Tus_bin = listsConsPickSerials.Tus_bin;
                        ConsPickSerials.Tus_com = listsConsPickSerials.Tus_com;
                        ConsPickSerials.Tus_cre_by = listsConsPickSerials.Tus_cre_by;
                        ConsPickSerials.Tus_cre_dt = listsConsPickSerials.Tus_cre_dt;
                        ConsPickSerials.Tus_cross_batchline = listsConsPickSerials.Tus_cross_batchline;
                        ConsPickSerials.Tus_cross_itemline = listsConsPickSerials.Tus_cross_itemline;
                        ConsPickSerials.Tus_cross_seqno = listsConsPickSerials.Tus_cross_seqno;
                        ConsPickSerials.Tus_cross_serline = listsConsPickSerials.Tus_cross_serline;
                        ConsPickSerials.Tus_doc_dt = listsConsPickSerials.Tus_doc_dt;
                        ConsPickSerials.Tus_doc_no = listsConsPickSerials.Tus_doc_no;
                        ConsPickSerials.Tus_exist_grncom = listsConsPickSerials.Tus_exist_grncom;
                        ConsPickSerials.Tus_exist_grndt = listsConsPickSerials.Tus_exist_grndt;
                        ConsPickSerials.Tus_exist_grnno = listsConsPickSerials.Tus_exist_grnno;
                        ConsPickSerials.Tus_exist_supp = listsConsPickSerials.Tus_exist_supp;
                        ConsPickSerials.Tus_itm_brand = listsConsPickSerials.Tus_itm_brand;
                        ConsPickSerials.Tus_itm_cd = listsConsPickSerials.Tus_itm_cd;
                        ConsPickSerials.Tus_itm_desc = listsConsPickSerials.Tus_itm_desc;
                        ConsPickSerials.Tus_itm_line = listsConsPickSerials.Tus_itm_line;
                        ConsPickSerials.Tus_itm_model = listsConsPickSerials.Tus_itm_model;
                        ConsPickSerials.Tus_itm_stus = listsConsPickSerials.Tus_itm_stus; //CONS
                        ConsPickSerials.Tus_loc = listsConsPickSerials.Tus_loc;
                        ConsPickSerials.Tus_orig_grncom = listsConsPickSerials.Tus_orig_grncom;
                        ConsPickSerials.Tus_orig_grndt = listsConsPickSerials.Tus_orig_grndt;
                        ConsPickSerials.Tus_orig_grnno = listsConsPickSerials.Tus_orig_grnno;
                        ConsPickSerials.Tus_orig_supp = listsConsPickSerials.Tus_orig_supp;
                        ConsPickSerials.Tus_out_date = listsConsPickSerials.Tus_out_date;
                        ConsPickSerials.Tus_qty = listsConsPickSerials.Tus_qty;
                        ConsPickSerials.Tus_seq_no = listsConsPickSerials.Tus_seq_no;
                        ConsPickSerials.Tus_serial_id = listsConsPickSerials.Tus_serial_id;
                        ConsPickSerials.Tus_ser_1 = listsConsPickSerials.Tus_ser_1;
                        ConsPickSerials.Tus_ser_2 = listsConsPickSerials.Tus_ser_2;
                        ConsPickSerials.Tus_ser_3 = listsConsPickSerials.Tus_ser_3;
                        ConsPickSerials.Tus_ser_4 = listsConsPickSerials.Tus_ser_4;
                        ConsPickSerials.Tus_ser_id = listsConsPickSerials.Tus_ser_id;
                        ConsPickSerials.Tus_ser_line = listsConsPickSerials.Tus_ser_line;
                        ConsPickSerials.Tus_session_id = listsConsPickSerials.Tus_session_id;
                        ConsPickSerials.Tus_unit_cost = listsConsPickSerials.Tus_unit_cost;
                        ConsPickSerials.Tus_unit_price = listsConsPickSerials.Tus_unit_price;
                        ConsPickSerials.Tus_usrseq_no = listsConsPickSerials.Tus_usrseq_no;
                        ConsPickSerials.Tus_warr_no = listsConsPickSerials.Tus_warr_no;
                        ConsPickSerials.Tus_new_status = listsConsPickSerials.Tus_new_status;
                        ConsPickSerials.Tus_new_remarks = listsConsPickSerials.Tus_new_remarks;
                        ConsPickSerials.Tus_warr_period = listsConsPickSerials.Tus_warr_period;
                        #endregion Fill Consignment Serials Object
                        _cons.Add(ConsPickSerials);
                    }

                    //Save ADJ -
                    SaveOutwardScanSerial(ConsPickHeader, _cons, null, null, false);

                    //----- Start to create GRN ------
                    InventoryHeader GRNPickHeader = new InventoryHeader();
                    List<ReptPickSerials> GRNPickSerials = new List<ReptPickSerials>();

                    PurchaseOrder POHeader = new PurchaseOrder();
                    List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();

                    #region Fill GRN Header Object
                    GRNPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
                    GRNPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
                    GRNPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
                    GRNPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
                    GRNPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
                    GRNPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
                    GRNPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
                    GRNPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
                    GRNPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
                    GRNPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
                    GRNPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
                    GRNPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
                    GRNPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
                    //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
                    GRNPickHeader.Ith_bus_entity = listsSupp.supp;
                    GRNPickHeader.Ith_cate_tp = "CONSIGN";
                    GRNPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
                    GRNPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
                    GRNPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
                    GRNPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    GRNPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
                    GRNPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
                    GRNPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
                    GRNPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
                    GRNPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
                    GRNPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
                    //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
                    GRNPickHeader.Ith_direct = true;
                    GRNPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                    GRNPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString();
                    //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                    GRNPickHeader.Ith_doc_tp = "GRN";
                    GRNPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
                    GRNPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
                    GRNPickHeader.Ith_entry_tp = "SYS";
                    GRNPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
                    GRNPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
                    GRNPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
                    GRNPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
                    GRNPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
                    GRNPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
                    GRNPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
                    GRNPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
                    GRNPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
                    GRNPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                    GRNPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    GRNPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
                    GRNPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
                    GRNPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
                    GRNPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
                    GRNPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
                    GRNPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
                    GRNPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // GRN Seq No
                    GRNPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                    GRNPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
                    GRNPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
                    GRNPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
                    GRNPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
                    _newSeqNosTable.Rows.Add("GRN", GRNPickHeader.Ith_seq_no);
                    #endregion Fill GRN Header Object

                    #region Fill PO Header Object
                    POHeader.Poh_com = _inventoryMovementHeader.Ith_com;
                    POHeader.Poh_contain_kit = false; // ???
                    POHeader.Poh_cre_period = "N/A"; // ??
                    POHeader.Poh_cur_cd = "LKR";
                    POHeader.Poh_dis_amt = 0;
                    POHeader.Poh_dis_rt = 0;
                    POHeader.Poh_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                    POHeader.Poh_dt = _inventoryMovementHeader.Ith_doc_date;
                    POHeader.Poh_ex_rt = 1;
                    POHeader.Poh_frm_mon = 0;
                    POHeader.Poh_frm_yer = 0;
                    POHeader.Poh_job_no = "CONS_TO_NOR";
                    POHeader.Poh_ope = "N/A"; // ???
                    POHeader.Poh_oth_tot = 0;
                    POHeader.Poh_pay_term = null;
                    POHeader.Poh_port_of_orig = "N/A";
                    POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
                    POHeader.Poh_profit_cd = _inventoryMovementHeader.Ith_pc;
                    POHeader.Poh_ref = "N/A";
                    POHeader.Poh_remarks = "AUTO GENERATED";
                    POHeader.Poh_reprint = false;
                    POHeader.Poh_sent_add = string.Empty;
                    POHeader.Poh_sent_by = string.Empty;
                    POHeader.Poh_sent_to_vendor = false;
                    POHeader.Poh_sent_via = string.Empty;
                    POHeader.Poh_seq_no = GRNPickHeader.Ith_seq_no;
                    POHeader.Poh_stus = "F";
                    POHeader.Poh_sub_tot = 0;
                    POHeader.Poh_sub_tp = "N"; //Normal
                    POHeader.Poh_supp = listsSupp.supp;
                    POHeader.Poh_tax_chg = false;
                    POHeader.Poh_tax_tot = 0;
                    POHeader.Poh_to_mon = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_tot = 0;
                    POHeader.Poh_tp = "L"; //Local Purchase
                    POHeader.Poh_trans_term = string.Empty;
                    POHeader.Poh_cre_by = GRNPickHeader.Ith_cre_by;
                    _newSeqNosTable.Rows.Add("PO", POHeader.Poh_seq_no);
                    #endregion Fill PO Header Object

                    GRNPickSerials = _cons;
                    foreach (ReptPickSerials p in GRNPickSerials)
                    {
                        p.Tus_usrseq_no = GRNPickHeader.Ith_seq_no;
                        p.Tus_seq_no = GRNPickHeader.Ith_seq_no;
                        p.Tus_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                        p.Tus_itm_stus = "GDLP";
                        p.Tus_base_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                        p.Tus_base_itm_line = 0;
                        p.Tus_unit_cost = _inventoryDAL.Get_Cons_Quo_Price(_inventoryMovementHeader.Ith_com, listsSupp.supp, _inventoryMovementHeader.Ith_doc_date.Date, p.Tus_itm_cd, p.Tus_qty);
                    }

                    Int16 _poLineNo = 1;
                    var _grnPickSerials = from p in GRNPickSerials
                                          where p.Tus_itm_stus == "GDLP"
                                          group p by new { p.Tus_itm_cd, p.Tus_unit_cost, p.Tus_base_doc_no, p.Tus_base_itm_line } into list
                                          select new { itemcode = list.Key.Tus_itm_cd, unitprice = list.Key.Tus_unit_cost, pono = list.Key.Tus_base_doc_no, polineno = list.Key.Tus_base_itm_line, poqty = list.Sum(p => p.Tus_qty) };
                    foreach (var _p in _grnPickSerials)
                    {
                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                        #region Fill PO Items Object

                        decimal _tax = TaxCalculation(_inventoryMovementHeader.Ith_com, _p.itemcode.ToString(), "GDLP", _p.unitprice, 0);
                        decimal _taxForActual = 0;

                        if (string.IsNullOrEmpty(_suppTaxCate))
                        {
                            POItem.Pod_act_unit_price = (_p.poqty * _p.unitprice + _tax) / _p.poqty;
                        }
                        else
                        {
                            decimal _unitVal = _p.unitprice;
                            decimal _qty = _p.poqty;
                            decimal _amt = _unitVal * _qty;
                            _taxForActual = TaxCalculationActualCost(_inventoryMovementHeader.Ith_com, _p.itemcode.ToString(), "GDLP", _amt, _suppTaxCate, 0);
                            POItem.Pod_act_unit_price = ((_p.poqty * _p.unitprice) + _taxForActual) / _p.poqty;
                        }

                        //POItem.Pod_act_unit_price = _p.unitprice;
                        POItem.Pod_dis_amt = 0;
                        POItem.Pod_dis_rt = 0;
                        POItem.Pod_grn_bal = 0;
                        POItem.Pod_item_desc = "N/A";
                        POItem.Pod_itm_cd = _p.itemcode.ToString();
                        POItem.Pod_itm_stus = "GDLP";
                        POItem.Pod_itm_tp = "M";
                        POItem.Pod_kit_itm_cd = "N/A";
                        POItem.Pod_kit_line_no = 0;
                        POItem.Pod_lc_bal = 0;
                        POItem.Pod_line_amt = (_p.unitprice * _p.poqty) + _tax;
                        POItem.Pod_line_no = _poLineNo;
                        POItem.Pod_line_tax = _tax;
                        POItem.Pod_line_val = _p.unitprice * _p.poqty;
                        POItem.Pod_nbt = 0;
                        POItem.Pod_nbt_before = 0;
                        POItem.Pod_pi_bal = 0;
                        POItem.Pod_qty = _p.poqty;
                        POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                        POItem.Pod_seq_no = POHeader.Poh_seq_no;
                        POItem.Pod_si_bal = 0;
                        POItem.Pod_tot_tax_before = 0;
                        POItem.Pod_unit_price = _p.unitprice;
                        POItem.Pod_uom = "NOS";
                        POItem.Pod_vat = 0;
                        POItem.Pod_vat_before = 0;
                        #endregion Fill PO Items Object
                        POItems.Add(POItem);

                        foreach (ReptPickSerials p in GRNPickSerials)
                        {
                            if (_p.itemcode == p.Tus_itm_cd && _p.unitprice == p.Tus_unit_cost)
                            {
                                p.Tus_base_itm_line = _poLineNo;
                            }
                        }
                        _poLineNo += 1;
                    }

                    //Save GRN
                    SaveInwardScanSerial(GRNPickHeader, GRNPickSerials, null);
                    //Save PO
                    _inventoryDAL.SaveNewPO(POHeader);
                    foreach (PurchaseOrderDetail _POItems in POItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                    //_inventoryDAL.SaveNewPODel(null);

                    //Get Save GRN Serials and update cross inward document as GRN No
                    #region Update scan serial list cross references
                    List<InventorySerialN> _saveGRNSers = new List<InventorySerialN>();
                    _saveGRNSers = _inventoryDAL.GetIntSerList(GRNPickHeader.Ith_seq_no, string.Empty);

                    foreach (ReptPickSerials p in PickSerials)
                    {
                        foreach (InventorySerialN q in _saveGRNSers)
                        {
                            if (p.Tus_itm_cd == q.Ins_itm_cd && p.Tus_ser_id == q.Ins_ser_id && string.IsNullOrEmpty(p.Tus_serial_id))
                            {
                                p.Tus_unit_cost = q.Ins_unit_cost;
                                p.Tus_itm_stus = "GDLP";
                                p.Tus_doc_no = q.Ins_seq_no.ToString();
                                p.Tus_seq_no = q.Ins_seq_no;
                                p.Tus_itm_line = q.Ins_itm_line;
                                p.Tus_batch_line = q.Ins_batch_line;
                                p.Tus_ser_line = q.Ins_ser_line;
                                p.Tus_serial_id = "1";
                            }
                        }
                    }
                    #endregion Update scan serial list cross references
                }
                #endregion Consignment stock transfer to normal stock
            }
            //var _tbitems =
            //from _pickSerials in _reptPickSerials
            //group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            //_salesHeader = _inventoryDAL.GetInvoiceHeader(_inventoryMovementHeader.Ith_oth_docno);
            //_inventoryMovementHeader.Ith_bus_entity = _salesHeader.Sah_cus_cd;
            //_inventoryMovementHeader.Ith_del_add1 = _salesHeader.Sah_d_cust_add1;
            //_inventoryMovementHeader.Ith_del_add2 = _salesHeader.Sah_d_cust_add2;
            //_inventoryMovementHeader.Ith_pc = _salesHeader.Sah_pc;

            Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out documentNo);

            #region update Consignment related document auto nos
            MasterAutoNumber _AutoNo = new MasterAutoNumber();
            int _e = 0;
            if (_newSeqNosTable.Rows.Count > 0)
            {
                for (int i = 0; i < _newSeqNosTable.Rows.Count; i++)
                {
                    if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "ADJ")
                    {
                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                        _AutoNo.Aut_moduleid = "ADJ";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_start_char = "ADJ";
                        _AutoNo.Aut_cate_tp = "LOC";
                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                    }
                    else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "GRN")
                    {
                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                        _AutoNo.Aut_moduleid = "GRN";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_start_char = "GRN";
                        _AutoNo.Aut_cate_tp = "LOC";
                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                        _AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                    }
                    else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "PO")
                    {
                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                        //_AutoNo.Aut_direction = null;
                        //_AutoNo.Aut_start_char = "PO";
                        //_AutoNo.Aut_cate_tp = "COM";
                        //_AutoNo.Aut_year = null;

                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                        _AutoNo.Aut_cate_tp = "COM";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_modify_dt = null;
                        _AutoNo.Aut_moduleid = "PUR";
                        _AutoNo.Aut_start_char = "PUR";
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                    }
                }
            }
            #endregion update Consignment related document auto nos

            #region Update Quotation Qty
            var _invoice =
            from _pickSerials in _reptPickSerials
            group _pickSerials by new { _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line } into itm
            select new { invoiceno = itm.Key.Tus_base_doc_no, lineno = itm.Key.Tus_base_itm_line, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var invoiceItems in _invoice)
            {
                _inventoryDAL.UpdateQuatationDOQty(invoiceItems.invoiceno.ToString(), Convert.ToInt16(invoiceItems.lineno.ToString()), Convert.ToDecimal(invoiceItems.itemqty.ToString()));
            }

            _inventoryDAL.UpdateQuatationDOStatus(_inventoryMovementHeader.Ith_oth_docno);

            #endregion Update Quotation Qty

            return effect;
        }

        #endregion

        #region Delivery Order *** Chamal 04-05-2012 ***

        public Int16 DeliveryOrderEntry(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, InventoryHeader _inventoryMovementHeaderGRN, List<ReptPickSerials> _reptPickSerialsGRN, List<ReptPickSerialsSub> _reptPickSerialsSubGRN, MasterAutoNumber _masterAutoNumberGRN, out string documentNoGRN, bool IsGRN, List<InvoiceVoucher> Voucher, List<Transport> _traList = null, List<string> _SoaList = null)
        {
            Int16 effect = 0;
            documentNo = string.Empty;
            documentNoGRN = string.Empty;
            //using (TransactionScope _tr = new TransactionScope())
            //{
            //_salesDAL = new SalesDAL();
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                //_ScmCommonDAL = new SCMCommonDAL();
                _generalDAL = new GeneralDAL();//tharanga 2018/04/23

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();//tharanga 2018/04/23
                _generalDAL.BeginTransaction();//tharanga 2018/04/23
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                //_ScmCommonDAL.ConnectionOpen();
                //_ScmCommonDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();


                string documentNoDO = string.Empty;
                string documentNoGRNNo = string.Empty;
                #region add by lakshan 19 jun 2017 validate do qty vs invoice
                List<TmpValidation> _tmpValList = new List<TmpValidation>();
                List<TmpValidation> _tmpErrList = new List<TmpValidation>();
                TmpValidation _tmpValidation = new TmpValidation();
                List<InvoiceItem> _invItmList = new List<InvoiceItem>();
                List<InventoryBatchN> _doDataList = new List<InventoryBatchN>();
                List<INR_RES_LOG> _dfsResLogList = new List<INR_RES_LOG>();
                if (_inventoryMovementHeader.TMP_PROJECT_NAME == "SCMWEB" && _inventoryMovementHeader.TmpValidateInvDo)
                {
                    _invItmList = _salesDAL.GetInvoiceDetailByInvoice(_inventoryMovementHeader.Ith_oth_docno);
                    var _serialData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_base_doc_no, x.Tus_base_itm_line }).Select(group => new { Peo = group.Key, _pickQty = group.Sum(o => o.Tus_qty) });
                    foreach (var item in _serialData)
                    {
                        _tmpValidation = new TmpValidation();
                        var _invItem = _invItmList.Where(c => c.Sad_itm_cd == item.Peo.Tus_itm_cd && c.Sad_itm_line == item.Peo.Tus_base_itm_line
                            && c.Sad_inv_no == item.Peo.Tus_base_doc_no).FirstOrDefault();
                        if (_invItem == null)
                        {
                            _invItem = _invItmList.Where(c => c.Sad_sim_itm_cd == item.Peo.Tus_itm_cd && c.Sad_itm_line == item.Peo.Tus_base_itm_line
                            && c.Sad_inv_no == item.Peo.Tus_base_doc_no).FirstOrDefault();
                        }
                        if (_invItem != null)
                        {
                            _tmpValidation.Sad_itm_cd = _invItem.Sad_itm_cd;
                            _tmpValidation.Sad_itm_line = _invItem.Sad_itm_line;
                            _tmpValidation.Sad_qty = _invItem.Sad_qty;
                            _tmpValidation.Sad_do_qty = _invItem.Sad_do_qty;
                            _tmpValidation.Sad_srn_qty = _invItem.Sad_srn_qty;
                            _tmpValidation.Ava_bal_bf_save = _tmpValidation.Sad_qty - _tmpValidation.Sad_do_qty;
                            _tmpValidation.Pick_qty = 0;
                            _doDataList = _inventoryDAL.GET_INT_BATCH_DATA_BY_REF(item.Peo.Tus_base_doc_no, item.Peo.Tus_base_itm_line);
                            if (_doDataList.Count > 0)
                            {
                                _tmpValidation.Act_do_qty_bf_save = _doDataList.Sum(c => c.Inb_qty);
                                if (_tmpValidation.Act_do_qty_bf_save != _tmpValidation.Sad_do_qty)
                                {
                                    _tmpValidation._isErr = true;
                                    _tmpValidation.errorMsg = "Delivery quantity not updated [OLD] !";
                                    _tmpErrList.Add(_tmpValidation);
                                }
                            }
                            if (_tmpValidation.Ava_bal_bf_save < item._pickQty)
                            {
                                _tmpValidation._isErr = true;
                                _tmpValidation.errorMsg = "Picked quantity exceeded !";
                                _tmpErrList.Add(_tmpValidation);
                            }
                            else
                            {
                                _tmpValidation.Pick_qty = item._pickQty;
                            }
                            _tmpValList.Add(_tmpValidation);
                        }
                        else
                        {
                            _tmpValidation._isErr = true;
                            _tmpValidation.errorMsg = "Item is not available in selected invoice [REFLINE] !";
                            _tmpErrList.Add(_tmpValidation);
                        }
                    }
                    if (_tmpErrList.Count > 0)
                    {
                        effect = -1;
                        documentNo = _tmpErrList[0].errorMsg;
                        documentNoGRN = documentNo;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        effect = -1;
                        return effect;
                    }
                    decimal _doQty = _reptPickSerials.Sum(c => c.Tus_qty);
                    decimal _validDoQty = _tmpValList.Sum(c => c.Pick_qty);
                    if (_doQty != _validDoQty)
                    {
                        effect = -1;
                        documentNo = "Precess Terminated ! [SAT_ITM vs TUS_REF]";
                        documentNoGRN = documentNo;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        effect = -1;
                        return effect;
                    }
                }
                #endregion
                //kapila 4/6/2016 get manual book number
                if (!string.IsNullOrEmpty(_inventoryMovementHeader.Ith_manual_ref))
                {
                    DataTable _dtBk = _inventoryDAL.GetManualDocBookNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), "");
                    if (_dtBk.Rows.Count > 0)
                    {
                        _inventoryMovementHeader.Ith_bk_no = _dtBk.Rows[0]["mdd_bk_no"].ToString();
                    }
                }
                //Rukshan Update Cusdec Item
                MasterLocation oLocation = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                if (oLocation != null)
                {
                    if (oLocation.Ml_cate_1 == "DFS")
                    {
                        InventoryRequestItem _tmpReqItm = new InventoryRequestItem();
                        List<InventoryRequestItem> _tmpReqItmList = new List<InventoryRequestItem>();
                        InventoryRequest _tmpInvreq = new InventoryRequest();
                        var _bondItems = _reptPickSerials.GroupBy(x => new { x.Tus_base_doc_no_1, x.Tus_job_no, x.Tus_job_line, x.Tus_itm_cd, x.Tus_itm_stus, x.Tus_itri_line_no }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                        foreach (var bonditm in _bondItems)
                        {
                            decimal qty = _reptPickSerials.Where(x => x.Tus_base_doc_no_1 == bonditm.Peo.Tus_base_doc_no_1 && x.Tus_itm_cd == bonditm.Peo.Tus_itm_cd).ToList().Select(x => x.Tus_qty).Sum();
                            //_inventoryDAL.Update_Cusdec_bal(bonditm.Peo.Tus_base_doc_no_1, qty, bonditm.Peo.Tus_itm_cd, bonditm.Peo.Tus_job_line);
                            _inventoryDAL.Update_Cusdec_bal_New(bonditm.Peo.Tus_base_doc_no_1, qty, bonditm.Peo.Tus_itm_cd, bonditm.Peo.Tus_job_line);
                            #region BOI base DO line issue fixed 31Aug2017 by Lakshan
                            _tmpInvreq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = bonditm.Peo.Tus_base_doc_no_1 }).FirstOrDefault();
                            _tmpReqItmList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(bonditm.Peo.Tus_base_doc_no_1);
                            if (_tmpInvreq != null)
                            {
                                if (_tmpInvreq.Itr_tp == "BOI" || _tmpInvreq.Itr_tp == "EXP")
                                {
                                    //_tmpReqItm = _inventoryDAL.GetImpIntReqItmForDo(bonditm.Peo.Tus_base_doc_no_1, bonditm.Peo.Tus_job_no, bonditm.Peo.Tus_job_line);
                                    if (_tmpReqItm != null)
                                    {
                                        _inventoryDAL.UpdateRequestBalance(bonditm.Peo.Tus_base_doc_no_1, _inventoryMovementHeader.Ith_com,
                                        bonditm.Peo.Tus_itm_cd, bonditm.Peo.Tus_itm_stus, qty, _inventoryMovementHeader.Ith_cre_by, bonditm.Peo.Tus_itri_line_no);
                                        _inventoryDAL.Update_Cost_hdr_DO(bonditm.Peo.Tus_base_doc_no_1, _inventoryMovementHeader.Ith_com);
                                        if (_inventoryMovementHeader.UpdateResLog)
                                        {
                                            #region   reservation update
                                            var _reqResItm = _tmpReqItmList.Where(c => c.Itri_line_no == bonditm.Peo.Tus_itri_line_no).FirstOrDefault();
                                            if (_reqResItm != null)
                                            {
                                                if ((!string.IsNullOrEmpty(_reqResItm.Itri_res_no) && (_reqResItm.Itri_res_no != "N/A")))
                                                {
                                                    _dfsResLogList.Add(new INR_RES_LOG()
                                                    {
                                                        IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                                        IRL_CURT_LOC = _inventoryMovementHeader.Ith_loc,
                                                        IRL_ORIG_DOC_TP = _tmpInvreq.Itr_tp,
                                                        IRL_ORIG_DOC_NO = bonditm.Peo.Tus_base_doc_no_1,
                                                        IRL_ORIG_DOC_DT = DateTime.Now,

                                                        IRL_CURT_DOC_TP = "DO",
                                                        IRL_CURT_DOC_NO = _inventoryMovementHeader.Ith_doc_no,
                                                        IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                                        IRL_RES_NO = _reqResItm.Itri_res_no,
                                                        IRL_ITM_CD = _reqResItm.Itri_itm_cd,
                                                        IRL_ITM_STUS = _reqResItm.Itri_itm_stus,
                                                        IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_cre_by,
                                                        IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                        IRL_MOD_DT = DateTime.Now,
                                                        IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                        IRL_CRE_DT = DateTime.Now,
                                                        IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                        IRL_RES_QTY = qty,
                                                        IRL_RES_WP = 0,
                                                    });
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                }
                                else
                                {
                                    _inventoryDAL.UpdateRequestBalance(bonditm.Peo.Tus_base_doc_no_1, _inventoryMovementHeader.Ith_com,
                                      bonditm.Peo.Tus_itm_cd, bonditm.Peo.Tus_itm_stus, qty, _inventoryMovementHeader.Ith_cre_by, bonditm.Peo.Tus_job_line);
                                    _inventoryDAL.Update_Cost_hdr_DO(bonditm.Peo.Tus_base_doc_no_1, _inventoryMovementHeader.Ith_com);
                                    if (_inventoryMovementHeader.UpdateResLog)
                                    {
                                        #region   reservation update
                                        var _reqResItm = _tmpReqItmList.Where(c => c.Itri_line_no == bonditm.Peo.Tus_job_line).FirstOrDefault();
                                        if (_reqResItm != null)
                                        {
                                            if ((!string.IsNullOrEmpty(_reqResItm.Itri_res_no) && (_reqResItm.Itri_res_no != "N/A")))
                                            {
                                                _dfsResLogList.Add(new INR_RES_LOG()
                                                {
                                                    IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                                    IRL_CURT_LOC = _inventoryMovementHeader.Ith_loc,
                                                    IRL_ORIG_DOC_TP = _tmpInvreq.Itr_tp,
                                                    IRL_ORIG_DOC_NO = bonditm.Peo.Tus_base_doc_no_1,
                                                    IRL_ORIG_DOC_DT = DateTime.Now,

                                                    IRL_CURT_DOC_TP = "DO",
                                                    IRL_CURT_DOC_NO = _inventoryMovementHeader.Ith_doc_no,
                                                    IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                                    IRL_RES_NO = _reqResItm.Itri_res_no,
                                                    IRL_ITM_CD = _reqResItm.Itri_itm_cd,
                                                    IRL_ITM_STUS = _reqResItm.Itri_itm_stus,
                                                    IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_cre_by,
                                                    IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                    IRL_MOD_DT = DateTime.Now,
                                                    IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                                    IRL_CRE_DT = DateTime.Now,
                                                    IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                                    IRL_RES_QTY = qty,
                                                    IRL_RES_WP = 0,
                                                });
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                            #endregion
                            //      )
                            //_inventoryDAL.Update_Cusdec_status(bonditm.Peo.Tus_base_doc_no_1, _inventoryMovementHeader.Ith_com);
                        }
                    }
                    if (oLocation.Ml_is_serial == false)
                    {
                        if (_inventoryMovementHeader.TMP_CHK_SER_IS_AVA)
                        {
                            var _validateSerialList = _reptPickSerials.Where(c => c.Tus_ser_1 != "N/A").ToList();
                            string _foundserial = CHECKSERILA_COM(_validateSerialList, _inventoryDAL);
                            if (!string.IsNullOrEmpty(_foundserial))
                            {
                                documentNo = _foundserial;
                                documentNoGRN = documentNo;
                                _inventoryRepDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                effect = -1;
                                return effect;
                            }
                        }
                    }

                }

                //updated by akila 2018/01/09
                if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                {
                List<ReptPickSerials> _tempseril = new List<ReptPickSerials>();
                _tempseril = _reptPickSerialsGRN;
                effect = DeliveryOrder(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out documentNoDO, _inventoryRepDAL, _inventoryDAL, false, _salesDAL);
                //add by tharanga 2017/08/23
                if (_inventoryMovementHeader.Ith_del_code != null && _inventoryMovementHeader.Ith_del_cust_name != null && _inventoryMovementHeader.Ith_del_add1 != null && _inventoryMovementHeader.Ith_del_add2 != null)
                {
                    int eff = _inventoryDAL.Update_sat_hdr_d_cust(_inventoryMovementHeader);
                }
                #region Update ReceiptItemDetails Qty by tharanga 2017/11/07
                //foreach (var invoiceItems in _invoice)
                //{
                if (_inventoryMovementHeader.Ith_gen_frm == "SCMWIN")
                {
                    List<ReceiptItemDetails> ReceiptItemDetailsNew = _salesDAL.ReceiptItemDetailsNew(_inventoryMovementHeader.Ith_oth_docno);
                    if (ReceiptItemDetailsNew != null)
                    {
                        // _salesDAL.ConnectionOpen();
                        if (ReceiptItemDetailsNew.Count > 0)
                        {
                            foreach (ReceiptItemDetails itemdet in ReceiptItemDetailsNew)
                            {

                                _salesDAL.updatereceiptDetnew(itemdet.Sari_seq_no, itemdet.Sari_rec_no, itemdet.Sari_item, itemdet.sari_res_qty);

                            }
                        }
                    }
                }
                //}


                #endregion
                documentNo = documentNoDO;
                if (IsGRN)
                    effect = GRN(_inventoryMovementHeaderGRN, _reptPickSerialsGRN, _reptPickSerialsSubGRN, _masterAutoNumberGRN, out documentNoGRNNo);
                if (Voucher != null) if (Voucher.Count > 0) foreach (InvoiceVoucher _vou in Voucher) _inventoryDAL.UpdateDeliverVoucher(_inventoryMovementHeader.Ith_com, _vou.Stvo_inv_no, _vou.Stvo_gv_itm, Convert.ToString(_vou.Stvo_bookno), Convert.ToString(_vou.Stvo_pageno), _inventoryMovementHeader.Ith_cre_by);

                documentNoGRN = documentNoGRNNo;

                //Added by Chamal to check serial ID duplicate 05-Sep-2016
                List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                var _varSer = from c in _serList
                              group c by c.Tus_ser_id into grp
                              where grp.Count() > 1
                              select new { SerialID = grp.Key, Count = grp.Count() };
                if (_varSer != null && _varSer.Count() > 0)
                {
                    string _errorSerialID = string.Empty;
                    foreach (var item in _varSer)
                    {
                        if (string.IsNullOrEmpty(_errorSerialID))
                        {
                            _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                        }
                        else
                        {
                            _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                        }
                    }

                    effect = -1;
                    documentNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    documentNoGRN = documentNo;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    effect = -1;
                    return effect;
                }

                if (_SoaList != null)
                {
                    for (int i = 0; _SoaList.Count > i; i++)
                    {
                        string _soa = _SoaList[i].ToString();
                        _inventoryDAL.Update_SoA_status(_inventoryMovementHeader.Ith_com, _soa);//_invoiceHeader.Sah_soa
                    }
                }
                #region reservation data update when do in DFS location add by lakshan 08Feb2018
                if (_inventoryMovementHeader.UpdateResLog)
                {
                    foreach (var item in _dfsResLogList)
                    {
                        string _errRes = "";
                        item.IRL_CURT_DOC_NO = documentNoDO;
                        Int32 _resSaved = ReservationLogDataUpdateCancel(item, 0, _inventoryDAL, out _errRes);
                        if (_resSaved < 1)
                        {
                            effect = -1;
                            //documentNo = "Precess Terminated ! Reservation data update fail !";
                            documentNo = _errRes;
                            documentNoGRN = documentNo;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            effect = -1;
                            return effect;
                        }
                    }
                }
                #endregion
                List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                #region Save Trans action Details by Lakshan 03Oct2017
                if (effect != -1)
                {
                    if (_traList != null)
                    {
                        foreach (Transport item in _traList)
                        {
                            if (item.Slip_no_auto_gen)
                            {
                                if (item.MstAuto != null)
                                {
                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(item.MstAuto.Aut_moduleid, item.MstAuto.Aut_direction, item.MstAuto.Aut_start_char, item.MstAuto.Aut_cate_tp,
                                        item.MstAuto.Aut_cate_cd, item.MstAuto.Aut_modify_dt, item.MstAuto.Aut_year).Aut_number;
                                    string _slipDocNo = _inventoryMovementHeader.Ith_loc + "-" + item.Mbe_curr_slip_cd + "-" + "CO" + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(item.MstAuto);
                                    item.Itrn_ref_no = _slipDocNo;
                                }
                            }
                            item.Itrn_ref_doc = documentNo;
                            item.Itrn_trns_no = _inventoryMovementHeader.Ith_doc_no;
                            _inventoryDAL.Save_Int_Transport(item);
                        }
                    }
                }

                #endregion

                #region Check Saved DO Document :: Sanjeewa 2017-12-26
                //if (_inventoryMovementHeader.TMP_PROJECT_NAME == "SCMWEB" || _inventoryMovementHeader.TMP_PROJECT_NAME == "SCM2")
                //{
                //    decimal _aodInPickQty = 0;
                //    _aodInPickQty = _reptPickSerials.Sum(c => c.Tus_qty);

                //    decimal _intBatchQty = 0;
                //    decimal _intBatchQtyForIntSer = 0;
                //    decimal _inrBatchQty = 0;
                //    decimal _intSerQty = 0;
                //    decimal _inrSerQty = 0;
                //    List<InventorySerialN> _intSerSaved = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                //    List<InventorySerialN> _inrSerSaved = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                //    List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                //    List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                //    List<InventoryBatchRefN> _inrBatchSaved = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);

                //    _intBatchQty = _intBatchSaved.Sum(c => c.Itb_bal_qty1);
                //    _intBatchQtyForIntSer = _intBatchSaved.Where(c => c.Tmp_is_serialized != -1).ToList().Sum(c => c.Itb_bal_qty1);
                //    _inrBatchQty = _inrBatchSaved.Sum(c => c.Inb_qty);
                //    _intSerQty = _intSerSaved.Count;
                //    _inrSerQty = _inrSerSaved.Sum(c => c.Ins_available);
                //    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB")
                //    {
                //        if (_aodInPickQty != _intBatchQty)
                //        {
                //            documentNo = "Process Terminated ! Pick serial data invalid ! [Pick Qty VS AOD IN Qty]";
                //            effect = -1;
                //            _inventoryRepDAL.TransactionRollback();
                //            _inventoryDAL.TransactionRollback();
                //            _ScmCommonDAL.TransactionRollback();
                //            return effect;
                //        }
                //    }
                //    if (_intBatchQty != _inrBatchQty)
                //    {
                //        documentNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                //        effect = -1;
                //        _inventoryRepDAL.TransactionRollback();
                //        _inventoryDAL.TransactionRollback();
                //        _ScmCommonDAL.TransactionRollback();
                //        return effect;
                //    }
                //    if (_intBatchQtyForIntSer != _intSerQty)
                //    {
                //        documentNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                //        effect = -1;
                //        _inventoryRepDAL.TransactionRollback();
                //        _inventoryDAL.TransactionRollback();
                //        _ScmCommonDAL.TransactionRollback();
                //        return effect;
                //    }
                //    if (_intBatchQtyForIntSer != _inrSerQty)
                //    {
                //        documentNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                //        effect = -1;
                //        _inventoryRepDAL.TransactionRollback();
                //        _inventoryDAL.TransactionRollback();
                //        _ScmCommonDAL.TransactionRollback();
                //        return effect;
                //    }
                //}

                #endregion

                // _inventoryDAL.Get_Int_Ser(documentNo);
                bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                if (_BATCH.Count == 0)
                {
                    effect = -1;
                    if (documentNo.Contains("reservation"))
                    {
                        documentNo = "Reservation data not updated ";
                    }
                    else
                    {
                        documentNo = "Precess Terminated ! Inventory Balance not updated ";
                    }
                    documentNoGRN = documentNo;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    effect = -1;
                    return effect;
                }
                else if (_count == false)
                {
                    effect = -1;
                    documentNo = "Precess Terminated ! Inventory Balance mismatch";
                    documentNoGRN = documentNo;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    effect = -1;
                    return effect;
                }
                else
                {

                    if (_tempseril.Count > 0)
                    {
                        var _scanItems = _tempseril.GroupBy(x => new { x.Tus_usrseq_no }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                        foreach (var itm in _scanItems)
                        {
                            if (itm.Peo.Tus_usrseq_no != 0)
                            {
                                _inventoryRepDAL.DeleteTempPickObjs(itm.Peo.Tus_usrseq_no);
                            }
                        }
                    }
                    }

                }
                    //By Akila 2018/01/04
                    #region Generate GP Pages
                    try
                    {
                        //Get invoice Item list
                        if (_invItmList == null || _invItmList.Count < 1)
                        {
                            _invItmList = _salesDAL.GetInvoiceDetailByInvoice(_inventoryMovementHeader.Ith_oth_docno);
                        }

                        if (_invItmList != null || _invItmList.Count > 0)
                        {
                            _invItmList = _invItmList.Where(x => (!string.IsNullOrEmpty(x.Sad_sim_itm_cd))).ToList();
                            if (_invItmList != null && _invItmList.Count > 0)
                            {
                                int _pageCount = 1;
                                foreach (InvoiceItem _item in _invItmList)
                                {
                                    MasterItem _itemMaster = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_oth_com, _item.Sad_sim_itm_cd);
                                    //check whether item is a GIFT VOUCHER
                                    if (_itemMaster != null && _itemMaster.Mi_itm_tp == "G")
                                    { 
                                        //get similar item details
                                        List<MasterItemSimilar> _similerItems = new List<MasterItemSimilar>();
                                        _similerItems = _inventoryDAL.GetSimilerItemDetailsNew(_item.Sad_sim_itm_cd, _inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_pc, _inventoryMovementHeader.Ith_doc_date, _item.Sad_pbook, _item.Sad_pb_lvl);
                                        if (_similerItems != null && _similerItems.Count > 0)
                                        {
                                            _similerItems = _similerItems.Where(x => x.Misi_sim_itm_cd == _item.Sad_sim_itm_cd).ToList();
                                            if (_similerItems != null && _similerItems.Count > 0)
                                            {
                                                foreach (MasterItemSimilar _selectedItem in _similerItems)
                                                {
                                                    decimal UnitPrice = 0; 
                                                    #region get current price add  by tharanga 2018/03/20
                                                    if (_selectedItem.Misi_Vou_Disc_Tp == "V" && !string.IsNullOrEmpty(_selectedItem.Misi_price_book) && !string.IsNullOrEmpty(_selectedItem.Misi_price_leval))
                                                    {
                                                        List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                                                        SalesBLL SalesBLLNEW = new SalesBLL();

                                                        _priceBookLevelRef = SalesBLLNEW.GetPriceLevel(_inventoryMovementHeader.Ith_com, _selectedItem.Misi_price_book, _selectedItem.Misi_price_leval);
                                                        _priceDetailRef = SalesBLLNEW.GetPrice_01(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_pc, "CS", _selectedItem.Misi_price_book, _selectedItem.Misi_price_leval, "", _selectedItem.Misi_itm_cd, Convert.ToDecimal(1), DateTime.Now);
                                                        if (_priceDetailRef.Count <= 0)
                                                        { throw new Exception("There is no price for the selected item"); }
                                                        if (_priceDetailRef.Count == 1)
                                                        {
                                                            var _one = from _itm in _priceDetailRef
                                                                       select _itm;
                                                            int _priceType = 0;
                                                            foreach (var _single in _one)
                                                            {
                                                                _priceType = _single.Sapd_price_type;
                                                                PriceTypeRef _promotion = new PriceTypeRef();
                                                                List<PriceTypeRef> _type = SalesBLLNEW.GetAllPriceType(string.Empty);
                                                                var _ptype = from _types in _type
                                                                             where _types.Sarpt_indi == _priceType
                                                                             select _types;
                                                                PriceTypeRef _list = new PriceTypeRef();
                                                                foreach (PriceTypeRef _ones in _ptype)
                                                                {
                                                                    _list = _ones;
                                                                }
                                                                _promotion = _list;

                                                                UnitPrice = FigureRoundUp(TaxCalculation(_selectedItem.Misi_itm_cd, _item.Sad_itm_stus, Convert.ToDecimal(1), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(0), Convert.ToDecimal(0), false, _selectedItem.Misi_price_book, _selectedItem.Misi_price_leval, _inventoryMovementHeader.Ith_com), true);
                                                            }
                                                        }

                                                        //Decimal amount = CHNLSVC.Inventory.Get_def_price_from_pc(txt_p_book.Text, txt_p_level.Text, txtMainItem.Text.ToString(), DateTime.Now);
                                                        decimal _vatPortion = FigureRoundUp(TaxCalculation(_selectedItem.Misi_itm_cd, _item.Sad_itm_stus, Convert.ToDecimal(1), _priceBookLevelRef, Convert.ToDecimal(UnitPrice), Convert.ToDecimal(0), Convert.ToDecimal(0), true, _selectedItem.Misi_price_book, _selectedItem.Misi_price_leval, _inventoryMovementHeader.Ith_com), true);
                                                        decimal _totalAmount = Convert.ToDecimal(1) * Convert.ToDecimal(UnitPrice);
                                                        decimal _disAmt = 0;
                                                        string txtTaxAmt = Convert.ToString(_vatPortion); //FormatToCurrency(Convert.ToString(_vatPortion));
                                                        bool _isVATInvoice = false;


                                                        if (_isVATInvoice)
                                                            _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(0) / 100), true);
                                                        else
                                                        {
                                                            _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(0) / 100), true);

                                                        }

                                                        if (!string.IsNullOrEmpty(txtTaxAmt))
                                                        {
                                                            //if (Convert.ToDecimal(txtDisRate.Text) > 0)
                                                            //    _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                                                            //else
                                                            _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(txtTaxAmt) - _disAmt, true);
                                                        }

                                                        string txtVouValue = Convert.ToString(_totalAmount);//FormatToCurrency(Convert.ToString(_totalAmount));
                                                        _selectedItem.Misi_Vou_Value = Convert.ToDecimal(txtVouValue);
                                                    }
                                                    #endregion
                                                    GiftVoucherPages _page = new GiftVoucherPages();
                                                    _page.Gvp_ref = _inventoryDAL.GetSerialID().ToString();
                                                    _page.Gvp_book = 1;
                                                    _page.Gvp_page = _salesDAL.GetPromotionVoucherNo(); 
                                                    _page.Gvp_line = _pageCount;
                                                    _page.Gvp_pc = _inventoryMovementHeader.Ith_pc;
                                                    _page.Gvp_stus = "A";
                                                    _page.Gvp_gv_cd = _selectedItem.Misi_sim_itm_cd;
                                                    _page.Gvp_gv_prefix = "P_GV";

                                                if (_selectedItem.Misi_Vou_Tp.ToUpper() == "DISCOUNT" && _selectedItem.Misi_Vou_Disc_Tp.ToUpper() == "D")
                                                    {
                                                        _page.Gvp_gv_tp = "VALUE";
                                                    }
                                                else if (_selectedItem.Misi_Vou_Tp.ToUpper() == "DISCOUNT" && _selectedItem.Misi_Vou_Disc_Tp.ToUpper() == "R")
                                                    {
                                                        _page.Gvp_gv_tp = "RATE";
                                                    }
                                                else if (_selectedItem.Misi_Vou_Tp.ToUpper() == "VALUE")
                                                    {
                                                        _page.Gvp_gv_tp = "VALUE";
                                                    }
                                                    else if (_selectedItem.Misi_Vou_Tp.ToUpper() == "CURRENT PRICE")
                                                    {
                                                        _page.Gvp_gv_tp = "PRICE";
                                                    }

                                                    _page.Gvp_cus_cd = _inventoryMovementHeader.Ith_del_code;
                                                    _page.Gvp_cus_name = _inventoryMovementHeader.Ith_del_cust_name;
                                                    _page.Gvp_cus_add1 = _inventoryMovementHeader.Ith_del_add1;
                                                    _page.Gvp_cus_add2 = _inventoryMovementHeader.Ith_del_add2;
                                                    _page.Gvp_valid_from = DateTime.Today.Date;
                                                    _page.Gvp_valid_to = DateTime.Today.AddDays(_selectedItem.Misi_Vou_Val_Period);
                                                    _page.Gvp_amt = _selectedItem.Misi_Vou_Value;
                                                    _page.Gvp_bal_amt = _selectedItem.Misi_Vou_Value;
                                                    _page.Gvp_oth_ref = _inventoryMovementHeader.Ith_oth_docno;
                                                    _page.Gvp_cre_dt = DateTime.Today;
                                                    _page.Gvp_mod_dt = DateTime.Today;
                                                    _page.Gvp_can_dt = DateTime.Today;
                                                    _page.Gvp_issue_dt = DateTime.Today;
                                                    _page.Gvp_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                                    _page.Gvp_app_by = _inventoryMovementHeader.Ith_cre_by;
                                                    _page.Gvp_com = _inventoryMovementHeader.Ith_oth_com;
                                                    _page.Gvp_noof_itm = 1;
                                                    _page.Gvp_issu_itm = 0;
                                                    _page.Gvp_is_allow_promo = false;
                                                    _page.Gvp_from = "-";
                                                    _pageCount += 1;
                                                #region validate mobile no add by tharanga 2018/02/27
                                                       MasterBusinessEntity _cus = new MasterBusinessEntity();
                                                        _cus = _inventoryDAL.GetBusinessCompanyDetail(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_bus_entity, string.Empty, string.Empty, "C");
                                                        int _affected = _fmsInventoryDal.SaveGiftVoucherPages(_page);
                                                        Boolean ismobvalid = ValidateMobileNo(_cus.Mbe_mob);
                                                        if (ismobvalid == true)
                                                        {
                                                         
                                                          
                                                            if (_affected > 0)
                                                            {
                                                                _item.Sad_do_qty = _item.Sad_qty;
                                                                _item.Sad_fws_ignore_qty = _item.Sad_qty;
                                                               
                                                                if (string.IsNullOrEmpty(documentNo))
                                                                {
                                                                    documentNo = "GV_PAGE";
                                                                }
                                                                #region send message to customer
                                                                if (!string.IsNullOrEmpty(_cus.Mbe_mob))
                                                                {
                                                                    if (_cus.Mbe_mob.Length >= 9)
                                                                    {

                                                                        string _mg = "Dear Customer,You have got a voucher for purchasing  with us.voucher no." + " " + _page.Gvp_page;
                                                                        OutSMS _out = new OutSMS();
                                                                        _out.Msg = _mg;
                                                                        _out.Msgstatus = 0;
                                                                        _out.Msgtype = "S";
                                                                        _out.Receivedtime = DateTime.Now;
                                                                        _out.Receiver = "CUSTOMER";
                                                                        //_out.Receiverphno = _info.Mmi_mobi_no;

                                                                        if (_cus.Mbe_mob.Length == 10)
                                                                        {
                                                                            _out.Receiverphno = "+94" + _cus.Mbe_mob.Substring(1, 9);
                                                                            _out.Senderphno = "+94" + _cus.Mbe_mob.Substring(1, 9);
                                                                        }
                                                                        if (_cus.Mbe_mob.Length == 9)
                                                                        {
                                                                            _out.Receiverphno = "+94" + _cus.Mbe_mob;
                                                                            _out.Senderphno = "+94" + _cus.Mbe_mob;
                                                                        }

                                                                        _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                                                        _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                                                        _out.Createtime = DateTime.Now;
                                                                       // _generalDAL.ConnectionOpen();
                                                                        _generalDAL.SaveSMSOut(_out);
                                                                    }
                                                                }
                                                                #endregion
                                                            }
                                                        }
                                                        else
                                                        { throw new Exception("customer has not define valid mobile number"); }
                                                #endregion

                                                }
                                            }                                            
                                        }
                                    }
                                }                                
                            }
                            //update sat_itm
                            int noOfItemUpdated = 0;
                            bool _isUpdated;
                            foreach (InvoiceItem _item in _invItmList)
                            {
                                _isUpdated = _inventoryDAL.Update_sat_itm_DO_qty(_item.Sad_inv_no, Convert.ToInt32(_item.Sad_itm_line), Convert.ToInt32(_item.Sad_do_qty));
                                if (_isUpdated) { noOfItemUpdated += 1; }
                            }

                            if (noOfItemUpdated > 0)
                            {
                                //check total do qty and invoiced qty
                                var _invoiceTotals = _invItmList
                                    .GroupBy(x => x.Sad_inv_no)
                                    .Select(y =>
                                        new
                                        {
                                            InvoicNo = y.Key,
                                            TotalItmQty = y.Sum(s => s.Sad_qty),
                                            TotalDoQty = y.Sum(s => s.Sad_do_qty)
                                        }).ToList();

                                if (_invoiceTotals != null && _invoiceTotals.Count > 0)
                                {
                                    //check whether total do & item qty is match
                                    foreach (var total in _invoiceTotals)
                                    {
                                        if (Math.Round(total.TotalItmQty) == Math.Round(total.TotalDoQty))
                                        {
                                            //All item has delivered. update sat_header status as 
                                            _inventoryDAL.UpdateInvoiceDOStatus(total.InvoicNo);
                                        }
                                    }
                                }
                            }                            
                        }

                    }
                    catch (Exception)
                    {                        
                        throw;
                    }
                    #endregion

                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _fmsInventoryDal.TransactionCommit();
                    _generalDAL.TransactionCommit(); //add  by tharanga 2018/04/23

                    effect = 1;
                    //return effect;


                //_ScmCommonDAL.TransactionCommit();

                //_inventoryRepDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();

                //_tr.Complete();
                //return effect;

            }
            catch (Exception err)
            {
                effect = -1;
                documentNo = "ERROR : " + err.Message.ToString();
                documentNoGRN = documentNo;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
                // _ScmCommonDAL.TransactionRollback();
            }

            if (effect > 0)
            {
               

                #region SMS & EMAIL alert
                if (_inventoryMovementHeader.TMP_IS_ALERT)
                {
                    try
                    {
                        SmtpClient smtpClient = new SmtpClient();
                        _custServiceDAL = new CustServiceDAL();
                        _custServiceDAL.ConnectionOpen();
                        #region Customer alert
                        MasterBusinessEntity _cus = new MasterBusinessEntity();
                        _cus = _inventoryDAL.GetBusinessCompanyDetail(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_bus_entity, string.Empty, string.Empty, "C");
                        InvoiceHeader _hdr = new InvoiceHeader();
                        _hdr = _inventoryDAL.GetInvoiceHeaderDetails(_inventoryMovementHeader.Ith_oth_docno);
                        string _invoiceDate = string.Empty;
                        string _invoicecustomer = string.Empty;
                        string _invoicecustomerName = string.Empty;
                        string _invoicecustomeraddr1 = string.Empty;
                        string _invoicecustomeraddr2 = string.Empty;
                        string _invoiceremark = string.Empty;
                        if (_hdr != null)
                        {
                            _invoiceDate = _hdr.Sah_dt.ToString("dd/MMM/yyyy");
                            _invoicecustomer = _hdr.Sah_cus_cd;
                            _invoicecustomerName = _hdr.Sah_cus_name;
                            _invoicecustomeraddr1 = _hdr.Sah_d_cust_add1;
                            _invoicecustomeraddr2 = _hdr.Sah_d_cust_add2;
                            _invoiceremark = _inventoryMovementHeader.Ith_remarks;
                        }
                        if (_cus != null)
                        {
                            if ((_cus.Mbe_agre_send_email) && (_cus.Mbe_agre_send_sms))
                            {
                                if (!string.IsNullOrEmpty(_cus.Mbe_email) || (_cus.Mbe_email != "N/A"))
                                {
                                    MailMessage message = new MailMessage();
                                    string _toEmail = _cus.Mbe_email;
                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message.From = fromAddress;
                                    string FOOTER = _generalDAL.GetMailFooterMsg();
                                    string _email = "";
                                    FOOTER = FOOTER.Replace("\\n", "");

                                    _email = "Dear Sir/Madam, <br>"
                                                              + "<u>Delivery Order</u> <br>"
                                                              + "DO # : " + documentNo + " <br>"
                                                              + "INVOICE # : " + _inventoryMovementHeader.Ith_oth_docno + " <br>"
                                                              + "INVOICE DATE : " + _invoiceDate + " <br>"
                                                              + "CUSTOMER CODE: " + _invoicecustomer + " <br>"
                                                              + "CUSTOMER NAME : " + _invoicecustomerName + " <br>"
                                                              + "CUSTOMER ADDRESS 1 : " + _invoicecustomeraddr1 + " <br>"
                                                              + "CUSTOMER ADDRESS 2 : " + _invoicecustomeraddr2 + " <br>"
                                                              + "REMARKS : " + _invoiceremark + " <br>" + FOOTER;
                                    message.To.Add("christina@abansgroup.com");
                                    message.Subject = "DO Alert";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message.IsBodyHtml = false;
                                    message.Body = _email;
                                    message.IsBodyHtml = true;
                                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                    Service_Message oMessage = new Service_Message();
                                    oMessage.Sm_com = _inventoryMovementHeader.Ith_com;
                                    oMessage.Sm_jobno = documentNo;
                                    oMessage.Sm_joboline = 1;
                                    oMessage.Sm_jobstage = 7;
                                    oMessage.Sm_ref_num = _inventoryMovementHeader.Ith_oth_docno;
                                    oMessage.Sm_status = 0;
                                    oMessage.Sm_msg_tmlt_id = 11;
                                    oMessage.Sm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_mod_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_sms_gap = 0;
                                    oMessage.Sm_sms_done = 0;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_mail_gap = 0;
                                    oMessage.Sm_email_done = 1;
                                    oMessage.Sm_email = string.Empty;
                                    oMessage.Sm_cre_dt = DateTime.Now;
                                    oMessage.Sm_mod_dt = DateTime.Now;
                                    _custServiceDAL.SaveServiceMsg(oMessage);
                                    // Send SMTP mail
                                    smtpClient.Send(message);
                                }
                                if (!string.IsNullOrEmpty(_cus.Mbe_mob) || (_cus.Mbe_mob != "N/A"))
                                {
                                    string _realPhNo = GetRealPhoneNumber(_cus.Mbe_mob);
                                    OutSMS _out = new OutSMS();
                                    _out.Createtime = DateTime.Now;
                                    _out.Msg = "Delivery Order :" + documentNo + "Invoice # :" + _inventoryMovementHeader.Ith_oth_docno + "Invoice Date :" + _invoiceDate;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _cus.Mbe_cd;
                                    //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                    _out.Senderphno = _cus.Mbe_mob;
                                    _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                    _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _inventoryDAL.SaveSMSOut(_out);
                                }
                            }
                            else if (_cus.Mbe_agre_send_email)
                            {

                                if (!string.IsNullOrEmpty(_cus.Mbe_email) || (_cus.Mbe_email != "N/A"))
                                {
                                    MailMessage message2 = new MailMessage();
                                    string _toEmail = _cus.Mbe_email;
                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message2.From = fromAddress;
                                    string FOOTER = _generalDAL.GetMailFooterMsg();
                                    string _email = "";
                                    FOOTER = FOOTER.Replace("\\n", "");

                                    _email = "Dear Sir/Madam, <br>"
                                                              + "<u>Delivery Order</u> <br>"
                                                              + "DO # : " + documentNo + " <br>"
                                                              + "INVOICE # : " + _inventoryMovementHeader.Ith_oth_docno + " <br>"
                                                              + "INVOICE DATE : " + _invoiceDate + " <br>"
                                                              + "CUSTOMER CODE: " + _invoicecustomer + " <br>"
                                                              + "CUSTOMER NAME : " + _invoicecustomerName + " <br>"
                                                              + "CUSTOMER ADDRESS 1 : " + _invoicecustomeraddr1 + " <br>"
                                                              + "CUSTOMER ADDRESS 2 : " + _invoicecustomeraddr2 + " <br>"
                                                              + "REMARKS : " + _invoiceremark + " <br>" + FOOTER;
                                    message2.To.Add("trukshan@abansgroup.com");
                                    message2.Subject = "DO Alert";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message2.IsBodyHtml = false;
                                    message2.Body = _email;
                                    message2.IsBodyHtml = true;
                                    message2.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                    Service_Message oMessage = new Service_Message();
                                    oMessage.Sm_com = _inventoryMovementHeader.Ith_com;
                                    oMessage.Sm_jobno = documentNo;
                                    oMessage.Sm_joboline = 1;
                                    oMessage.Sm_jobstage = 7;
                                    oMessage.Sm_ref_num = _inventoryMovementHeader.Ith_oth_docno;
                                    oMessage.Sm_status = 0;
                                    oMessage.Sm_msg_tmlt_id = 11;
                                    oMessage.Sm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_mod_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_sms_gap = 0;
                                    oMessage.Sm_sms_done = 0;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_mail_gap = 0;
                                    oMessage.Sm_email_done = 1;
                                    oMessage.Sm_email = string.Empty;
                                    oMessage.Sm_cre_dt = DateTime.Now;
                                    oMessage.Sm_mod_dt = DateTime.Now;
                                    _custServiceDAL.SaveServiceMsg(oMessage);
                                    // Send SMTP mail
                                    smtpClient.Send(message2);
                                }
                            }
                            else if (_cus.Mbe_agre_send_sms)
                            {
                                if (!string.IsNullOrEmpty(_cus.Mbe_mob) || (_cus.Mbe_mob != "N/A"))
                                {
                                    string _realPhNo = GetRealPhoneNumber(_cus.Mbe_mob);
                                    OutSMS _out = new OutSMS();
                                    _out.Createtime = DateTime.Now;
                                    _out.Msg = "Delivery Order :" + documentNo + "Invoice # :" + _inventoryMovementHeader.Ith_oth_docno + "Invoice Date :" + _invoiceDate;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _cus.Mbe_cd;
                                    //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                    _out.Senderphno = _cus.Mbe_mob;
                                    _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                    _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _inventoryDAL.SaveSMSOut(_out);
                                }
                            }
                        }
                        #endregion
                        #region Profit Center alert
                        MasterProfitCenter _PC = new MasterProfitCenter();
                        _PC = _inventoryDAL.GetProfitCenter(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_pc);
                        if (_PC != null)
                        {
                            if (_PC.MPC_IS_ALERT)
                            {
                                if ((!string.IsNullOrEmpty(_PC.Mpc_email) || (_PC.Mpc_email != "N/A")) && (!string.IsNullOrEmpty(_PC.Mpc_tel) || (_PC.Mpc_tel != "N/A")))
                                {
                                    MailMessage message3 = new MailMessage();
                                    string _toEmail = _PC.Mpc_email;
                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message3.From = fromAddress;
                                    string FOOTER = _generalDAL.GetMailFooterMsg();
                                    string _email = "";
                                    _email = "Dear Sir/Madam, <br>"
                                                              + "<u>Delivery Order</u> <br>"
                                                              + "DO # : " + documentNo + " <br>"
                                                              + "INVOICE # : " + _inventoryMovementHeader.Ith_oth_docno + " <br>"
                                                              + "INVOICE DATE : " + _invoiceDate + " <br>"
                                                              + "CUSTOMER CODE: " + _invoicecustomer + " <br>"
                                                              + "CUSTOMER NAME : " + _invoicecustomerName + " <br>"
                                                              + "CUSTOMER ADDRESS 1 : " + _invoicecustomeraddr1 + " <br>"
                                                              + "CUSTOMER ADDRESS 2 : " + _invoicecustomeraddr2 + " <br>"
                                                              + "REMARKS : " + _invoiceremark + " <br>" + FOOTER;
                                    message3.To.Add("christina@abansgroup.com");
                                    message3.Subject = "DO Alert";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message3.IsBodyHtml = false;
                                    message3.Body = _email;
                                    message3.IsBodyHtml = true;
                                    message3.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                    Service_Message oMessage = new Service_Message();
                                    oMessage.Sm_com = _inventoryMovementHeader.Ith_com;
                                    oMessage.Sm_jobno = documentNo;
                                    oMessage.Sm_joboline = 1;
                                    oMessage.Sm_jobstage = 7;
                                    oMessage.Sm_ref_num = _inventoryMovementHeader.Ith_oth_docno;
                                    oMessage.Sm_status = 0;
                                    oMessage.Sm_msg_tmlt_id = 11;
                                    oMessage.Sm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_mod_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_sms_gap = 0;
                                    oMessage.Sm_sms_done = 0;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_mail_gap = 0;
                                    oMessage.Sm_email_done = 1;
                                    oMessage.Sm_email = string.Empty;
                                    oMessage.Sm_cre_dt = DateTime.Now;
                                    oMessage.Sm_mod_dt = DateTime.Now;
                                    _custServiceDAL.SaveServiceMsg(oMessage);
                                    // Send SMTP mail
                                    smtpClient.Send(message3);


                                    string _realPhNo = GetRealPhoneNumber(_PC.Mpc_tel);
                                    OutSMS _out = new OutSMS();
                                    _out.Createtime = DateTime.Now;
                                    _out.Msg = "Delivery Order :" + documentNo + "Invoice # :" + _inventoryMovementHeader.Ith_oth_docno + "Invoice Date :" + _invoiceDate;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _cus.Mbe_cd;
                                    //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                    _out.Senderphno = _cus.Mbe_mob;
                                    _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                    _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _inventoryDAL.SaveSMSOut(_out);
                                }
                                else if (!string.IsNullOrEmpty(_PC.Mpc_email) || (_PC.Mpc_email != "N/A"))
                                {
                                    MailMessage message3 = new MailMessage();
                                    string _toEmail = _PC.Mpc_email;
                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message3.From = fromAddress;
                                    string FOOTER = _generalDAL.GetMailFooterMsg();
                                    string _email = "";
                                    _email = "Dear Sir/Madam, <br>"
                                                              + "<u>Delivery Order</u> <br>"
                                                              + "DO # : " + documentNo + " <br>"
                                                              + "INVOICE # : " + _inventoryMovementHeader.Ith_oth_docno + " <br>"
                                                              + "INVOICE DATE : " + _invoiceDate + " <br>"
                                                              + "CUSTOMER CODE: " + _invoicecustomer + " <br>"
                                                              + "CUSTOMER NAME : " + _invoicecustomerName + " <br>"
                                                              + "CUSTOMER ADDRESS 1 : " + _invoicecustomeraddr1 + " <br>"
                                                              + "CUSTOMER ADDRESS 2 : " + _invoicecustomeraddr2 + " <br>"
                                                              + "REMARKS : " + _invoiceremark + " <br>" + FOOTER;
                                    message3.To.Add("christina@abansgroup.com");
                                    message3.Subject = "DO Alert";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message3.IsBodyHtml = false;
                                    message3.Body = _email;
                                    message3.IsBodyHtml = true;
                                    message3.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                    Service_Message oMessage = new Service_Message();
                                    oMessage.Sm_com = _inventoryMovementHeader.Ith_com;
                                    oMessage.Sm_jobno = documentNo;
                                    oMessage.Sm_joboline = 1;
                                    oMessage.Sm_jobstage = 7;
                                    oMessage.Sm_ref_num = _inventoryMovementHeader.Ith_oth_docno;
                                    oMessage.Sm_status = 0;
                                    oMessage.Sm_msg_tmlt_id = 11;
                                    oMessage.Sm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                    oMessage.Sm_mod_dt = _inventoryMovementHeader.Ith_cre_when;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_sms_gap = 0;
                                    oMessage.Sm_sms_done = 0;
                                    oMessage.Sm_mail_text = _email;
                                    oMessage.Sm_mail_gap = 0;
                                    oMessage.Sm_email_done = 1;
                                    oMessage.Sm_email = string.Empty;
                                    oMessage.Sm_cre_dt = DateTime.Now;
                                    oMessage.Sm_mod_dt = DateTime.Now;
                                    _custServiceDAL.SaveServiceMsg(oMessage);
                                    // Send SMTP mail
                                    smtpClient.Send(message3);
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(_PC.Mpc_tel) || (_PC.Mpc_tel != "N/A"))
                                    {
                                        string _realPhNo = GetRealPhoneNumber(_PC.Mpc_tel);
                                        OutSMS _out = new OutSMS();
                                        _out.Createtime = DateTime.Now;
                                        _out.Msg = "Delivery Order :" + documentNo + "Invoice # :" + _inventoryMovementHeader.Ith_oth_docno + "Invoice Date :" + _invoiceDate;
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = _cus.Mbe_cd;
                                        //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                        _out.Senderphno = _cus.Mbe_mob;
                                        _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                        _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                        _out.Createtime = DateTime.Now;
                                        _inventoryDAL.SaveSMSOut(_out);
                                    }
                                }
                            }
                        }
                        #endregion
                        #region Profit Center alert

                        if (_hdr != null)
                        {
                            if (!string.IsNullOrEmpty(_hdr.Sah_sales_ex_cd))
                            {
                                Master_Employee _emp = new Master_Employee();
                                _emp = _inventoryDAL.GetMasterEmployee(_inventoryMovementHeader.Ith_com, _hdr.Sah_sales_ex_cd);
                                if (_emp != null)
                                {
                                    if ((!string.IsNullOrEmpty(_emp.Esep_email) || (_emp.Esep_email != "N/A")) && ((!string.IsNullOrEmpty(_emp.Esep_mobi_no)) || (_emp.Esep_mobi_no != "N/A")))
                                    {

                                        MailMessage message3 = new MailMessage();
                                        string _toEmail = _emp.Esep_email;
                                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                        smtpClient.Host = _generalDAL.GetMailHost();
                                        smtpClient.Port = 25;
                                        message3.From = fromAddress;
                                        string FOOTER = _generalDAL.GetMailFooterMsg();
                                        string _email = "";
                                        _email = "Dear Sir/Madam, <br>"
                                                                  + "<u>Delivery Order</u> <br>"
                                                                  + "DO # : " + documentNo + " <br>"
                                                                  + "INVOICE # : " + _inventoryMovementHeader.Ith_oth_docno + " <br>"
                                                                  + "INVOICE DATE : " + _invoiceDate + " <br>"
                                                                  + "CUSTOMER CODE: " + _invoicecustomer + " <br>"
                                                                  + "CUSTOMER NAME : " + _invoicecustomerName + " <br>"
                                                                  + "CUSTOMER ADDRESS 1 : " + _invoicecustomeraddr1 + " <br>"
                                                                  + "CUSTOMER ADDRESS 2 : " + _invoicecustomeraddr2 + " <br>"
                                                                  + "REMARKS : " + _invoiceremark + " <br>" + FOOTER;
                                        message3.To.Add(_toEmail);
                                        message3.Subject = "DO Alert";
                                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                        //message.Bcc.Add(new MailAddress(""));
                                        message3.IsBodyHtml = false;
                                        message3.Body = _email;
                                        message3.IsBodyHtml = true;
                                        message3.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                        Service_Message oMessage = new Service_Message();
                                        oMessage.Sm_com = _inventoryMovementHeader.Ith_com;
                                        oMessage.Sm_jobno = documentNo;
                                        oMessage.Sm_joboline = 1;
                                        oMessage.Sm_jobstage = 7;
                                        oMessage.Sm_ref_num = _inventoryMovementHeader.Ith_oth_docno;
                                        oMessage.Sm_status = 0;
                                        oMessage.Sm_msg_tmlt_id = 11;
                                        oMessage.Sm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                        oMessage.Sm_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                        oMessage.Sm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                        oMessage.Sm_mod_dt = _inventoryMovementHeader.Ith_cre_when;
                                        oMessage.Sm_mail_text = _email;
                                        oMessage.Sm_sms_gap = 0;
                                        oMessage.Sm_sms_done = 0;
                                        oMessage.Sm_mail_text = _email;
                                        oMessage.Sm_mail_gap = 0;
                                        oMessage.Sm_email_done = 1;
                                        oMessage.Sm_email = string.Empty;
                                        oMessage.Sm_cre_dt = DateTime.Now;
                                        oMessage.Sm_mod_dt = DateTime.Now;
                                        _custServiceDAL.SaveServiceMsg(oMessage);
                                        // Send SMTP mail
                                        smtpClient.Send(message3);


                                        string _realPhNo = GetRealPhoneNumber(_emp.Esep_mobi_no);
                                        OutSMS _out = new OutSMS();
                                        _out.Createtime = DateTime.Now;
                                        _out.Msg = "Delivery Order :" + documentNo + "Invoice # :" + _inventoryMovementHeader.Ith_oth_docno + "Invoice Date :" + _invoiceDate;
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = _cus.Mbe_cd;
                                        //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                        _out.Senderphno = _cus.Mbe_mob;
                                        _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                        _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                        _out.Createtime = DateTime.Now;

                                        _inventoryDAL.SaveSMSOut(_out);
                                    }
                                    else if (!string.IsNullOrEmpty(_emp.Esep_email) || (_emp.Esep_email != "N/A"))
                                    {
                                        MailMessage message3 = new MailMessage();
                                        string _toEmail = _emp.Esep_email;
                                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                        smtpClient.Host = _generalDAL.GetMailHost();
                                        smtpClient.Port = 25;
                                        message3.From = fromAddress;
                                        string FOOTER = _generalDAL.GetMailFooterMsg();
                                        string _email = "";
                                        _email = "Dear Sir/Madam, <br>"
                                                                  + "<u>Delivery Order</u> <br>"
                                                                  + "DO # : " + documentNo + " <br>"
                                                                  + "INVOICE # : " + _inventoryMovementHeader.Ith_oth_docno + " <br>"
                                                                  + "INVOICE DATE : " + _invoiceDate + " <br>"
                                                                  + "CUSTOMER CODE: " + _invoicecustomer + " <br>"
                                                                  + "CUSTOMER NAME : " + _invoicecustomerName + " <br>"
                                                                  + "CUSTOMER ADDRESS 1 : " + _invoicecustomeraddr1 + " <br>"
                                                                  + "CUSTOMER ADDRESS 2 : " + _invoicecustomeraddr2 + " <br>"
                                                                  + "REMARKS : " + _invoiceremark + " <br>" + FOOTER;
                                        message3.To.Add(_toEmail);
                                        message3.Subject = "DO Alert";
                                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                        //message.Bcc.Add(new MailAddress(""));
                                        message3.IsBodyHtml = false;
                                        message3.Body = _email;
                                        message3.IsBodyHtml = true;
                                        message3.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                        Service_Message oMessage = new Service_Message();
                                        oMessage.Sm_com = _inventoryMovementHeader.Ith_com;
                                        oMessage.Sm_jobno = documentNo;
                                        oMessage.Sm_joboline = 1;
                                        oMessage.Sm_jobstage = 7;
                                        oMessage.Sm_ref_num = _inventoryMovementHeader.Ith_oth_docno;
                                        oMessage.Sm_status = 0;
                                        oMessage.Sm_msg_tmlt_id = 11;
                                        oMessage.Sm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                        oMessage.Sm_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                                        oMessage.Sm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                        oMessage.Sm_mod_dt = _inventoryMovementHeader.Ith_cre_when;
                                        oMessage.Sm_mail_text = _email;
                                        oMessage.Sm_sms_gap = 0;
                                        oMessage.Sm_sms_done = 0;
                                        oMessage.Sm_mail_text = _email;
                                        oMessage.Sm_mail_gap = 0;
                                        oMessage.Sm_email_done = 1;
                                        oMessage.Sm_email = string.Empty;
                                        oMessage.Sm_cre_dt = DateTime.Now;
                                        oMessage.Sm_mod_dt = DateTime.Now;
                                        _custServiceDAL.SaveServiceMsg(oMessage);
                                        // Send SMTP mail
                                        smtpClient.Send(message3);
                                    }
                                    else if ((!string.IsNullOrEmpty(_emp.Esep_mobi_no)) || (_emp.Esep_mobi_no != "N/A"))
                                    {
                                        string _realPhNo = GetRealPhoneNumber(_emp.Esep_mobi_no);
                                        OutSMS _out = new OutSMS();
                                        _out.Createtime = DateTime.Now;
                                        _out.Msg = "Delivery Order :" + documentNo + "Invoice # :" + _inventoryMovementHeader.Ith_oth_docno + "Invoice Date :" + _invoiceDate;
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = _cus.Mbe_cd;
                                        //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                        _out.Senderphno = _cus.Mbe_mob;
                                        _out.Refdocno = _inventoryMovementHeader.Ith_oth_docno;
                                        _out.Sender = _inventoryMovementHeader.Ith_cre_by;
                                        _out.Createtime = DateTime.Now;
                                        _inventoryDAL.SaveSMSOut(_out);
                                    }
                                }
                            }


                        }
                        #endregion
                    }
                    catch (Exception err)
                    {
                        effect = 1;
                        _custServiceDAL.ConnectionClose();
                    }
                }

                #endregion
            }

            return effect;
        }

        public DataTable GetSerialIDByJob(string _job, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialIDByJob(_job, _item);
        }

        //Code by Chamal 13-May-2013 edit DeliveryOrder function and new DeliveryOrderEntry
        public Int16 DeliveryOrder(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, ReptCommonDAL _invRepDAL, InventoryDAL _invDAL, bool _withInvoice, SalesDAL _SalesDAL=null)
        {
            if (_withInvoice == true)
            {
                _inventoryDAL = _invDAL;
                _inventoryRepDAL = _invRepDAL;
            }

            //InvoiceHeader _salesHeader = new InvoiceHeader();
            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;
            Int16 effect = 0;
            List<ReptPickSerials> _cons = new List<ReptPickSerials>();
            List<ReptPickSerials> _notcons = new List<ReptPickSerials>();

            DataTable _newSeqNosTable = new DataTable();
            _newSeqNosTable.Columns.Add("DocType", typeof(string));
            _newSeqNosTable.Columns.Add("SeqNo", typeof(int));

            //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
            MasterCompany _masterComp = null;
            _masterComp = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com);

            if (_masterComp.Mc_anal13 == 0)
            {
                #region Consignment stock transfer to normal stock
                var _consSupp = from _ListConsSupp in _reptPickSerials
                                where _ListConsSupp.Tus_itm_stus == "CONS"
                                group _ListConsSupp by new { _ListConsSupp.Tus_orig_supp } into list
                                select new { supp = list.Key.Tus_orig_supp };
                foreach (var listsSupp in _consSupp)
                {
                    InventoryHeader ConsPickHeader = new InventoryHeader();
                    ReptPickSerials ConsPickSerials = new ReptPickSerials();

                    Boolean _isVatClaim = false;
                    string _suppTaxCate = string.Empty;

                    MasterBusinessEntity _supDet = new MasterBusinessEntity();
                    _supDet = _inventoryDAL.GetBusinessCompanyDetail(_inventoryMovementHeader.Ith_com, listsSupp.supp.ToString(), null, null, "S");
                    if (_supDet != null)
                    {
                        _isVatClaim = _supDet.Mbe_is_tax;
                        _suppTaxCate = _supDet.Mbe_cate;
                    }
                    else
                    {
                        //MessageBox.Show("Cannot find supplier details.", "Purchase Order", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //return;
                    }

                    _cons = new List<ReptPickSerials>();

                    #region Fill Consignment Header Object
                    ConsPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
                    ConsPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
                    ConsPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
                    ConsPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
                    ConsPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
                    ConsPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
                    ConsPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
                    ConsPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
                    ConsPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
                    ConsPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
                    ConsPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
                    ConsPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
                    ConsPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
                    //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
                    ConsPickHeader.Ith_bus_entity = listsSupp.supp;
                    ConsPickHeader.Ith_cate_tp = "CONSIGN";
                    ConsPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
                    ConsPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
                    ConsPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
                    ConsPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    ConsPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
                    ConsPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
                    ConsPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
                    ConsPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
                    ConsPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
                    ConsPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
                    //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
                    ConsPickHeader.Ith_direct = false;
                    ConsPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                    ConsPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString(); // ADJ Seq No
                    //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                    ConsPickHeader.Ith_doc_tp = "ADJ";
                    ConsPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
                    ConsPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
                    ConsPickHeader.Ith_entry_tp = "SYS";
                    ConsPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
                    ConsPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
                    ConsPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
                    ConsPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
                    ConsPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
                    ConsPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
                    ConsPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
                    ConsPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
                    ConsPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
                    ConsPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                    ConsPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    ConsPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
                    ConsPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
                    ConsPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
                    ConsPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
                    ConsPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
                    ConsPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
                    ConsPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // ADJ Seq No
                    ConsPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                    ConsPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
                    ConsPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
                    ConsPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
                    ConsPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;

                    _newSeqNosTable.Rows.Add("ADJ", ConsPickHeader.Ith_seq_no);
                    #endregion Fill Consignment Header Object

                    var _consPickSerials = from _ListConsPickSerials in _reptPickSerials
                                           where _ListConsPickSerials.Tus_itm_stus == "CONS" && _ListConsPickSerials.Tus_orig_supp == listsSupp.supp
                                           select new ReptPickSerials
                                           {
                                               #region Seelct * From ReptPickSerials
                                               Tus_batch_line = _ListConsPickSerials.Tus_batch_line,
                                               Tus_bin = _ListConsPickSerials.Tus_bin,
                                               Tus_com = _ListConsPickSerials.Tus_com,
                                               Tus_cre_by = _ListConsPickSerials.Tus_cre_by,
                                               Tus_cre_dt = _ListConsPickSerials.Tus_cre_dt,
                                               Tus_cross_batchline = _ListConsPickSerials.Tus_cross_batchline,
                                               Tus_cross_itemline = _ListConsPickSerials.Tus_cross_itemline,
                                               Tus_cross_seqno = _ListConsPickSerials.Tus_cross_seqno,
                                               Tus_cross_serline = _ListConsPickSerials.Tus_cross_serline,
                                               Tus_doc_dt = _ListConsPickSerials.Tus_doc_dt,
                                               //Tus_doc_no = ConsPickHeader.Ith_seq_no.ToString(), //Doc No
                                               Tus_doc_no = _ListConsPickSerials.Tus_doc_no, //Doc No
                                               Tus_exist_grncom = _ListConsPickSerials.Tus_exist_grncom,
                                               Tus_exist_grndt = _ListConsPickSerials.Tus_exist_grndt,
                                               Tus_exist_grnno = _ListConsPickSerials.Tus_exist_grnno,
                                               Tus_exist_supp = _ListConsPickSerials.Tus_exist_supp,
                                               Tus_itm_brand = _ListConsPickSerials.Tus_itm_brand,
                                               Tus_itm_cd = _ListConsPickSerials.Tus_itm_cd,
                                               Tus_itm_desc = _ListConsPickSerials.Tus_itm_desc,
                                               Tus_itm_line = _ListConsPickSerials.Tus_itm_line,
                                               Tus_itm_model = _ListConsPickSerials.Tus_itm_model,
                                               Tus_itm_stus = _ListConsPickSerials.Tus_itm_stus,
                                               Tus_loc = _ListConsPickSerials.Tus_loc,
                                               Tus_orig_grncom = _ListConsPickSerials.Tus_orig_grncom,
                                               Tus_orig_grndt = _ListConsPickSerials.Tus_orig_grndt,
                                               Tus_orig_grnno = _ListConsPickSerials.Tus_orig_grnno,
                                               Tus_orig_supp = _ListConsPickSerials.Tus_orig_supp,
                                               Tus_out_date = _ListConsPickSerials.Tus_out_date,
                                               Tus_qty = _ListConsPickSerials.Tus_qty,
                                               //Tus_seq_no = ConsPickHeader.Ith_seq_no, //Seq No
                                               Tus_seq_no = _ListConsPickSerials.Tus_seq_no, //Seq No
                                               Tus_serial_id = _ListConsPickSerials.Tus_serial_id,
                                               Tus_ser_1 = _ListConsPickSerials.Tus_ser_1,
                                               Tus_ser_2 = _ListConsPickSerials.Tus_ser_2,
                                               Tus_ser_3 = _ListConsPickSerials.Tus_ser_3,
                                               Tus_ser_4 = _ListConsPickSerials.Tus_ser_4,
                                               Tus_ser_id = _ListConsPickSerials.Tus_ser_id,
                                               Tus_ser_line = _ListConsPickSerials.Tus_ser_line,
                                               Tus_session_id = _ListConsPickSerials.Tus_session_id,
                                               Tus_unit_cost = _ListConsPickSerials.Tus_unit_cost,
                                               Tus_unit_price = _ListConsPickSerials.Tus_unit_price,
                                               Tus_usrseq_no = ConsPickHeader.Ith_seq_no, //Scan Seq No
                                               Tus_warr_no = _ListConsPickSerials.Tus_warr_no,
                                               Tus_new_status = _ListConsPickSerials.Tus_new_status,
                                               Tus_new_remarks = _ListConsPickSerials.Tus_new_remarks,
                                               Tus_warr_period = _ListConsPickSerials.Tus_warr_period
                                               #endregion Seelct * From ReptPickSerials
                                           };

                    foreach (var listsConsPickSerials in _consPickSerials)
                    {
                        #region Fill Consignment Serials Object
                        ConsPickSerials = new ReptPickSerials();
                        ConsPickSerials.Tus_batch_line = listsConsPickSerials.Tus_batch_line;
                        ConsPickSerials.Tus_bin = listsConsPickSerials.Tus_bin;
                        ConsPickSerials.Tus_com = listsConsPickSerials.Tus_com;
                        ConsPickSerials.Tus_cre_by = listsConsPickSerials.Tus_cre_by;
                        ConsPickSerials.Tus_cre_dt = listsConsPickSerials.Tus_cre_dt;
                        ConsPickSerials.Tus_cross_batchline = listsConsPickSerials.Tus_cross_batchline;
                        ConsPickSerials.Tus_cross_itemline = listsConsPickSerials.Tus_cross_itemline;
                        ConsPickSerials.Tus_cross_seqno = listsConsPickSerials.Tus_cross_seqno;
                        ConsPickSerials.Tus_cross_serline = listsConsPickSerials.Tus_cross_serline;
                        ConsPickSerials.Tus_doc_dt = listsConsPickSerials.Tus_doc_dt;
                        ConsPickSerials.Tus_doc_no = listsConsPickSerials.Tus_doc_no;
                        ConsPickSerials.Tus_exist_grncom = listsConsPickSerials.Tus_exist_grncom;
                        ConsPickSerials.Tus_exist_grndt = listsConsPickSerials.Tus_exist_grndt;
                        ConsPickSerials.Tus_exist_grnno = listsConsPickSerials.Tus_exist_grnno;
                        ConsPickSerials.Tus_exist_supp = listsConsPickSerials.Tus_exist_supp;
                        ConsPickSerials.Tus_itm_brand = listsConsPickSerials.Tus_itm_brand;
                        ConsPickSerials.Tus_itm_cd = listsConsPickSerials.Tus_itm_cd;
                        ConsPickSerials.Tus_itm_desc = listsConsPickSerials.Tus_itm_desc;
                        ConsPickSerials.Tus_itm_line = listsConsPickSerials.Tus_itm_line;
                        ConsPickSerials.Tus_itm_model = listsConsPickSerials.Tus_itm_model;
                        ConsPickSerials.Tus_itm_stus = listsConsPickSerials.Tus_itm_stus; //CONS
                        ConsPickSerials.Tus_loc = listsConsPickSerials.Tus_loc;
                        ConsPickSerials.Tus_orig_grncom = listsConsPickSerials.Tus_orig_grncom;
                        ConsPickSerials.Tus_orig_grndt = listsConsPickSerials.Tus_orig_grndt;
                        ConsPickSerials.Tus_orig_grnno = listsConsPickSerials.Tus_orig_grnno;
                        ConsPickSerials.Tus_orig_supp = listsConsPickSerials.Tus_orig_supp;
                        ConsPickSerials.Tus_out_date = listsConsPickSerials.Tus_out_date;
                        ConsPickSerials.Tus_qty = listsConsPickSerials.Tus_qty;
                        ConsPickSerials.Tus_seq_no = listsConsPickSerials.Tus_seq_no;
                        ConsPickSerials.Tus_serial_id = listsConsPickSerials.Tus_serial_id;
                        ConsPickSerials.Tus_ser_1 = listsConsPickSerials.Tus_ser_1;
                        ConsPickSerials.Tus_ser_2 = listsConsPickSerials.Tus_ser_2;
                        ConsPickSerials.Tus_ser_3 = listsConsPickSerials.Tus_ser_3;
                        ConsPickSerials.Tus_ser_4 = listsConsPickSerials.Tus_ser_4;
                        ConsPickSerials.Tus_ser_id = listsConsPickSerials.Tus_ser_id;
                        ConsPickSerials.Tus_ser_line = listsConsPickSerials.Tus_ser_line;
                        ConsPickSerials.Tus_session_id = listsConsPickSerials.Tus_session_id;
                        ConsPickSerials.Tus_unit_cost = listsConsPickSerials.Tus_unit_cost;
                        ConsPickSerials.Tus_unit_price = listsConsPickSerials.Tus_unit_price;
                        ConsPickSerials.Tus_usrseq_no = listsConsPickSerials.Tus_usrseq_no;
                        ConsPickSerials.Tus_warr_no = listsConsPickSerials.Tus_warr_no;
                        ConsPickSerials.Tus_new_status = listsConsPickSerials.Tus_new_status;
                        ConsPickSerials.Tus_new_remarks = listsConsPickSerials.Tus_new_remarks;
                        ConsPickSerials.Tus_warr_period = listsConsPickSerials.Tus_warr_period;
                        #endregion Fill Consignment Serials Object
                        _cons.Add(ConsPickSerials);
                    }

                    //Save ADJ -
                    SaveOutwardScanSerial(ConsPickHeader, _cons, null, null, false);

                    //----- Start to create GRN ------
                    InventoryHeader GRNPickHeader = new InventoryHeader();
                    List<ReptPickSerials> GRNPickSerials = new List<ReptPickSerials>();

                    PurchaseOrder POHeader = new PurchaseOrder();
                    List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();

                    #region Fill GRN Header Object
                    GRNPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
                    GRNPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
                    GRNPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
                    GRNPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
                    GRNPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
                    GRNPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
                    GRNPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
                    GRNPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
                    GRNPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
                    GRNPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
                    GRNPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
                    GRNPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
                    GRNPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
                    //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
                    GRNPickHeader.Ith_bus_entity = listsSupp.supp;
                    GRNPickHeader.Ith_cate_tp = "CONSIGN";
                    GRNPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
                    GRNPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
                    GRNPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
                    GRNPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    GRNPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
                    GRNPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
                    GRNPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
                    GRNPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
                    GRNPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
                    GRNPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
                    //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
                    GRNPickHeader.Ith_direct = true;
                    GRNPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                    GRNPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString();
                    //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                    GRNPickHeader.Ith_doc_tp = "GRN";
                    GRNPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
                    GRNPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
                    GRNPickHeader.Ith_entry_tp = "SYS";
                    GRNPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
                    GRNPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
                    GRNPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
                    GRNPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
                    GRNPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
                    GRNPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
                    GRNPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
                    GRNPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
                    GRNPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
                    GRNPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                    GRNPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    GRNPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
                    GRNPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
                    GRNPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
                    GRNPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
                    GRNPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
                    GRNPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
                    GRNPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // GRN Seq No
                    GRNPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                    GRNPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
                    GRNPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
                    GRNPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
                    GRNPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
                    _newSeqNosTable.Rows.Add("GRN", GRNPickHeader.Ith_seq_no);
                    #endregion Fill GRN Header Object

                    #region Fill PO Header Object
                    POHeader.Poh_com = _inventoryMovementHeader.Ith_com;
                    POHeader.Poh_contain_kit = false; // ???
                    POHeader.Poh_cre_period = "N/A"; // ??
                    POHeader.Poh_cur_cd = "LKR";
                    POHeader.Poh_dis_amt = 0;
                    POHeader.Poh_dis_rt = 0;
                    POHeader.Poh_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                    POHeader.Poh_dt = _inventoryMovementHeader.Ith_doc_date;
                    POHeader.Poh_ex_rt = 1;
                    POHeader.Poh_frm_mon = 0;
                    POHeader.Poh_frm_yer = 0;
                    POHeader.Poh_job_no = "CONS_TO_NOR";
                    POHeader.Poh_ope = "N/A"; // ???
                    POHeader.Poh_oth_tot = 0;
                    POHeader.Poh_pay_term = null;
                    POHeader.Poh_port_of_orig = "N/A";
                    POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
                    POHeader.Poh_profit_cd = _inventoryMovementHeader.Ith_pc;
                    POHeader.Poh_ref = "N/A";
                    POHeader.Poh_remarks = "AUTO GENERATED";
                    POHeader.Poh_reprint = false;
                    POHeader.Poh_sent_add = string.Empty;
                    POHeader.Poh_sent_by = string.Empty;
                    POHeader.Poh_sent_to_vendor = false;
                    POHeader.Poh_sent_via = string.Empty;
                    POHeader.Poh_seq_no = GRNPickHeader.Ith_seq_no;
                    POHeader.Poh_stus = "F";
                    POHeader.Poh_sub_tot = 0;
                    POHeader.Poh_sub_tp = "N"; //Normal
                    POHeader.Poh_supp = listsSupp.supp;
                    POHeader.Poh_tax_chg = false;
                    POHeader.Poh_tax_tot = 0;
                    POHeader.Poh_to_mon = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_tot = 0;
                    POHeader.Poh_tp = "L"; //Local Purchase
                    POHeader.Poh_trans_term = string.Empty;
                    POHeader.Poh_cre_by = GRNPickHeader.Ith_cre_by;
                    _newSeqNosTable.Rows.Add("PO", POHeader.Poh_seq_no);
                    #endregion Fill PO Header Object

                    GRNPickSerials = _cons;
                    foreach (ReptPickSerials p in GRNPickSerials)
                    {
                        p.Tus_usrseq_no = GRNPickHeader.Ith_seq_no;
                        p.Tus_seq_no = GRNPickHeader.Ith_seq_no;
                        p.Tus_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                        p.Tus_itm_stus = "GDLP";
                        p.Tus_base_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                        p.Tus_base_itm_line = 0;
                        p.Tus_unit_cost = _inventoryDAL.Get_Cons_Quo_Price(_inventoryMovementHeader.Ith_com, listsSupp.supp, _inventoryMovementHeader.Ith_doc_date.Date, p.Tus_itm_cd, p.Tus_qty);
                    }

                    Int16 _poLineNo = 1;
                    var _grnPickSerials = from p in GRNPickSerials
                                          where p.Tus_itm_stus == "GDLP"
                                          group p by new { p.Tus_itm_cd, p.Tus_unit_cost, p.Tus_base_doc_no, p.Tus_base_itm_line } into list
                                          select new { itemcode = list.Key.Tus_itm_cd, unitprice = list.Key.Tus_unit_cost, pono = list.Key.Tus_base_doc_no, polineno = list.Key.Tus_base_itm_line, poqty = list.Sum(p => p.Tus_qty) };
                    foreach (var _p in _grnPickSerials)
                    {
                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                        #region Fill PO Items Object

                        decimal _tax = TaxCalculation(_inventoryMovementHeader.Ith_com, _p.itemcode.ToString(), "GDLP", _p.unitprice, 0);
                        decimal _taxForActual = 0;

                        if (string.IsNullOrEmpty(_suppTaxCate))
                        {
                            POItem.Pod_act_unit_price = (_p.poqty * _p.unitprice + _tax) / _p.poqty;
                        }
                        else
                        {
                            decimal _unitVal = _p.unitprice;
                            decimal _qty = _p.poqty;
                            decimal _amt = _unitVal * _qty;
                            _taxForActual = TaxCalculationActualCost(_inventoryMovementHeader.Ith_com, _p.itemcode.ToString(), "GDLP", _amt, _suppTaxCate, 0);
                            POItem.Pod_act_unit_price = ((_p.poqty * _p.unitprice) + _taxForActual) / _p.poqty;
                        }

                        //POItem.Pod_act_unit_price = _p.unitprice;
                        POItem.Pod_dis_amt = 0;
                        POItem.Pod_dis_rt = 0;
                        POItem.Pod_grn_bal = 0;
                        POItem.Pod_item_desc = "N/A";
                        POItem.Pod_itm_cd = _p.itemcode.ToString();
                        POItem.Pod_itm_stus = "GDLP";
                        POItem.Pod_itm_tp = "M";
                        POItem.Pod_kit_itm_cd = "N/A";
                        POItem.Pod_kit_line_no = 0;
                        POItem.Pod_lc_bal = 0;
                        POItem.Pod_line_amt = (_p.unitprice * _p.poqty) + _tax;
                        POItem.Pod_line_no = _poLineNo;
                        POItem.Pod_line_tax = _tax;
                        POItem.Pod_line_val = _p.unitprice * _p.poqty;
                        POItem.Pod_nbt = 0;
                        POItem.Pod_nbt_before = 0;
                        POItem.Pod_pi_bal = 0;
                        POItem.Pod_qty = _p.poqty;
                        POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                        POItem.Pod_seq_no = POHeader.Poh_seq_no;
                        POItem.Pod_si_bal = 0;
                        POItem.Pod_tot_tax_before = 0;
                        POItem.Pod_unit_price = _p.unitprice;
                        POItem.Pod_uom = "NOS";
                        POItem.Pod_vat = 0;
                        POItem.Pod_vat_before = 0;
                        #endregion Fill PO Items Object
                        POItems.Add(POItem);

                        foreach (ReptPickSerials p in GRNPickSerials)
                        {
                            if (_p.itemcode == p.Tus_itm_cd && _p.unitprice == p.Tus_unit_cost)
                            {
                                p.Tus_base_itm_line = _poLineNo;
                            }
                        }
                        _poLineNo += 1;
                    }

                    //Save GRN
                    SaveInwardScanSerial(GRNPickHeader, GRNPickSerials, null);
                    //Save PO
                    _inventoryDAL.SaveNewPO(POHeader);
                    foreach (PurchaseOrderDetail _POItems in POItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                    //_inventoryDAL.SaveNewPODel(null);

                    //Get Save GRN Serials and update cross inward document as GRN No
                    #region Update scan serial list cross references
                    List<InventorySerialN> _saveGRNSers = new List<InventorySerialN>();
                    _saveGRNSers = _inventoryDAL.GetIntSerList(GRNPickHeader.Ith_seq_no, string.Empty);
                    // List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                    // _BATCH = _inventoryDAL.GETINRBATCH(_inventoryMovementHeader.Ith_com, GRNPickHeader.Ith_seq_no.ToString());
                    //DataTable _tbl = _inventoryDAL.GETINRBATCH(_inventoryMovementHeader.Ith_com, GRNPickHeader.Ith_seq_no.ToString());
                    //var _scanItems = PickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_qty, x.Tus_itm_line }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                    //foreach (var itm in _scanItems)
                    //{
                    //    MasterItem msitem = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, itm.Peo.Tus_itm_cd);
                    //    if (msitem != null)
                    //    {
                    //        if (msitem.Mi_is_ser1 == 0)
                    //        {
                    //            ReptPickSerials serial = PickSerials.Find(x => x.Tus_itm_cd == itm.Peo.Tus_itm_cd && x.Tus_itm_line == itm.Peo.Tus_itm_line);
                    //            List<InventorySerialN> _saveGRNSers2 = new List<InventorySerialN>();
                    //            _saveGRNSers2 = _saveGRNSers.Where(x => x.Ins_itm_cd == itm.Peo.Tus_itm_cd).ToList();
                    //            for (int i = 1; i < itm.Peo.Tus_qty; i++)
                    //            {

                    //                serial.Tus_qty = 1;

                    //                #region Add by lakshan issue fix ref update 2016 Sep 20
                    //                ReptPickSerials _tmpSer = ReptPickSerials.CreateNewObject(serial);
                    //                #endregion
                    //                PickSerials.Add(_tmpSer);
                    //            }
                    //            int j = 0;
                    //            foreach (ReptPickSerials p_SER in PickSerials)
                    //            {

                    //                if (p_SER.Tus_itm_cd == itm.Peo.Tus_itm_cd)
                    //                {
                    //                    if (p_SER.Tus_ser_id == 0)
                    //                    {
                    //                        int serialid = _saveGRNSers2[j].Ins_ser_id;
                    //                        p_SER.Tus_ser_id = serialid;
                    //                        j++;
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //}


                    foreach (ReptPickSerials p in PickSerials)
                    {
                        foreach (InventorySerialN q in _saveGRNSers)
                        {
                            if (p.Tus_itm_cd == q.Ins_itm_cd && p.Tus_ser_id == q.Ins_ser_id && string.IsNullOrEmpty(p.Tus_serial_id))
                            {
                                p.Tus_unit_cost = q.Ins_unit_cost;
                                p.Tus_itm_stus = "GDLP";
                                p.Tus_doc_no = q.Ins_seq_no.ToString();
                                p.Tus_seq_no = q.Ins_seq_no;
                                p.Tus_itm_line = q.Ins_itm_line;
                                p.Tus_batch_line = q.Ins_batch_line;
                                p.Tus_ser_line = q.Ins_ser_line;
                                p.Tus_serial_id = "1";
                                // p.Tus_base_doc_no = q.Ins_doc_no;
                            }
                        }
                    }
                    #endregion Update scan serial list cross references
                }
                #endregion Consignment stock transfer to normal stock
            }
            //var _tbitems =
            //from _pickSerials in _reptPickSerials
            //group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            //_salesHeader = _inventoryDAL.GetInvoiceHeader(_inventoryMovementHeader.Ith_oth_docno);
            //_inventoryMovementHeader.Ith_bus_entity = _salesHeader.Sah_cus_cd;
            //_inventoryMovementHeader.Ith_del_add1 = _salesHeader.Sah_d_cust_add1;
            //_inventoryMovementHeader.Ith_del_add2 = _salesHeader.Sah_d_cust_add2;
            //_inventoryMovementHeader.Ith_pc = _salesHeader.Sah_pc;
            //Rukshan warranty period
            List<InvoiceItem> _invoiceItem = new List<InvoiceItem>();
            _invoiceItem = _inventoryDAL.getInvoiceItems(_inventoryMovementHeader.Ith_oth_docno);
            if (_invoiceItem.Count > 0)
            {
                List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                string _pc = _invoiceItem[0].Sad_pc;
                int _res = 0;
                string _docNo = string.Empty;
                foreach (var item in _invoiceItem)
                {
                    MasterProfitCenter _MasterProfitCenter = _inventoryDAL.GetProfitCenter(_inventoryMovementHeader.Ith_com, _pc);
                    var _Filtr = PickSerials.Where(x => x.Tus_itm_cd == item.Sad_itm_cd && x.Tus_base_itm_line == Convert.ToInt32(item.Sad_itm_line)).ToList();
                    if (_Filtr != null)
                    {
                        foreach (ReptPickSerials _serial in _Filtr)
                        {
                            int extendwarr = 0;
                            if (_MasterProfitCenter.Mpc_wara_extend > 0)
                            {
                                extendwarr = _MasterProfitCenter.Mpc_wara_extend;
                                _serial.Tus_warr_period = Convert.ToInt32(item.Sad_warr_period) + extendwarr;
                                _serial.Tus_Warranty_Remark = item.Sad_warr_remarks;

                            }
                            else
                            {
                                _serial.Tus_warr_period = Convert.ToInt32(item.Sad_warr_period);
                                _serial.Tus_Warranty_Remark = item.Sad_warr_remarks;
                            }

                            #region update item allocation data 10 Jan 2017
                            if (_inventoryMovementHeader.TMP_IS_ALLOCATION)
                            {

                                InventoryRequest _tmpReqHdr = new InventoryRequest();
                                InventoryRequestItem _tmpReqItm = new InventoryRequestItem();
                                _tmpReqHdr.Itr_anal3 = _inventoryMovementHeader.Ith_pc;
                                _tmpReqHdr.Itr_com = _inventoryMovementHeader.Ith_com;

                                _tmpReqItm = new InventoryRequestItem();
                                _tmpReqItm.Itri_itm_cd = _serial.Tus_itm_cd;
                                _tmpReqItm.Itri_itm_stus = _serial.Tus_itm_stus;
                                _tmpReqItm.Itri_qty = _serial.Tus_qty;
                                Int32 _rr = UpdateItemAllocationDataFIFODO(_inventoryDAL, _tmpReqItm, _tmpReqHdr);


                            }
                            #endregion
                        }

                    }

                    #region
                    //if ((!string.IsNullOrEmpty(item.Sad_res_no) || (item.Sad_res_no != "N/A")))
                    //{
                    //    if (_inventoryMovementHeader.UpdateResLog)
                    //    {
                    //        _resLogAvaData = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(
                    //        new INR_RES_LOG()
                    //        {
                    //            IRL_RES_NO = item.Sad_res_no,
                    //            IRL_ITM_CD = item.Sad_itm_cd,
                    //            IRL_ITM_STUS = item.Sad_itm_stus,
                    //        });
                    //        if (_resLogAvaData.Count > 0)
                    //        {
                    //            _res = InrResLogDataManage(new INR_RES_LOG()
                    //            {
                    //                IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                    //                IRL_CURT_LOC = _resLogAvaData[0].IRL_CURT_LOC,
                    //                IRL_ORIG_DOC_TP = "INVC",
                    //                IRL_ORIG_DOC_NO = _inventoryMovementHeader.Ith_oth_docno,
                    //                IRL_ORIG_DOC_DT = DateTime.Now,

                    //                IRL_CURT_DOC_TP = "DO",
                    //                IRL_CURT_DOC_NO = _inventoryMovementHeader.Ith_doc_no,
                    //                IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_cre_when,
                    //                IRL_RES_NO = item.Sad_res_no,
                    //                IRL_ITM_CD = item.Sad_itm_cd,
                    //                IRL_ITM_STUS = item.Sad_itm_stus,
                    //                IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_mod_by,
                    //                IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                    //                IRL_MOD_DT = DateTime.Now,
                    //                IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                    //                IRL_CRE_DT = DateTime.Now,
                    //                IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                    //                IRL_RES_QTY = item.Sad_qty,
                    //                IRL_RES_WP = 0
                    //            }, 0, _inventoryDAL, out _docNo);
                    //        }
                    //        if (_res < 1)
                    //        {
                    //            effect = -1;
                    //            documentNo = "reservation update fail";
                    //            return effect;
                    //        }
                    //    }
                    //}

                    #endregion
                    var _resDataList = PickSerials.Where(x => x.Tus_itm_cd == item.Sad_itm_cd && x.Tus_base_itm_line == item.Sad_itm_line).ToList();
                    if (_resDataList != null)
                    {
                        foreach (var _resDet in _resDataList)
                        {
                            #region update reservation det and log add by Lakshan 28 Oct 2016
                            if ((!string.IsNullOrEmpty(item.Sad_res_no) && (item.Sad_res_no != "N/A")))
                            {
                                if (_inventoryMovementHeader.UpdateResLog)
                                {
                                    string _errro = "";
                                    _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                       {
                                           IRL_CURT_COM = _inventoryMovementHeader.Ith_com,
                                           IRL_CURT_LOC = _inventoryMovementHeader.Ith_loc,
                                           IRL_ORIG_DOC_TP = "INVC",
                                           IRL_ORIG_DOC_NO = _inventoryMovementHeader.Ith_oth_docno,
                                           IRL_ORIG_DOC_DT = DateTime.Now,

                                           IRL_CURT_DOC_TP = "DO",
                                           IRL_CURT_DOC_NO = _inventoryMovementHeader.Ith_doc_no,
                                           IRL_CURT_DOC_DT = _inventoryMovementHeader.Ith_doc_date,
                                           IRL_RES_NO = item.Sad_res_no,
                                           IRL_ITM_CD = item.Sad_itm_cd,
                                           IRL_ITM_STUS = item.Sad_itm_stus,
                                           IRL_MOD_BY_NEW = _inventoryMovementHeader.Ith_cre_by,
                                           IRL_MOD_SESSION = _inventoryMovementHeader.Ith_session_id,
                                           IRL_MOD_DT = DateTime.Now,
                                           IRL_CRE_BY = _inventoryMovementHeader.Ith_cre_by,
                                           IRL_CRE_DT = DateTime.Now,
                                           IRL_CRE_SESSION = _inventoryMovementHeader.Ith_session_id,
                                           IRL_RES_QTY = _resDet.Tus_qty,
                                           IRL_RES_WP = 0,
                                       }, 0, _inventoryDAL, out _errro);

                                    if (_res < 1)
                                    {
                                        effect = -1;
                                        documentNo = "reservation update fail";
                                        return effect;
                                    }
                                }
                            }


                            #endregion
                        }
                    }
                }
            }




            effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false, _SalesDAL);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out documentNo);

            #region update Consignment related document auto nos
            MasterAutoNumber _AutoNo = new MasterAutoNumber();
            int _e = 0;
            if (_newSeqNosTable.Rows.Count > 0)
            {
                for (int i = 0; i < _newSeqNosTable.Rows.Count; i++)
                {
                    if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "ADJ")
                    {
                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                        _AutoNo.Aut_moduleid = "ADJ";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_start_char = "ADJ";
                        _AutoNo.Aut_cate_tp = "LOC";
                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                    }
                    else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "GRN")
                    {
                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                        _AutoNo.Aut_moduleid = "GRN";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_start_char = "GRN";
                        _AutoNo.Aut_cate_tp = "LOC";
                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                        _AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                    }
                    else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "PO")
                    {
                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                        //_AutoNo.Aut_direction = null;
                        //_AutoNo.Aut_start_char = "PO";
                        //_AutoNo.Aut_cate_tp = "COM";
                        //_AutoNo.Aut_year = null;

                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                        _AutoNo.Aut_cate_tp = "COM";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_modify_dt = null;
                        _AutoNo.Aut_moduleid = "PUR";
                        _AutoNo.Aut_start_char = "PUR";
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                    }
                }
            }
            #endregion update Consignment related document auto nos

            #region Update Invoice Qty
            var _invoice =
            from _pickSerials in _reptPickSerials
            group _pickSerials by new { _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line } into itm
            select new { invoiceno = itm.Key.Tus_base_doc_no, lineno = itm.Key.Tus_base_itm_line, itemqty = itm.Sum(p => p.Tus_qty) };
            int a = 0;
            foreach (var invoiceItems in _invoice)
            {

                _inventoryDAL.UpdateInvoicveDOQty(invoiceItems.invoiceno.ToString(), Convert.ToInt16(invoiceItems.lineno.ToString()), Convert.ToDecimal(invoiceItems.itemqty.ToString()));
                //kapila 20/5/2016
                _inventoryDAL.UpdateInvoicveDODate(invoiceItems.invoiceno.ToString(), Convert.ToInt16(invoiceItems.lineno.ToString()), Convert.ToDateTime(_inventoryMovementHeader.Ith_doc_date));
                a++;
            }



            _inventoryDAL.UpdateInvoiceDOStatus(_inventoryMovementHeader.Ith_oth_docno);
            #endregion
            #region update int_batch in HP incoice
            DataTable _dtInvDt = _inventoryDAL.GetSalesHdr(_inventoryMovementHeader.Ith_oth_docno);
            if (_dtInvDt.Rows.Count > 0)
            {
                if (_dtInvDt.Rows[0]["sah_inv_tp"].ToString() == "HS")
                {
                    if (_inventoryMovementHeader.Ith_gen_frm == "SCMWIN")
                    {
                        DataTable _itm = _inventoryDAL.GetSalesDet(_inventoryMovementHeader.Ith_oth_docno);
                        if (_itm.Rows.Count > 0)
                        {
                            foreach (DataRow _dr in _itm.Rows)
                            {
                                string Do_doc = documentNo;
                                string itm_cd = _dr["sad_itm_cd"].ToString();
                                string itm_sts = _dr["sad_itm_stus"].ToString();
                                Decimal itm_rt = _dr["sad_trd_rt"] == DBNull.Value ? 0 : Convert.ToDecimal(_dr["sad_trd_rt"]);
                                _inventoryDAL.Updat_int_batch_hp_inv(itm_cd, itm_sts, Do_doc, itm_rt);
                            }
                        }
                    }
                }
            }
            #endregion
            //#region Update ReceiptItemDetails Qty by tharanga 2017/11/07
            ////foreach (var invoiceItems in _invoice)
            ////{
            //    List<ReceiptItemDetails> ReceiptItemDetailsNew = _salesDAL.ReceiptItemDetailsNew(_inventoryMovementHeader.Ith_oth_docno);
            //    if (ReceiptItemDetailsNew != null)
            //    {
            //       // _salesDAL.ConnectionOpen();
            //        if  (ReceiptItemDetailsNew.Count > 0)
            //        {
            //            foreach (ReceiptItemDetails itemdet in ReceiptItemDetailsNew)
            //            {
            //                _salesDAL.updatereceiptDetnew(itemdet.Sari_seq_no, itemdet.Sari_rec_no, itemdet.Sari_item, itemdet.sari_res_qty);
            //            }
            //        }
            //    }
            ////}
            //#endregion

            //tHARINDU
            #region Update Manual Doc
            if (!string.IsNullOrEmpty(_inventoryMovementHeader.Ith_manual_ref))
            {
                MasterCompany _masterComp1 = null;
                _masterComp1 = _generalDAL.GetCompByCode(_inventoryMovementHeader.Ith_com);  //kapila 27/4/2016
                if (_masterComp1.MC_IS_SCM2_FMS == 1)
                    _inventoryDAL.UpdateManualDocNo(_inventoryMovementHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), _inventoryMovementHeader.Ith_entry_no);
                else
                    _fmsInventoryDal.UpdateManualDocNo(_inventoryMovementHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), _inventoryMovementHeader.Ith_entry_no);
            }
            #endregion


            return effect;
        }

        public Int16 SaveOutwardWithoutAutoNo(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, InventoryDAL _invDAL, out string _aodout)
        {// Nadeeka
            string _aodoutno = string.Empty;
            _inventoryDAL = _invDAL;
            Int16 eff = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, null, null, false);
            eff = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _aodoutno);
            _aodout = _aodoutno;
            return eff;
        }

        public Int16 DeliveryOrderWithoutAutoNo(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, ReptCommonDAL _invRepDAL, InventoryDAL _invDAL, bool _withInvoice, out InventoryHeader _movHdr, out DataTable _datatable, SalesDAL _salesDAL=null)
        {
            if (_withInvoice == true)
            {
                _inventoryDAL = _invDAL;
                _inventoryRepDAL = _invRepDAL;
            }

            //InvoiceHeader _salesHeader = new InvoiceHeader();
            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            List<ReptPickSerials> _cons = new List<ReptPickSerials>();
            List<ReptPickSerials> _notcons = new List<ReptPickSerials>();

            DataTable _newSeqNosTable = new DataTable();
            _newSeqNosTable.Columns.Add("DocType", typeof(string));
            _newSeqNosTable.Columns.Add("SeqNo", typeof(int));

            //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
            MasterCompany _masterComp = null;
            _masterComp = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com);

            if (_masterComp.Mc_anal13 == 0)
            {
                #region Consignment stock transfer to normal stock
                var _consSupp = from _ListConsSupp in _reptPickSerials
                                where _ListConsSupp.Tus_itm_stus == "CONS"
                                group _ListConsSupp by new { _ListConsSupp.Tus_orig_supp } into list
                                select new { supp = list.Key.Tus_orig_supp };
                foreach (var listsSupp in _consSupp)
                {
                    InventoryHeader ConsPickHeader = new InventoryHeader();
                    ReptPickSerials ConsPickSerials = new ReptPickSerials();

                    Boolean _isVatClaim = false;
                    string _suppTaxCate = string.Empty;

                    MasterBusinessEntity _supDet = new MasterBusinessEntity();
                    _supDet = _inventoryDAL.GetBusinessCompanyDetail(_inventoryMovementHeader.Ith_com, listsSupp.supp.ToString(), null, null, "S");
                    if (_supDet != null)
                    {
                        _isVatClaim = _supDet.Mbe_is_tax;
                        _suppTaxCate = _supDet.Mbe_cate;
                    }
                    else
                    {
                        //MessageBox.Show("Cannot find supplier details.", "Purchase Order", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //return;
                    }
                    _cons = new List<ReptPickSerials>();

                    #region Fill Consignment Header Object
                    ConsPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
                    ConsPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
                    ConsPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
                    ConsPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
                    ConsPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
                    ConsPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
                    ConsPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
                    ConsPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
                    ConsPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
                    ConsPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
                    ConsPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
                    ConsPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
                    ConsPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
                    //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
                    ConsPickHeader.Ith_bus_entity = listsSupp.supp;
                    ConsPickHeader.Ith_cate_tp = "CONSIGN";
                    ConsPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
                    ConsPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
                    ConsPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
                    ConsPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    ConsPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
                    ConsPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
                    ConsPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
                    ConsPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
                    ConsPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
                    ConsPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
                    //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
                    ConsPickHeader.Ith_direct = false;
                    ConsPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                    ConsPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString(); // ADJ Seq No
                    //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                    ConsPickHeader.Ith_doc_tp = "ADJ";
                    ConsPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
                    ConsPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
                    ConsPickHeader.Ith_entry_tp = "SYS";
                    ConsPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
                    ConsPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
                    ConsPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
                    ConsPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
                    ConsPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
                    ConsPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
                    ConsPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
                    ConsPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
                    ConsPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
                    ConsPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                    ConsPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    ConsPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
                    ConsPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
                    ConsPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
                    ConsPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
                    ConsPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
                    ConsPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
                    ConsPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // ADJ Seq No
                    ConsPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                    ConsPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
                    ConsPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
                    ConsPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
                    ConsPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
                    _newSeqNosTable.Rows.Add("ADJ", ConsPickHeader.Ith_seq_no);
                    #endregion Fill Consignment Header Object

                    var _consPickSerials = from _ListConsPickSerials in _reptPickSerials
                                           where _ListConsPickSerials.Tus_itm_stus == "CONS" && _ListConsPickSerials.Tus_orig_supp == listsSupp.supp
                                           select new ReptPickSerials
                                           {
                                               #region Seelct * From ReptPickSerials
                                               Tus_batch_line = _ListConsPickSerials.Tus_batch_line,
                                               Tus_bin = _ListConsPickSerials.Tus_bin,
                                               Tus_com = _ListConsPickSerials.Tus_com,
                                               Tus_cre_by = _ListConsPickSerials.Tus_cre_by,
                                               Tus_cre_dt = _ListConsPickSerials.Tus_cre_dt,
                                               Tus_cross_batchline = _ListConsPickSerials.Tus_cross_batchline,
                                               Tus_cross_itemline = _ListConsPickSerials.Tus_cross_itemline,
                                               Tus_cross_seqno = _ListConsPickSerials.Tus_cross_seqno,
                                               Tus_cross_serline = _ListConsPickSerials.Tus_cross_serline,
                                               Tus_doc_dt = _ListConsPickSerials.Tus_doc_dt,
                                               //Tus_doc_no = ConsPickHeader.Ith_seq_no.ToString(), //Doc No
                                               Tus_doc_no = _ListConsPickSerials.Tus_doc_no, //Doc No
                                               Tus_exist_grncom = _ListConsPickSerials.Tus_exist_grncom,
                                               Tus_exist_grndt = _ListConsPickSerials.Tus_exist_grndt,
                                               Tus_exist_grnno = _ListConsPickSerials.Tus_exist_grnno,
                                               Tus_exist_supp = _ListConsPickSerials.Tus_exist_supp,
                                               Tus_itm_brand = _ListConsPickSerials.Tus_itm_brand,
                                               Tus_itm_cd = _ListConsPickSerials.Tus_itm_cd,
                                               Tus_itm_desc = _ListConsPickSerials.Tus_itm_desc,
                                               Tus_itm_line = _ListConsPickSerials.Tus_itm_line,
                                               Tus_itm_model = _ListConsPickSerials.Tus_itm_model,
                                               Tus_itm_stus = _ListConsPickSerials.Tus_itm_stus,
                                               Tus_loc = _ListConsPickSerials.Tus_loc,
                                               Tus_orig_grncom = _ListConsPickSerials.Tus_orig_grncom,
                                               Tus_orig_grndt = _ListConsPickSerials.Tus_orig_grndt,
                                               Tus_orig_grnno = _ListConsPickSerials.Tus_orig_grnno,
                                               Tus_orig_supp = _ListConsPickSerials.Tus_orig_supp,
                                               Tus_out_date = _ListConsPickSerials.Tus_out_date,
                                               Tus_qty = _ListConsPickSerials.Tus_qty,
                                               //Tus_seq_no = ConsPickHeader.Ith_seq_no, //Seq No
                                               Tus_seq_no = _ListConsPickSerials.Tus_seq_no, //Seq No
                                               Tus_serial_id = _ListConsPickSerials.Tus_serial_id,
                                               Tus_ser_1 = _ListConsPickSerials.Tus_ser_1,
                                               Tus_ser_2 = _ListConsPickSerials.Tus_ser_2,
                                               Tus_ser_3 = _ListConsPickSerials.Tus_ser_3,
                                               Tus_ser_4 = _ListConsPickSerials.Tus_ser_4,
                                               Tus_ser_id = _ListConsPickSerials.Tus_ser_id,
                                               Tus_ser_line = _ListConsPickSerials.Tus_ser_line,
                                               Tus_session_id = _ListConsPickSerials.Tus_session_id,
                                               Tus_unit_cost = _ListConsPickSerials.Tus_unit_cost,
                                               Tus_unit_price = _ListConsPickSerials.Tus_unit_price,
                                               Tus_usrseq_no = ConsPickHeader.Ith_seq_no, //Scan Seq No
                                               Tus_warr_no = _ListConsPickSerials.Tus_warr_no,
                                               Tus_new_status = _ListConsPickSerials.Tus_new_status,
                                               Tus_new_remarks = _ListConsPickSerials.Tus_new_remarks,
                                               Tus_warr_period = _ListConsPickSerials.Tus_warr_period
                                               #endregion Seelct * From ReptPickSerials
                                           };

                    foreach (var listsConsPickSerials in _consPickSerials)
                    {
                        #region Fill Consignment Serials Object
                        ConsPickSerials = new ReptPickSerials();
                        ConsPickSerials.Tus_batch_line = listsConsPickSerials.Tus_batch_line;
                        ConsPickSerials.Tus_bin = listsConsPickSerials.Tus_bin;
                        ConsPickSerials.Tus_com = listsConsPickSerials.Tus_com;
                        ConsPickSerials.Tus_cre_by = listsConsPickSerials.Tus_cre_by;
                        ConsPickSerials.Tus_cre_dt = listsConsPickSerials.Tus_cre_dt;
                        ConsPickSerials.Tus_cross_batchline = listsConsPickSerials.Tus_cross_batchline;
                        ConsPickSerials.Tus_cross_itemline = listsConsPickSerials.Tus_cross_itemline;
                        ConsPickSerials.Tus_cross_seqno = listsConsPickSerials.Tus_cross_seqno;
                        ConsPickSerials.Tus_cross_serline = listsConsPickSerials.Tus_cross_serline;
                        ConsPickSerials.Tus_doc_dt = listsConsPickSerials.Tus_doc_dt;
                        ConsPickSerials.Tus_doc_no = listsConsPickSerials.Tus_doc_no;
                        ConsPickSerials.Tus_exist_grncom = listsConsPickSerials.Tus_exist_grncom;
                        ConsPickSerials.Tus_exist_grndt = listsConsPickSerials.Tus_exist_grndt;
                        ConsPickSerials.Tus_exist_grnno = listsConsPickSerials.Tus_exist_grnno;
                        ConsPickSerials.Tus_exist_supp = listsConsPickSerials.Tus_exist_supp;
                        ConsPickSerials.Tus_itm_brand = listsConsPickSerials.Tus_itm_brand;
                        ConsPickSerials.Tus_itm_cd = listsConsPickSerials.Tus_itm_cd;
                        ConsPickSerials.Tus_itm_desc = listsConsPickSerials.Tus_itm_desc;
                        ConsPickSerials.Tus_itm_line = listsConsPickSerials.Tus_itm_line;
                        ConsPickSerials.Tus_itm_model = listsConsPickSerials.Tus_itm_model;
                        ConsPickSerials.Tus_itm_stus = listsConsPickSerials.Tus_itm_stus; //CONS
                        ConsPickSerials.Tus_loc = listsConsPickSerials.Tus_loc;
                        ConsPickSerials.Tus_orig_grncom = listsConsPickSerials.Tus_orig_grncom;
                        ConsPickSerials.Tus_orig_grndt = listsConsPickSerials.Tus_orig_grndt;
                        ConsPickSerials.Tus_orig_grnno = listsConsPickSerials.Tus_orig_grnno;
                        ConsPickSerials.Tus_orig_supp = listsConsPickSerials.Tus_orig_supp;
                        ConsPickSerials.Tus_out_date = listsConsPickSerials.Tus_out_date;
                        ConsPickSerials.Tus_qty = listsConsPickSerials.Tus_qty;
                        ConsPickSerials.Tus_seq_no = listsConsPickSerials.Tus_seq_no;
                        ConsPickSerials.Tus_serial_id = listsConsPickSerials.Tus_serial_id;
                        ConsPickSerials.Tus_ser_1 = listsConsPickSerials.Tus_ser_1;
                        ConsPickSerials.Tus_ser_2 = listsConsPickSerials.Tus_ser_2;
                        ConsPickSerials.Tus_ser_3 = listsConsPickSerials.Tus_ser_3;
                        ConsPickSerials.Tus_ser_4 = listsConsPickSerials.Tus_ser_4;
                        ConsPickSerials.Tus_ser_id = listsConsPickSerials.Tus_ser_id;
                        ConsPickSerials.Tus_ser_line = listsConsPickSerials.Tus_ser_line;
                        ConsPickSerials.Tus_session_id = listsConsPickSerials.Tus_session_id;
                        ConsPickSerials.Tus_unit_cost = listsConsPickSerials.Tus_unit_cost;
                        ConsPickSerials.Tus_unit_price = listsConsPickSerials.Tus_unit_price;
                        ConsPickSerials.Tus_usrseq_no = listsConsPickSerials.Tus_usrseq_no;
                        ConsPickSerials.Tus_warr_no = listsConsPickSerials.Tus_warr_no;
                        ConsPickSerials.Tus_new_status = listsConsPickSerials.Tus_new_status;
                        ConsPickSerials.Tus_new_remarks = listsConsPickSerials.Tus_new_remarks;
                        ConsPickSerials.Tus_warr_period = listsConsPickSerials.Tus_warr_period;
                        #endregion Fill Consignment Serials Object
                        _cons.Add(ConsPickSerials);
                    }

                    //Save ADJ -
                    SaveOutwardScanSerial(ConsPickHeader, _cons, null, null, false);

                    //----- Start to create GRN ------
                    InventoryHeader GRNPickHeader = new InventoryHeader();
                    List<ReptPickSerials> GRNPickSerials = new List<ReptPickSerials>();

                    PurchaseOrder POHeader = new PurchaseOrder();
                    List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();

                    #region Fill GRN Header Object
                    GRNPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
                    GRNPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
                    GRNPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
                    GRNPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
                    GRNPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
                    GRNPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
                    GRNPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
                    GRNPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
                    GRNPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
                    GRNPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
                    GRNPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
                    GRNPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
                    GRNPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
                    //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
                    GRNPickHeader.Ith_bus_entity = listsSupp.supp;
                    GRNPickHeader.Ith_cate_tp = "CONSIGN";
                    GRNPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
                    GRNPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
                    GRNPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
                    GRNPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    GRNPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
                    GRNPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
                    GRNPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
                    GRNPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
                    GRNPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
                    GRNPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
                    //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
                    GRNPickHeader.Ith_direct = true;
                    GRNPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                    GRNPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString();
                    //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
                    GRNPickHeader.Ith_doc_tp = "GRN";
                    GRNPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
                    GRNPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
                    GRNPickHeader.Ith_entry_tp = "SYS";
                    GRNPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
                    GRNPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
                    GRNPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
                    GRNPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
                    GRNPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
                    GRNPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
                    GRNPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
                    GRNPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
                    GRNPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
                    GRNPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
                    GRNPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    GRNPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
                    GRNPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
                    GRNPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
                    GRNPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
                    GRNPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
                    GRNPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
                    GRNPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // GRN Seq No
                    GRNPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                    GRNPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
                    GRNPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
                    GRNPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
                    GRNPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
                    _newSeqNosTable.Rows.Add("GRN", GRNPickHeader.Ith_seq_no);
                    #endregion Fill GRN Header Object

                    #region Fill PO Header Object
                    POHeader.Poh_com = _inventoryMovementHeader.Ith_com;
                    POHeader.Poh_contain_kit = false; // ???
                    POHeader.Poh_cre_period = "N/A"; // ??
                    POHeader.Poh_cur_cd = "LKR";
                    POHeader.Poh_dis_amt = 0;
                    POHeader.Poh_dis_rt = 0;
                    POHeader.Poh_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                    POHeader.Poh_dt = _inventoryMovementHeader.Ith_doc_date;
                    POHeader.Poh_ex_rt = 1;
                    POHeader.Poh_frm_mon = 0;
                    POHeader.Poh_frm_yer = 0;
                    POHeader.Poh_job_no = "CONS_TO_NOR";
                    POHeader.Poh_ope = "N/A"; // ???
                    POHeader.Poh_oth_tot = 0;
                    POHeader.Poh_pay_term = null;
                    POHeader.Poh_port_of_orig = "N/A";
                    POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
                    POHeader.Poh_profit_cd = _inventoryMovementHeader.Ith_pc;
                    POHeader.Poh_ref = "N/A";
                    POHeader.Poh_remarks = "AUTO GENERATED";
                    POHeader.Poh_reprint = false;
                    POHeader.Poh_sent_add = string.Empty;
                    POHeader.Poh_sent_by = string.Empty;
                    POHeader.Poh_sent_to_vendor = false;
                    POHeader.Poh_sent_via = string.Empty;
                    POHeader.Poh_seq_no = GRNPickHeader.Ith_seq_no;
                    POHeader.Poh_stus = "F";
                    POHeader.Poh_sub_tot = 0;
                    POHeader.Poh_sub_tp = "N"; //Normal
                    POHeader.Poh_supp = listsSupp.supp;
                    POHeader.Poh_tax_chg = false;
                    POHeader.Poh_tax_tot = 0;
                    POHeader.Poh_to_mon = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_tot = 0;
                    POHeader.Poh_tp = "L"; //Local Purchase
                    POHeader.Poh_trans_term = string.Empty;
                    POHeader.Poh_cre_by = GRNPickHeader.Ith_cre_by;
                    _newSeqNosTable.Rows.Add("PO", POHeader.Poh_seq_no);
                    #endregion Fill PO Header Object

                    GRNPickSerials = _cons;
                    foreach (ReptPickSerials p in GRNPickSerials)
                    {
                        p.Tus_usrseq_no = GRNPickHeader.Ith_seq_no;
                        p.Tus_seq_no = GRNPickHeader.Ith_seq_no;
                        p.Tus_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                        p.Tus_itm_stus = "GDLP";
                        p.Tus_base_doc_no = GRNPickHeader.Ith_seq_no.ToString();
                        p.Tus_base_itm_line = 0;
                        p.Tus_unit_cost = _inventoryDAL.Get_Cons_Quo_Price(_inventoryMovementHeader.Ith_com, listsSupp.supp, _inventoryMovementHeader.Ith_doc_date.Date, p.Tus_itm_cd, p.Tus_qty);
                    }

                    Int16 _poLineNo = 1;
                    var _grnPickSerials = from p in GRNPickSerials
                                          where p.Tus_itm_stus == "GDLP"
                                          group p by new { p.Tus_itm_cd, p.Tus_unit_cost, p.Tus_base_doc_no, p.Tus_base_itm_line } into list
                                          select new { itemcode = list.Key.Tus_itm_cd, unitprice = list.Key.Tus_unit_cost, pono = list.Key.Tus_base_doc_no, polineno = list.Key.Tus_base_itm_line, poqty = list.Sum(p => p.Tus_qty) };
                    foreach (var _p in _grnPickSerials)
                    {
                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                        #region Fill PO Items Object

                        decimal _tax = TaxCalculation(_inventoryMovementHeader.Ith_com, _p.itemcode.ToString(), "GDLP", _p.unitprice, 0);
                        decimal _taxForActual = 0;

                        if (string.IsNullOrEmpty(_suppTaxCate))
                        {
                            POItem.Pod_act_unit_price = (_p.poqty * _p.unitprice + _tax) / _p.poqty;
                        }
                        else
                        {
                            decimal _unitVal = _p.unitprice;
                            decimal _qty = _p.poqty;
                            decimal _amt = _unitVal * _qty;
                            _taxForActual = TaxCalculationActualCost(_inventoryMovementHeader.Ith_com, _p.itemcode.ToString(), "GDLP", _amt, _suppTaxCate, 0);
                            POItem.Pod_act_unit_price = ((_p.poqty * _p.unitprice) + _taxForActual) / _p.poqty;
                        }

                        //POItem.Pod_act_unit_price = _p.unitprice;
                        POItem.Pod_dis_amt = 0;
                        POItem.Pod_dis_rt = 0;
                        POItem.Pod_grn_bal = 0;
                        POItem.Pod_item_desc = "N/A";
                        POItem.Pod_itm_cd = _p.itemcode.ToString();
                        POItem.Pod_itm_stus = "GDLP";
                        POItem.Pod_itm_tp = "M";
                        POItem.Pod_kit_itm_cd = "N/A";
                        POItem.Pod_kit_line_no = 0;
                        POItem.Pod_lc_bal = 0;
                        POItem.Pod_line_amt = (_p.unitprice * _p.poqty) + _tax;
                        POItem.Pod_line_no = _poLineNo;
                        POItem.Pod_line_tax = _tax;
                        POItem.Pod_line_val = _p.unitprice * _p.poqty;
                        POItem.Pod_nbt = 0;
                        POItem.Pod_nbt_before = 0;
                        POItem.Pod_pi_bal = 0;
                        POItem.Pod_qty = _p.poqty;
                        POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                        POItem.Pod_seq_no = POHeader.Poh_seq_no;
                        POItem.Pod_si_bal = 0;
                        POItem.Pod_tot_tax_before = 0;
                        POItem.Pod_unit_price = _p.unitprice;
                        POItem.Pod_uom = "NOS";
                        POItem.Pod_vat = 0;
                        POItem.Pod_vat_before = 0;
                        #endregion Fill PO Items Object
                        POItems.Add(POItem);

                        foreach (ReptPickSerials p in GRNPickSerials)
                        {
                            if (_p.itemcode == p.Tus_itm_cd && _p.unitprice == p.Tus_unit_cost)
                            {
                                p.Tus_base_itm_line = _poLineNo;
                            }
                        }
                        _poLineNo += 1;
                    }

                    //Save GRN
                    SaveInwardScanSerial(GRNPickHeader, GRNPickSerials, null);
                    //Save PO
                    _inventoryDAL.SaveNewPO(POHeader);
                    foreach (PurchaseOrderDetail _POItems in POItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                    //_inventoryDAL.SaveNewPODel(null);

                    //Get Save GRN Serials and update cross inward document as GRN No
                    #region Update scan serial list cross references
                    List<InventorySerialN> _saveGRNSers = new List<InventorySerialN>();
                    _saveGRNSers = _inventoryDAL.GetIntSerList(GRNPickHeader.Ith_seq_no, string.Empty);

                    foreach (ReptPickSerials p in PickSerials)
                    {
                        foreach (InventorySerialN q in _saveGRNSers)
                        {
                            MasterItem _deciItem = _inventoryDAL.GetItem("", q.Ins_itm_cd);     //24/9/2015
                            if (_deciItem.Mi_is_ser1 == -1)
                            {
                                if (p.Tus_itm_cd == q.Ins_itm_cd && p.Tus_ser_id == q.Ins_ser_id)
                                {
                                    p.Tus_unit_cost = q.Ins_unit_cost;
                                    p.Tus_itm_stus = "GDLP";
                                    p.Tus_doc_no = q.Ins_seq_no.ToString();
                                    p.Tus_seq_no = q.Ins_seq_no;
                                    p.Tus_itm_line = q.Ins_itm_line;
                                    p.Tus_batch_line = q.Ins_batch_line;
                                    p.Tus_ser_line = q.Ins_ser_line;
                                    p.Tus_serial_id = "0";
                                    p.Tus_doc_dt = GRNPickHeader.Ith_doc_date.Date;
                                }
                            }
                            else
                            {
                                if (p.Tus_itm_cd == q.Ins_itm_cd && p.Tus_ser_id == q.Ins_ser_id && string.IsNullOrEmpty(p.Tus_serial_id))
                                {
                                    p.Tus_unit_cost = q.Ins_unit_cost;
                                    p.Tus_itm_stus = "GDLP";
                                    p.Tus_doc_no = q.Ins_seq_no.ToString();
                                    p.Tus_seq_no = q.Ins_seq_no;
                                    p.Tus_itm_line = q.Ins_itm_line;
                                    p.Tus_batch_line = q.Ins_batch_line;
                                    p.Tus_ser_line = q.Ins_ser_line;
                                    p.Tus_serial_id = "1";
                                }
                            }
                        }
                    }
                    #endregion Update scan serial list cross references

                }
                #endregion Consignment stock transfer to normal stock
            }
            //var _tbitems =
            //from _pickSerials in _reptPickSerials
            //group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            //_salesHeader = _inventoryDAL.GetInvoiceHeader(_inventoryMovementHeader.Ith_oth_docno);
            //_inventoryMovementHeader.Ith_bus_entity = _salesHeader.Sah_cus_cd;
            //_inventoryMovementHeader.Ith_del_add1 = _salesHeader.Sah_d_cust_add1;
            //_inventoryMovementHeader.Ith_del_add2 = _salesHeader.Sah_d_cust_add2;
            //_inventoryMovementHeader.Ith_pc = _salesHeader.Sah_pc;



            Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false, _salesDAL);
            /*
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out documentNo);

            #region update Consignment related document auto nos
            MasterAutoNumber _AutoNo = new MasterAutoNumber();
            int _e = 0;
            if (_newSeqNosTable.Rows.Count > 0)
            {
                for (int i = 0; i < _newSeqNosTable.Rows.Count; i++)
                {
                    if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "ADJ")
                    {
                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                        _AutoNo.Aut_moduleid = "ADJ";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_start_char = "ADJ";
                        _AutoNo.Aut_cate_tp = "LOC";
                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                    }
                    else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "GRN")
                    {
                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                        _AutoNo.Aut_moduleid = "GRN";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_start_char = "GRN";
                        _AutoNo.Aut_cate_tp = "LOC";
                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                    }
                    else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "PO")
                    {
                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                        //_AutoNo.Aut_direction = null;
                        //_AutoNo.Aut_start_char = "PO";
                        //_AutoNo.Aut_cate_tp = "COM";
                        //_AutoNo.Aut_year = null;

                        _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                        _AutoNo.Aut_cate_tp = "COM";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_modify_dt = null;
                        _AutoNo.Aut_moduleid = "PUR";
                        _AutoNo.Aut_start_char = "PUR";
                        _AutoNo.Aut_year = null;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                    }
                }
            }
            #endregion update Consignment related document auto nos
            */
            /*
            #region Update Invoice Qty
            var _invoice =
            from _pickSerials in _reptPickSerials
            group _pickSerials by new { _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line } into itm
            select new { invoiceno = itm.Key.Tus_base_doc_no, lineno = itm.Key.Tus_base_itm_line, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var invoiceItems in _invoice)
            {
                _inventoryDAL.UpdateInvoicveDOQty(invoiceItems.invoiceno.ToString(), Convert.ToInt16(invoiceItems.lineno.ToString()), Convert.ToDecimal(invoiceItems.itemqty.ToString()));
            }

            _inventoryDAL.UpdateInvoiceDOStatus(_inventoryMovementHeader.Ith_oth_docno);

            #endregion Update Invoice Qty
            */

            _movHdr = _inventoryMovementHeader;
            _datatable = _newSeqNosTable;
            return effect;
        }

        private decimal TaxCalculation(string _com, string _item, string _status, decimal _UnitPrice, decimal _TaxVal)
        {
            //_inventoryDAL = new InventoryDAL();
            decimal _totNBT = 0;
            decimal _NBT = 0;
            decimal _oTax = 0;
            _TaxVal = 0;

            List<MasterItemTax> _taxs = new List<MasterItemTax>();
            _taxs = _inventoryDAL.GetItemTax(_com, _item, _status, string.Empty, string.Empty);
            var _Tax = from _itm in _taxs
                       select _itm;
            foreach (MasterItemTax _one in _Tax)
            {
                if (_one.Mict_tax_cd == "NBT")
                {
                    _NBT = _UnitPrice * _one.Mict_tax_rate / 100;
                    _TaxVal = _TaxVal + _NBT;
                    _totNBT = _totNBT + _NBT;
                }
            }

            foreach (MasterItemTax _two in _Tax)
            {
                if (_two.Mict_tax_cd != "NBT")
                {
                    _oTax = (_UnitPrice + _totNBT) * _two.Mict_tax_rate / 100;
                    _TaxVal = _TaxVal + _oTax;
                }
            }

            return _TaxVal;
        }

        private decimal TaxCalculationActualCost(string _com, string _item, string _status, decimal _UnitPrice, string _supTaxCate, decimal _actTaxVal)
        {
            //_inventoryDAL = new InventoryDAL();
            //_salesDAL = new SalesDAL();
            decimal _totNBT = 0;
            decimal _NBT = 0;
            decimal _oTax = 0;
            decimal _claimTaxRt = 0;

            _actTaxVal = 0;

            List<MasterItemTax> _taxs = new List<MasterItemTax>();
            _taxs = _inventoryDAL.GetItemTax(_com, _item, _status, string.Empty, string.Empty);
            var _Tax = from _itm in _taxs select _itm;

            MasterItemTaxClaim _claimTax = new MasterItemTaxClaim();
            _claimTax = _inventoryDAL.GetTaxClaimDet(_com, _item, _supTaxCate);
            foreach (MasterItemTax _one in _Tax)
            {
                if (_one.Mict_tax_cd == "NBT")
                {
                    _NBT = _UnitPrice * _one.Mict_tax_rate / 100;
                    _actTaxVal = _actTaxVal + _NBT;
                    _totNBT = _totNBT + _NBT;
                }
            }

            foreach (MasterItemTax _two in _Tax)
            {
                if (_two.Mict_tax_cd != "NBT")
                {
                    if (_claimTax != null)
                    { _claimTaxRt = _two.Mict_tax_rate - _claimTax.Mic_claim; }
                    else
                    { _claimTaxRt = _two.Mict_tax_rate; }
                    _oTax = (_UnitPrice + _totNBT) * _claimTaxRt / 100;
                    _actTaxVal = _actTaxVal + _oTax;
                }
            }
            return _actTaxVal;
        }

        #endregion Delivery Order *** Chamal 04-05-2012 ***

        #region AOD Correction *** Chamal 04-04-2013 ***

        public Int16 AODCorrection(string _company, string _aodoutNo, DateTime _date, string _aodIssueLoc, string _incorrectLoc, string _correctLoc, string _manualRef, string _othRef, string _remk, string _user, string _sessionID, out string inwardNo, out string outwardNo)
        {
            Int16 effect1 = 0;
            try
            {
                //string _errLoc = GetGITCorrectLocation(_company);
                //string _errLocBin = GetDefaultBinCode(_company, _errLoc);
                string _errAODType = "ERRT";
                
                //Wimal @ 29/Oct/2018
                String crrJobNo = _aodoutNo + "-" + _user;

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                string _errLoc = _incorrectLoc;
                string _errLocBin = _inventoryDAL.GetDefaultBinCode(_company, _errLoc); ;
                //string _errAODType = "ERRT";
                // List<MasterLocation> _mstLocIn = _inventoryDAL.GetLocationByLocCode(_company, _aodIssueLoc);
                //_errLocBin = _mstLocIn.Ml_allow_bin;
                if (string.IsNullOrEmpty(_errLoc))
                {
                    effect1 = -1;
                    outwardNo = "AOD correction virtual location not setup for company code " + _company;
                    inwardNo = outwardNo;
                    return effect1;
                }
                if (string.IsNullOrEmpty(_errLocBin))
                {
                    effect1 = -1;
                    outwardNo = "AOD correction location not setup for Defult Bin code " + _incorrectLoc;
                    inwardNo = outwardNo;
                    return effect1;
                }


                #region 01. Update AOD Issue other location as Err Location
                _inventoryDAL.UpdateErrAODLocation(_aodoutNo, _errLoc);
                _inventoryDAL.UpdateErrAODLocationBMT(_aodoutNo, _errLoc, _company); //Sanjeewa 2016-12-16 update BMT Balance table
                #endregion 01. Update AOD Issue other location as Err Location

                #region 02. Save AOD Issue to err location

                List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();
                _picksublist = null;

                #region Fill Objects AOD+
                InventoryHeader _invHdr = new InventoryHeader();
                _invHdr.Ith_loc = _errLoc;
                _invHdr.Ith_com = _company;
                _invHdr.Ith_oth_docno = _aodoutNo;
                _invHdr.Ith_doc_date = _date.Date;
                _invHdr.Ith_doc_year = _date.Year;
                _invHdr.Ith_doc_tp = "AOD";
                _invHdr.Ith_cate_tp = _errAODType;
                _invHdr.Ith_is_manual = false;
                _invHdr.Ith_stus = "A";
                _invHdr.Ith_cre_by = _user;
                _invHdr.Ith_mod_by = _user;
                _invHdr.Ith_direct = true;
                _invHdr.Ith_session_id = _sessionID;
                _invHdr.Ith_manual_ref = _manualRef;
                _invHdr.Ith_remarks = _remk;
                _invHdr.Ith_vehi_no = "N/A";
                _invHdr.Ith_sub_tp = "NOR";
                _invHdr.Ith_oth_com = _company;
                _invHdr.Ith_oth_loc = _aodIssueLoc;
                _invHdr.Ith_anal_1 = "ERR_AOD";
                _invHdr.Tmp_err_loc = _incorrectLoc;
                _invHdr.Ith_entry_no = crrJobNo ;

                MasterAutoNumber _autoNum = new MasterAutoNumber();
                _autoNum.Aut_cate_cd = _errLoc;
                _autoNum.Aut_cate_tp = "LOC";
                _autoNum.Aut_direction = 1;
                _autoNum.Aut_modify_dt = null;
                _autoNum.Aut_year = _date.Year;
                _autoNum.Aut_moduleid = "AOD";
                _autoNum.Aut_start_char = "AOD";
                #endregion Fill Objects AOD+

                #region Get AOD Out Items / Serials

                //Get Serialized Items
                DataTable _dt0 = new DataTable();
                _dt0 = _inventoryDAL.GetIntSerDetails(_aodoutNo);
                if (_dt0.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt0.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        MasterItem _itmlist = _inventoryDAL.GetItem(_company, (String)_dr["ITS_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_doc_no = _aodoutNo;
                            _pick.Tus_base_doc_no = _aodoutNo;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                            _pick.Tus_bin = _errLocBin;
                            _pick.Tus_com = _company;
                            _pick.Tus_cre_by = _user;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                            _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                            _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            //_pick.Tus_doc_no = _aodoutNo;

                            _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                            _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                            _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                            _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                            _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                            _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _errLoc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                            _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                            _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                            _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];

                            //_pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = 1;
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                            _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                            _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                            _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                            _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                            _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                            _pick.Tus_serial_id = String.Empty;
                            _pick.Tus_session_id = _sessionID;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);

                            //_pick.Tus_usrseq_no = _seqAODIn;
                            _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                            _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);
                            
                            //Wimal @ 29/Oct/2018
                            _pick.Tus_job_no = crrJobNo;

                            _picklist.Add(_pick);
                            //_inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                    }
                }

                //Get None-Serialized Items
                DataTable _dt1 = new DataTable();
                _dt1 = _inventoryDAL.GetIntBatchDetailsDecimal(_aodoutNo);
                if (_dt1.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt1.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        MasterItem _itmlist = _inventoryDAL.GetItem(_company, (String)_dr["ITB_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _aodoutNo;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                            _pick.Tus_bin = _errLocBin;
                            _pick.Tus_com = _company;
                            _pick.Tus_cre_by = _user;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = 0;
                            _pick.Tus_cross_itemline = 0;
                            _pick.Tus_cross_seqno = 0;
                            _pick.Tus_cross_serline = 0;
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            //_pick.Tus_doc_no = _aodoutNo;

                            _pick.Tus_exist_grncom = string.Empty;
                            _pick.Tus_exist_grnno = string.Empty;
                            _pick.Tus_exist_grndt = DateTime.MinValue;
                            _pick.Tus_exist_supp = string.Empty;
                            _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                            _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITB_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = 0;
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _errLoc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = string.Empty;
                            _pick.Tus_orig_grndt = DateTime.MinValue;
                            _pick.Tus_orig_grnno = string.Empty;
                            _pick.Tus_orig_supp = string.Empty;

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = "N/A";
                            _pick.Tus_ser_2 = string.Empty;
                            _pick.Tus_ser_3 = string.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            _pick.Tus_ser_id = 0;
                            _pick.Tus_ser_line = 0;
                            _pick.Tus_serial_id = String.Empty;
                            _pick.Tus_session_id = _sessionID;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITB_UNIT_COST"]);

                            //_pick.Tus_usrseq_no = _seqAODIn;
                            //_pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                            // _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);
                            
                            //Wimal @ 29/Oct/2018
                            _pick.Tus_job_no = crrJobNo;
                            _picklist.Add(_pick);
                            //_inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                    }
                }

                #endregion Get AOD Out Items / Serials

                if (_dt0.Rows.Count == 0 && _dt1.Rows.Count == 0)
                {
                    effect1 = -1;
                    outwardNo = "ERROR : " + "No pending items found!";
                    inwardNo = outwardNo;
                    _inventoryDAL.TransactionRollback();
                    return effect1;
                }

                Int16 effect = SaveInwardScanSerial(_invHdr, _picklist, _picksublist);
                effect = UpdateInventoryAutoNumber(_invHdr, _autoNum, "+", out inwardNo);

                #endregion 02. Save AOD Issue to err location

                #region 03. Save AOD Iusse from err location to correct location

                #region Fill Objects AOD-
                _invHdr = new InventoryHeader();
                _invHdr.Ith_loc = _errLoc;
                _invHdr.Ith_com = _company;
                _invHdr.Ith_oth_docno = _aodoutNo;
                _invHdr.Ith_doc_date = _date.Date;
                _invHdr.Ith_doc_year = _date.Year;
                _invHdr.Ith_doc_tp = "AOD";
                _invHdr.Ith_cate_tp = _errAODType;
                _invHdr.Ith_is_manual = false;
                _invHdr.Ith_stus = "A";
                _invHdr.Ith_cre_by = _user;
                _invHdr.Ith_mod_by = _user;
                _invHdr.Ith_direct = false;
                _invHdr.Ith_session_id = _sessionID;
                _invHdr.Ith_manual_ref = _manualRef;
                _invHdr.Ith_remarks = _remk;
                _invHdr.Ith_vehi_no = "N/A";
                _invHdr.Ith_sub_tp = "NOR";
                _invHdr.Ith_oth_com = _company;
                _invHdr.Ith_oth_loc = _correctLoc;
                _invHdr.Ith_anal_1 = "ERR_AOD";

                _autoNum = new MasterAutoNumber();
                _autoNum.Aut_cate_cd = _errLoc;
                _autoNum.Aut_cate_tp = "LOC";
                _autoNum.Aut_direction = 0;
                _autoNum.Aut_modify_dt = null;
                _autoNum.Aut_year = _date.Year;
                _autoNum.Aut_moduleid = "AOD";
                _autoNum.Aut_start_char = "AOD";
                #endregion Fill Objects AOD-

                _picklist = new List<ReptPickSerials>();
                _picklist = _inventoryDAL.Get_Int_Ser(inwardNo);
              //Wimal @ 29/Oct/2018
                foreach (var x in _picklist)
                {
                    x.Tus_job_no = crrJobNo;
                }
                
                _invHdr.Ith_entry_no = string.Empty;
                effect1 = SaveOutwardScanSerial(_invHdr, _picklist, _picksublist, null, false);
                effect1 = UpdateInventoryAutoNumber(_invHdr, _autoNum, "-", out outwardNo);
                #endregion 03. Save AOD Iusse from err location to correct location

                _inventoryDAL.TransactionCommit();

                return effect1;
            }
            catch (Exception err)
            {
                effect1 = -1;
                outwardNo = "ERROR : " + err.Message.ToString();
                inwardNo = outwardNo;
                _inventoryDAL.TransactionRollback();
                return effect1;
            }
        }

        #endregion AOD Correction *** Chamal 04-04-2013 ***

        #region Get Saved Movement Table Details

        public List<InventorySerialN> GetSavedMovementSerialsList(Int32 _SeqNo, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetIntSerList(_SeqNo, _docNo);
        }

        #endregion Get Saved Movement Table Details

        //kapila 11/8/2015
        #region Inventory Inward Temp
        public Int16 SaveInwardScanSerial_Temp(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;

            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeader.Ith_com;
            string _documentType = _inventoryMovementHeader.Ith_doc_tp;

            _companycostmethod = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;


            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            #region Set default values for null values :: Chamal 25/10/2012
            foreach (ReptPickSerials pickserials in PickSerials)
            {
                if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
                {
                    pickserials.Tus_base_doc_no = "N/A";
                }
            }
            #endregion Set default values for null values :: Chamal 25/10/2012




            DataTable dt_location = _inventoryDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = Convert.ToString(rw["ML_CATE_2"]); //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
            }

            if (_scm2LocCategory == "DF")
                _scmLocCategory = "DUTY FREE";
            else
                _scmLocCategory = "DUTY PAID";


            if (_inventoryMovementHeader.Ith_seq_no == 0)
            {
                _inventoryMovementHeader.Ith_seq_no = _inventoryDAL.GetSerialID();
            }
            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            if (_inventoryMovementHeader != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };


            foreach (var items in _tbitems)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = items.bincode;
                invItem.Iti_item_code = items.itemcode;
                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;

                _inventoryDAL.UpdateInventoryItem(invItem);


                batchLine = 1;

                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                    group _pickSerials by new
                    {
                        _pickSerials.Tus_bin,
                        _pickSerials.Tus_itm_cd,
                        _pickSerials.Tus_itm_stus,
                        _pickSerials.Tus_unit_cost,
                        _pickSerials.Tus_unit_price,
                        _pickSerials.Tus_base_doc_no,
                        _pickSerials.Tus_doc_no,
                        _pickSerials.Tus_base_itm_line,
                        _pickSerials.Tus_itm_line,
                        _pickSerials.Tus_batch_line,
                        _pickSerials.Tus_job_no,
                        _pickSerials.Tus_job_line,
                        _pickSerials.Tus_batch_no,
                        _pickSerials.Tus_exp_dt,
                        _pickSerials.Tus_manufac_dt
                    } into batch
                    select new
                    {
                        bincode = batch.Key.Tus_bin,
                        itemcode = batch.Key.Tus_itm_cd,
                        itemstatus = batch.Key.Tus_itm_stus,
                        unitcost = batch.Key.Tus_unit_cost,
                        unitprice = batch.Key.Tus_unit_price,
                        basedocno = batch.Key.Tus_base_doc_no,
                        baseitmline = batch.Key.Tus_base_itm_line,
                        outdocno = batch.Key.Tus_doc_no,
                        outitmline = batch.Key.Tus_itm_line,
                        outbatchline = batch.Key.Tus_batch_line,
                        jobno = batch.Key.Tus_job_no,
                        jobline = batch.Key.Tus_job_line,
                        batchno = batch.Key.Tus_batch_no,
                        expdate = batch.Key.Tus_exp_dt,
                        manufacdate = batch.Key.Tus_manufac_dt,

                        itemqty = batch.Sum(p => p.Tus_qty)
                    };
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                    invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                    invBatch.Inb_bin = batchs.bincode;
                    invBatch.Inb_itm_cd = batchs.itemcode;
                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = batchs.unitprice;
                    invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)
                    invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                    invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                    invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                    invBatch.Inb_base_itmcd = batchs.itemcode;
                    invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                    invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                    invBatch.Inb_base_itmstus = batchs.itemstatus;
                    invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;
                    invBatch.Inb_manufac_dt = batchs.manufacdate;

                    //INT_BATCH
                    _inventoryDAL.UpdateInventoryBatch(invBatch);

                    //INR_BATCH
                    ////                  _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);

                    serLine = 1;
                    var _tbsers =
                        (from _pickSerials in PickSerials
                         where _pickSerials.Tus_bin == batchs.bincode && _pickSerials.Tus_itm_cd == batchs.itemcode && _pickSerials.Tus_itm_stus == batchs.itemstatus && _pickSerials.Tus_unit_cost == batchs.unitcost
                         && _pickSerials.Tus_unit_price == batchs.unitprice
                         && _pickSerials.Tus_base_doc_no == batchs.basedocno
                         && _pickSerials.Tus_doc_no == batchs.outdocno
                         && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                         && _pickSerials.Tus_itm_line == batchs.outitmline
                         && _pickSerials.Tus_batch_line == batchs.outbatchline
                         select _pickSerials).Distinct();
                    foreach (var sers in _tbsers.Distinct())
                    {
                        reptSeqNo = sers.Tus_usrseq_no;

                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                        invSerials.Ins_bin = sers.Tus_bin;
                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        invSerials.Ins_cross_seqno = null;
                        invSerials.Ins_cross_itmline = null;
                        invSerials.Ins_cross_batchline = null;
                        invSerials.Ins_cross_serline = null;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;
                        invSerials.Ins_ageloc = sers.Tus_ageloc;
                        invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                        invSerials.Ins_isownmrn = sers.Tus_isownmrn;



                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                        _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                        _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                        _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                        _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                        _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                        _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                        _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                        _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;


                        if (sers.Tus_ser_id != 0)
                        {
                            //INR_SERMST
                            _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);

                            //INT_SER
                            _inventoryDAL.SaveInventorySerial(invSerials, 1);

                            //Tharaka 2015-12-29
                            //Int32 result = InventryCostCalculation(invBatch, PickSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, batchs.outdocno.ToString(), invBatch.Inb_seq_no, 1);
                            Int32 result = InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, batchs.outdocno.ToString(), invBatch.Inb_seq_no, 1);

                            //INR_SER
                            ////                           _inventoryDAL.SaveInventorySerialRef(invSerials, 1);

                            serLine += 1;
                        }
                    }

                    batchLine += 1;
                }

                itmLine += 1;
            }

            //UPDATE INT_HDR SET ITH_STUS ='F'
            ////            _inventoryDAL.UpdateOutDocStatus(_inventoryMovementHeader.Ith_oth_docno);

            // Update location inventory
            var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainv)
            {

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;

                //INR_LOC
                ////                _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
            }
            if (reptSeqNo != 0)
            {
                _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            }

            effect = 1;

            return effect;
        }


        #endregion Inventory Inward Temp

        #region Inventory Movement Temp Save
        //Chamal 11-Sep-2015
        //Edit By Rukshan  12-Sep-2015 add out parameter
        public Int16 SaveMovementTemp(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _docNo)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;
            _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
            _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeader.Ith_com;
            string _documentType = _inventoryMovementHeader.Ith_doc_tp;

            _companycostmethod = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;


            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            #region Set default values for null values :: Chamal 25/10/2012
            foreach (ReptPickSerials pickserials in PickSerials)
            {
                if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
                {
                    pickserials.Tus_base_doc_no = "N/A";
                }
            }
            #endregion Set default values for null values :: Chamal 25/10/2012




            DataTable dt_location = _inventoryDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = Convert.ToString(rw["ML_CATE_2"]); //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
            }

            if (_scm2LocCategory == "DF")
                _scmLocCategory = "DUTY FREE";
            else
                _scmLocCategory = "DUTY PAID";


            //if (_inventoryMovementHeader.Ith_seq_no == 0)
            //{
            //    _inventoryMovementHeader.Ith_seq_no = _inventoryDAL.GetSerialID();
            //}
            //Rukshan
            MasterAutoNumber _AutoNo = new MasterAutoNumber();
            _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
            _AutoNo.Aut_cate_tp = "COM";
            _AutoNo.Aut_direction = Convert.ToInt16(_inventoryMovementHeader.Ith_direct);
            _AutoNo.Aut_modify_dt = null;
            if (_inventoryMovementHeader.Ith_doc_tp == "PRN")
            {
                _AutoNo.Aut_moduleid = "PRN";
                _AutoNo.Aut_start_char = "-PRN";
            }
            else if (_inventoryMovementHeader.Ith_doc_tp == "ADJ")
            {
                if (_inventoryMovementHeader.Ith_direct == true)
                {
                    _AutoNo.Aut_moduleid = "ADJ";
                    _AutoNo.Aut_start_char = "+ADJ";
                }
                else
                {
                    _AutoNo.Aut_moduleid = "ADJ";
                    _AutoNo.Aut_start_char = "-ADJ";
                }
            }
            else if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
            {
                _AutoNo.Aut_moduleid = "SRN";
                _AutoNo.Aut_start_char = "-SRN";
            }
            //Sahan 23/Sep/2015
            else if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
            {
                _AutoNo.Aut_moduleid = "AOD";
                _AutoNo.Aut_start_char = "-AOD";
            }
            else if (_inventoryMovementHeader.Ith_doc_tp == "GRN")
            {
                _AutoNo.Aut_moduleid = "GRN";
                _AutoNo.Aut_start_char = "-GRN";

                foreach (ReptPickSerials ser in _reptPickSerials)
                {
                    ser.Tus_orig_grncom = _inventoryMovementHeader.Ith_com;
                    ser.Tus_orig_grndt = _inventoryMovementHeader.Ith_doc_date;
                    ser.Tus_orig_grnno = _inventoryMovementHeader.Ith_seq_no.ToString();
                    ser.Tus_orig_supp = _inventoryMovementHeader.Ith_bus_entity;

                    ser.Tus_exist_grncom = _inventoryMovementHeader.Ith_com;
                    ser.Tus_exist_grndt = _inventoryMovementHeader.Ith_doc_date;
                    ser.Tus_exist_grnno = _inventoryMovementHeader.Ith_seq_no.ToString();
                    ser.Tus_exist_supp = _inventoryMovementHeader.Ith_bus_entity;

                    ser.Tus_base_doc_no = ser.Tus_doc_no;
                    ser.Tus_base_itm_line = ser.Tus_itm_line;
                }
            }
            _AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;

            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;

            string _documentNo = _inventoryMovementHeader.Ith_loc + "" + _AutoNo.Aut_start_char + "-" + "TEMP" + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
            _docNo = _documentNo;
            _inventoryMovementHeader.Ith_doc_no = _documentNo;
            int _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
            if (_inventoryMovementHeader != null)
            {

                _inventoryMovementHeader.Ith_stus = "P";//rukshan 30/OCt/2015
                int Returnvalue = _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader, true);
                _inventoryMovementHeader.Ith_seq_no = Returnvalue;
            }


            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };


            foreach (var items in _tbitems)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_doc_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = items.bincode;
                invItem.Iti_item_code = items.itemcode;
                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;

                _inventoryDAL.UpdateInventoryItem(invItem, true);


                batchLine = 1;

                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                    group _pickSerials by new
                    {
                        _pickSerials.Tus_bin,
                        _pickSerials.Tus_itm_cd,
                        _pickSerials.Tus_itm_stus,
                        _pickSerials.Tus_unit_cost,
                        _pickSerials.Tus_unit_price,
                        _pickSerials.Tus_base_doc_no,
                        _pickSerials.Tus_doc_no,
                        _pickSerials.Tus_base_itm_line,
                        _pickSerials.Tus_itm_line,
                        _pickSerials.Tus_batch_line,
                        _pickSerials.Tus_job_no,
                        _pickSerials.Tus_job_line,
                        _pickSerials.Tus_batch_no,
                        _pickSerials.Tus_exp_dt,
                        _pickSerials.Tus_manufac_dt
                    } into batch
                    select new
                    {
                        bincode = batch.Key.Tus_bin,
                        itemcode = batch.Key.Tus_itm_cd,
                        itemstatus = batch.Key.Tus_itm_stus,
                        unitcost = batch.Key.Tus_unit_cost,
                        unitprice = batch.Key.Tus_unit_price,
                        basedocno = batch.Key.Tus_base_doc_no,
                        baseitmline = batch.Key.Tus_base_itm_line,
                        outdocno = batch.Key.Tus_doc_no,
                        outitmline = batch.Key.Tus_itm_line,
                        outbatchline = batch.Key.Tus_batch_line,
                        jobno = batch.Key.Tus_job_no,
                        jobline = batch.Key.Tus_job_line,
                        batchno = batch.Key.Tus_batch_no,
                        expdate = batch.Key.Tus_exp_dt,
                        manufacdate = batch.Key.Tus_manufac_dt,

                        itemqty = batch.Sum(p => p.Tus_qty)
                    };
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_doc_no;
                    invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                    invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                    invBatch.Inb_bin = batchs.bincode;
                    invBatch.Inb_itm_cd = batchs.itemcode;
                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = batchs.unitprice;
                    invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)
                    invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                    invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                    invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                    invBatch.Inb_base_itmcd = batchs.itemcode;
                    invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                    invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                    invBatch.Inb_base_itmstus = batchs.itemstatus;
                    invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;
                    invBatch.Inb_manufac_dt = batchs.manufacdate;

                    //INT_BATCH


                    _inventoryDAL.UpdateInventoryBatch(invBatch, true);


                    //INR_BATCH
                    ////                  _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);

                    serLine = 1;
                    var _tbsers =
                        (from _pickSerials in PickSerials
                         where _pickSerials.Tus_bin == batchs.bincode && _pickSerials.Tus_itm_cd == batchs.itemcode && _pickSerials.Tus_itm_stus == batchs.itemstatus && _pickSerials.Tus_unit_cost == batchs.unitcost
                         && _pickSerials.Tus_unit_price == batchs.unitprice
                         && _pickSerials.Tus_base_doc_no == batchs.basedocno
                         && _pickSerials.Tus_doc_no == batchs.outdocno
                         && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                         && _pickSerials.Tus_itm_line == batchs.outitmline
                         && _pickSerials.Tus_batch_line == batchs.outbatchline
                         select _pickSerials).Distinct();
                    foreach (var sers in _tbsers.Distinct())
                    {
                        reptSeqNo = sers.Tus_usrseq_no;

                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_doc_no; // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                        invSerials.Ins_bin = sers.Tus_bin;
                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        invSerials.Ins_cross_seqno = null;
                        invSerials.Ins_cross_itmline = null;
                        invSerials.Ins_cross_batchline = null;
                        invSerials.Ins_cross_serline = null;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;
                        invSerials.Ins_ageloc = sers.Tus_ageloc;
                        invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                        invSerials.Ins_isownmrn = sers.Tus_isownmrn;



                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                        _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                        _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                        _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                        _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                        _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                        _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                        _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                        _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;


                        if (sers.Tus_ser_id != 0)
                        {
                            //INR_SERMST
                            _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);



                            #region

                            int _line = 0;
                            if (_reptPickSerialsSub != null)
                            {

                                var FoundSubserial = _reptPickSerialsSub.Where(a => a.Tpss_m_ser == sers.Tus_ser_1).ToList();

                                foreach (ReptPickSerialsSub _Sub in FoundSubserial)
                                {
                                    InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
                                    if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
                                    {
                                        _invSubDetail.Irsms_act = true;
                                        _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
                                        _invSubDetail.Irsms_ser_line = _line;
                                        _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
                                        _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
                                        _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
                                        _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
                                        _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
                                        _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
                                        _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
                                        _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
                                        _invSubDetail.Mi_act = true;
                                        _invSubDetail.Irsms_qty = 1;
                                        CustServiceDAL _CustServiceDAL = new CustServiceDAL();
                                        _CustServiceDAL.ConnectionOpen();
                                        _CustServiceDAL.BeginTransaction();
                                        // _inventoryDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
                                        _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
                                        _CustServiceDAL.ConnectionClose();
                                        _CustServiceDAL.TransactionCommit();
                                        _line++;
                                    }

                                }
                            }

                            #endregion




                            //INT_SER
                            if (_inventoryMovementHeader.Ith_direct)
                            {
                                invSerials.Ins_direct = true;
                            }
                            else
                            {
                                invSerials.Ins_direct = false;
                            }

                            _inventoryDAL.SaveInventorySerial(invSerials, 1, true);

                            //INR_SER
                            ////                           _inventoryDAL.SaveInventorySerialRef(invSerials, 1);

                            serLine += 1;
                        }
                    }

                    batchLine += 1;
                }

                itmLine += 1;
            }

            //UPDATE INT_HDR SET ITH_STUS ='F'
            ////            _inventoryDAL.UpdateOutDocStatus(_inventoryMovementHeader.Ith_oth_docno);

            // Update location inventory
            var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainv)
            {

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;

                //INR_LOC
                ////                _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
            }
            if (reptSeqNo != 0)
            {
                _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            }
            _inventoryDAL.TransactionCommit();
            _inventoryRepDAL.TransactionCommit();
            effect = 1;

            return effect;
        }


        #endregion Inventory Movement Temp Save
        //Inventory Inward Document - Code By - Chamal on 20/03/2012 - Edited By P.Wijetunge on 3/4/2012
        #region Inventory Inward

        public Int16 SaveInwardScanSerial(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;
            //Added By Prabhath on 31/10/2012
            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _scm2LocType = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeader.Ith_com;
            string _documentType = _inventoryMovementHeader.Ith_doc_tp;
            bool _isAvgType = false;
            _companycostmethod = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;

            //added by dilshan on 26/04/2018 for rev status change
            string _statusRev = _inventoryMovementHeader.Ith_doc_tp;

            //#region Update List for the New Ageing Process
            //_reptPickSerials.ForEach(x => { x.Tus_exist_grncom = _inventoryMovementHeader.Ith_com; x.Tus_exist_grnno = _inventoryMovementHeader.Ith_doc_no; x.Tus_exist_grndt = _inventoryMovementHeader.Ith_doc_date; x.Tus_exist_supp = _inventoryMovementHeader.Ith_loc; });
            //#endregion

            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            #region Set default values for null values :: Chamal 25/10/2012
            foreach (ReptPickSerials pickserials in PickSerials)
            {
                if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
                {
                    pickserials.Tus_base_doc_no = "N/A";
                }
            }
            #endregion Set default values for null values :: Chamal 25/10/2012

            #region Rukshan for serial ID zero (0) GRN in SCM Web 30-Mar-2016
            List<ReptPickSerials> _nonserialitem = new List<ReptPickSerials>();
            List<ReptPickSerials> _serialitem = new List<ReptPickSerials>();
            _nonserialitem = _reptPickSerials.Where(x => x.Tus_ser_id == 0).ToList();
            _serialitem = _reptPickSerials.Where(x => x.Tus_ser_id != 0).ToList();
            if (_nonserialitem != null)
            {
                int _isserialMaintan = 0;
                //CHECK SERIAL MAINTANCE LOCATION
                MasterLocationNew _objloc = new MasterLocationNew();
                _objloc.Ml_loc_cd = _inventoryMovementHeader.Ith_loc;
                _objloc.Ml_act = 1;
                // _objloc.Ml_com_cd=Session["UserCompanyCode"].ToString();
                List<MasterLocationNew> _LOC = GetMasterLocations(_objloc);
                if (_LOC.Count > 0)
                {
                    _isserialMaintan = _LOC.First().Ml_is_serial;

                }
                foreach (ReptPickSerials _nserial in _nonserialitem)
                {

                    int i = _serialitem.Count;
                    MasterItem msitem = _inventoryDAL.GetItem(_nserial.Tus_com, _nserial.Tus_itm_cd);
                    if (_isserialMaintan == 0)
                    {
                        if (msitem.Mi_is_ser1 != -1)
                        {
                        msitem.Mi_is_ser1 = 0;
                    }
                    }
                    if (msitem.Mi_is_ser1 == 0)
                    {
                        List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();

                        int j = 0;
                        int qty = Convert.ToInt32(_nserial.Tus_qty);
                        while (j < qty)
                        {
                            #region pickserial
                            ReptPickSerials _test = new ReptPickSerials();
                            _test.ItemType = _nserial.ItemType;
                            _test.Mis_desc = _nserial.Mis_desc;
                            _test.Tus_ageloc = _nserial.Tus_ageloc;
                            _test.Tus_ageloc_dt = _nserial.Tus_ageloc_dt;
                            _test.Tus_appstatus = _nserial.Tus_appstatus;
                            _test.Tus_base_doc_no = _nserial.Tus_base_doc_no;
                            _test.Tus_base_itm_line = _nserial.Tus_base_itm_line;
                            _test.Tus_batch_line = _nserial.Tus_batch_line;
                            _test.Tus_batch_no = _nserial.Tus_batch_no;
                            _test.Tus_bin = _nserial.Tus_bin;
                            _test.Tus_com = _nserial.Tus_com;
                            _test.Tus_cre_by = _nserial.Tus_cre_by;
                            _test.Tus_cre_dt = _nserial.Tus_cre_dt;
                            _test.Tus_cross_batchline = _nserial.Tus_cross_batchline;
                            _test.Tus_cross_itemline = _nserial.Tus_cross_itemline;
                            _test.Tus_cross_seqno = _nserial.Tus_cross_seqno;
                            _test.Tus_cross_serline = _nserial.Tus_cross_serline;
                            _test.Tus_doc_dt = _nserial.Tus_doc_dt;
                            _test.Tus_doc_no = _nserial.Tus_doc_no;
                            _test.Tus_ed_pg = _nserial.Tus_ed_pg;
                            _test.Tus_exist_grncom = _nserial.Tus_exist_grncom;
                            _test.Tus_exist_grndt = _nserial.Tus_exist_grndt;
                            _test.Tus_exist_grnno = _nserial.Tus_exist_grnno;
                            _test.Tus_exist_supp = _nserial.Tus_exist_supp;
                            _test.Tus_exp_dt = _nserial.Tus_exp_dt;
                            _test.Tus_is_pgs = _nserial.Tus_is_pgs;
                            _test.Tus_isapp = _nserial.Tus_isapp;
                            _test.Tus_iscovernote = _nserial.Tus_iscovernote;
                            _test.Tus_isownmrn = _nserial.Tus_isownmrn;
                            _test.Tus_itm_brand = _nserial.Tus_itm_brand;
                            _test.Tus_itm_cd = _nserial.Tus_itm_cd;
                            _test.Tus_itm_desc = _nserial.Tus_itm_desc;
                            _test.Tus_itm_line = _nserial.Tus_itm_line;
                            _test.Tus_itm_model = _nserial.Tus_itm_model;
                            _test.Tus_itm_stus = _nserial.Tus_itm_stus;
                            _test.Tus_job_line = _nserial.Tus_job_line;
                            _test.Tus_job_no = _nserial.Tus_job_no;
                            _test.Tus_loc = _nserial.Tus_loc;
                            _test.Tus_manufac_dt = _nserial.Tus_manufac_dt;
                            _test.Tus_new_itm_cd = _nserial.Tus_new_itm_cd;
                            _test.Tus_new_remarks = _nserial.Tus_new_remarks;
                            _test.Tus_new_status = _nserial.Tus_new_status;
                            _test.Tus_orig_grncom = _nserial.Tus_orig_grncom;
                            _test.Tus_orig_grnno = _nserial.Tus_orig_grnno;
                            _test.Tus_orig_supp = _nserial.Tus_orig_supp;
                            _test.Tus_out_date = _nserial.Tus_out_date;
                            _test.Tus_pgs_count = _nserial.Tus_pgs_count;
                            _test.Tus_pgs_prefix = _nserial.Tus_pgs_prefix;
                            _test.Tus_res_line = _nserial.Tus_res_line;
                            _test.Tus_res_no = _nserial.Tus_res_no;
                            _test.Tus_resqty = _nserial.Tus_resqty;
                            _test.Tus_seq_no = _nserial.Tus_seq_no;
                            _test.Tus_orig_supp = _nserial.Tus_orig_supp;
                            _test.Tus_orig_grndt = _nserial.Tus_orig_grndt;
                            _test.Tus_ser_1 = _nserial.Tus_ser_1;
                            _test.Tus_ser_2 = _nserial.Tus_ser_2;
                            _test.Tus_ser_3 = _nserial.Tus_ser_3;
                            _test.Tus_ser_4 = _nserial.Tus_ser_4;
                            _test.Tus_ser_line = _nserial.Tus_ser_line;
                            _test.Tus_serial_id = _nserial.Tus_serial_id;
                            _test.Tus_session_id = _nserial.Tus_session_id;
                            _test.Tus_st_pg = _nserial.Tus_st_pg;
                            _test.Tus_unit_cost = _nserial.Tus_unit_cost;
                            _test.Tus_unit_price = _nserial.Tus_unit_price;
                            _test.Tus_usrseq_no = _nserial.Tus_usrseq_no;




                            _test.Tus_warr_no = _nserial.Tus_warr_no;
                            _test.Tus_warr_period = _nserial.Tus_warr_period;

                            _test.Tus_qty = 1;
                            _test.Tus_ser_id = _inventoryDAL.GetSerialID();
                            string _warrantyno = string.Empty;
                            _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _test.Tus_ser_id.ToString();
                            _nserial.Tus_warr_no = _warrantyno;
                            #endregion
                            //_serialitem.Add(_serialObj);
                            _serialitem.Insert(i, _test);
                            i++;
                            j++;
                        }

                    }
                    if (msitem.Mi_is_ser1 == -1)
                    {
                        _serialitem.Add(_nserial);
                    }

                }


                PickSerials = _serialitem;
                _reptPickSerials = _serialitem;

            }

            #endregion

            int _isSerial = 1;
            DataTable dt_location = _inventoryDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = Convert.ToString(rw["ML_CATE_2"]); //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
                _scm2LocType = (string)rw["ML_LOC_TP"];//Location Type
                _isSerial = (Int16)rw["ML_IS_SERIAL"];//Is Serial Maintain
            }

            if (_scm2LocCategory == "DF") { _scmLocCategory = "DUTY FREE"; }
            else { _scmLocCategory = "DUTY PAID"; }
            //Chamal 13-Nov-2015 // 30-11-2015 testing completed
            if (_scm2LocType != "SERC")
            {
                if (_isSerial == 1) //Chamal 06-Apr-2016 for Web SCM-II
                {
                    if (_inventoryMovementHeader.Ith_gen_frm == "SCMWEB" && _scm2LocCategory == "DFS")
                    {
                        #region add by lakshan 11Oct2017
                        //Job no not replace when serial maintain and DFS category locations
                        #endregion
                    }
                    else
                    {
                        DataTable _loctype = _inventoryDAL.GetLocTypes(_scm2LocType);
                        if (_loctype.Rows.Count > 0)
                        {
                            string _Isjobbase = _loctype.Rows[0][3].ToString();
                            if (!string.IsNullOrEmpty(_Isjobbase))
                            {
                                int value = Convert.ToInt32(_Isjobbase);
                                if (value == 0)
                                {
                                    PickSerials.ForEach(x => x.Tus_job_no = null);
                                    PickSerials.ForEach(x => x.Tus_job_line = 0);
                                }
                            }
                            else
                            {
                                PickSerials.ForEach(x => x.Tus_job_no = null);
                                PickSerials.ForEach(x => x.Tus_job_line = 0);
                            }
                        }
                    }
                }
            }
            #region job number update as production number
            if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB" && _inventoryMovementHeader.Tmp_update_job_no)
            {
                InventoryRequest _tmpReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryMovementHeader.Ith_entry_no }).FirstOrDefault();
                if (_tmpReq != null)
                {
                    if (_tmpReq.Itr_sub_tp == "PRO")
                    {
                        PickSerials.ForEach(x => x.Tus_job_no = _tmpReq.Itr_job_no);
                        PickSerials.ForEach(x => x.Tus_job_line = 0);
                    }
                }
            }
            #endregion

            #region eRROR 
            if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
            {
                 //InventoryRequest _tmpReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryMovementHeader.Ith_entry_no }).FirstOrDefault();
                 //if (_tmpReq != null)
                 //{
                     PickSerials.ForEach(x => x.Tus_job_no = _inventoryMovementHeader.Ith_entry_no);
                     PickSerials.ForEach(x => x.Tus_job_line = 0);
                 //}
            }
            #endregion

            //Added By Prabhath on 1/11/2012 --------------------AVG COST--------------------------------------------------
            #region Avarage Cost Calculation

            //switch (_documentType)
            //{
            //    case "GRN":
            //        _isAvgType = true;
            //        break;
            //    case "AOD":
            //        if (_scm2LocCategory == "DFS")
            //            _isAvgType = true;
            //        else
            //            _isAvgType = false;
            //        break;
            //    case "ADJ":
            //        _isAvgType = true;
            //        break;
            //    case "SRN":
            //        _isAvgType = true;
            //        break;
            //    default:
            //        _isAvgType = false;
            //        break;
            //}

            //if (!string.IsNullOrEmpty(_companycostmethod))
            //    if (_companycostmethod == "AVG" && _isAvgType)
            //    {
            //        var _ItemAvg = (from i in PickSerials
            //                        group i by new { i.Tus_itm_cd, i.Tus_itm_stus } into batch
            //                        select new { Tus_itm_cd = batch.Key.Tus_itm_cd, Tus_itm_stus = batch.Key.Tus_itm_stus, Tus_cost = batch.Sum(p => p.Tus_qty * p.Tus_unit_cost) }).ToList();

            //        foreach (var _itm in _ItemAvg)
            //        {
            //            string _itmCode = _itm.Tus_itm_cd;

            //            decimal _scm2TotBalanceCost = 0;
            //            decimal _scm2BalQty = 0;
            //            decimal _scmTotBalanceCost = 0;
            //            decimal _scmBalQty = 0;

            //            decimal _scm2TotCurrentCost = 0;
            //            decimal _scm2CurrentQty = 0;

            //            string _scm2Status = _itm.Tus_itm_stus; ;
            //            string _scmStatus = string.Empty;
            //            DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(_scm2Status, string.Empty);
            //            if (_tblStus != null)
            //                if (_tblStus.Rows.Count > 0)
            //                {
            //                    foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
            //                }

            //            //Get SCM2 Balance Cost
            //            DataTable _scm2baltbl = _inventoryDAL.GetItemBalanceAvg(_company, _scm2LocCategory, _itmCode, _scm2Status);
            //            if (_scm2baltbl != null)
            //                if (_scm2baltbl.Rows.Count > 0)
            //                {
            //                    _scm2TotBalanceCost = 0;
            //                    foreach (DataRow _r in _scm2baltbl.Rows)
            //                    {
            //                        _scm2TotBalanceCost += Convert.ToDecimal(_r["inl_qty"]) * Convert.ToDecimal(_r["inl_avg_cost"]);
            //                        _scm2BalQty += Convert.ToDecimal(_r["inl_qty"]);
            //                    }
            //                }

            //            //Get SCM Balance Cost
            //            DataTable _scmbaltbl = _ScmCommonDAL.GetItemBalanceAvg(_company, _scmLocCategory, _itmCode, _scmStatus);
            //            if (_scmbaltbl != null)
            //                if (_scmbaltbl.Rows.Count > 0)
            //                {
            //                    _scmTotBalanceCost = 0;
            //                    foreach (DataRow _r in _scmbaltbl.Rows)
            //                    {
            //                        _scmTotBalanceCost += Convert.ToDecimal(_r["qty_in_hand"]) * Convert.ToDecimal(_r["avg_cost"]);
            //                        _scmBalQty += Convert.ToDecimal(_r["qty_in_hand"]);
            //                    }
            //                }

            //            //Get SCM2 Current Entry
            //            _scm2TotCurrentCost = _itm.Tus_cost;
            //            _scm2CurrentQty = PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).Sum(y => y.Tus_qty);

            //            // Calculation
            //            //------------
            //            // Avg Cost = [(Balance Weighted Cost) + (Currecnt Weighted Cost)] / (Total Qty)
            //            // In simplify;
            //            // Avg Cost = [(SCM2 Balance + SCM Balance) + (SCM2 Current Entry)]/(SCM2 Balance Qty + SCM Balance Qty + SCM2 Current Entry Qty)

            //            decimal _newAvgCost = (_scm2TotBalanceCost + _scmTotBalanceCost + _scm2TotCurrentCost) / (_scm2BalQty + _scmBalQty + _scm2CurrentQty);

            //            //Update Entry List
            //            PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).ToList().ForEach(y => y.Tus_new_status = Convert.ToString(Math.Round(_newAvgCost, 4)));

            //        }

            //    }
            #endregion Avarage Cost Calculation

            #region Avarage Cost Calculation add by Lakshan 03Jul2017
            List<INR_AVG_COST> _inrCstList = new List<INR_AVG_COST>();
            if (!_inventoryMovementHeader.Tmp_avg_cost_calc)
            {
                switch (_documentType)
                {
                    case "GRN":
                        _isAvgType = true;
                        break;
                    case "AOD":
                        {
                            string _locCat = "";
                            DataTable _dtTmpLoc = _inventoryDAL.Get_location_by_code(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc, 1);
                            foreach (DataRow rw in _dtTmpLoc.Rows)
                            {
                                _locCat = (string)rw["ML_CATE_1"];//Location Categry Code
                            }
                            if (_locCat == "DFS")
                            {
                                _isAvgType = true;
                            }
                            else
                            {
                                _isAvgType = false;
                            }
                            //if (_scm2LocCategory == "DFS")
                            //    _isAvgType = true;
                            //else
                            //    _isAvgType = false;

                            break;
                        }
                    case "ADJ":
                        _isAvgType = true;
                        break;
                    case "SRN":
                        _isAvgType = true;
                        break;
                    default:
                        _isAvgType = false;
                        break;
                }
                if (!string.IsNullOrEmpty(_companycostmethod))
                {
                    if (_companycostmethod == "AVG" && _isAvgType)
                    {
                        #region save avg cost summery to inr_avg_cst_mth add by lakshan 07Jul2017
                        DateTime _docDt = _inventoryMovementHeader.Ith_doc_date;
                        //DateTime _prevMthEnd = new DateTime(_docDt.Year,_docDt.Month,01).AddMonths(1).AddDays(-1);
                        decimal _lastMonthDataAva = _inventoryDAL.GetInrAvgCostMthDataAva(_docDt);
                        if (_lastMonthDataAva == 0)
                        {
                            _inventoryDAL.UpdateInrMnthlyCostData(_inventoryMovementHeader.Ith_cre_by);
                        }
                        #endregion
                        decimal _avgCst = 0;
                        decimal _noOfUnit = 0;
                        INR_AVG_COST _tmpInrAvgCst = new INR_AVG_COST();
                        INR_AVG_COST_GIT _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                        INR_AVG_COST _saveAvgCst = new INR_AVG_COST();
                        INR_AVG_COST _inrAvgCstAva = new INR_AVG_COST();
                        INR_AVG_COST_GIT _inrAvgCstAvaGit = new INR_AVG_COST_GIT();
                        MasterLocation _mstLocIn = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                        List<INR_AVG_COST> _listAvgData = new List<INR_AVG_COST>();
                        INR_AVG_COST _avgData = new INR_AVG_COST();
                        foreach (var _pSer in _reptPickSerials)
                        {
                            _avgData = new INR_AVG_COST();
                            _avgData.Iac_itm_cd = _pSer.Tus_itm_cd;
                            _avgData.Iac_itm_stus = _pSer.Tus_itm_stus;
                            _avgData.Iac_avg_qty = _pSer.Tus_qty;
                            _avgData.Iac_avg_cost = _pSer.Tus_unit_cost;
                            _avgData.Tmp_mult_cost = _pSer.Tus_qty * _pSer.Tus_unit_cost;
                            _listAvgData.Add(_avgData);
                        }

                        var _itmList = _listAvgData.GroupBy(x => new { x.Iac_itm_cd, x.Iac_itm_stus }).Select(group =>
                            new { Peo = group.Key, docQty = group.Sum(o => o.Iac_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                        foreach (var item in _itmList)
                        {
                            _tmpInrAvgCst = new INR_AVG_COST();
                            _tmpInrAvgCst.Iac_com = _inventoryMovementHeader.Ith_com;
                            _tmpInrAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAva = _inventoryDAL.GET_INR_AVG_COST_DATA(_tmpInrAvgCst);
                            _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                            _tmpInrAvgCstGit.Iacg_com = _inventoryMovementHeader.Ith_com;
                            _tmpInrAvgCstGit.Iacg_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCstGit.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCstGit.Iacg_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAvaGit = _inventoryDAL.GET_INR_AVG_GIT_BY_LOC_TP(_tmpInrAvgCstGit);
                            decimal _gitBal = 0;
                            if (_inrAvgCstAvaGit != null)
                            {
                                _gitBal = _inrAvgCstAvaGit.Iacg_avg_qty;
                            }
                            decimal _invBal = _inventoryDAL.GetInrBalanceForAvgCost(_inventoryMovementHeader.Ith_com, item.Peo.Iac_itm_cd, item.Peo.Iac_itm_stus, _mstLocIn.Ml_cate_1);
                            _invBal = _invBal + _gitBal;
                            if (_documentType == "SRN")
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (_inrAvgCstAva.Iac_avg_cost * item.docQty)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            else
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (item.docCst)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            _saveAvgCst = new INR_AVG_COST();
                            _saveAvgCst.Iac_com = _inventoryMovementHeader.Ith_com;
                            _saveAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _saveAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _saveAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _saveAvgCst.Iac_avg_dt = DateTime.Now;
                            _saveAvgCst.Iac_avg_cost = Math.Round(_avgCst, 4);
                            _saveAvgCst.Iac_avg_qty = _noOfUnit;
                            _saveAvgCst.Iac_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _saveAvgCst.Iac_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                            _saveAvgCst.Iac_mod_by = _inventoryMovementHeader.Ith_mod_by;
                            _saveAvgCst.Iac_mod_dt = _inventoryMovementHeader.Ith_mod_when;
                            //_saveAvgCst.Iac_anal_1 = "";
                            //_saveAvgCst.Iac_anal_2 = "";
                            //_saveAvgCst.Iac_anal_3 = "";
                            //_saveAvgCst.Iac_anal_4 = "";
                            //_saveAvgCst.Iac_anal_5 = "";
                            //_saveAvgCst.Iac_costofsale = "";
                            //_saveAvgCst.Iac_tot_inv_rate = "";
                            //_saveAvgCst.Iac_sold_qty = "";
                            //_saveAvgCst.Iac_sold_qty_intr_com = "";
                            //_saveAvgCst.Iac_avg_inv_days = "";
                            _inrCstList.Add(_saveAvgCst);
                            _inventoryDAL.UpdateInrCostData(_saveAvgCst);
                        }
                    }
                }
            }
            #endregion
            //End of AVG COST ---------------------------------------------------------------------------------------------

            //Int32 _docSeqNo = _inventoryDAL.GetSerialID(); emoved by chamal 12-05-2013
            if (_inventoryMovementHeader.Ith_seq_no == 0)
            {
                _inventoryMovementHeader.Ith_seq_no = _inventoryDAL.GetSerialID();
            }
            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            if (_inventoryMovementHeader != null)
                _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new
                {
                    _pickSerials.Tus_bin,
                    _pickSerials.Tus_itm_cd,
                    _pickSerials.Tus_itm_stus
                } into itm
                select new
                {
                    bincode = itm.Key.Tus_bin,
                    itemcode = itm.Key.Tus_itm_cd,
                    itemstatus = itm.Key.Tus_itm_stus,
                    itemqty = itm.Sum(p => p.Tus_qty)
                };

            //If line no issue please consider below LINQ statement. (Prabhath on 21/02/2014)
            //var _tbitems =
            //    (from _pickSerials in _reptPickSerials
            //     group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //     select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);

            //dilshan *********************************
            if (_statusRev == "SRN" && _inventoryMovementHeader.Ith_gen_frm == "SCMWEB")
            {
            foreach (var items in _tbitems)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = items.bincode;
                invItem.Iti_item_code = items.itemcode;
                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                // INSERT/UPDATE INT_ITM TABLE
                _inventoryDAL.UpdateInventoryItem(invItem);

                //Added By Prabhath on 1/11/2012
                #region Avarage Cost Calculation
                //decimal _particulerAvgCost = 0;
                //if (_companycostmethod == "AVG" && _isAvgType)
                //{
                //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_new_status).Distinct();
                //    foreach (string _h in _avgcost)
                //        _particulerAvgCost = Convert.ToDecimal(_h);
                //}
                #endregion Avarage Cost Calculation
                //Added By Prabhath on 1/11/2012

                batchLine = 1;
                    //added by dilshan revesal
                    var _tbbatchs =
                       from _pickSerials in PickSerials
                       where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                       group _pickSerials by new
                       {
                           _pickSerials.Tus_bin,
                           _pickSerials.Tus_itm_cd,
                           //_pickSerials.Tus_itm_stus,  //commented by dilshan
                           _pickSerials.Tus_appstatus, //added by dilshan revesal
                           _pickSerials.Tus_unit_cost,
                           _pickSerials.Tus_unit_price,
                           _pickSerials.Tus_base_doc_no,
                           _pickSerials.Tus_doc_no,
                           _pickSerials.Tus_base_itm_line, 
                           _pickSerials.Tus_itm_line,
                           _pickSerials.Tus_batch_line,
                           _pickSerials.Tus_job_no,
                           _pickSerials.Tus_job_line,
                           _pickSerials.Tus_res_no,
                           _pickSerials.Tus_res_line,
                           _pickSerials.Tus_batch_no,
                           _pickSerials.Tus_exp_dt,
                           _pickSerials.Tus_manufac_dt,
                           _pickSerials.Tus_pgs_prefix,
                           _pickSerials.Tus_new_itm_cd
                       } into batch
                       select new
                       {
                           bincode = batch.Key.Tus_bin,
                           itemcode = batch.Key.Tus_itm_cd,
                           //itemstatus = batch.Key.Tus_itm_stus,//commented by dilshan
                           itemstatus = batch.Key.Tus_appstatus,//added by dilshan
                           unitcost = batch.Key.Tus_unit_cost,
                           unitprice = batch.Key.Tus_unit_price,
                           basedocno = batch.Key.Tus_base_doc_no,
                           baseitmline = batch.Key.Tus_base_itm_line,
                           outdocno = batch.Key.Tus_doc_no,
                           outitmline = batch.Key.Tus_itm_line,
                           outbatchline = batch.Key.Tus_batch_line,
                           jobno = batch.Key.Tus_job_no,
                           jobline = batch.Key.Tus_job_line,
                           resNo = batch.Key.Tus_res_no,  //Add by Lakshan 21 Oct 2016
                           resline = batch.Key.Tus_res_line,  //Add by Lakshan 21 Oct 2016
                           batchno = batch.Key.Tus_batch_no,
                           expdate = batch.Key.Tus_exp_dt,
                           manufacdate = batch.Key.Tus_manufac_dt,
                           mainitemcode = batch.Key.Tus_pgs_prefix,
                           baseitem = batch.Key.Tus_new_itm_cd,
                           itemqty = batch.Sum(p => p.Tus_qty)
                       };
                    //added by dilshan revesal               
                    foreach (var batchs in _tbbatchs)
                    {
                        InventoryBatchN invBatch = new InventoryBatchN();
                        invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                        invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                        invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                        invBatch.Inb_itm_line = itmLine;
                        invBatch.Inb_batch_line = batchLine;
                        invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                        invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                        invBatch.Inb_bin = batchs.bincode;
                        invBatch.Inb_itm_cd = batchs.itemcode;
                        invBatch.Inb_itm_stus = batchs.itemstatus;
                        invBatch.Inb_qty = batchs.itemqty;
                        invBatch.Inb_unit_cost = batchs.unitcost;
                        invBatch.Itb_bal_qty1 = batchs.itemqty;
                        invBatch.Itb_bal_qty2 = batchs.itemqty;
                        invBatch.Inb_unit_price = batchs.unitprice;
                        invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)
                        invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                        invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                        invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        if (string.IsNullOrEmpty(batchs.baseitem))
                        {
                            invBatch.Inb_base_itmcd = batchs.itemcode;
                        }
                        else
                        {
                            invBatch.Inb_base_itmcd = batchs.baseitem;//batchs.itemcode;
                        }
                        invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                        invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                        invBatch.Inb_base_itmstus = batchs.itemstatus;
                        invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                        invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                        invBatch.Itb_git_ignore = false;
                        invBatch.Itb_git_ignore_by = null;
                        invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                        invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                        invBatch.Inb_res_no = null;
                        invBatch.Inb_res_lineno = 0;
                        if (!string.IsNullOrEmpty(batchs.resNo) && batchs.resNo != "N/A")
                        {
                            invBatch.Inb_res_no = batchs.resNo;  //Add by Lakshan 21 Oct 2016
                            invBatch.Inb_res_lineno = batchs.resline;  //Add by Lakshan 21 Oct 2016
                        }
                        invBatch.Inb_base_doc_no1 = null;
                        invBatch.Inb_base_doc_no2 = null;
                        invBatch.Inb_base_doc_no3 = null;
                        invBatch.Inb_cur_cd = null;
                        invBatch.Inb_grup_cur_cd = null;
                        invBatch.Inb_free_qty = batchs.itemqty;
                        invBatch.Inb_manufac_dt = batchs.manufacdate;
                        invBatch.Inb_mitm_cd = batchs.mainitemcode;

                        // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
                        _inventoryDAL.UpdateInventoryBatch(invBatch);
                        #region Avarage Cost Calculation add by Lakshan 06Jul2017
                        if (!string.IsNullOrEmpty(_companycostmethod))
                        {
                            if (_companycostmethod == "AVG" && _isAvgType)
                            {
                                var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
                                if (v != null)
                                {
                                    invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                    invBatch.Inb_unit_cost = v.Iac_avg_cost;
                                }
                            }
                        }
                        #endregion Avarage Cost Calculation
                        //Added By Prabhath on 1/11/2012
                        _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);
                        //added by dilshan revesal
                        serLine = 1;
                        var _tbsers =
                            (from _pickSerials in PickSerials
                             where
                             _pickSerials.Tus_bin == batchs.bincode
                             && _pickSerials.Tus_itm_cd == batchs.itemcode
                             //&& _pickSerials.Tus_itm_stus == batchs.itemstatus  //commented by dilshan
                             && _pickSerials.Tus_appstatus == batchs.itemstatus  //added by dilshan
                             && _pickSerials.Tus_unit_cost == batchs.unitcost
                             && _pickSerials.Tus_unit_price == batchs.unitprice
                             && _pickSerials.Tus_base_doc_no == batchs.basedocno
                             && _pickSerials.Tus_doc_no == batchs.outdocno
                             && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                             && _pickSerials.Tus_itm_line == batchs.outitmline
                             && _pickSerials.Tus_batch_line == batchs.outbatchline
                             && _pickSerials.Tus_job_no == batchs.jobno
                             && _pickSerials.Tus_job_line == batchs.jobline
                             && _pickSerials.Tus_batch_no == batchs.batchno
                             && _pickSerials.Tus_exp_dt == batchs.expdate
                             && _pickSerials.Tus_manufac_dt == batchs.manufacdate
                             && _pickSerials.Tus_pgs_prefix == batchs.mainitemcode
                             select _pickSerials).Distinct();
                        foreach (var sers in _tbsers.Distinct())
                        {
                            reptSeqNo = sers.Tus_usrseq_no;

                            InventorySerialN invSerials = new InventorySerialN();
                            invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                            invSerials.Ins_itm_line = itmLine;
                            invSerials.Ins_batch_line = batchLine;
                            invSerials.Ins_ser_line = serLine;
                            invSerials.Ins_direct = true;
                            invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                            invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                            invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                            invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                            invSerials.Ins_bin = sers.Tus_bin;
                            invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                            //invSerials.Ins_itm_stus = sers.Tus_itm_stus; //commented by dilshan on 12/04/2018 //added by dilshan revesal
                            invSerials.Ins_itm_stus = sers.Tus_appstatus; // added by dilshan on 12/04/2018
                            invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                            invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                            invSerials.Ins_ser_1 = sers.Tus_ser_1;
                            invSerials.Ins_ser_2 = sers.Tus_ser_2;
                            invSerials.Ins_ser_3 = sers.Tus_ser_3;
                            invSerials.Ins_ser_4 = sers.Tus_ser_4;
                            invSerials.Ins_warr_no = sers.Tus_warr_no;
                            invSerials.Ins_warr_period = sers.Tus_warr_period;
                            invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                            invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                            invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                            invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                            invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                            invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                            invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                            invSerials.Ins_exist_supp = sers.Tus_exist_supp;

                            //updated by akila 2017/07/27
                            invSerials.Ins_cross_itmline = sers.Tus_base_itm_line;
                            invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                            invSerials.Ins_cross_serline = sers.Tus_ser_line;

                            //invSerials.Ins_cross_seqno = null;
                            //invSerials.Ins_cross_itmline = null;
                            //invSerials.Ins_cross_batchline = null;
                            //invSerials.Ins_cross_serline = null;
                            //invSerials.Ins_issue_dt = sers.Tus_out_date;
                            invSerials.Ins_available = 1;
                            invSerials.Ins_ageloc = sers.Tus_ageloc;
                            invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                            invSerials.Ins_isownmrn = sers.Tus_isownmrn;

                            //add rukshan on 01/Jun/2016
                            invSerials.Ins_is_pgs = sers.Tus_is_pgs;
                            invSerials.Ins_pgs_count = sers.Tus_pgs_count;
                            invSerials.Ins_pg_prefix = sers.Tus_pgs_prefix;
                            invSerials.Ins_st_pg = sers.Tus_st_pg;
                            invSerials.Ins_ed_pg = sers.Tus_ed_pg;
                            if (_inventoryMovementHeader.Ith_cate_tp == "CONSIGN" || sers.Tus_itm_stus == "CONS")
                            {
                                invSerials.tmpalwduplicateser = 1;
                            }

                            //Add Prabhath on 19/04/2012
                            InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                            _invWarraDetail.Irsm_acc_no = null;
                            _invWarraDetail.Irsm_anal_1 = null;
                            _invWarraDetail.Irsm_anal_2 = null;
                            _invWarraDetail.Irsm_anal_3 = null;
                            _invWarraDetail.Irsm_anal_4 = null;
                            _invWarraDetail.Irsm_anal_5 = null;
                            _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                            _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                            _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _invWarraDetail.Irsm_cre_when = DateTime.Now;
                            _invWarraDetail.Irsm_cust_addr = null;
                            _invWarraDetail.Irsm_cust_cd = null;
                            _invWarraDetail.Irsm_cust_del_addr = null;
                            _invWarraDetail.Irsm_cust_email = null;
                            _invWarraDetail.Irsm_cust_fax = null;
                            _invWarraDetail.Irsm_cust_mobile = null;
                            _invWarraDetail.Irsm_cust_name = null;
                            _invWarraDetail.Irsm_cust_prefix = null;
                            _invWarraDetail.Irsm_cust_tel = null;
                            _invWarraDetail.Irsm_cust_town = null;
                            _invWarraDetail.Irsm_cust_vat_no = null;
                            _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                            _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                            _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                            _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                            _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                            _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                            _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                            _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                            _invWarraDetail.Irsm_invoice_no = null;
                            _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                            _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                            _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                            _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                            //_invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus; //commented by dilshan //added by dilshan revesal
                            _invWarraDetail.Irsm_itm_stus = sers.Tus_appstatus; //added by dilshan
                            _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                            _invWarraDetail.Irsm_loc_desc = null;
                            _invWarraDetail.Irsm_mfc = null;
                            _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _invWarraDetail.Irsm_mod_when = DateTime.Now;
                            _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                            _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                            _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                            _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                            _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                            _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                            _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                            _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                            _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                            _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                            _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                            _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                            _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                            _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                            _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                            _invWarraDetail.Irsm_warr_rem = null;
                            _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                            _invWarraDetail.Irsm_warr_stus = null;


                            //Sahan 24 Feb 2016
                            _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                            _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                            _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                            _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                            _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                            _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;

                            #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
                            if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
                            {
                                _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
                            }
                            if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
                            {
                                _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
                            }
                            if (_invWarraDetail.Irsm_warr_period == 0)
                            {
                                MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                if (_warPer != null)
                                {
                                    if (_warPer.Mwp_val != 0)
                                    {
                                        _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
                                        invSerials.Ins_warr_period = _warPer.Mwp_val;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
                                        invSerials.Ins_warr_period = 12;
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
                            {
                                MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                if (_warPer != null)
                                {
                                    if (_warPer.Mwp_val != 0)
                                    {
                                        _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
                                    }
                                }
                            }
                            string _tmpWar = string.Empty;
                            if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            else if (_invWarraDetail.Irsm_warr_no == "N/A")
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            #endregion

                            // decimal allow none-serialized items are not saved in serial related tables
                            if (sers.Tus_ser_id != 0)
                            {
                                bool _isUpdWarrSts = false;
                                if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
                                {
                                    _invWarraDetail.Irsm_warr_stus = "N";
                                    _isUpdWarrSts = true;
                                }
                                if (_inventoryMovementHeader._warrNotupdate != true)//add by tharanga ravent and revet reale inrsermast not update value pass from client side
                                {
                                    if (_isUpdWarrSts)
                                    {
                                        #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                                        _inventoryDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                                        #endregion
                                    }
                                    else
                                    {
                                        _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                                    }
                                }
                                _inventoryDAL.SaveInventorySerial(invSerials, 1);
                                #region Avarage Cost Calculation add by Lakshan 06Jul2017
                                if (!string.IsNullOrEmpty(_companycostmethod))
                                {
                                    if (_companycostmethod == "AVG" && _isAvgType)
                                    {
                                        var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
                                        if (v != null)
                                        {
                                            invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                            invSerials.Ins_unit_cost = v.Iac_avg_cost;
                                        }
                                    }
                                }
                                #endregion Avarage Cost Calculation
                                //Added By Prabhath on 1/11/2012

                                try
                                {
                                    _inventoryDAL.SaveInventorySerialRef(invSerials, 1);
                                }
                                catch (Exception ex)
                                {

                                    if (ex.Message.Contains("EMS.DUPLICATE_SERIALS_FOUND"))
                                    {
                                        effect = -2;
                                        return -2;

                                        // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                                    }
                                }
                                //Edit Chamal 18-10-2012
                                //_inventoryDAL.UpdateOutCrossRef(sers.Tus_base_doc_no, sers.Tus_ser_id, sers.Tus_doc_dt.Date, invSerials.Ins_seq_no, invSerials.Ins_itm_line, invSerials.Ins_batch_line, invSerials.Ins_ser_line);

                                //Tharaka 2015-12-30
                                Int32 result = InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, "", _inventoryMovementHeader.Ith_seq_no, 1);
                                serLine += 1;

                                #region
                                //Edit by Rukshan 04-sep-2015
                                int _line = 0;
                                if (_reptPickSerialsSub != null)
                                {

                                    foreach (ReptPickSerialsSub _Sub in _reptPickSerialsSub)
                                    {
                                        InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
                                        if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
                                        {
                                            _invSubDetail.Irsms_act = true;
                                            _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
                                            _invSubDetail.Irsms_ser_line = _line;
                                            _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
                                            _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
                                            _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
                                            _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
                                            _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
                                            _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
                                            _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
                                            _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
                                            _invSubDetail.Mi_act = true;
                                            // _invSubDetail.Irsms_qty = _1;
                                            // CustServiceDAL _CustServiceDAL = new CustServiceDAL();
                                            //_CustServiceDAL.ConnectionOpen();
                                            // _CustServiceDAL.BeginTransaction();
                                            _inventoryDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
                                            // _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);                                      
                                            // _CustServiceDAL.TransactionCommit();
                                            // _CustServiceDAL.ConnectionClose();
                                            _line++;
                                        }

                                    }
                                }

                                #endregion
                            }
                        }

                        batchLine += 1;
                    }

                    itmLine += 1;
                }
            }
            //*****************************************
            else
            {
                foreach (var items in _tbitems)
                {
                    InventoryItem invItem = new InventoryItem();
                    invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invItem.Iti_item_line = itmLine;
                    invItem.Iti_bin_code = items.bincode;
                    invItem.Iti_item_code = items.itemcode;
                    invItem.Iti_item_status = items.itemstatus;
                    invItem.Iti_qty = items.itemqty;
                    invItem.Iti_bal_qty = items.itemqty;
                    invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                    // INSERT/UPDATE INT_ITM TABLE
                    _inventoryDAL.UpdateInventoryItem(invItem);

                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation
                    //decimal _particulerAvgCost = 0;
                    //if (_companycostmethod == "AVG" && _isAvgType)
                    //{
                    //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    //    foreach (string _h in _avgcost)
                    //        _particulerAvgCost = Convert.ToDecimal(_h);
                    //}
                    #endregion Avarage Cost Calculation
                    //Added By Prabhath on 1/11/2012

                    batchLine = 1;
                    //added by dilshan revesal
                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                    group _pickSerials by new
                    {
                        _pickSerials.Tus_bin,
                        _pickSerials.Tus_itm_cd,
                        _pickSerials.Tus_itm_stus,  //commented by dilshan
                           //_pickSerials.Tus_appstatus, //added by dilshan revesal
                        _pickSerials.Tus_unit_cost,
                        _pickSerials.Tus_unit_price,
                        _pickSerials.Tus_base_doc_no,
                        _pickSerials.Tus_doc_no,
                        _pickSerials.Tus_base_itm_line,
                        _pickSerials.Tus_itm_line,
                        _pickSerials.Tus_batch_line,
                        _pickSerials.Tus_job_no,
                        _pickSerials.Tus_job_line,
                        _pickSerials.Tus_res_no,
                        _pickSerials.Tus_res_line,
                        _pickSerials.Tus_batch_no,
                        _pickSerials.Tus_exp_dt,
                        _pickSerials.Tus_manufac_dt,
                        _pickSerials.Tus_pgs_prefix,
                        _pickSerials.Tus_new_itm_cd
                    } into batch
                    select new
                    {
                        bincode = batch.Key.Tus_bin,
                        itemcode = batch.Key.Tus_itm_cd,
                        itemstatus = batch.Key.Tus_itm_stus,//commented by dilshan
                        //itemstatus = batch.Key.Tus_appstatus,//added by dilshan
                        unitcost = batch.Key.Tus_unit_cost,
                        unitprice = batch.Key.Tus_unit_price,
                        basedocno = batch.Key.Tus_base_doc_no,
                        baseitmline = batch.Key.Tus_base_itm_line,
                        outdocno = batch.Key.Tus_doc_no,
                        outitmline = batch.Key.Tus_itm_line,
                        outbatchline = batch.Key.Tus_batch_line,
                        jobno = batch.Key.Tus_job_no,
                        jobline = batch.Key.Tus_job_line,
                        resNo = batch.Key.Tus_res_no,  //Add by Lakshan 21 Oct 2016
                        resline = batch.Key.Tus_res_line,  //Add by Lakshan 21 Oct 2016
                        batchno = batch.Key.Tus_batch_no,
                        expdate = batch.Key.Tus_exp_dt,
                        manufacdate = batch.Key.Tus_manufac_dt,
                        mainitemcode = batch.Key.Tus_pgs_prefix,
                        baseitem = batch.Key.Tus_new_itm_cd,
                        itemqty = batch.Sum(p => p.Tus_qty)
                    };
                    //added by dilshan revesal               
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                    invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                    invBatch.Inb_bin = batchs.bincode;
                    invBatch.Inb_itm_cd = batchs.itemcode;
                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = batchs.unitprice;
                    invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)
                    invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                    invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                    invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                    if (string.IsNullOrEmpty(batchs.baseitem))
                    {
                        invBatch.Inb_base_itmcd = batchs.itemcode;
                    }
                    else
                    {
                        invBatch.Inb_base_itmcd = batchs.baseitem;//batchs.itemcode;
                    }
                    invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                    invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                    invBatch.Inb_base_itmstus = batchs.itemstatus;
                    invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    if (!string.IsNullOrEmpty(batchs.resNo) && batchs.resNo != "N/A")
                    {
                        invBatch.Inb_res_no = batchs.resNo;  //Add by Lakshan 21 Oct 2016
                        invBatch.Inb_res_lineno = batchs.resline;  //Add by Lakshan 21 Oct 2016
                    }
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;
                    invBatch.Inb_manufac_dt = batchs.manufacdate;
                    invBatch.Inb_mitm_cd = batchs.mainitemcode;

                    // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
                    _inventoryDAL.UpdateInventoryBatch(invBatch);
                    #region Avarage Cost Calculation add by Lakshan 06Jul2017
                    if (!string.IsNullOrEmpty(_companycostmethod))
                    {
                        if (_companycostmethod == "AVG" && _isAvgType)
                        {
                            var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
                            if (v != null)
                            {
                                invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                invBatch.Inb_unit_cost = v.Iac_avg_cost;
                            }
                        }
                    }
                    #endregion Avarage Cost Calculation
                    //Added By Prabhath on 1/11/2012
                    _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);
                        //added by dilshan revesal
                    serLine = 1;
                    var _tbsers =
                        (from _pickSerials in PickSerials
                         where
                         _pickSerials.Tus_bin == batchs.bincode
                         && _pickSerials.Tus_itm_cd == batchs.itemcode
                         && _pickSerials.Tus_itm_stus == batchs.itemstatus  //commented by dilshan
                         //&& _pickSerials.Tus_appstatus == batchs.itemstatus  //added by dilshan
                         && _pickSerials.Tus_unit_cost == batchs.unitcost
                         && _pickSerials.Tus_unit_price == batchs.unitprice
                         && _pickSerials.Tus_base_doc_no == batchs.basedocno
                         && _pickSerials.Tus_doc_no == batchs.outdocno
                         && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                         && _pickSerials.Tus_itm_line == batchs.outitmline
                         && _pickSerials.Tus_batch_line == batchs.outbatchline
                         && _pickSerials.Tus_job_no == batchs.jobno
                         && _pickSerials.Tus_job_line == batchs.jobline
                         && _pickSerials.Tus_batch_no == batchs.batchno
                         && _pickSerials.Tus_exp_dt == batchs.expdate
                         && _pickSerials.Tus_manufac_dt == batchs.manufacdate
                         && _pickSerials.Tus_pgs_prefix == batchs.mainitemcode
                         select _pickSerials).Distinct();
                    foreach (var sers in _tbsers.Distinct())
                    {
                        reptSeqNo = sers.Tus_usrseq_no;

                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                        invSerials.Ins_bin = sers.Tus_bin;
                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                            invSerials.Ins_itm_stus = sers.Tus_itm_stus; //commented by dilshan on 12/04/2018 //added by dilshan revesal
                        //invSerials.Ins_itm_stus = sers.Tus_appstatus; // added by dilshan on 12/04/2018
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;

                        if (sers.Tus_itm_stus == "RVT")
                        {
                          //  invSerials.Ins_unit_price = sers.Tus_unit_price; // Add by Tharindu to check 2018-02-14

                            invSerials.Ins_unit_price = sers.Tus_Cap_Amt;
                        }
                      

                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;

                        //updated by akila 2017/07/27
                        invSerials.Ins_cross_itmline = sers.Tus_base_itm_line;
                        invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                        invSerials.Ins_cross_serline = sers.Tus_ser_line;

                        //invSerials.Ins_cross_seqno = null;
                        //invSerials.Ins_cross_itmline = null;
                        //invSerials.Ins_cross_batchline = null;
                        //invSerials.Ins_cross_serline = null;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;
                        invSerials.Ins_ageloc = sers.Tus_ageloc;
                        invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                        invSerials.Ins_isownmrn = sers.Tus_isownmrn;

                        //add rukshan on 01/Jun/2016
                        invSerials.Ins_is_pgs = sers.Tus_is_pgs;
                        invSerials.Ins_pgs_count = sers.Tus_pgs_count;
                        invSerials.Ins_pg_prefix = sers.Tus_pgs_prefix;
                        invSerials.Ins_st_pg = sers.Tus_st_pg;
                        invSerials.Ins_ed_pg = sers.Tus_ed_pg;


                        //Add Prabhath on 19/04/2012
                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                        _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                        _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                        _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                        _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                            _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus; //commented by dilshan //added by dilshan revesal
                        //_invWarraDetail.Irsm_itm_stus = sers.Tus_appstatus; //added by dilshan
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                        _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                        _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                        _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                        _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;


                        //Sahan 24 Feb 2016
                        _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                        _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                        _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                        _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                        _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                        _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;

                        #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
                        if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
                        {
                            _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
                        }
                        if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
                        {
                            _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
                        }
                        if (_invWarraDetail.Irsm_warr_period == 0)
                        {
                            MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                            if (_warPer != null)
                            {
                                if (_warPer.Mwp_val != 0)
                                {
                                    _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
                                    invSerials.Ins_warr_period = _warPer.Mwp_val;
                                }
                                else
                                {
                                    _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
                                    invSerials.Ins_warr_period = 12;
                                }
                            }
                        }
                        if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
                        {
                            MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                            if (_warPer != null)
                            {
                                if (_warPer.Mwp_val != 0)
                                {
                                    _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
                                }
                                else
                                {
                                    _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
                                }
                            }
                        }
                        string _tmpWar = string.Empty;
                        if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
                        {
                            _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                            _invWarraDetail.Irsm_warr_no = _tmpWar;
                            invSerials.Ins_warr_no = _tmpWar;
                        }
                        else if (_invWarraDetail.Irsm_warr_no == "N/A")
                        {
                            _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                            _invWarraDetail.Irsm_warr_no = _tmpWar;
                            invSerials.Ins_warr_no = _tmpWar;
                        }
                        else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
                        {
                            _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                            _invWarraDetail.Irsm_warr_no = _tmpWar;
                            invSerials.Ins_warr_no = _tmpWar;
                        }
                        #endregion
                            if (_inventoryMovementHeader.Ith_sub_tp=="REVERT")//add by tharanga 2018/06/14 warr date and period not update
                        {
                            List<InventorySerialMaster> _serial = _inventoryDAL.GetWarrantyDetails_by_serid(sers.Tus_ser_id);
                            if (_serial != null)
                            {
                                if (_serial.Count > 0)
                                {
                                    _invWarraDetail.Irsm_warr_period = _serial.First().Irsm_warr_period;
                                    _invWarraDetail.Irsm_warr_start_dt = _serial.First().Irsm_warr_start_dt;
                                    _invWarraDetail.Irsm_warr_rem = _serial.First().Irsm_warr_rem;
                                    _invWarraDetail.Irsm_invoice_no = _serial.First().Irsm_invoice_no;
                                    _invWarraDetail.Irsm_invoice_dt = _serial.First().Irsm_invoice_dt;
                                }
                            }

                        }
                        // decimal allow none-serialized items are not saved in serial related tables
                        if (sers.Tus_ser_id != 0)
                        {
                            bool _isUpdWarrSts = false;
                            if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
                            {
                                _invWarraDetail.Irsm_warr_stus = "N";
                                _isUpdWarrSts = true;
                            }
                            if (_inventoryMovementHeader._warrNotupdate != true)//add by tharanga ravent and revet reale inrsermast not update value pass from client side
                            {
                                if (_isUpdWarrSts)
                                {
                                    #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                                    _inventoryDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                                    #endregion
                                }
                                else
                                {
                                    _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                                }
                            }
                            _inventoryDAL.SaveInventorySerial(invSerials, 1);
                            #region Avarage Cost Calculation add by Lakshan 06Jul2017
                            if (!string.IsNullOrEmpty(_companycostmethod))
                            {
                                if (_companycostmethod == "AVG" && _isAvgType)
                                {
                                    var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
                                    if (v != null)
                                    {
                                        invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                        invSerials.Ins_unit_cost = v.Iac_avg_cost;
                                    }
                                }
                            }
                            #endregion Avarage Cost Calculation
                            //Added By Prabhath on 1/11/2012
                            try
                            {
                            _inventoryDAL.SaveInventorySerialRef(invSerials, 1);
                            }
                            catch (Exception ex)
                            {

                                if (ex.Message.Contains("EMS.DUPLICATE_SERIALS_FOUND"))
                                {
                                    effect = -2;
                                    return -2;
                              
                                   // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                                }
                            }
                           
                            //Edit Chamal 18-10-2012
                            //_inventoryDAL.UpdateOutCrossRef(sers.Tus_base_doc_no, sers.Tus_ser_id, sers.Tus_doc_dt.Date, invSerials.Ins_seq_no, invSerials.Ins_itm_line, invSerials.Ins_batch_line, invSerials.Ins_ser_line);

                            //Tharaka 2015-12-30
                            Int32 result = InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, "", _inventoryMovementHeader.Ith_seq_no, 1);
                            serLine += 1;

                            #region
                            //Edit by Rukshan 04-sep-2015
                            int _line = 0;
                            if (_reptPickSerialsSub != null)
                            {

                                foreach (ReptPickSerialsSub _Sub in _reptPickSerialsSub)
                                {
                                    InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
                                    if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
                                    {
                                        _invSubDetail.Irsms_act = true;
                                        _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
                                        _invSubDetail.Irsms_ser_line = _line;
                                        _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
                                        _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
                                        _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
                                        _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
                                        _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
                                        _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
                                        _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
                                        _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
                                        _invSubDetail.Mi_act = true;
                                        // _invSubDetail.Irsms_qty = _1;
                                        // CustServiceDAL _CustServiceDAL = new CustServiceDAL();
                                        //_CustServiceDAL.ConnectionOpen();
                                        // _CustServiceDAL.BeginTransaction();
                                        _inventoryDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
                                        // _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);                                      
                                        // _CustServiceDAL.TransactionCommit();
                                        // _CustServiceDAL.ConnectionClose();
                                        _line++;
                                    }

                                }
                            }

                            #endregion
                        }
                    }

                    batchLine += 1;
                }

                itmLine += 1;
            }
            }
            _inventoryDAL.UpdateOutDocStatus(_inventoryMovementHeader.Ith_oth_docno);

            // Update location inventory
            if (_statusRev == "SRN" && _inventoryMovementHeader.Ith_gen_frm == "SCMWEB")
            {
                var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_appstatus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_appstatus, itemqty = itm.Sum(p => p.Tus_qty) };

                foreach (var locaitems in _tblocainv)
                {
                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation
                    //string _scmStatus = string.Empty;
                    //DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(locaitems.itemstatus, string.Empty);
                    //if (_tblStus != null)
                    //    if (_tblStus.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
                    //    }

                    //decimal _particulerAvgCost = 0;
                    //if (_companycostmethod == "AVG" && _isAvgType)
                    //{
                    //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == locaitems.itemcode && y.Tus_itm_stus == locaitems.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    //    foreach (string _h in _avgcost)
                    //        _particulerAvgCost = Convert.ToDecimal(_h);
                    //    _inventoryDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, locaitems.itemstatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
                    //    _ScmCommonDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, _scmStatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
                    //}
                    #endregion Avarage Cost Calculation
                    //Added By Prabhath on 1/11/2012

                    InventoryLocation invLocation = new InventoryLocation();
                    invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                    invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                    invLocation.Inl_itm_cd = locaitems.itemcode;
                    invLocation.Inl_itm_stus = locaitems.itemstatus;
                    invLocation.Inl_qty = locaitems.itemqty;
                    invLocation.Inl_free_qty = locaitems.itemqty;
                    invLocation.Inl_res_qty = 0;
                    invLocation.Inl_isu_qty = locaitems.itemqty;
                    invLocation.Inl_bl_qty = 0;
                    invLocation.Inl_eo_qty = 0;
                    invLocation.Inl_ro_qty = 0;
                    invLocation.Inl_cre_by = null;

                    _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
                }

            }
            else
            {
                var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

                foreach (var locaitems in _tblocainv)
                {
                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation
                    //string _scmStatus = string.Empty;
                    //DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(locaitems.itemstatus, string.Empty);
                    //if (_tblStus != null)
                    //    if (_tblStus.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
                    //    }

                    //decimal _particulerAvgCost = 0;
                    //if (_companycostmethod == "AVG" && _isAvgType)
                    //{
                    //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == locaitems.itemcode && y.Tus_itm_stus == locaitems.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    //    foreach (string _h in _avgcost)
                    //        _particulerAvgCost = Convert.ToDecimal(_h);
                    //    _inventoryDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, locaitems.itemstatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
                    //    _ScmCommonDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, _scmStatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
                    //}
                    #endregion Avarage Cost Calculation
                    //Added By Prabhath on 1/11/2012

                    InventoryLocation invLocation = new InventoryLocation();
                    invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                    invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                    invLocation.Inl_itm_cd = locaitems.itemcode;
                    invLocation.Inl_itm_stus = locaitems.itemstatus;
                    invLocation.Inl_qty = locaitems.itemqty;
                    invLocation.Inl_free_qty = locaitems.itemqty;
                    invLocation.Inl_res_qty = 0;
                    invLocation.Inl_isu_qty = locaitems.itemqty;
                    invLocation.Inl_bl_qty = 0;
                    invLocation.Inl_eo_qty = 0;
                    invLocation.Inl_ro_qty = 0;
                    invLocation.Inl_cre_by = null;

                    _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
                }
            }
            

            if (reptSeqNo != 0)
            {
                _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            }
            #region avg cost git maintain 14Jul2017 Lakshan
            if (_inventoryMovementHeader.Ith_doc_tp == "AOD" && _inventoryMovementHeader.Ith_direct && !_inventoryMovementHeader.Tmp_avg_cost_calc)
            {
                decimal _avgCst = 0;
                decimal _noOfUnit = 0;
                INR_AVG_COST_GIT _tmpInrAvgCst = new INR_AVG_COST_GIT();
                INR_AVG_COST_GIT _saveAvgCst = new INR_AVG_COST_GIT();
                INR_AVG_COST_GIT _inrAvgCstAva = new INR_AVG_COST_GIT();
                MasterLocation _mstLocIn = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
                {
                    _mstLocIn = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Tmp_err_loc);
                }
                if (_mstLocIn == null) { throw new Exception("Location details not found"); }

                List<InventoryBatchN> _tmpInvBatList = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                List<INR_AVG_COST_GIT> _listAvgData = new List<INR_AVG_COST_GIT>();
                INR_AVG_COST_GIT _avgData = new INR_AVG_COST_GIT();
                foreach (var _pBat in _tmpInvBatList)
                {
                    _avgData = new INR_AVG_COST_GIT();
                    _avgData.Iacg_itm_cd = _pBat.Inb_itm_cd;
                    _avgData.Iacg_itm_stus = _pBat.Inb_itm_stus;
                    _avgData.Iacg_avg_qty = _pBat.Inb_qty;
                    _avgData.Iacg_avg_cost = _pBat.Inb_unit_cost;
                    _avgData.Tmp_mult_cost = _pBat.Inb_qty * _pBat.Inb_unit_cost;
                    _listAvgData.Add(_avgData);
                }
                var _invBatList = _listAvgData.GroupBy(x => new { x.Iacg_itm_cd, x.Iacg_itm_stus }).Select(group =>
                         new { Peo = group.Key, docQty = group.Sum(o => o.Iacg_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                foreach (var item in _invBatList)
                {
                    //_tmpInrAvgCst = new INR_AVG_COST_GIT();
                    //_tmpInrAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
                    //_tmpInrAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
                    //_tmpInrAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                    //_tmpInrAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
                    //_inrAvgCstAva = _inventoryDAL.GET_INR_AVG_COST_GIT_DATA(_tmpInrAvgCst);
                    //if (_inrAvgCstAva != null)
                    //{
                    //    _avgCst = ((_inrAvgCstAva.Iacg_avg_cost * _inrAvgCstAva.Iacg_avg_qty) - item.docCst) / (_inrAvgCstAva.Iacg_avg_qty - item.docQty);
                    //    _noOfUnit = _inrAvgCstAva.Iacg_avg_qty - item.docQty;
                    //}
                    //else
                    //{
                    //    _avgCst = item.docCst / item.docQty;
                    //    _noOfUnit = item.docQty;
                    //}
                    _avgCst = item.docCst;
                    _noOfUnit = item.docQty;
                    _saveAvgCst = new INR_AVG_COST_GIT();
                    _saveAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
                    _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Ith_loc;
                    if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
                    {
                        _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Tmp_err_loc;
                    }
                    _saveAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                    _saveAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
                    _saveAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
                    _saveAvgCst.Iacg_avg_dt = DateTime.Now;
                    _saveAvgCst.Iacg_avg_cost = Math.Round(_avgCst, 4);
                    _saveAvgCst.Iacg_avg_qty = _noOfUnit;
                    _saveAvgCst.Iacg_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    _saveAvgCst.Iacg_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                    _saveAvgCst.Iacg_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    _saveAvgCst.Iacg_mod_dt = _inventoryMovementHeader.Ith_mod_when;
                    _saveAvgCst.Iacg_in_qty = item.docQty;
                    _saveAvgCst.Iacg_mod_doc = _inventoryMovementHeader.Ith_seq_no.ToString();
                    _saveAvgCst.Iacg_direction = true;
                    _inventoryDAL.UpdateInrCostDataGit(_saveAvgCst);
                }
            }
            #endregion

            effect = 1;

            return effect;
        }

        #endregion Inventory Inward

        //Inventory Inward/Outward Update Auto Number - Code By - Chamal on 04/05/2012
        #region Inventory Inward/Outward Update Auto Number

        public Int16 UpdateInventoryAutoNumber(InventoryHeader _inventoryMovementHeader, MasterAutoNumber _masterAutoNumber, String _locaSeparater, out string _docNo)
        {
                Int16 effect = 0;
            nx:
                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                string _documentNo = _inventoryMovementHeader.Ith_loc + _locaSeparater + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                if (_inventoryDAL.CheckInventoryNo("sp_getmovno", "p_doc_no", _documentNo) == 1)
                {
                    //Check Save Movement Document No :: Code by Chamal De Silva 31/01/2013
                    goto nx;
                }

                effect = _inventoryDAL.UpdateMovementDocNo(_inventoryMovementHeader.Ith_seq_no, _documentNo);
                _docNo = _documentNo;
                return effect;
        }

        #endregion Inventory Inward/Outward Update Auto Number

        //Inventory Inward/Outward Update Auto Number - copied by kapila 15/6/2012
        private Int16 UpdateInventoryAutoNumber_FMS(InventoryHeader _inventoryMovementHeader, MasterAutoNumber _masterAutoNumber, String _locaSeparater, out string _docNo)
        {
            Int16 effect = 0;
            Int32 _autoNo = _FMSinventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
            string _documentNo = _inventoryMovementHeader.Ith_loc + _locaSeparater + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
            effect = _FMSinventoryDAL.UpdateMovementDocNo(_inventoryMovementHeader.Ith_seq_no, _documentNo);
            effect = _FMSinventoryDAL.UpdateAutoNumber(_masterAutoNumber);
            _docNo = _documentNo;
            return effect;
        }

        //Inventory Outward Document - Code By - Chamal on 20/03/2012 and Edited By P.Wijetunge on 10/4/2012
        #region Inventory Outward

        public Int16 SaveOutwardScanSerial(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, InventoryDAL _invDAL, bool _withConn, SalesDAL _SalesDAL=null)
        {

            DataTable dtTempasd = DataTableExtensions.ToDataTable(_reptPickSerials);

            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;
            Int32 reptSeqNo = 0;

            string passitem = "";
            string _locType = "";
            string _invoiceno = string.Empty;
            string _accno = string.Empty;
            string _cust_addr = string.Empty;
            string _cust_cd = string.Empty;
            string _cust_del_addr = string.Empty;
            string _cust_del_addr2 = string.Empty; //add by tharanga 2017/08/23
            string _cust_del_name = string.Empty; //add by tharanga 2017/08/23
            string _cust_d_cust_cd = string.Empty;


            string _cust_email = string.Empty;
            string _cust_fax = string.Empty;
            string _cust_mobile = string.Empty;
            string _cust_name = string.Empty;
            string _cust_prefix = string.Empty;
            string _cust_tel = string.Empty;
            string _cust_town = string.Empty;
            string _cust_vat_no = string.Empty;
            DateTime _invoice_dt = DateTime.MinValue;
            InvoiceHeader _hdr = new InvoiceHeader();

            int _isSerialMaintain = 1;

            if (_withConn == true)
                _inventoryDAL = _invDAL;

            //Rukshan by on 10/Aug/2016
            if (_reptPickSerials != null)
            {
                foreach (ReptPickSerials _serial in _reptPickSerials)
                {
                    string _warrantyno = string.Empty;
                    if (string.IsNullOrEmpty(_serial.Tus_warr_no))
                    {
                        _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _serial.Tus_ser_id.ToString();
                        _serial.Tus_warr_no = _warrantyno;
                    }
                    else if (_serial.Tus_warr_no == "N/A")
                    {
                        _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _serial.Tus_ser_id.ToString();
                        _serial.Tus_warr_no = _warrantyno;
                    }

                }
            }


            //Added By Prabhath on 13/09/2012
            //------------
            _reptPickSerials.Where(y => string.IsNullOrEmpty(y.Tus_base_doc_no)).ToList().ForEach(x => x.Tus_base_doc_no = "N/A");
            _reptPickSerials.Where(y => y.Tus_base_doc_no == "N/A").ToList().ForEach(x => x.Tus_base_itm_line = 0);
            //------------

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            DataTable dt_location = Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
                _locType = (string)rw["ML_LOC_TP"]; //Location Type
                _isSerialMaintain = Convert.ToInt32(rw["ML_IS_SERIAL"]);
            }

            dt_location.Dispose();

            //11/04/2012 - Prabhath
            if (_inventoryMovementHeader.Ith_seq_no == 0) //Chamal 12-May-2013
            {
                //Int32 _docSeqNo = _inventoryDAL.GetSerialID();
                //_inventoryMovementHeader.Ith_seq_no = _docSeqNo;
                _inventoryMovementHeader.Ith_seq_no = _inventoryDAL.GetSerialID();
            }
            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            if (_inventoryMovementHeader != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            //Rukshan 
            if (_inventoryMovementHeader.Ith_doc_tp == "DO")
            {
                if (_inventoryMovementHeader.Ith_cate_tp == "QUO")//add by tharanga 2018/06/26
                {
                    QuotationHeader _quoHdr = new QuotationHeader();
                    _quoHdr = _inventoryDAL.Get_Quotation_HDR(_inventoryMovementHeader.Ith_oth_docno);

                    _cust_addr = _quoHdr.Qh_add1;
                    _cust_cd = _quoHdr.Qh_party_cd;
                    _cust_del_addr = _quoHdr.Qh_del_cusadd1;
                    _cust_name = _quoHdr.Qh_party_name;
                    _invoice_dt = _quoHdr.Qh_dt;

                    _cust_d_cust_cd = _quoHdr.Qh_del_cuscd;
                    _cust_del_name = _quoHdr.Qh_del_cusname;
                    _cust_del_addr = _quoHdr.Qh_del_cusadd1;
                    _cust_del_addr2 = _quoHdr.Qh_del_cusadd2;
                    _invoiceno = _inventoryMovementHeader.Ith_oth_docno;
                 
                }
                else
                {
                    _hdr = _inventoryDAL.GetInvoiceHeaderDetails(_inventoryMovementHeader.Ith_oth_docno);
                    if (_hdr != null)
                    {
                        //_accno = _hdr.Sah_acc_no;
                        _cust_addr = _hdr.Sah_cus_add1;
                        _cust_cd = _hdr.Sah_cus_cd;
                        _cust_del_addr = _hdr.Sah_d_cust_add1;
                        _cust_name = _hdr.Sah_cus_name;
                        _invoice_dt = _hdr.Sah_dt;

                        _cust_d_cust_cd = _inventoryMovementHeader.Ith_del_code;
                        _cust_del_name = _inventoryMovementHeader.Ith_del_cust_name;
                        _cust_del_addr = _inventoryMovementHeader.Ith_del_add1;
                        _cust_del_addr2 = _inventoryMovementHeader.Ith_del_add2;
                        _invoiceno = _inventoryMovementHeader.Ith_oth_docno;
                        //_cust_prefix = _hdr.;
                    }
                    else
                    {
                        _invoiceno = _inventoryMovementHeader.InvoiceNoAfterSave;
                        // _accno = _inventoryMovementHeader.Ith_acc_no;
                        _cust_addr = _inventoryMovementHeader.Cust_addr;
                        _cust_cd = _inventoryMovementHeader.Cust_cd;
                        _cust_del_addr = _inventoryMovementHeader.Cust_del_addr;
                        _cust_name = _inventoryMovementHeader.Cust_name;
                        _invoice_dt = _inventoryMovementHeader.Invoice_dt;
                    }
                }
            }
            else
            {
                if (_inventoryMovementHeader.Ith_cate_tp == "FGAP")
                {
                    _invoiceno = _inventoryMovementHeader.Invoice_no;
                    // _accno = _inventoryMovementHeader.Ith_acc_no;
                    _cust_addr = _inventoryMovementHeader.Cust_addr;
                    _cust_cd = _inventoryMovementHeader.Ith_loc;
                    _cust_del_addr = _inventoryMovementHeader.Cust_del_addr;
                    _cust_name = _inventoryMovementHeader.Cust_name;
                    _invoice_dt = _inventoryMovementHeader.Ith_doc_date;
                }
                else
                {
                    _invoiceno = _inventoryMovementHeader.Invoice_no;
                    // _accno = _inventoryMovementHeader.Ith_acc_no;
                    _cust_addr = _inventoryMovementHeader.Cust_addr;
                    _cust_cd = _inventoryMovementHeader.Cust_cd;
                    _cust_del_addr = _inventoryMovementHeader.Cust_del_addr;
                    _cust_name = _inventoryMovementHeader.Cust_name;
                    _invoice_dt = _inventoryMovementHeader.Invoice_dt;
                }
            }


            if (_isSerialMaintain == 1)
            {

                #region Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014
                var _tbnonsersFIFO =
                      (from _pickSerials in PickSerials
                       where _pickSerials.Tus_ser_id == 0
                       group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line } into batch
                       select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.bincode).OrderBy(x => x.itemcode).OrderBy(x => x.itemstatus);//Order by Prabhath on 21/02/2014
                foreach (var non_sers in _tbnonsersFIFO)
                {
                    MasterItem _mstItm = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, non_sers.itemcode);
                    if (_mstItm != null)
                    {
                        if (_mstItm.Mi_is_ser1 == 0)
                        {
                            int _fifoQty = Convert.ToInt32(non_sers.itemqty);
                            List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();
                            if (_inventoryMovementHeader.BacthBaseDoc)
                            {
                                #region gate non serials for Batch Wise Aod Out 21 Oct 2016 add by lakshan
                                _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Batch_Base_Item(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, _inventoryMovementHeader.BacthBaseDocNo);
                                if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                                {
                                    if (_inventoryMovementHeader.Is_Suplierreturn == true)
                                    {
                                        _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD_batch_base(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeader.Ith_bus_entity, _inventoryMovementHeader.BacthBaseDocNo, true);
                                    }
                                    else
                                    {
                                        _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD_batch_base(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", _inventoryMovementHeader.BacthBaseDocNo, false);
                                    }
                                }
                                else
                                {
                                    foreach (var pickser in _nonSerialsFifo)
                                    {
                                        _inventoryDAL.UpdateReservedSerialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, pickser.Tus_ser_id);
                                    }
                                }
                                #endregion
                            }
                            else if (_inventoryMovementHeader.ProductionBaseDoc)
                            {
                                if (!string.IsNullOrEmpty(_inventoryMovementHeader.ProductionBaseDocNo))
                                {
                                    _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, _inventoryMovementHeader.ProductionBaseDocNo, Convert.ToInt32(non_sers.jobline));
                                    if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                                    {
                                        // modify by rukshan 14/jan/2016
                                        if (_inventoryMovementHeader.Is_Suplierreturn == true)
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeader.Ith_bus_entity, true);
                                        }
                                        else
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                        }

                                    }
                                    else
                                    {
                                        foreach (var pickser in _nonSerialsFifo)
                                        {
                                            _inventoryDAL.UpdateReservedSerialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, pickser.Tus_ser_id);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                #region get non serial data
                                if (!string.IsNullOrEmpty(non_sers.jobno))
                                {
                                    _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, non_sers.jobno, Convert.ToInt32(non_sers.jobline));
                                    if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                                    {
                                        // modify by rukshan 14/jan/2016
                                        if (_inventoryMovementHeader.Is_Suplierreturn == true)
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeader.Ith_bus_entity, true);
                                        }
                                        else
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                        }

                                    }
                                    else
                                    {
                                        foreach (var pickser in _nonSerialsFifo)
                                        {
                                            _inventoryDAL.UpdateReservedSerialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, pickser.Tus_ser_id);
                                        }
                                    }
                                }
                                else
                                {
                                    //if (_inventoryMovementHeader.Ith_doc_tp == "DO")
                                    //{
                                    //    // modify by rukshan 14/jan/2016
                                    //    if (_inventoryMovementHeader.Is_Suplierreturn == true)
                                    //    {
                                    //        _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeader.Ith_bus_entity, true);
                                    //    }
                                    //    else
                                    //    {
                                    //        _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                    //    }
                                    //}
                                    //else
                                    //{
                                    _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, null, 0);
                                    if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                                    {
                                        // modify by rukshan 14/jan/2016
                                        if (_inventoryMovementHeader.Is_Suplierreturn == true)
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeader.Ith_bus_entity, true);
                                        }
                                        else
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                        }
                                    }
                                    else
                                    {
                                        foreach (var pickser in _nonSerialsFifo)
                                        {
                                            _inventoryDAL.UpdateReservedSerialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, pickser.Tus_ser_id);
                                        }
                                    }
                                    // }

                                }
                                #endregion
                            }
                            var list = (from t in _nonSerialsFifo
                                        orderby t.Tus_doc_dt, t.Tus_seq_no, t.Tus_ser_id
                                        select t).Take(_fifoQty).ToList();
                            foreach (var _oneList in list)
                            {

                                _oneList.Tus_base_doc_no = non_sers.refdoc;
                                _oneList.Tus_base_itm_line = non_sers.refdocline;
                                _oneList.Tus_usrseq_no = non_sers.scanSeqNo;
                                //tharanga
                                //_oneList.Tus_job_no = non_sers.jobno;


                                // _oneList.Tus_job_no
                                //Rukshan 22-Jun-2016 
                                // change this becouse of Error occurred while processing. Sequence contains more than one matching

                                //Old Code
                                /* var _filter = PickSerials.SingleOrDefault(x => x.Tus_itm_cd == _oneList.Tus_itm_cd && x.Tus_itm_stus == _oneList.Tus_itm_stus);
                                 if (_filter != null)
                                 {
                                     _oneList.Tus_resqty = _filter.Tus_resqty;
                                 }*/
                                var _filter = PickSerials.Where(x => x.Tus_itm_cd == _oneList.Tus_itm_cd && x.Tus_itm_stus == _oneList.Tus_itm_stus).ToList();
                                if (_filter != null)
                                {
                                    foreach (var item in _filter)
                                    {
                                        if (item.Tus_resqty > 0)//updated by akila 2017/07/03
                                        {
                                            _oneList.Tus_resqty = 1;
                                        }
                                        _oneList.Tus_res_no = item.Tus_res_no;
                                        _oneList.Tus_pkg_uom_tp = item.Tus_pkg_uom_tp;
                                        _oneList.Tus_pkg_uom_qty = item.Tus_pkg_uom_qty;
                                        if (_oneList.Tus_warr_period == 0)
                                        {
                                            _oneList.Tus_warr_period = item.Tus_warr_period;

                                            //_oneList.Tus_warr_no = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + item.Tus_ser_id.ToString();  //300816-DPS32-P01-0"

                                        }

                                    }


                                }

                                _oneList.Tus_warr_no = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _oneList.Tus_ser_id.ToString();  //300816-DPS32-P01-0"

                            }
                            PickSerials.AddRange(list);
                            PickSerials.Remove(PickSerials.Find(x => x.Tus_base_doc_no == non_sers.refdoc && x.Tus_base_itm_line == non_sers.refdocline && x.Tus_itm_cd == non_sers.itemcode && x.Tus_itm_stus == non_sers.itemstatus));
                            DataTable dtTempasd1 = DataTableExtensions.ToDataTable(PickSerials);
                        }
                    }
                    else
                    {

                        return effect = -1;
                    }
                }
                #endregion Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014

                // Select Serialized items and apply serialized inventory method
                #region For Serialized Item
                var _tbsers =
                      (from _pickSerials in PickSerials
                       where _pickSerials.Tus_ser_id != 0 // This is no need to feauture becoz
                       select _pickSerials).ToList().OrderBy(x => x.Tus_itm_cd).OrderBy(x => x.Tus_itm_stus).OrderBy(x => x.Tus_bin); //Order by Prabhath on 21/02/2014

                foreach (var sers in _tbsers)
                {
                    reptSeqNo = sers.Tus_usrseq_no;

                    InventoryItem invItem = new InventoryItem();
                    invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invItem.Iti_item_line = itmLine;
                    // invItem.Iti_item_line = sers.Tus_itm_line; // ADD BY THARANGA 2017/09/25
                    invItem.Iti_bin_code = sers.Tus_bin;
                    invItem.Iti_item_code = sers.Tus_itm_cd;
                    invItem.Iti_item_status = sers.Tus_itm_stus;
                    invItem.Iti_qty = sers.Tus_qty;
                    invItem.Iti_bal_qty = sers.Tus_qty;
                    invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                    if (_inventoryMovementHeader.TMP_SAVE_PKG_DATA)
                    {
                        #region add by lakshan to save pkg uom 08 Dec 2016
                        if (!string.IsNullOrEmpty(sers.Tus_pkg_uom_tp))
                        {
                            invItem.Iti_pkg_uom_tp = sers.Tus_pkg_uom_tp;
                            invItem.Iti_pkg_uom_qty = sers.Tus_pkg_uom_qty;
                            if (1 == _inventoryDAL.UpdateInventoryItemForMac(invItem))
                            {
                                itmLine += 1;
                                batchLine = 1;
                            }
                        }
                        else
                        {
                            if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                            {
                                itmLine += 1;
                                batchLine = 1;
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                        {
                            itmLine += 1;
                            batchLine = 1;
                        }
                    }
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;

                    invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                    if (invBatch.Inb_itm_line == 0)
                    {
                        invBatch.Inb_itm_line = itmLine;
                    }

                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = string.Empty;
                    //chg by Lakshan 21 Oct 2016 
                    if (_inventoryMovementHeader.BacthBaseDoc)
                    {
                        invBatch.Inb_batch_no = _inventoryMovementHeader.BacthBaseDocNo;
                    }
                    invBatch.Inb_bin = sers.Tus_bin;
                    invBatch.Inb_itm_cd = sers.Tus_itm_cd;
                    invBatch.Inb_itm_stus = sers.Tus_itm_stus;
                    invBatch.Inb_qty = sers.Tus_qty;
                    invBatch.Inb_unit_cost = sers.Tus_unit_cost;
                    invBatch.Itb_bal_qty1 = sers.Tus_qty;
                    invBatch.Itb_bal_qty2 = sers.Tus_qty;
                    invBatch.Inb_unit_price = sers.Tus_unit_price;
                    invBatch.Inb_base_doc_no = sers.Tus_doc_no;                     // Impotant : When the outward entry, this is the inward doc no
                    invBatch.Inb_base_ref_no = sers.Tus_base_doc_no;                // Impotant : When the DO entry, this is the invoice no
                    invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                    invBatch.Inb_base_itmcd = sers.Tus_itm_cd;                      // Impotant : When the outward entry, this is the inward item code
                    invBatch.Inb_base_itmline = sers.Tus_itm_line;                  // Impotant : When the outward entry, this is the inward item line
                    invBatch.Itb_base_batchline = sers.Tus_batch_line;              // Impotant : When the outward entry, this is the inward batch line
                    invBatch.Inb_base_itmstus = sers.Tus_itm_stus;                  // Impotant : When the outward entry, this is the inward item status
                    invBatch.Inb_job_no = sers.Tus_job_no;
                    invBatch.Inb_job_line = sers.Tus_job_line;
                    #region add by lakshan 25Oct2017
                    if (_inventoryMovementHeader.Ith_service_job_base)
                    {
                        invBatch.Inb_job_no = _inventoryMovementHeader.Ith_service_job_no;
                        invBatch.Inb_job_line = _inventoryMovementHeader.Ith_service_job_line;
                    }
                    #endregion
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    if (!string.IsNullOrEmpty(sers.Tus_res_no) && sers.Tus_res_no != "N/A")
                    {
                        invBatch.Inb_res_no = sers.Tus_res_no;
                        invBatch.Inb_res_lineno = sers.Tus_res_line;
                    }
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_base_refline = sers.Tus_base_itm_line;             // Impotant : When the DO entry, this is the invoice item line no
                    invBatch.Inb_mitm_cd = sers.Tus_pgs_prefix;                     // Impotant : Keep Complete Item Base MRN Main Item Code;  Chamal 14-Sep-2015
                    #region add base item code 16 Nov 2016
                    if (_inventoryMovementHeader.TMP_UPDATE_BASE_ITM)
                    {
                        MasterLocation _mstOutLoc = _inventoryDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                        if (_mstOutLoc != null)
                        {
                            if (_mstOutLoc.Ml_cate_1 == "DFS")
                            {
                                ImpCusdecItm _cusItm = _inventoryDAL.GET_AOD_OUT_MAIN_ITM_CD(invBatch.Inb_base_ref_no, invBatch.Inb_base_refline);
                                if (_cusItm != null)
                                {
                                    invBatch.Inb_base_itmcd = _cusItm.Cui_itm_cd;
                                }
                            }
                        }
                    }
                    #endregion
                    #region set exp date and man date 09 Dec 2016
                    InventoryBatchN _tmpBatchExpDt = _inventoryDAL.GET_INT_BATCH_DATA_NEW(new InventoryBatchN()
                    {
                        Inb_doc_no = invBatch.Inb_base_doc_no,
                        Inb_itm_line = invBatch.Inb_base_itmline,
                        Inb_base_itmline = invBatch.Inb_base_batchline
                    }).FirstOrDefault();
                    if (_tmpBatchExpDt != null)
                    {
                        invBatch.Inb_exp_dt = _tmpBatchExpDt.Inb_exp_dt;
                        invBatch.Inb_manufac_dt = _tmpBatchExpDt.Inb_manufac_dt;
                    }
                    #endregion
                    #region avg cost update by lakshan 12Jul2017
                    string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;
                    if (_cstMeth == "AVG")
                    {
                        INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeader.Ith_loc);
                        if (_avgCst != null)
                        {
                            invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                            invBatch.Inb_unit_cost = _avgCst.Iac_avg_cost;
                        }
                        else
                        {
                            _inventoryDAL.Check_ava_cost_available(0);
                        }
                    }
                    #endregion
                    if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                    {
                        batchLine += 1;
                        serLine = 1;
                    }

                    InventorySerialN invSerials = new InventorySerialN();
                    invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    //invSerials.Its_item_line = itmLine;
                    invSerials.Ins_itm_line = invBatch.Inb_itm_line;
                    invSerials.Ins_batch_line = _inventoryDAL.GetInventoryBatchLine(invBatch);
                    if (invSerials.Ins_batch_line == 0)
                    {
                        invSerials.Ins_batch_line = batchLine;
                    }

                    invSerials.Ins_direct = false; // false = Out, Outward
                    invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                    invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                    invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                    invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                    invSerials.Ins_bin = sers.Tus_bin;
                    invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                    invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                    invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                    invSerials.Ins_ser_id = sers.Tus_ser_id;
                    invSerials.Ins_ser_1 = sers.Tus_ser_1;
                    invSerials.Ins_ser_2 = sers.Tus_ser_2;
                    invSerials.Ins_ser_3 = sers.Tus_ser_3;
                    invSerials.Ins_ser_4 = sers.Tus_ser_4;
                    invSerials.Ins_warr_no = sers.Tus_warr_no;
                    invSerials.Ins_warr_period = sers.Tus_warr_period;
                    invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                    invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                    invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                    invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                    invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                    invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                    invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                    invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                    //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                    //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                    //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                    //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                    //invSerials.Ins_issue_dt = sers.Tus_out_date;
                    invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                    invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                    invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                    invSerials.Ins_cross_serline = sers.Tus_ser_line;
                    invSerials.Ins_issue_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                    invSerials.Ins_ageloc = sers.Tus_ageloc;
                    invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt;
                    invSerials.Ins_isownmrn = sers.Tus_isownmrn;
                    serLine = _inventoryDAL.GetInventorySerLine(invSerials);
                    if (serLine == 0)
                        serLine = 1;
                    else
                        serLine += 1;

                    invSerials.Ins_ser_line = serLine;

                    invSerials.Ins_cross_doc_no = sers.Tus_doc_no;

                    DataTable _dtFifo = _inventoryDAL.Get_Actual_FIFO_Serial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, sers.Tus_itm_cd, sers.Tus_itm_stus);
                    foreach (DataRow rw in _dtFifo.Rows)
                    {
                        //Chamal 04/Feb/2014 (Get_Actual_FIFO_Serial)
                        invSerials.Ins_fifo_doc_no = (string)rw["INS_DOC_NO"];
                        invSerials.Ins_fifo_doc_dt = Convert.ToDateTime(rw["INS_DOC_DT"]).Date;
                        invSerials.Ins_fifo_ser_id = Convert.ToInt32(rw["INS_SER_ID"]);
                        invSerials.Ins_fifo_ser_1 = (string)rw["INS_SER_1"];
                        if (sers.Tus_doc_dt.Date > invSerials.Ins_fifo_doc_dt.Date)
                        {
                            invSerials.Ins_is_fifo = false;
                        }
                        else
                        {
                            invSerials.Ins_is_fifo = true;
                        }
                    }

                    //Warranty Insert inr_sermst
                    #region
                    InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                    _invWarraDetail.Irsm_acc_no = null;
                    _invWarraDetail.Irsm_anal_1 = null;
                    _invWarraDetail.Irsm_anal_2 = null;
                    _invWarraDetail.Irsm_anal_3 = null;
                    _invWarraDetail.Irsm_anal_4 = null;
                    _invWarraDetail.Irsm_anal_5 = null;
                    _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                    _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                    _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    _invWarraDetail.Irsm_cre_when = DateTime.Now;
                    _invWarraDetail.Irsm_cust_addr = _cust_addr;
                    _invWarraDetail.Irsm_cust_cd = _cust_cd;
                    _invWarraDetail.Irsm_cust_del_addr = _cust_del_addr;
                    _invWarraDetail.Irsm_cust_email = _cust_email;
                    _invWarraDetail.Irsm_cust_fax = _cust_fax;
                    _invWarraDetail.Irsm_cust_mobile = _cust_mobile;
                    _invWarraDetail.Irsm_cust_name = _cust_name;
                    _invWarraDetail.Irsm_cust_prefix = _cust_prefix;
                    _invWarraDetail.Irsm_cust_tel = _cust_tel;
                    _invWarraDetail.Irsm_cust_town = _cust_town;
                    _invWarraDetail.Irsm_cust_vat_no = _cust_vat_no;
                    _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                    _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                    _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                    _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                    _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                    _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                    _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                    _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                    _invWarraDetail.Irsm_invoice_dt = _invoice_dt.Date;//DateTime.MinValue;
                    _invWarraDetail.Irsm_invoice_no = _invoiceno;
                    _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                    _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                    _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                    _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                    _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                    _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                    _invWarraDetail.Irsm_loc_desc = null;
                    _invWarraDetail.Irsm_mfc = null;
                    _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                    _invWarraDetail.Irsm_mod_when = DateTime.Now;
                    _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                    _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                    _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                    _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                    _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                    _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                    _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                    _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                    _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                    _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                    _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                    _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                    _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                    _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                    _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                    _invWarraDetail.Irsm_warr_rem = sers.Tus_Warranty_Remark;//null;    
                    
                    #region get orginal invoice date id credit note available add by thranaga 2018/10/11
                    if (_SalesDAL != null)
                    {
                        DataTable odt = _SalesDAL.GetReceiptItemTablenew(_invoiceno);
                        if (odt.Rows.Count > 0)
                        {
                            foreach (DataRow rw in odt.Rows)
                            {
                                string _paytype = (string)rw["SARD_PAY_TP"];
                                if (_paytype == "CRNOTE")
                                {
                                    DateTime _wrrdt = DateTime.Now.Date;
                                    List<InventoryHeader> _invHdrlist = _inventoryDAL.GET_CREDT_N_ORD_DO(_inventoryMovementHeader.Ith_com, odt.Rows[0]["sard_ref_no"].ToString()); //Edit SI no load variable by Chamal 08-Sep-2016
                                    if (_invHdrlist != null && _invHdrlist.Count > 0)
                                    {
                                        foreach (InventoryHeader _invHdr in _invHdrlist)
                                        {
                                            if (_wrrdt >= _invHdr.Ith_doc_date.Date)
                                            {

                                                _wrrdt = _invHdr.Ith_doc_date.Date;

                                                if (_invHdr != null && !string.IsNullOrEmpty(_invHdr.Ith_doc_no))
                                                {
                                                    _invWarraDetail.Irsm_warr_start_dt = _invHdr.Ith_doc_date.Date;
                                                }
                                                else
                                                {
                                                    _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                                        break;
                                    }


                                }
                                else
                                {
                                    _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                                }
                                //DateTime _wrrdt = DateTime.Now.Date;
                                //List <InventoryHeader> _invHdrlist = _inventoryDAL.GET_CREDT_N_ORD_DO(_inventoryMovementHeader.Ith_com, odt.Rows[0]["sard_ref_no"].ToString()); //Edit SI no load variable by Chamal 08-Sep-2016
                                //if (_invHdrlist != null && _invHdrlist.Count > 0)
                                //{
                                //    foreach (InventoryHeader _invHdr in _invHdrlist)
                                //    {
                                //        if (_wrrdt >= _invHdr.Ith_doc_date.Date)
                                //        {

                                //            _wrrdt = _invHdr.Ith_doc_date.Date;

                                //            if (_invHdr != null && !string.IsNullOrEmpty(_invHdr.Ith_doc_no))
                                //            {
                                //                _invWarraDetail.Irsm_warr_start_dt = _invHdr.Ith_doc_date.Date;
                                //            }
                                //            else
                                //            {
                                //                _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                                //            }
                                //        }
                                //    }
                            }

                        }
                        else
                        {
                            _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                        }
                    }
                    else
                    {
                        _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                    }

                    #endregion

                    //_invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;//DateTime.MinValue;
                    _invWarraDetail.Irsm_warr_stus = null;
                    //Sahan 24 Feb 2016
                    _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                    _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                    _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                    _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                    _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                    _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;
                    #region add by tharanga 2018/06/16 revert relase update old warr det
                    if (_inventoryMovementHeader.Ith_sub_tp == "RVTRL")//add by tharanga 2018/06/14 warr date and period not update
                    {
                        _salesDAL = new SalesDAL();
                        List<InvoiceHeader> _invoice = _salesDAL.GetInvoiceByAccountNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_pc, _inventoryMovementHeader.Ith_acc_no);
                        if (_invoice !=null)
                        {
                            if (_invoice.Count >0 )
                            {
                                _invoice = _invoice.OrderByDescending(x => x.Sah_direct).ToList();
                                var _sales = from _lst in _invoice
                                             where _lst.Sah_direct == true
                                             select _lst;
                                foreach (InvoiceHeader _hdrnew in _sales)
                                {
                                    List<InvoiceItem> _invItem = _salesDAL.GetInvoiceDetailByInvoice(_hdrnew.Sah_inv_no);
                                    if (_invItem !=null)
                                    {
                                        if (_invItem.Count > 0)
                                        {
                                            foreach (InvoiceItem itemlst in _invItem)
                                            {
                                                if (itemlst.Sad_itm_cd==sers.Tus_itm_cd)
                                                {
                                                    _invWarraDetail.Irsm_warr_period = itemlst.Sad_warr_period;
                                                    _invWarraDetail.Irsm_warr_start_dt = _hdrnew.Sah_dt;
                                                    _invWarraDetail.Irsm_warr_rem = itemlst.Sad_warr_remarks;
                                                    _invWarraDetail.Irsm_invoice_no = itemlst.Sad_inv_no;
                                                    _invWarraDetail.Irsm_invoice_dt = _hdrnew.Sah_dt;
                                                }
                                            }   
                                        }
                                        
                                    }
                                }
                            }
                             

                        }

                        List<InventorySerialMaster> _serial = _inventoryDAL.GetWarrantyDetails_by_serid(sers.Tus_ser_id);
                        if (_serial != null)
                        {
                            if (_serial.Count > 0)
                            {
                                //_invWarraDetail.Irsm_warr_period = _serial.First().Irsm_warr_period;
                                //_invWarraDetail.Irsm_warr_start_dt = _serial.First().Irsm_warr_start_dt;
                                //_invWarraDetail.Irsm_warr_rem = _serial.First().Irsm_warr_rem;
                                //_invWarraDetail.Irsm_invoice_no = _serial.First().Irsm_invoice_no;
                                //_invWarraDetail.Irsm_invoice_dt = _serial.First().Irsm_invoice_dt;

                            }
                        }

                    }
                    #endregion
                    #region avg cost update by lakshan 12Jul2017
                    if (_cstMeth == "AVG")
                    {
                        try
                        {
                            INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeader.Ith_loc);
                            if (_avgCst != null)
                            {
                                _invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                                invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                _invWarraDetail.Irsm_unit_cost = _avgCst.Iac_avg_cost;
                                invSerials.Ins_unit_cost = _avgCst.Iac_avg_cost;
                            }
                            else
                            {
                                _inventoryDAL.Check_ava_cost_available(0);
                            }
                        }
                        catch (Exception)
                        {

                            throw;
                        }

                        //INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeader.Ith_loc);
                        //if (_avgCst != null)
                        //{
                        //    _invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                        //    invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                        //    _invWarraDetail.Irsm_unit_cost = _avgCst.Iac_avg_cost;
                        //    invSerials.Ins_unit_cost = _avgCst.Iac_avg_cost;
                        //}
                        //else
                        //{
                        //    _inventoryDAL.Check_ava_cost_available(0);
                        //}
                    }
                    #endregion
                    if (sers.Tus_ser_id != 0)
                    {
                        bool _isUpdWarrSts = false;
                        if (_inventoryMovementHeader.Ith_doc_tp == "DO")
                        {
                            _invWarraDetail.Irsm_warr_stus = "Y";
                            _isUpdWarrSts = true;
                        }
                        if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_direct == false && _inventoryMovementHeader.Warr_sts_update == false)
                        {
                            _invWarraDetail.Irsm_warr_stus = "N";
                            _isUpdWarrSts = true;
                        }
                        if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_direct == false && _inventoryMovementHeader.Warr_sts_update == true)
                        {
                            _invWarraDetail.Irsm_warr_stus = "Y";
                            _isUpdWarrSts = true;
                        }
                        //add  by tharanga service job not updqate falowing cat
                        if (!string.IsNullOrEmpty(_inventoryMovementHeader.Ith_job_no))
                        {
                            MasterItem _chkItm = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, _invWarraDetail.Irsm_itm_cd);
                            if (_chkItm != null)
                            {
                                if (_chkItm.Mi_cate_1 == "PH" && _chkItm.Mi_cate_2 == "MOB" && _chkItm.Mi_cate_3 == "MU")
                                {
                                    _isUpdWarrSts = false;
                                    goto AB;
                                }

                            }

                        }
                        //add by tharanga ravet reales warr not update
                        if (_inventoryMovementHeader._warrNotupdate == true)
                        {
                            goto AB;
                        }
                        if (_isUpdWarrSts)
                        {
                            #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                            _inventoryDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                            #endregion
                        }
                        else
                        {
                            _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                        }
                    AB:
                        _inventoryDAL.SaveInventorySerial(invSerials, 0);
                        _inventoryDAL.SaveInventorySerialRef(invSerials, 0);
                    }

                    #endregion

                    //Tharaka 2015-12-30
                    Int32 result = InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, sers.Tus_base_doc_no.ToString(), invBatch.Inb_seq_no, 0);

                    //kapila 9/2/2016
                    Int32 _res = _inventoryDAL.UPD_TMP_ISSUE_RET(sers.Tus_com, sers.Tus_loc, sers.Tus_itm_cd, sers.Tus_ser_1, "TMPI");
                }
                #endregion

            }
            // Select None-Serialized items and apply FIFO inventory method        
            #region For None-Serialized Item
            //var _tbnonsers =
            //      (from _pickSerials in PickSerials
            //       where _pickSerials.Tus_ser_id == 0
            //       group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_exp_dt, _pickSerials.Tus_pgs_prefix, _pickSerials.Tus_base_doc_no_1 } into batch
            //       select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, expdate = batch.Key.Tus_exp_dt, mainitemcode = batch.Key.Tus_pgs_prefix, batch.Key.Tus_base_doc_no_1, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemcode).OrderBy(x => x.itemstatus).OrderBy(x => x.bincode);//Order by Prabhath on 21/02/2014
            //Add by Lakshan Property _pickSerials.Tus_res_no,_pickSerials.Tus_res_line 14 Oct 2016 

            //var _tbnonsers =
            //      (from _pickSerials in PickSerials
            //       where _pickSerials.Tus_ser_id == 0
            //       group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_exp_dt, _pickSerials.Tus_pgs_prefix, _pickSerials.Tus_base_doc_no_1, _pickSerials.Tus_res_no, _pickSerials.Tus_res_line } into batch
            //       select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, expdate = batch.Key.Tus_exp_dt, mainitemcode = batch.Key.Tus_pgs_prefix, batch.Key.Tus_base_doc_no_1, res_no = batch.Key.Tus_res_no, res_line = batch.Key.Tus_res_line, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemcode).OrderBy(x => x.itemstatus).OrderBy(x => x.bincode);//Order by Prabhath on 21/02/2014
            //Add by Lakshan Property _pickSerials.pkg_uom_tp,_pickSerials.pkg_uom_qty 08 Dec 2016
            var _tbnonsers =
                  (from _pickSerials in PickSerials
                   where _pickSerials.Tus_ser_id == 0
                   group _pickSerials by new
                   {
                       _pickSerials.Tus_usrseq_no,
                       _pickSerials.Tus_base_doc_no,
                       _pickSerials.Tus_base_itm_line,
                       _pickSerials.Tus_bin,
                       _pickSerials.Tus_itm_cd,
                       _pickSerials.Tus_itm_stus,
                       _pickSerials.Tus_job_no,
                       _pickSerials.Tus_job_line,
                       _pickSerials.Tus_exp_dt,
                       _pickSerials.Tus_pgs_prefix,
                       _pickSerials.Tus_base_doc_no_1,
                       _pickSerials.Tus_res_no,
                       _pickSerials.Tus_res_line,
                       _pickSerials.Tus_pkg_uom_qty,
                       _pickSerials.Tus_pkg_uom_tp
                   } into batch
                   select new
                   {
                       scanSeqNo = batch.Key.Tus_usrseq_no,
                       refdoc = batch.Key.Tus_base_doc_no,
                       refdocline = batch.Key.Tus_base_itm_line,
                       bincode = batch.Key.Tus_bin,
                       itemcode = batch.Key.Tus_itm_cd,
                       itemstatus = batch.Key.Tus_itm_stus,
                       jobno = batch.Key.Tus_job_no,
                       jobline = batch.Key.Tus_job_line,
                       expdate = batch.Key.Tus_exp_dt,
                       mainitemcode = batch.Key.Tus_pgs_prefix,
                       batch.Key.Tus_base_doc_no_1,
                       res_no = batch.Key.Tus_res_no,
                       res_line = batch.Key.Tus_res_line,
                       pkg_uom_qty = batch.Key.Tus_pkg_uom_qty,
                       pkg_uom_tp = batch.Key.Tus_pkg_uom_tp,
                       itemqty = batch.Sum(p => p.Tus_qty)
                   }).ToList().OrderBy(x => x.itemcode).OrderBy(x => x.itemstatus).OrderBy(x => x.bincode);//Order by Prabhath on 21/02/2014

            foreach (var non_sers in _tbnonsers)
            {
                reptSeqNo = non_sers.scanSeqNo;
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = non_sers.bincode;
                invItem.Iti_item_code = non_sers.itemcode;
                invItem.Iti_item_status = non_sers.itemstatus;
                invItem.Iti_qty = non_sers.itemqty;
                invItem.Iti_bal_qty = non_sers.itemqty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                if (_inventoryMovementHeader.TMP_SAVE_PKG_DATA)
                {
                    #region add by lakshan to save pkg uom 08 Dec 2016
                    if (!string.IsNullOrEmpty(non_sers.pkg_uom_tp))
                    {
                        invItem.Iti_pkg_uom_tp = non_sers.pkg_uom_tp;
                        invItem.Iti_pkg_uom_qty = non_sers.pkg_uom_qty;
                        if (1 == _inventoryDAL.UpdateInventoryItemForMac(invItem))
                        {
                            itmLine += 1;
                            batchLine = 1;
                        }
                    }
                    else
                    {
                        if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                        {
                            itmLine += 1;
                            batchLine = 1;
                        }
                    }
                    #endregion
                }
                else
                {
                    if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                    {
                        itmLine += 1;
                        batchLine = 1;
                    }
                }

                decimal _itmQty = invItem.Iti_qty;
                string _jobNo = null;
                int _jobLineNo = 0;
                if (_locType == "SERC")//Chamal 03-Sep-2015
                {
                    _jobNo = non_sers.jobno;
                    _jobLineNo = non_sers.jobline;
                }

                //Added by Chamal 25-Mar-2016
                if (_isSerialMaintain == 0)
                {
                    _jobNo = non_sers.jobno;
                    _jobLineNo = non_sers.jobline;
                }
                #region add by lakshan 14Oct2017
                MasterLocation _mstLocTmp = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                if (_mstLocTmp != null)
                {
                    if (_mstLocTmp.Ml_cate_1 == "DFS" && _mstLocTmp.Ml_is_serial)
                    {
                        _jobNo = non_sers.jobno;
                        _jobLineNo = non_sers.jobline;
                    }
                }
                #endregion
                if (_inventoryMovementHeader.ProductionBaseDoc)
                {
                    _jobNo = _inventoryMovementHeader.ProductionBaseDocNo;
                    //_jobLineNo = non_sers.jobline;
                }

                //Wimal 01/Nov/2018
                if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
                {
                    _jobNo = non_sers.jobno;
                }

                //-----------
                DataTable _dtNonFifo = new DataTable();
                if (_inventoryMovementHeader.BacthBaseDoc)
                {
                    if (non_sers.expdate == null || non_sers.expdate == Convert.ToDateTime("01-Jan-0001").Date)
                    {

                        //_dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerialsFORProduction(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _inventoryMovementHeader.BacthBaseDocNo, _jobLineNo, 0, non_sers.expdate.Date, non_sers.bincode);
                        _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerialsFORBATCH(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _inventoryMovementHeader.BacthBaseDocNo, _jobLineNo, 0, non_sers.expdate.Date, non_sers.bincode);
                        passitem = non_sers.itemcode;

                    }
                    else
                    {
                        _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerialsFORBATCH(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _inventoryMovementHeader.BacthBaseDocNo, _jobLineNo, 1, non_sers.expdate.Date, non_sers.bincode);
                        passitem = non_sers.itemcode;
                    }
                }
                else
                {
                    if (non_sers.expdate == null || non_sers.expdate == Convert.ToDateTime("01-Jan-0001").Date)
                    {

                        _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 0, non_sers.expdate.Date, non_sers.bincode);
                        if (_dtNonFifo != null)
                        {
                            if (_dtNonFifo.Rows.Count == 0)
                            {
                                int x = 0;
                            }
                        }
                        passitem = non_sers.itemcode;

                    }
                    else
                    {
                        _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 1, non_sers.expdate.Date, non_sers.bincode);
                        passitem = non_sers.itemcode;
                    }
                }

                MasterCompany _mastercompany = new MasterCompany();
                if (_dtNonFifo.Rows.Count <= 0)
                {
                    //kapila 6/7/2016
                    _mastercompany = _inventoryDAL.GetCompanyByCode(_inventoryMovementHeader.Ith_com);
                    if (_mastercompany.Mc_alw_minus_bal == 1)
                    {
                        string _inFifoDocNo = "N/A"; // (string)rw["INB_DOC_NO"];
                        string _inFifoBin = "N/A"; // (string)rw["INB_BIN"];
                        DateTime _inFifoDocDate = DateTime.Now.Date; // Convert.ToDateTime(rw["INB_DOC_DT"]).Date;
                        int _inFifoItmLine = 0; // Convert.ToInt32(rw["INB_ITM_LINE"]);
                        int _inFifoBatLine = 0; // Convert.ToInt32(rw["INB_BATCH_LINE"]);
                        decimal _inFifoUnitCost = 0; // Convert.ToDecimal(rw["INB_UNIT_COST"]);   //kapila int _inFifoUnitCost --> decimal _inFifoUnitCost
                        decimal _itmbalQty = non_sers.itemqty; // Convert.ToDecimal(rw["INB_QTY"]);

                        InventoryBatchN invBatch = new InventoryBatchN();
                        invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                        invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                        invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                        invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                        if (invBatch.Inb_itm_line == 0)
                        {
                            invBatch.Inb_itm_line = itmLine;
                        }

                        if (_itmbalQty <= _itmQty)
                        {
                            invBatch.Inb_qty = _itmbalQty;
                            invBatch.Itb_bal_qty1 = _itmbalQty;
                            invBatch.Itb_bal_qty2 = _itmbalQty;
                            _itmQty = _itmQty - _itmbalQty;
                        }
                        else
                        {
                            invBatch.Inb_qty = _itmQty;
                            invBatch.Itb_bal_qty1 = _itmQty;
                            invBatch.Itb_bal_qty2 = _itmQty;
                            _itmQty = 0;
                        }

                        invBatch.Inb_batch_line = batchLine;
                        invBatch.Inb_batch_no = string.Empty;
                        invBatch.Inb_bin = _inFifoBin;
                        invBatch.Inb_itm_cd = non_sers.itemcode;
                        invBatch.Inb_itm_stus = non_sers.itemstatus;

                        invBatch.Inb_unit_cost = _inFifoUnitCost;
                        invBatch.Inb_unit_price = _inFifoUnitCost;
                        invBatch.Inb_base_doc_no = _inFifoDocNo;                        // Impotant : When the outward entry, this is the inward doc no
                        invBatch.Inb_base_ref_no = non_sers.refdoc;                     // Impotant : When the DO entry, this is the invoice no
                        invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        invBatch.Inb_base_itmcd = non_sers.itemcode;                    // Impotant : When the outward entry, this is the inward item code
                        invBatch.Inb_base_itmline = _inFifoItmLine;                     // Impotant : When the outward entry, this is the inward item line
                        invBatch.Itb_base_batchline = _inFifoBatLine;                   // Impotant : When the outward entry, this is the inward batch line
                        invBatch.Inb_base_itmstus = non_sers.itemstatus;                // Impotant : When the outward entry, this is the inward item status
                        invBatch.Itb_base_doc_dt = _inFifoDocDate.Date;
                        invBatch.Inb_job_no = non_sers.jobno;
                        invBatch.Inb_job_line = non_sers.jobline;
                        invBatch.Itb_git_ignore = false;
                        invBatch.Itb_git_ignore_by = null;
                        invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                        invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                        invBatch.Inb_res_no = null;
                        invBatch.Inb_res_lineno = 0;
                        if (!string.IsNullOrEmpty(non_sers.res_no) && non_sers.res_no != "N/A")
                        {
                            invBatch.Inb_res_no = non_sers.res_no;
                            invBatch.Inb_res_lineno = non_sers.res_line;
                        }
                        invBatch.Inb_base_doc_no1 = non_sers.Tus_base_doc_no_1;//null;//Rebond number
                        invBatch.Inb_base_doc_no2 = null;
                        invBatch.Inb_base_doc_no3 = null;
                        invBatch.Inb_cur_cd = null;
                        invBatch.Inb_grup_cur_cd = null;
                        invBatch.Inb_base_refline = non_sers.refdocline;                // Impotant : When the DO entry, this is the invoice item line no
                        invBatch.Inb_mitm_cd = non_sers.mainitemcode;                     // Impotant : Keep Complete Item Base MRN Main Item Code;  Chamal 14-Sep-2015
                        #region add base item code 16 Nov 2016
                        if (_inventoryMovementHeader.TMP_UPDATE_BASE_ITM)
                        {
                            MasterLocation _mstOutLoc = _inventoryDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                            if (_mstOutLoc != null)
                            {
                                if (_mstOutLoc.Ml_cate_1 == "DFS")
                                {
                                    ImpCusdecItm _cusItm = _inventoryDAL.GET_AOD_OUT_MAIN_ITM_CD(invBatch.Inb_base_ref_no, invBatch.Inb_base_refline);
                                    if (_cusItm != null)
                                    {
                                        invBatch.Inb_base_itmcd = _cusItm.Cui_itm_cd;
                                    }
                                }
                            }
                        }
                        #endregion
                        #region set exp date and man date 09 Dec 2016
                        InventoryBatchN _tmpBatchExpDt = _inventoryDAL.GET_INT_BATCH_DATA_NEW(new InventoryBatchN()
                        {
                            Inb_doc_no = invBatch.Inb_base_doc_no,
                            Inb_itm_line = _inFifoBatLine,
                            Inb_base_itmline = _inFifoItmLine
                        }).FirstOrDefault();
                        if (_tmpBatchExpDt != null)
                        {
                            invBatch.Inb_exp_dt = _tmpBatchExpDt.Inb_exp_dt;
                            invBatch.Inb_manufac_dt = _tmpBatchExpDt.Inb_manufac_dt;
                        }
                        #endregion
                        #region avg cost update by lakshan 12Jul2017
                        string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;
                        if (_cstMeth == "AVG")
                        {
                            INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, non_sers.itemcode, non_sers.itemstatus, _inventoryMovementHeader.Ith_loc);
                            if (_avgCst != null)
                            {
                                invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                invBatch.Inb_unit_cost = _avgCst.Iac_avg_cost;
                            }
                            else
                            {
                                _inventoryDAL.Check_ava_cost_available(0);
                            }
                        }
                        #endregion
                        if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                        {
                            batchLine += 1;
                            serLine = 1;
                        }

                        //Tharaka 2015-12-30
                        //    Int32 result = InventryCostCalculation(invBatch, null, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, non_sers.refdoc, invBatch.Inb_seq_no, 0);

                        if (_itmQty <= 0) break;
                    }
                    else

                        _inventoryDAL.Check_Batch_Balance(1);
                }
                else
                {
                    foreach (DataRow rw in _dtNonFifo.Rows)
                    {
                        string _inFifoDocNo = (string)rw["INB_DOC_NO"];
                        string _inFifoBin = (string)rw["INB_BIN"];
                        DateTime _inFifoDocDate = Convert.ToDateTime(rw["INB_DOC_DT"]).Date;
                        int _inFifoItmLine = Convert.ToInt32(rw["INB_ITM_LINE"]);
                        int _inFifoBatLine = Convert.ToInt32(rw["INB_BATCH_LINE"]);
                        decimal _inFifoUnitCost = Convert.ToDecimal(rw["INB_UNIT_COST"]);   //kapila int _inFifoUnitCost --> decimal _inFifoUnitCost
                        decimal _itmbalQty = Convert.ToDecimal(rw["INB_QTY"]);

                        InventoryBatchN invBatch = new InventoryBatchN();
                        invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                        invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                        invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                        invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                        if (invBatch.Inb_itm_line == 0)
                        {
                            invBatch.Inb_itm_line = itmLine;
                        }

                        if (_itmbalQty <= _itmQty)
                        {
                            invBatch.Inb_qty = _itmbalQty;
                            invBatch.Itb_bal_qty1 = _itmbalQty;
                            invBatch.Itb_bal_qty2 = _itmbalQty;
                            _itmQty = _itmQty - _itmbalQty;
                        }
                        else
                        {
                            invBatch.Inb_qty = _itmQty;
                            invBatch.Itb_bal_qty1 = _itmQty;
                            invBatch.Itb_bal_qty2 = _itmQty;
                            _itmQty = 0;
                        }

                        invBatch.Inb_batch_line = batchLine;
                        invBatch.Inb_batch_no = string.Empty;
                        invBatch.Inb_bin = _inFifoBin;
                        invBatch.Inb_itm_cd = non_sers.itemcode;
                        invBatch.Inb_itm_stus = non_sers.itemstatus;

                        invBatch.Inb_unit_cost = _inFifoUnitCost;
                        invBatch.Inb_unit_price = _inFifoUnitCost;
                        invBatch.Inb_base_doc_no = _inFifoDocNo;                        // Impotant : When the outward entry, this is the inward doc no
                        invBatch.Inb_base_ref_no = non_sers.refdoc;                     // Impotant : When the DO entry, this is the invoice no
                        invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        invBatch.Inb_base_itmcd = non_sers.itemcode;                    // Impotant : When the outward entry, this is the inward item code
                        invBatch.Inb_base_itmline = _inFifoItmLine;                     // Impotant : When the outward entry, this is the inward item line
                        invBatch.Itb_base_batchline = _inFifoBatLine;                   // Impotant : When the outward entry, this is the inward batch line
                        invBatch.Inb_base_itmstus = non_sers.itemstatus;                // Impotant : When the outward entry, this is the inward item status
                        invBatch.Itb_base_doc_dt = _inFifoDocDate.Date;
                        invBatch.Inb_job_no = non_sers.jobno;
                        invBatch.Inb_job_line = non_sers.jobline;
                        invBatch.Itb_git_ignore = false;
                        invBatch.Itb_git_ignore_by = null;
                        invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                        invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                        invBatch.Inb_res_no = null;
                        invBatch.Inb_res_lineno = 0;
                        if (!string.IsNullOrEmpty(non_sers.res_no) && non_sers.res_no != "N/A")
                        {
                            invBatch.Inb_res_no = non_sers.res_no;
                            invBatch.Inb_res_lineno = non_sers.res_line;
                        }
                        invBatch.Inb_base_doc_no1 = non_sers.Tus_base_doc_no_1;//null;//Rebond number
                        invBatch.Inb_base_doc_no2 = null;
                        invBatch.Inb_base_doc_no3 = null;
                        invBatch.Inb_cur_cd = null;
                        invBatch.Inb_grup_cur_cd = null;
                        invBatch.Inb_base_refline = non_sers.refdocline;                // Impotant : When the DO entry, this is the invoice item line no
                        invBatch.Inb_mitm_cd = non_sers.mainitemcode;                     // Impotant : Keep Complete Item Base MRN Main Item Code;  Chamal 14-Sep-2015
                        #region add base item code 16 Nov 2016
                        if (_inventoryMovementHeader.TMP_UPDATE_BASE_ITM)
                        {
                            MasterLocation _mstOutLoc = _inventoryDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                            if (_mstOutLoc != null)
                            {
                                if (_mstOutLoc.Ml_cate_1 == "DFS")
                                {
                                    ImpCusdecItm _cusItm = _inventoryDAL.GET_AOD_OUT_MAIN_ITM_CD(invBatch.Inb_base_ref_no, invBatch.Inb_base_refline);
                                    if (_cusItm != null)
                                    {
                                        invBatch.Inb_base_itmcd = _cusItm.Cui_itm_cd;
                                    }
                                }
                            }
                        }
                        #endregion
                        #region set exp date and man date 09 Dec 2016
                        InventoryBatchN _tmpBatchExpDt = _inventoryDAL.GET_INT_BATCH_DATA_NEW(new InventoryBatchN()
                        {
                            Inb_doc_no = invBatch.Inb_base_doc_no,
                            Inb_itm_line = _inFifoBatLine,
                            Inb_base_itmline = _inFifoItmLine
                        }).FirstOrDefault();
                        if (_tmpBatchExpDt != null)
                        {
                            invBatch.Inb_exp_dt = _tmpBatchExpDt.Inb_exp_dt;
                            invBatch.Inb_manufac_dt = _tmpBatchExpDt.Inb_manufac_dt;
                        }
                        #endregion
                        #region avg cost update by lakshan 12Jul2017
                        string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;
                        if (_cstMeth == "AVG")
                        {
                            INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, non_sers.itemcode, non_sers.itemstatus, _inventoryMovementHeader.Ith_loc);
                            if (_avgCst != null)
                            {
                                invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                invBatch.Inb_unit_cost = _avgCst.Iac_avg_cost;
                            }
                            else
                            {
                                _inventoryDAL.Check_ava_cost_available(0);
                            }
                        }
                        #endregion
                        if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                        {
                            batchLine += 1;
                            serLine = 1;
                        }

                        //Tharaka 2015-12-30
                        Int32 result = InventryCostCalculation(invBatch, null, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, non_sers.refdoc, invBatch.Inb_seq_no, 0);

                        if (_itmQty <= 0) break;
                    }
                }
                //-----------
            }
            #endregion

            //Rukshan DFS location serial save
            #region DFS serial  save
            bool _nonserialserialgenpath = false;
            if (_isSerialMaintain == 0)
            {
                bool _saveserial = true;

                if (PickSerials != null)
                {
                    List<InventoryBatchN> _batch = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                    if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                    {
                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point))
                        {
                            _saveserial = false;
                        }
                        else if (_inventoryMovementHeader.Ith_loading_point == "N/A")
                        {
                            _saveserial = false;
                        }
                    }

                    if (_saveserial)
                    {
                        string _warrantyno = string.Empty;
                        _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-";
                        if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                        {
                            var _scanItems = PickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_qty, x.Tus_itm_line }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                            foreach (var itm in _scanItems)
                            {
                                MasterItem msitem = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, itm.Peo.Tus_itm_cd);
                                if (msitem != null)
                                {
                                    if (msitem.Mi_is_ser1 == 0)
                                    {
                                        ReptPickSerials serial = PickSerials.Find(x => x.Tus_itm_cd == itm.Peo.Tus_itm_cd && x.Tus_itm_line == itm.Peo.Tus_itm_line);
                                        for (int i = 1; i < itm.Peo.Tus_qty; i++)
                                        {
                                            _nonserialserialgenpath = true;
                                            serial.Tus_qty = 1;
                                            #region Add by lakshan issue fix ref update 2016 Sep 20
                                            ReptPickSerials _tmpSer = ReptPickSerials.CreateNewObject(serial);
                                            #endregion
                                            PickSerials.Add(_tmpSer);
                                        }
                                    }
                                }
                            }
                        }
                        else if (_inventoryMovementHeader.Ith_doc_tp == "DO")
                        {
                            var _scanItems = PickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_qty, x.Tus_itm_line, x.Tus_base_doc_no_1 }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                            foreach (var itm in _scanItems)
                            {
                                MasterItem msitem = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, itm.Peo.Tus_itm_cd);
                                if (msitem != null)
                                {
                                    if (msitem.Mi_is_ser1 == 0)
                                    {
                                        ReptPickSerials serial = PickSerials.Find(x => x.Tus_itm_cd == itm.Peo.Tus_itm_cd && x.Tus_itm_line == itm.Peo.Tus_itm_line);
                                        for (int i = 1; i < itm.Peo.Tus_qty; i++)
                                        {
                                            _nonserialserialgenpath = true;
                                            serial.Tus_qty = 1;
                                            serial.Tus_ser_id = 0;
                                            PickSerials.Add(serial);
                                        }
                                    }
                                }
                            }
                        }
                        #region Non-Serial Serial Line Generation
                        // if (_nonserialserialgenpath == true)
                        // {
                        int _seridtag = 0;
                        foreach (InventoryBatchN batch in _batch)
                        {
                            MasterItem msitem = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, batch.Inb_itm_cd);
                            if (msitem != null)
                            {
                                if (msitem.Mi_is_ser1 == 0)
                                {
                                    int i = 1;
                                    var _filte = PickSerials.Where(x => x.Tus_itm_cd == batch.Inb_itm_cd && x.Tus_itm_stus == batch.Inb_itm_stus && x.pickserial == false).ToList();
                                    foreach (ReptPickSerials sers in _filte)
                                    {
                                        if (batch.Inb_qty >= i)
                                        {
                                            // _itemdetail = CHNLSVC.Inventory.GetItem(Session["UserCompanyCode"].ToString(), _itemcode);
                                            if (sers.Tus_itm_cd == batch.Inb_itm_cd)
                                            {
                                                sers.pickserial = true;
                                                #region serial save
                                                InventorySerialN invSerials = new InventorySerialN();
                                                invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                                                //invSerials.Its_item_line = itmLine;
                                                invSerials.Ins_itm_line = batch.Inb_itm_line;//invBatch.Inb_itm_line;
                                                invSerials.Ins_batch_line = _inventoryDAL.GetInventoryBatchLine(batch);
                                                //if (invSerials.Ins_batch_line == 0)
                                                //{
                                                //    invSerials.Ins_batch_line = batchLine;
                                                //}

                                                invSerials.Ins_direct = false; // false = Out, Outward
                                                invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                                                invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                                invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                                                invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                                                invSerials.Ins_bin = sers.Tus_bin;
                                                invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                                                invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                                                invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                                                if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                                                {
                                                    invSerials.Ins_unit_cost = batch.Inb_unit_cost;
                                                    invSerials.Ins_unit_price = batch.Inb_unit_cost;
                                                }
                                                if (_nonserialserialgenpath == true)
                                                {
                                                    if (sers.Tus_ser_id == 0)
                                                    {
                                                        sers.Tus_ser_id = _inventoryDAL.GetSerialID();//GetSerialID();
                                                        _seridtag = sers.Tus_ser_id;
                                                    }
                                                    else
                                                    {
                                                        if (_seridtag == sers.Tus_ser_id)
                                                        { sers.Tus_ser_id = _inventoryDAL.GetSerialID(); _seridtag = sers.Tus_ser_id; }

                                                        if (_inventoryMovementHeader.Ith_doc_tp == "DO")
                                                        {
                                                            sers.Tus_ser_id = _inventoryDAL.GetSerialID();
                                                        }

                                                    }
                                                }
                                                else
                                                {
                                                    if (sers.Tus_ser_id == 0)
                                                    {
                                                        sers.Tus_ser_id = _inventoryDAL.GetSerialID();//GetSerialID();
                                                        _seridtag = sers.Tus_ser_id;
                                                    }
                                                }
                                                //
                                                sers.Tus_warr_no = _warrantyno + sers.Tus_ser_id;
                                                //
                                                invSerials.Ins_ser_id = sers.Tus_ser_id;
                                                invSerials.Ins_ser_1 = sers.Tus_ser_1;
                                                invSerials.Ins_ser_2 = sers.Tus_ser_2;
                                                invSerials.Ins_ser_3 = sers.Tus_ser_3;
                                                invSerials.Ins_ser_4 = sers.Tus_ser_4;
                                                invSerials.Ins_warr_no = sers.Tus_warr_no;
                                                invSerials.Ins_warr_period = sers.Tus_warr_period;
                                                invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                                                invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                                                invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                                                invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                                                invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                                                invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                                                invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                                                invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                                                //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                                                //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                                                //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                                                //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                                                //invSerials.Ins_issue_dt = sers.Tus_out_date;
                                                invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                                                invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                                                invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                                                invSerials.Ins_cross_serline = sers.Tus_ser_line;
                                                invSerials.Ins_issue_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                                invSerials.Ins_ageloc = sers.Tus_ageloc;
                                                invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt;
                                                invSerials.Ins_isownmrn = sers.Tus_isownmrn;

                                                serLine = _inventoryDAL.GetInventorySerLine(invSerials);
                                                if (serLine == 0)
                                                    serLine = 1;
                                                else
                                                    serLine += 1;

                                                invSerials.Ins_ser_line = serLine;
                                                invSerials.Ins_cross_doc_no = sers.Tus_doc_no;
                                                #region Make grn Data 15 Jan 2017 add by lakshan
                                                if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                                                {
                                                    InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = batch.Inb_base_doc_no, Ith_com = batch.Inb_com }).FirstOrDefault();
                                                    if (_invHdr != null)
                                                    {
                                                        invSerials.Ins_orig_grncom = _invHdr.Ith_com;
                                                        invSerials.Ins_orig_grnno = _invHdr.Ith_doc_no;
                                                        invSerials.Ins_orig_grndt = _invHdr.Ith_doc_date;
                                                        invSerials.Ins_orig_supp = _invHdr.Ith_bus_entity;
                                                        invSerials.Ins_exist_grncom = _invHdr.Ith_com;
                                                        invSerials.Ins_exist_grnno = _invHdr.Ith_doc_no;
                                                        invSerials.Ins_exist_supp = _invHdr.Ith_bus_entity;
                                                        invSerials.Ins_exist_grndt = _invHdr.Ith_doc_date;
                                                    }
                                                }
                                                #endregion
                                                // _inventoryDAL.SaveInventorySerial(invSerials, 0);
                                                //_inventoryDAL.SaveInventorySerialRef(invSerials, 0);
                                                //Add Prabhath on 19/04/2012
                                                #region warranty inr_sermst
                                                InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                                                _invWarraDetail.Irsm_acc_no = _accno;
                                                _invWarraDetail.Irsm_anal_1 = null;
                                                _invWarraDetail.Irsm_anal_2 = null;
                                                _invWarraDetail.Irsm_anal_3 = null;
                                                _invWarraDetail.Irsm_anal_4 = null;
                                                _invWarraDetail.Irsm_anal_5 = null;
                                                _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                                                _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                                                _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                                _invWarraDetail.Irsm_cre_when = DateTime.Now;
                                                _invWarraDetail.Irsm_cust_addr = _cust_addr;
                                                _invWarraDetail.Irsm_cust_cd = _cust_cd;
                                                _invWarraDetail.Irsm_cust_del_addr = _cust_del_addr;
                                                _invWarraDetail.Irsm_cust_email = _cust_email;
                                                _invWarraDetail.Irsm_cust_fax = _cust_fax;
                                                _invWarraDetail.Irsm_cust_mobile = _cust_mobile;
                                                _invWarraDetail.Irsm_cust_name = _cust_name;
                                                _invWarraDetail.Irsm_cust_prefix = _cust_prefix;
                                                _invWarraDetail.Irsm_cust_tel = _cust_tel;
                                                _invWarraDetail.Irsm_cust_town = _cust_town;
                                                _invWarraDetail.Irsm_cust_vat_no = _cust_vat_no;
                                                _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                                                _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                                _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                                                _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                                                _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                                                _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                                                _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                                                _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                                                _invWarraDetail.Irsm_invoice_dt = _invoice_dt.Date;//DateTime.MinValue;
                                                _invWarraDetail.Irsm_invoice_no = _invoiceno;
                                                _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                                                _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                                                _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                                                _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                                                _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                                                _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                                                _invWarraDetail.Irsm_loc_desc = null;
                                                _invWarraDetail.Irsm_mfc = null;
                                                _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                                _invWarraDetail.Irsm_mod_when = DateTime.Now;
                                                _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                                                _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                                                _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                                                _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                                                _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                                                _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                                                _invWarraDetail.Irsm_ser_2 = string.IsNullOrEmpty(sers.Tus_ser_2) ? "N/A" : sers.Tus_ser_2;
                                                _invWarraDetail.Irsm_ser_3 = string.IsNullOrEmpty(sers.Tus_ser_3) ? "N/A" : sers.Tus_ser_3;
                                                _invWarraDetail.Irsm_ser_4 = string.IsNullOrEmpty(sers.Tus_ser_4) ? "N/A" : sers.Tus_ser_4;
                                                _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                                                _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                                                _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                                                _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                                                if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                                                {
                                                    _invWarraDetail.Irsm_unit_cost = batch.Inb_unit_cost;
                                                    _invWarraDetail.Irsm_unit_price = batch.Inb_unit_cost;
                                                }
                                                _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                                                _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                                                _invWarraDetail.Irsm_warr_rem = sers.Tus_Warranty_Remark;
                                                _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                                _invWarraDetail.Irsm_warr_stus = null;


                                                //Sahan 24 Feb 2016
                                                _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                                                _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                                                _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                                                _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                                                _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                                                _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;


                                                // decimal allow none-serialized items are not saved in serial related tables
                                                //if (sers.Tus_ser_id != 0)
                                                //{
                                                #region avg cost update by lakshan 12Jul2017
                                                string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;
                                                if (_cstMeth == "AVG")
                                                {
                                                    INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeader.Ith_loc);
                                                    if (_avgCst != null)
                                                    {
                                                        _invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                                                        invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                                        _invWarraDetail.Irsm_unit_cost = _avgCst.Iac_avg_cost;
                                                        invSerials.Ins_unit_cost = _avgCst.Iac_avg_cost;
                                                    }
                                                    else
                                                    {
                                                        _inventoryDAL.Check_ava_cost_available(0);
                                                    }
                                                }
                                                #endregion
                                                bool _isUpdWarrSts = false;
                                                if (_inventoryMovementHeader.Ith_doc_tp == "DO")
                                                {
                                                    _invWarraDetail.Irsm_warr_stus = "Y";
                                                    _isUpdWarrSts = true;
                                                }
                                                if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_direct == false && _inventoryMovementHeader.Warr_sts_update == false)
                                                {
                                                    _invWarraDetail.Irsm_warr_stus = "N";
                                                    _isUpdWarrSts = true;
                                                }
                                                if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_direct == false && _inventoryMovementHeader.Warr_sts_update == true)
                                                {
                                                    _invWarraDetail.Irsm_warr_stus = "Y";
                                                    _isUpdWarrSts = true;
                                                }
                                                #region warranty Data update
                                                if (_inventoryMovementHeader.Ith_direct == false)
                                                {
                                                    if (_inventoryMovementHeader.Ith_doc_tp == "AOD" || _inventoryMovementHeader.Ith_doc_tp == "ADJ")
                                                    {
                                                        if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
                                                        {
                                                            _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
                                                        }
                                                        if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
                                                        {
                                                            _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
                                                        }
                                                        if (_invWarraDetail.Irsm_warr_period == 0)
                                                        {
                                                            //MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                                            //if (_warPer != null)
                                                            //{
                                                            //    if (_warPer.Mwp_val != 0)
                                                            //    {
                                                            //        _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
                                                            //        invSerials.Ins_warr_period = _warPer.Mwp_val;
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
                                                            //        invSerials.Ins_warr_period = 12;
                                                            //    }
                                                            //}
                                                        }
                                                    }
                                                }
                                                #endregion
                                                if (_isUpdWarrSts)
                                                {
                                                    #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                                                    _inventoryDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                                                }
                                                _inventoryDAL.SaveInventorySerial(invSerials, 1);
                                                #endregion

                                                //}
                                                #endregion
                                            }
                                            i++;
                                        }

                                    }
                                }
                                else if (msitem.Mi_is_ser1 == 1)
                                {
                                    var _filte = PickSerials.Where(x => x.Tus_itm_cd == batch.Inb_itm_cd && x.Tus_itm_stus == batch.Inb_itm_stus && x.pickserial == false).ToList();
                                    foreach (ReptPickSerials sers in _filte)
                                    {
                                        sers.pickserial = true;
                                        #region serial save
                                        InventorySerialN invSerials = new InventorySerialN();
                                        invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                                        invSerials.Ins_itm_line = batch.Inb_itm_line;//invBatch.Inb_itm_line;
                                        invSerials.Ins_batch_line = batch.Inb_batch_line;
                                        //invSerials.Ins_batch_line = _inventoryDAL.GetInventoryBatchLine(batch);
                                        invSerials.Ins_direct = false; // false = Out, Outward
                                        invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                                        invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                                        invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                                        invSerials.Ins_bin = sers.Tus_bin;
                                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                                        invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                                        invSerials.Ins_unit_cost = batch.Inb_unit_cost;
                                        invSerials.Ins_unit_price = batch.Inb_unit_price;
                                        sers.Tus_unit_cost = batch.Inb_unit_cost;
                                        sers.Tus_unit_price = batch.Inb_unit_price;
                                        if (sers.Tus_ser_id == 0)
                                        {
                                            sers.Tus_ser_id = _inventoryDAL.GetSerialID();//GetSerialID();
                                        }
                                        sers.Tus_warr_no = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + sers.Tus_ser_id.ToString();
                                        invSerials.Ins_ser_id = sers.Tus_ser_id;
                                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                                        //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                                        //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                                        //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                                        //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                                        invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                                        invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                                        invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                                        invSerials.Ins_cross_serline = sers.Tus_ser_line;
                                        invSerials.Ins_issue_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        invSerials.Ins_ageloc = sers.Tus_ageloc;
                                        invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt;
                                        invSerials.Ins_isownmrn = sers.Tus_isownmrn;
                                        serLine = _inventoryDAL.GetInventorySerLine(invSerials);
                                        if (serLine == 0)
                                        {
                                            serLine = 1;
                                        }
                                        else
                                        {
                                            serLine += 1;
                                        }

                                        invSerials.Ins_ser_line = serLine;
                                        invSerials.Ins_cross_doc_no = sers.Tus_doc_no;
                                        #region Make grn Data 15 Jan 2017 add by lakshan
                                        if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                                        {
                                            InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = batch.Inb_base_doc_no, Ith_com = batch.Inb_com }).FirstOrDefault();
                                            if (_invHdr != null)
                                            {
                                                invSerials.Ins_orig_grncom = _invHdr.Ith_com;
                                                invSerials.Ins_orig_grnno = _invHdr.Ith_doc_no;
                                                invSerials.Ins_orig_grndt = _invHdr.Ith_doc_date;
                                                invSerials.Ins_orig_supp = _invHdr.Ith_bus_entity;
                                                invSerials.Ins_exist_grncom = _invHdr.Ith_com;
                                                invSerials.Ins_exist_grnno = _invHdr.Ith_doc_no;
                                                invSerials.Ins_exist_supp = _invHdr.Ith_bus_entity;
                                                invSerials.Ins_exist_grndt = _invHdr.Ith_doc_date;
                                            }
                                        }
                                        #endregion
                                        // _inventoryDAL.SaveInventorySerial(invSerials, 0);
                                        //_inventoryDAL.SaveInventorySerialRef(invSerials, 0);
                                        //Add Prabhath on 19/04/2012
                                        #region warranty inr_sermst
                                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                                        _invWarraDetail.Irsm_acc_no = _accno;
                                        _invWarraDetail.Irsm_anal_1 = null;
                                        _invWarraDetail.Irsm_anal_2 = null;
                                        _invWarraDetail.Irsm_anal_3 = null;
                                        _invWarraDetail.Irsm_anal_4 = null;
                                        _invWarraDetail.Irsm_anal_5 = null;
                                        _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                                        _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                                        _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                                        _invWarraDetail.Irsm_cust_addr = _cust_addr;
                                        _invWarraDetail.Irsm_cust_cd = _cust_cd;
                                        _invWarraDetail.Irsm_cust_del_addr = _cust_del_addr;
                                        _invWarraDetail.Irsm_cust_email = _cust_email;
                                        _invWarraDetail.Irsm_cust_fax = _cust_fax;
                                        _invWarraDetail.Irsm_cust_mobile = _cust_mobile;
                                        _invWarraDetail.Irsm_cust_name = _cust_name;
                                        _invWarraDetail.Irsm_cust_prefix = _cust_prefix;
                                        _invWarraDetail.Irsm_cust_tel = _cust_tel;
                                        _invWarraDetail.Irsm_cust_town = _cust_town;
                                        _invWarraDetail.Irsm_cust_vat_no = _cust_vat_no;
                                        _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                                        _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                                        _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                                        _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                                        _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                                        _invWarraDetail.Irsm_invoice_dt = _invoice_dt.Date;//DateTime.MinValue;
                                        _invWarraDetail.Irsm_invoice_no = _invoiceno;
                                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                                        _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                                        _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                                        _invWarraDetail.Irsm_loc_desc = null;
                                        _invWarraDetail.Irsm_mfc = null;
                                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                                        _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                                        _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                                        _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                                        _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                                        _invWarraDetail.Irsm_ser_2 = string.IsNullOrEmpty(sers.Tus_ser_2) ? "N/A" : sers.Tus_ser_2;
                                        _invWarraDetail.Irsm_ser_3 = string.IsNullOrEmpty(sers.Tus_ser_3) ? "N/A" : sers.Tus_ser_3;
                                        _invWarraDetail.Irsm_ser_4 = string.IsNullOrEmpty(sers.Tus_ser_4) ? "N/A" : sers.Tus_ser_4;
                                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                                        _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                                        _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                                        _invWarraDetail.Irsm_warr_rem = sers.Tus_Warranty_Remark;
                                        _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                        _invWarraDetail.Irsm_warr_stus = null;

                                        //Sahan 24 Feb 2016
                                        _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                                        _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                                        _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                                        _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                                        _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                                        _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;


                                        // decimal allow none-serialized items are not saved in serial related tables
                                        //if (sers.Tus_ser_id != 0)
                                        //{
                                        #region avg cost update by lakshan 12Jul2017
                                        string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;
                                        if (_cstMeth == "AVG")
                                        {
                                            INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeader.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeader.Ith_loc);
                                            if (_avgCst != null)
                                            {
                                                _invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                                                invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                                _invWarraDetail.Irsm_unit_cost = _avgCst.Iac_avg_cost;
                                                invSerials.Ins_unit_cost = _avgCst.Iac_avg_cost;
                                            }
                                            else
                                            {
                                                _inventoryDAL.Check_ava_cost_available(0);
                                            }
                                        }
                                        #endregion
                                        bool _isUpdWarrSts = false;
                                        if (_inventoryMovementHeader.Ith_doc_tp == "DO")
                                        {
                                            _invWarraDetail.Irsm_warr_stus = "Y";
                                            _isUpdWarrSts = true;
                                        }
                                        if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_direct == false && _inventoryMovementHeader.Warr_sts_update == false)
                                        {
                                            _invWarraDetail.Irsm_warr_stus = "N";
                                            _isUpdWarrSts = true;
                                        }
                                        if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_direct == false && _inventoryMovementHeader.Warr_sts_update == true)
                                        {
                                            _invWarraDetail.Irsm_warr_stus = "Y";
                                            _isUpdWarrSts = true;
                                        }
                                        if (_isUpdWarrSts)
                                        {
                                            #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                                            _inventoryDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                                            #endregion
                                        }
                                        else
                                        {
                                            _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                                        }
                                        _inventoryDAL.SaveInventorySerial(invSerials, 1);
                                        #endregion

                                        //}
                                        #endregion
                                    }

                                }
                            }
                        }
                        //}
                        //else
                        //{
                        //    foreach (InventoryBatchN batch in _batch)
                        //    {
                        //        MasterItem msitem = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, batch.Inb_itm_cd);
                        //        if (msitem != null)
                        //        {
                        //            if (msitem.Mi_is_ser1 == 1)
                        //            {
                        //                var _filte = PickSerials.Where(x => x.Tus_itm_cd == batch.Inb_itm_cd && x.Tus_itm_stus == batch.Inb_itm_stus && x.pickserial == false).ToList();
                        //                foreach (ReptPickSerials sers in _filte)
                        //                {
                        //                    sers.pickserial = true;
                        //                    #region serial save
                        //                    InventorySerialN invSerials = new InventorySerialN();
                        //                    invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        //                    invSerials.Ins_itm_line = batch.Inb_itm_line;//invBatch.Inb_itm_line;
                        //                    invSerials.Ins_batch_line = batch.Inb_batch_line;
                        //                    invSerials.Ins_direct = false; // false = Out, Outward
                        //                    invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                        //                    invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        //                    invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                        //                    invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                        //                    invSerials.Ins_bin = sers.Tus_bin;
                        //                    invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        //                    invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                        //                    invSerials.Ins_unit_cost = batch.Inb_unit_cost;
                        //                    invSerials.Ins_unit_price = batch.Inb_unit_price;
                        //                    sers.Tus_unit_cost = batch.Inb_unit_cost;
                        //                    sers.Tus_unit_price = batch.Inb_unit_price;
                        //                    if (sers.Tus_ser_id == 0)
                        //                    {
                        //                        sers.Tus_ser_id = _inventoryDAL.GetSerialID();//GetSerialID();
                        //                    }
                        //                    sers.Tus_warr_no = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + sers.Tus_ser_id.ToString();
                        //                    invSerials.Ins_ser_id = sers.Tus_ser_id;
                        //                    invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        //                    invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        //                    invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        //                    invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        //                    invSerials.Ins_warr_no = sers.Tus_warr_no;
                        //                    invSerials.Ins_warr_period = sers.Tus_warr_period;
                        //                    invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        //                    invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        //                    invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                        //                    invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        //                    invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        //                    invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        //                    invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                        //                    invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        //                    //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                        //                    //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                        //                    //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                        //                    //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                        //                    //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        //                    invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                        //                    invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                        //                    invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                        //                    invSerials.Ins_cross_serline = sers.Tus_ser_line;
                        //                    invSerials.Ins_issue_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        //                    invSerials.Ins_ageloc = sers.Tus_ageloc;
                        //                    invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt;
                        //                    invSerials.Ins_isownmrn = sers.Tus_isownmrn;
                        //                    serLine = _inventoryDAL.GetInventorySerLine(invSerials);
                        //                    if (serLine == 0)
                        //                    {
                        //                        serLine = 1;
                        //                    }
                        //                    else
                        //                    {
                        //                        serLine += 1;
                        //                    }

                        //                    invSerials.Ins_ser_line = serLine;
                        //                    invSerials.Ins_cross_doc_no = sers.Tus_doc_no;

                        //                    // _inventoryDAL.SaveInventorySerial(invSerials, 0);
                        //                    //_inventoryDAL.SaveInventorySerialRef(invSerials, 0);
                        //                    //Add Prabhath on 19/04/2012
                        //                    #region warranty inr_sermst
                        //                    InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        //                    _invWarraDetail.Irsm_acc_no = _accno;
                        //                    _invWarraDetail.Irsm_anal_1 = null;
                        //                    _invWarraDetail.Irsm_anal_2 = null;
                        //                    _invWarraDetail.Irsm_anal_3 = null;
                        //                    _invWarraDetail.Irsm_anal_4 = null;
                        //                    _invWarraDetail.Irsm_anal_5 = null;
                        //                    _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                        //                    _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                        //                    _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        //                    _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        //                    _invWarraDetail.Irsm_cust_addr = _cust_addr;
                        //                    _invWarraDetail.Irsm_cust_cd = _cust_cd;
                        //                    _invWarraDetail.Irsm_cust_del_addr = _cust_del_addr;
                        //                    _invWarraDetail.Irsm_cust_email = _cust_email;
                        //                    _invWarraDetail.Irsm_cust_fax = _cust_fax;
                        //                    _invWarraDetail.Irsm_cust_mobile = _cust_mobile;
                        //                    _invWarraDetail.Irsm_cust_name = _cust_name;
                        //                    _invWarraDetail.Irsm_cust_prefix = _cust_prefix;
                        //                    _invWarraDetail.Irsm_cust_tel = _cust_tel;
                        //                    _invWarraDetail.Irsm_cust_town = _cust_town;
                        //                    _invWarraDetail.Irsm_cust_vat_no = _cust_vat_no;
                        //                    _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                        //                    _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        //                    _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                        //                    _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                        //                    _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                        //                    _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                        //                    _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                        //                    _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                        //                    _invWarraDetail.Irsm_invoice_dt = _invoice_dt.Date;//DateTime.MinValue;
                        //                    _invWarraDetail.Irsm_invoice_no = _invoiceno;
                        //                    _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        //                    _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        //                    _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        //                    _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        //                    _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                        //                    _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                        //                    _invWarraDetail.Irsm_loc_desc = null;
                        //                    _invWarraDetail.Irsm_mfc = null;
                        //                    _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                        //                    _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        //                    _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                        //                    _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                        //                    _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                        //                    _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                        //                    _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                        //                    _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        //                    _invWarraDetail.Irsm_ser_2 = string.IsNullOrEmpty(sers.Tus_ser_2) ? "N/A" : sers.Tus_ser_2;
                        //                    _invWarraDetail.Irsm_ser_3 = string.IsNullOrEmpty(sers.Tus_ser_3) ? "N/A" : sers.Tus_ser_3;
                        //                    _invWarraDetail.Irsm_ser_4 = string.IsNullOrEmpty(sers.Tus_ser_4) ? "N/A" : sers.Tus_ser_4;
                        //                    _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        //                    _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                        //                    _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        //                    _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        //                    _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                        //                    _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                        //                    _invWarraDetail.Irsm_warr_rem = sers.Tus_Warranty_Remark;
                        //                    _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        //                    _invWarraDetail.Irsm_warr_stus = null;

                        //                    //Sahan 24 Feb 2016
                        //                    _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                        //                    _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                        //                    _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                        //                    _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                        //                    _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                        //                    _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;


                        //                    // decimal allow none-serialized items are not saved in serial related tables
                        //                    //if (sers.Tus_ser_id != 0)
                        //                    //{
                        //                    _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                        //                    _inventoryDAL.SaveInventorySerial(invSerials, 1);
                        //                    #endregion

                        //                    //}
                        //                    #endregion
                        //                }

                        //            }
                        //        }
                        //    }
                        //}
                        #endregion
                    }
                }
            }
            #endregion

            //kapila 8/3/2016
            //string _invNo="";
            //if (_inventoryMovementHeader.Ith_doc_tp == "DO" || (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && _inventoryMovementHeader.Ith_cate_tp == "EX" && _inventoryMovementHeader.Ith_direct==false))
            //{
            //    _invNo = _inventoryMovementHeader.Ith_oth_docno;
            //    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ")
            //    {
            //        //get original invoice number
            //       DataTable _dt= _inventoryDAL.getReqHdrByReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_sub_docno);
            //       if (_dt.Rows.Count > 0)
            //           _invNo = _dt.Rows[0]["grah_fuc_cd"].ToString();
            //    }
            //    UpdateTempWaraUpload(PickSerials, _inventoryMovementHeader.Ith_doc_no, ".", _inventoryMovementHeader.Ith_doc_date, _inventoryMovementHeader.Ith_doc_date, _invNo);
            //}

            //Added by Prabhath on 13/12/2013 ----- ****** Start *******

            var _reserveItem = from _pickSerials in PickSerials where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no && _pickSerials.Tus_com == _pickSerials.Tus_com && _pickSerials.Tus_loc == _pickSerials.Tus_loc && _pickSerials.Tus_resqty > 0 group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };
            if (_reserveItem != null && _reserveItem.Count() > 0)
                foreach (var _one in _reserveItem)
                {
                    _inventoryDAL.UpdateLocationResRevers(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _one.itemcode, _one.itemstatus, _inventoryMovementHeader.Ith_cre_by, _one.itemqty);
                }
            //----- ****** End *******

            // Update location inventory           
                var _tblocainv =
                  from _pickSerials in PickSerials
                  where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no && _pickSerials.Tus_com == _pickSerials.Tus_com && _pickSerials.Tus_loc == _pickSerials.Tus_loc
                  group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                  select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };
                foreach (var locaitems in _tblocainv)
                {
                    InventoryLocation invLocation = new InventoryLocation();
                    invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                    invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                    invLocation.Inl_itm_cd = locaitems.itemcode;
                    invLocation.Inl_itm_stus = locaitems.itemstatus;
                    invLocation.Inl_qty = locaitems.itemqty;
                    invLocation.Inl_free_qty = locaitems.itemqty;
                    invLocation.Inl_res_qty = 0;
                    invLocation.Inl_isu_qty = locaitems.itemqty;
                    invLocation.Inl_bl_qty = 0;
                    invLocation.Inl_eo_qty = 0;
                    invLocation.Inl_ro_qty = 0;
                    invLocation.Inl_cre_by = null;
                   // try
                    // {
                        _inventoryDAL.UpdateInventoryLocation(invLocation, 0);
                  //   }
                  ////  catch (Exception ex)
                    // {

                        //   if (ex.Message.Contains("EMS.CHK_INLFREEQTY)"))
                       // {
                           //   effect = -2;
                           //   return -2;
                       // }
                   //}
                   
            }
            if (reptSeqNo != 0 && _withConn == false)
            {
                _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            }
            #region avg cost git maintain 14Jul2017 Lakshan
            if (_inventoryMovementHeader.Ith_doc_tp == "AOD" && !_inventoryMovementHeader.Ith_direct && !_inventoryMovementHeader.Tmp_avg_cost_calc)
            {
                decimal _avgCst = 0;
                decimal _noOfUnit = 0;
                INR_AVG_COST_GIT _tmpInrAvgCst = new INR_AVG_COST_GIT();
                INR_AVG_COST_GIT _saveAvgCst = new INR_AVG_COST_GIT();
                INR_AVG_COST_GIT _inrAvgCstAva = new INR_AVG_COST_GIT();
                MasterLocation _mstLocIn = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                List<InventoryBatchN> _tmpInvBatList = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                List<INR_AVG_COST_GIT> _listAvgData = new List<INR_AVG_COST_GIT>();
                INR_AVG_COST_GIT _avgData = new INR_AVG_COST_GIT();
                foreach (var _pBat in _tmpInvBatList)
                {
                    _avgData = new INR_AVG_COST_GIT();
                    _avgData.Iacg_itm_cd = _pBat.Inb_itm_cd;
                    _avgData.Iacg_itm_stus = _pBat.Inb_itm_stus;
                    _avgData.Iacg_avg_qty = _pBat.Inb_qty;
                    _avgData.Iacg_avg_cost = _pBat.Inb_unit_cost;
                    _avgData.Tmp_mult_cost = _pBat.Inb_qty * _pBat.Inb_unit_cost;
                    _listAvgData.Add(_avgData);
                }
                var _invBatList = _listAvgData.GroupBy(x => new { x.Iacg_itm_cd, x.Iacg_itm_stus }).Select(group =>
                         new { Peo = group.Key, docQty = group.Sum(o => o.Iacg_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                foreach (var item in _invBatList)
                {
                    //_tmpInrAvgCst = new INR_AVG_COST_GIT();
                    //_tmpInrAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
                    //_tmpInrAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
                    //_tmpInrAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                    //_tmpInrAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
                    //_inrAvgCstAva = _inventoryDAL.GET_INR_AVG_COST_GIT_DATA(_tmpInrAvgCst);
                    //if (_inrAvgCstAva != null)
                    //{
                    //    _avgCst = ((_inrAvgCstAva.Iacg_avg_cost * _inrAvgCstAva.Iacg_avg_qty) + item.docCst) / (_inrAvgCstAva.Iacg_avg_qty + item.docQty);
                    //    _noOfUnit = _inrAvgCstAva.Iacg_avg_qty + item.docQty;
                    //}
                    //else
                    //{
                    //    _avgCst = item.docCst / item.docQty;
                    //    _noOfUnit = item.docQty;
                    //}
                    _avgCst = item.docCst;
                    _noOfUnit = item.docQty;
                    _saveAvgCst = new INR_AVG_COST_GIT();
                    _saveAvgCst.Iacg_com = _inventoryMovementHeader.Ith_oth_com;
                    _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Ith_oth_loc;
                    _saveAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                    _saveAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
                    _saveAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
                    _saveAvgCst.Iacg_avg_dt = DateTime.Now;
                    _saveAvgCst.Iacg_avg_cost = Math.Round(_avgCst, 4);
                    _saveAvgCst.Iacg_avg_qty = _noOfUnit;
                    _saveAvgCst.Iacg_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    _saveAvgCst.Iacg_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                    _saveAvgCst.Iacg_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    _saveAvgCst.Iacg_mod_dt = _inventoryMovementHeader.Ith_mod_when;
                    _saveAvgCst.Iacg_out_qty = item.docQty;
                    _saveAvgCst.Iacg_mod_doc = _inventoryMovementHeader.Ith_seq_no.ToString();
                    _saveAvgCst.Iacg_direction = false;
                    _inventoryDAL.UpdateInrCostDataGit(_saveAvgCst);
                }
            }
            #endregion
            effect = 1;
            return effect;
        }

        #endregion Inventory Outward


        #region Inventory item status change process

        public Int16 InventoryStatusChange(InventoryHeader _inventoryMovementHeaderMinus, InventoryHeader _inventoryMovementHeaderPlus, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumberMinus, MasterAutoNumber _masterAutoNumberPlus, out string _minusDocNo, out string _plusDocNo)
        {
            Int16 effect = 0;
            try
            {
                //List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
                //PickSerials = _reptPickSerials;

                //using (TransactionScope tr = new TransactionScope())
                //{
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                InventoryStatusChangeCommon(_inventoryMovementHeaderMinus, _inventoryMovementHeaderPlus, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumberMinus, _masterAutoNumberPlus, out _minusDocNo, out _plusDocNo);

                //_inventoryRepDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();

                //tr.Complete();
                //}
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _minusDocNo = "ERROR : " + err.Message.ToString();
                _plusDocNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return effect;
        }

        public string InventoryStatusChangeEntry(InventoryHeader _inventoryMovementHeaderMinus, InventoryHeader _inventoryMovementHeaderPlus, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumberMinus, MasterAutoNumber _masterAutoNumberPlus, List<InventoryRequestItem> _reqItems, out string _minusDocNo, out string _plusDocNo, bool isBinToBinTransfer = false, bool isDeValProcess = false,bool checkValid=false)
        {
            int effect = 0;
            string _errorList = string.Empty;

            //List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            //PickSerials = _reptPickSerials;

            try
            {
                //using (TransactionScope tr = new TransactionScope())
                //{
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                string _company = _inventoryMovementHeaderMinus.Ith_com;
                string _location = _inventoryMovementHeaderMinus.Ith_loc;
                string _bin = _inventoryMovementHeaderMinus.Ith_git_close_doc;
                string _user = _inventoryMovementHeaderMinus.Ith_cre_by;
                int _seqNo = Convert.ToInt32(_inventoryMovementHeaderMinus.Ith_anal_6);

                bool availability = true;

                List<ReptPickSerials> _reMakeSerialList = new List<ReptPickSerials>();

                if (!isBinToBinTransfer)
                {
                    #region Auto Pick Non-serialized items
                    if (_reqItems.Count > 0)
                    {
                        foreach (InventoryRequestItem _ritm in _reqItems)
                        {

                            MasterItem _itm = new MasterItem();
                            _itm = _inventoryDAL.GetItem(_company, _ritm.Itri_itm_cd);

                            if (_itm.Mi_is_ser1 == 0)
                            {
                                List<ReptPickSerials> _chk;
                                _chk = _inventoryDAL.GetNonSerializedItemRandomly(_company, _location, _ritm.Itri_itm_cd, _ritm.Itri_itm_stus, _ritm.Itri_app_qty - _ritm.Itri_qty);
                                if (_chk != null)
                                {
                                    if (_chk.Count > 0)
                                    {
                                        decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _ritm.Itri_itm_cd && i.Tus_itm_stus == _ritm.Itri_itm_stus select i.Tus_qty).Sum();
                                        if (_statuswiseqty < _ritm.Itri_app_qty - _ritm.Itri_qty) availability = false;
                                    }
                                    else
                                    {
                                        availability = false;
                                        if (string.IsNullOrEmpty(_errorList)) _errorList = _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus; else _errorList += "," + _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus;
                                    }
                                }
                                else
                                {
                                    availability = false;
                                    if (string.IsNullOrEmpty(_errorList)) _errorList = _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus; else _errorList += "," + _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus;
                                }

                                if (availability)
                                {
                                    foreach (ReptPickSerials _pick in _chk)
                                    {
                                        ReptPickSerials _reptPickSerial = _inventoryDAL.Get_all_details_on_serialID(_company, _location, _bin, _ritm.Itri_itm_cd, _pick.Tus_ser_id);
                                        //Update_inrser_INS_AVAILABLE
                                        Boolean update_inr_ser = _inventoryDAL.Update_serialID_INS_AVAILABLE(_company, _location, _ritm.Itri_itm_cd, _pick.Tus_ser_id, -1);
                                        _reptPickSerial.Tus_cre_by = _user;
                                        _reptPickSerial.Tus_usrseq_no = _seqNo;
                                        _reptPickSerial.Tus_cre_by = _user;
                                        _reptPickSerial.Tus_base_doc_no = _seqNo.ToString();
                                        _reptPickSerial.Tus_base_itm_line = _ritm.Itri_line_no;
                                        _reptPickSerial.Tus_itm_desc = _itm.Mi_longdesc;
                                        _reptPickSerial.Tus_itm_model = _itm.Mi_model;
                                        _reptPickSerial.Tus_itm_brand = _itm.Mi_brand;
                                        _reptPickSerial.Tus_new_status = _ritm.Itri_note;
                                        _reptPickSerial.Tus_new_remarks = "N/A";
                                        _reptPickSerial.Tus_com = _inventoryMovementHeaderMinus.Ith_com;
                                        //enter row into TEMP_PICK_SER
                                        _inventoryRepDAL.SavePickedItemSerials(_reptPickSerial);
                                        _reMakeSerialList.Add(_reptPickSerial);
                                    }
                                }
                            }
                            if (_itm.Mi_is_ser1 == -1)
                            {
                                //commented by akila 2017/10/03 - Serial list will be added from client side. 
                                //When already there is an serial line, out document show duplicate records because of bellow change.

                                /*ReptPickSerials _reptPickSerial = new ReptPickSerials();
                                _reptPickSerial.Tus_com = _company;
                                _reptPickSerial.Tus_loc = _location;
                                _reptPickSerial.Tus_bin = _bin;
                                _reptPickSerial.Tus_cre_by = _user;
                                _reptPickSerial.Tus_usrseq_no = _seqNo;
                                _reptPickSerial.Tus_cre_by = _user;
                                _reptPickSerial.Tus_base_doc_no = _seqNo.ToString();
                                _reptPickSerial.Tus_base_itm_line = _ritm.Itri_line_no;
                                _reptPickSerial.Tus_itm_desc = _itm.Mi_longdesc;
                                _reptPickSerial.Tus_itm_model = _itm.Mi_model;
                                _reptPickSerial.Tus_itm_brand = _itm.Mi_brand;
                                _reptPickSerial.Tus_itm_cd = _ritm.Itri_itm_cd;
                                _reptPickSerial.Tus_itm_stus = _ritm.Itri_itm_stus;
                                _reptPickSerial.Tus_new_status = _ritm.Itri_note;
                                _reptPickSerial.Tus_new_remarks = "N/A";
                                _reptPickSerial.Tus_ser_id = 0;
                                _reptPickSerial.Tus_serial_id = "0";
                                _reptPickSerial.Tus_ser_1 = "N/A";
                                _reptPickSerial.Tus_qty = _ritm.Itri_app_qty - _ritm.Itri_qty;

                                //_inventoryRepDAL.SavePickedItemSerials(_reptPickSerial);
                                _reMakeSerialList.Add(_reptPickSerial);*/
                            }
                        }
                    }

                    if (_reptPickSerials == null)
                    {
                        _reptPickSerials = _reMakeSerialList;
                    }
                    else
                    {
                        foreach (ReptPickSerials _pick in _reMakeSerialList)
                        {
                            _reptPickSerials.Add(_pick);
                        }
                    }
                    #endregion Auto Pick Non-serialized items
                }
                else
                {
                    //added by nuwan for bin to bin transfer
                    if (checkValid == false)
                    {
                        Int32 i = 1;

                        #region Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014
                        var _tbnonsersFIFO =
                              (from _pickSerials in _reptPickSerials
                               where _pickSerials.Tus_ser_id == 0
                               group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_new_status } into batch
                               select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, itemNewstatus = batch.Key.Tus_new_status, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);//Order by Prabhath on 21/02/2014
                        foreach (var non_sers in _tbnonsersFIFO)
                        {
                            MasterItem _mstItm = _inventoryDAL.GetItem(_inventoryMovementHeaderMinus.Ith_com, non_sers.itemcode);
                            if (_mstItm.Mi_is_ser1 == 0)
                            {
                                int _fifoQty = Convert.ToInt32(non_sers.itemqty);
                                List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();
                                if (!string.IsNullOrEmpty(non_sers.jobno))
                                {
                                    _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, non_sers.jobno, Convert.ToInt32(non_sers.jobline));
                                    if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                                    {
                                        _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                    }
                                }
                                else
                                {
                                    _nonSerialsFifo = _inventoryDAL.GET_SERIAL_FOR_ITM_WITH_BIN(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, non_sers.bincode);
                                }

                                if (_reMakeSerialList.Count > 0)
                                {
                                    foreach (ReptPickSerials item in _reMakeSerialList)
                                    {
                                        _nonSerialsFifo.RemoveAll(x => x.Tus_ser_id == item.Tus_ser_id);
                                    }
                                }

                                var list = (from t in _nonSerialsFifo
                                            orderby t.Tus_doc_dt, t.Tus_seq_no, t.Tus_ser_id
                                            select t).Take(_fifoQty).ToList();
                                foreach (var _oneList in list)
                                {
                                    _oneList.Tus_base_doc_no = non_sers.refdoc;
                                    _oneList.Tus_base_itm_line = non_sers.refdocline;

                                    _oneList.Tus_new_status = non_sers.itemNewstatus;
                                }

                                //foreach (var _oneList in list)
                                //{
                                //    _oneList.Tus_base_doc_no = non_sers.refdoc;
                                //    _oneList.Tus_base_itm_line = i;//non_sers.refdocline;
                                //    i++;
                                //}


                                _reMakeSerialList.AddRange(list);
                                //_reMakeSerialList.Remove(_reMakeSerialList.Find(x => x.Tus_base_doc_no == non_sers.refdoc && x.Tus_base_itm_line == non_sers.refdocline && x.Tus_itm_cd == non_sers.itemcode && x.Tus_itm_stus == non_sers.itemstatus));
                            }
                        }

                        _reMakeSerialList.AddRange(_reptPickSerials.FindAll(x => x.Tus_ser_id != 0));

                        #endregion Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014

                        if (_reMakeSerialList != null && _reMakeSerialList.Count > 0)
                        {
                            foreach (ReptPickSerials item in _reMakeSerialList)
                            {
                                ReptPickSerials oOldSer = _reptPickSerials.Find(x => x.Tus_itm_cd == item.Tus_itm_cd && x.Tus_itm_stus == item.Tus_itm_stus);
                                if (oOldSer != null)
                                {
                                    //item.Tus_new_status = oOldSer.Tus_new_status;
                                    item.Tus_bin_to = oOldSer.Tus_bin_to;
                                }
                            }
                        }
                        if (_reMakeSerialList == null || _reMakeSerialList.Count == 0)
                        {
                            effect = -1;
                            _minusDocNo = "Details not found in the inventory";
                            _plusDocNo = "Details not found in the inventory";
                            _errorList = "Details not found in the inventory";
                            return _errorList;
                        }

                        _reptPickSerials = _reMakeSerialList;
                    }
                    else
                    {
                        if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                        {
                            foreach (ReptPickSerials item in _reptPickSerials)
                            {
                                ReptPickSerials oOldSer = _reptPickSerials.Find(x => x.Tus_itm_cd == item.Tus_itm_cd && x.Tus_itm_stus == item.Tus_itm_stus);
                                if (oOldSer != null)
                                {
                                    //item.Tus_new_status = oOldSer.Tus_new_status;
                                    item.Tus_bin_to = oOldSer.Tus_bin_to;
                                }
                            }
                        }
                    }
                }

                Int32 eff= InventoryStatusChangeCommon(_inventoryMovementHeaderMinus, _inventoryMovementHeaderPlus, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumberMinus, _masterAutoNumberPlus, out _minusDocNo, out _plusDocNo, isBinToBinTransfer, isDeValProcess);

                if (eff == -1)
                {
                    //_inventoryRepDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_ScmCommonDAL.ConnectionClose();
                    _errorList = _minusDocNo;
                    effect = eff;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _ScmCommonDAL.TransactionRollback();
                }
                else
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();
                    _ScmCommonDAL.TransactionCommit();
                    //tr.Complete();
                    effect = 1;
                }
            }
            catch (Exception err)
            {
                effect = -1;
                if (err.Message.Contains("EMS.SP_UPDATE_INRLOC"))
                {
                    _minusDocNo = erroritem + " : item/Serial  reserved ! ";
                    _plusDocNo = erroritem + " : item/Serial  reserved ! ";
                    _errorList = erroritem + " : item/Serial  reserved ! ";
                }
                else
                {
                    _minusDocNo = "ERROR : " + err.Message.ToString();
                    _plusDocNo = "ERROR : " + err.Message.ToString();
                    _errorList = "ERROR : " + err.Message.ToString();
                }

                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }

            return _errorList;
        }

        public Int16 InventoryStatusChangeCommon(InventoryHeader _inventoryMovementHeaderMinus, InventoryHeader _inventoryMovementHeaderPlus, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumberMinus, MasterAutoNumber _masterAutoNumberPlus, out string _minusDocNo, out string _plusDocNo, bool isBinToBin = false, bool isDeValProcess = false)
        {
            Int16 effect = 0;
            Int32 reptSeqNo = 0;
            string _genInvDoc = "";
            string _message = string.Empty;
            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            //Added By Prabhath on 13/09/2012 (Add Chamal 15-11-2012) (Add Randima 14-09-2016)
            //------------
            _reptPickSerials.Where(y => string.IsNullOrEmpty(y.Tus_base_doc_no)).ToList().ForEach(x => x.Tus_base_doc_no = "N/A");
            _reptPickSerials.Where(y => y.Tus_base_doc_no == "N/A").ToList().ForEach(x => x.Tus_base_itm_line = 0);
            //------------
            decimal PickSerialsForCheck = _reptPickSerials.Sum(x=>x.Tus_qty);
            List<InventoryBatchN> oOutBatchList = new List<InventoryBatchN>();

            DataTable dtTempasd = DataTableExtensions.ToDataTable(_reptPickSerials);

            PickSerials = _reptPickSerials;
            string binto = "";
            if (isBinToBin)
            {
                binto = PickSerials[0].Tus_bin_to;
            }
            //Added By Prabhath on 31/10/2012
            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeaderPlus.Ith_com;
            string _documentType = _inventoryMovementHeaderPlus.Ith_doc_tp;
            bool _isAvgType = false;
            string _locType = string.Empty;
            _companycostmethod = _inventoryDAL.GetCompByCode(_inventoryMovementHeaderPlus.Ith_com).Mc_val_method;

            //using (TransactionScope tr = new TransactionScope())
            //{
            //    _inventoryRepDAL = new ReptCommonDAL();
            //    _inventoryRepDAL.ConnectionOpen();
            //    _inventoryDAL = new InventoryDAL();
            //    _inventoryDAL.ConnectionOpen();

            Int32 _docSeqNoMinus = _inventoryDAL.GetSerialID();
            Int32 _docSeqNoPlus = _inventoryDAL.GetSerialID();

            #region Fill Location Information
            DataTable dt_location = Get_location_by_code(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeaderMinus.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeaderMinus.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
                _inventoryMovementHeaderPlus.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeaderPlus.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
                _locType = (string)rw["ML_LOC_TP"]; //Location Type
            }
            #endregion Fill Location Information

            //Added By Prabhath on 31/10/2012
            if (_scm2LocCategory == "DF")
                _scmLocCategory = "DUTY FREE";
            else
                _scmLocCategory = "DUTY PAID";

            #region -ADJ Entry
            // -ADJ Entry *************************************************************************************
            _inventoryMovementHeaderMinus.Ith_seq_no = _docSeqNoMinus;
            _inventoryMovementHeaderMinus.Ith_doc_no = Convert.ToString(_inventoryMovementHeaderMinus.Ith_seq_no);
            _inventoryMovementHeaderMinus.Ith_direct = false;
            if (_inventoryMovementHeaderMinus != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeaderMinus);

            #region Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014
            var _tbnonsersFIFO =
                  (from _pickSerials in PickSerials
                   where _pickSerials.Tus_ser_id == 0
                   group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_new_status } into batch
                   select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, newstatus = batch.Key.Tus_new_status, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.bincode).OrderBy(x => x.itemcode).OrderBy(x => x.itemstatus);//Order by Prabhath on 21/02/2014
            foreach (var non_sers in _tbnonsersFIFO)
            {
                MasterItem _mstItm = _inventoryDAL.GetItem(_inventoryMovementHeaderMinus.Ith_com, non_sers.itemcode);
                if (_mstItm.Mi_is_ser1 == 0)
                {
                    int _fifoQty = Convert.ToInt32(non_sers.itemqty);
                    List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();
                    if (!string.IsNullOrEmpty(non_sers.jobno))
                    {
                        _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, non_sers.jobno, Convert.ToInt32(non_sers.jobline));
                        if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                        {
                            // modify by rukshan 14/jan/2016
                            if (_inventoryMovementHeaderMinus.Is_Suplierreturn == true)
                            {
                                _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeaderMinus.Ith_bus_entity, true);
                            }
                            else
                            {
                                _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                            }

                        }
                        else
                        {
                            foreach (var pickser in _nonSerialsFifo)
                            {
                                _inventoryDAL.UpdateReservedSerialID(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, pickser.Tus_ser_id);
                            }
                        }
                    }
                    else
                    {
                        if (_inventoryMovementHeaderMinus.Ith_doc_tp == "DO")
                        {
                            // modify by rukshan 14/jan/2016
                            if (_inventoryMovementHeaderMinus.Is_Suplierreturn == true)
                            {
                                _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeaderMinus.Ith_bus_entity, true);
                            }
                            else
                            {
                                _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                            }
                        }
                        else
                        {
                            _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, null, 0);
                            if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                            {
                                // modify by rukshan 14/jan/2016
                                if (_inventoryMovementHeaderMinus.Is_Suplierreturn == true)
                                {
                                    _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, _inventoryMovementHeaderMinus.Ith_bus_entity, true);
                                }
                                else
                                {
                                    _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                }
                            }
                            else
                            {
                                foreach (var pickser in _nonSerialsFifo)
                                {
                                    _inventoryDAL.UpdateReservedSerialID(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, pickser.Tus_ser_id);
                                }
                            }
                        }

                    }

                    var list = (from t in _nonSerialsFifo
                                orderby t.Tus_doc_dt, t.Tus_seq_no, t.Tus_ser_id
                                select t).Take(_fifoQty).ToList();
                    foreach (var _oneList in list)
                    {

                        _oneList.Tus_base_doc_no = non_sers.refdoc;
                        _oneList.Tus_base_itm_line = non_sers.refdocline;
                        _oneList.Tus_usrseq_no = non_sers.scanSeqNo;
                        _oneList.Tus_new_status = non_sers.newstatus;
                        //Rukshan 22-Jun-2016 
                        // change this becouse of Error occurred while processing. Sequence contains more than one matching

                        //Old Code
                        /* var _filter = PickSerials.SingleOrDefault(x => x.Tus_itm_cd == _oneList.Tus_itm_cd && x.Tus_itm_stus == _oneList.Tus_itm_stus);
                         if (_filter != null)
                         {
                             _oneList.Tus_resqty = _filter.Tus_resqty;
                         }*/
                        var _filter = PickSerials.Where(x => x.Tus_itm_cd == _oneList.Tus_itm_cd && x.Tus_itm_stus == _oneList.Tus_itm_stus).ToList();
                        if (_filter != null)
                        {
                            foreach (var item in _filter)
                            {
                                _oneList.Tus_resqty = item.Tus_resqty;
                                if (_oneList.Tus_warr_period == 0)
                                {
                                    _oneList.Tus_warr_period = item.Tus_warr_period;
                                    //_oneList.Tus_warr_no = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + item.Tus_ser_id.ToString();  //300816-DPS32-P01-0"

                                }

                            }


                        }

                        _oneList.Tus_warr_no = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeaderMinus.Ith_loc + "-P01-" + _oneList.Tus_ser_id.ToString();  //300816-DPS32-P01-0"

                    }
                    PickSerials.AddRange(list);
                    PickSerials.Remove(PickSerials.Find(x => x.Tus_base_doc_no == non_sers.refdoc && x.Tus_base_itm_line == non_sers.refdocline && x.Tus_itm_cd == non_sers.itemcode && x.Tus_itm_stus == non_sers.itemstatus));
                }
            }
            #endregion Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014

            // Select Serialized items and apply serialized inventory method
            var _tbsersMinus =
                  (from _pickSerials in PickSerials
                   where _pickSerials.Tus_ser_id != 0 // This is no need to feauture becoz
                   select _pickSerials).ToList().OrderBy(X => X.Tus_itm_stus).OrderBy(X => X.Tus_itm_cd);//Order by Prabhath on 21/02/2014
            
            foreach (var sers in _tbsersMinus)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = sers.Tus_bin;
                invItem.Iti_item_code = sers.Tus_itm_cd;
                invItem.Iti_item_status = sers.Tus_itm_stus;
                invItem.Iti_qty = sers.Tus_qty;
                invItem.Iti_bal_qty = sers.Tus_qty;
                invItem.Iti_year = _inventoryMovementHeaderMinus.Ith_doc_year;

                if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                {
                    itmLine += 1;
                    batchLine = 1;
                }

                InventoryBatchN invBatch = new InventoryBatchN();
                invBatch.Inb_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                invBatch.Inb_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                invBatch.Inb_com = _inventoryMovementHeaderMinus.Ith_com;
                invBatch.Inb_loc = _inventoryMovementHeaderMinus.Ith_loc;

                invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                if (invBatch.Inb_itm_line == 0)
                {
                    invBatch.Inb_itm_line = itmLine;
                }

                invBatch.Inb_batch_line = batchLine;
                invBatch.Inb_batch_no = string.Empty;
                invBatch.Inb_bin = sers.Tus_bin;
                invBatch.Inb_itm_cd = sers.Tus_itm_cd;
                invBatch.Inb_itm_stus = sers.Tus_itm_stus;
                invBatch.Inb_qty = sers.Tus_qty;
                invBatch.Inb_unit_cost = sers.Tus_unit_cost;
                invBatch.Itb_bal_qty1 = sers.Tus_qty;
                invBatch.Itb_bal_qty2 = sers.Tus_qty;
                invBatch.Inb_unit_price = sers.Tus_unit_price;
                invBatch.Inb_base_doc_no = sers.Tus_doc_no;                     // Impotant : When the outward entry, this is the inward doc no
                invBatch.Inb_base_ref_no = sers.Tus_base_doc_no;                // Chamal 02/10/2012
                invBatch.Inb_doc_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                invBatch.Inb_base_itmcd = sers.Tus_itm_cd;                      // Impotant : When the outward entry, this is the inward item code
                invBatch.Inb_base_itmline = sers.Tus_itm_line;                  // Impotant : When the outward entry, this is the inward item line
                invBatch.Itb_base_batchline = sers.Tus_batch_line;              // Impotant : When the outward entry, this is the inward batch line
                invBatch.Inb_base_itmstus = sers.Tus_itm_stus;                  // Impotant : When the outward entry, this is the inward item status
                invBatch.Inb_job_no = string.Empty;
                invBatch.Itb_git_ignore = false;
                invBatch.Itb_git_ignore_by = null;
                invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                invBatch.Inb_res_no = null;
                invBatch.Inb_res_lineno = 0;
                invBatch.Inb_base_doc_no1 = null;
                invBatch.Inb_base_doc_no2 = null;
                invBatch.Inb_base_doc_no3 = null;
                invBatch.Inb_cur_cd = null;
                invBatch.Inb_grup_cur_cd = null;

                oOutBatchList.Add(invBatch);

                //oOutBatchList.Add(invBatch);
                #region avg cost update by lakshan 12Jul2017
                string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeaderMinus.Ith_com).Mc_val_method;
                if (_cstMeth == "AVG")
                {
                    INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeaderMinus.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeaderMinus.Ith_loc);
                    if (_avgCst != null)
                    {
                        invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                        invBatch.Inb_unit_cost = _avgCst.Iac_avg_cost;
                    }
                    else
                    {
                        _inventoryDAL.Check_ava_cost_available(0);
                    }
                }
                #endregion
                if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                {
                    batchLine += 1;
                    serLine = 1;
                }

                InventorySerialN invSerials = new InventorySerialN();
                invSerials.Ins_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                //invSerials.Its_item_line = itmLine;
                invSerials.Ins_itm_line = invBatch.Inb_itm_line;
                invSerials.Ins_batch_line = _inventoryDAL.GetInventoryBatchLine(invBatch);
                if (invSerials.Ins_batch_line == 0)
                {
                    invSerials.Ins_batch_line = batchLine;
                }

                invSerials.Ins_direct = false; // false = Out, Outward
                invSerials.Ins_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString(); // Pls check this object
                invSerials.Ins_doc_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                invSerials.Ins_com = _inventoryMovementHeaderMinus.Ith_com;
                invSerials.Ins_loc = _inventoryMovementHeaderMinus.Ith_loc;
                invSerials.Ins_bin = sers.Tus_bin;
                invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                invSerials.Ins_unit_price = sers.Tus_unit_price;
                invSerials.Ins_ser_id = sers.Tus_ser_id;
                invSerials.Ins_ser_1 = sers.Tus_ser_1;
                invSerials.Ins_ser_2 = sers.Tus_ser_2;
                invSerials.Ins_ser_3 = sers.Tus_ser_3;
                invSerials.Ins_ser_4 = sers.Tus_ser_4;
                invSerials.Ins_warr_no = sers.Tus_warr_no;
                invSerials.Ins_warr_period = sers.Tus_warr_period;
                invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                //invSerials.Ins_issue_dt = sers.Tus_out_date;
                invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                invSerials.Ins_cross_serline = sers.Tus_ser_line;
                invSerials.Ins_issue_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                invSerials.Ins_ageloc = sers.Tus_ageloc;
                invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt;
                invSerials.Ins_isownmrn = sers.Tus_isownmrn;
                serLine = _inventoryDAL.GetInventorySerLine(invSerials);
                if (serLine == 0)
                    serLine = 1;
                else
                    serLine += 1;
                invSerials.Ins_ser_line = serLine;

                invSerials.Ins_cross_doc_no = sers.Tus_doc_no;

                DataTable _dtFifo = _inventoryDAL.Get_Actual_FIFO_Serial(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, sers.Tus_itm_cd, sers.Tus_itm_stus);
                foreach (DataRow rw in _dtFifo.Rows)
                {
                    //Chamal 04/Feb/2014 (Get_Actual_FIFO_Serial)
                    invSerials.Ins_fifo_doc_no = (string)rw["INS_DOC_NO"];
                    invSerials.Ins_fifo_doc_dt = Convert.ToDateTime(rw["INS_DOC_DT"]).Date;
                    invSerials.Ins_fifo_ser_id = Convert.ToInt32(rw["INS_SER_ID"]);
                    invSerials.Ins_fifo_ser_1 = (string)rw["INS_SER_1"];
                    invSerials.Ins_pick = 1;
                    if (sers.Tus_doc_dt.Date > invSerials.Ins_fifo_doc_dt.Date)
                    {
                        invSerials.Ins_is_fifo = false;
                    }
                    else
                    {
                        invSerials.Ins_is_fifo = true;
                    }
                }
                #region avg cost update by lakshan 12Jul2017
                if (_cstMeth == "AVG")
                {
                    INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeaderMinus.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeaderMinus.Ith_loc);
                    if (_avgCst != null)
                    {
                        //_invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                        invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                        //  _invWarraDetail.Irsm_unit_cost = _avgCst.Iac_avg_cost;
                        invSerials.Ins_unit_cost = _avgCst.Iac_avg_cost;
                    }
                    else
                    {
                        _inventoryDAL.Check_ava_cost_available(0);
                    }
                }
                #endregion
                _inventoryDAL.SaveInventorySerial(invSerials, 0);
                _inventoryDAL.SaveInventorySerialRef(invSerials, 0);
            }


            //List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
            //_BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_seq_no.ToString());
            //DataTable _dt1111 = _BATCH.ToDataTable(); 

            // Select None-Serialized items and apply FIFO inventory method
            //var _tbnonsers =
            //      (from _pickSerials in PickSerials
            //       where _pickSerials.Tus_ser_id == 0
            //       group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_exp_dt, _pickSerials.Tus_new_status } into batch
            //       select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, expdate = batch.Key.Tus_exp_dt, newitemstatus = batch.Key.Tus_new_status, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);//Order by Prabhath on 21/02/2014

            var _tbnonsers =
                  (from _pickSerials in PickSerials
                   where _pickSerials.Tus_ser_id == 0
                   group _pickSerials by new
                   {
                       _pickSerials.Tus_usrseq_no,
                       _pickSerials.Tus_base_doc_no,
                       _pickSerials.Tus_base_itm_line,
                       _pickSerials.Tus_bin,
                       _pickSerials.Tus_itm_cd,
                       _pickSerials.Tus_itm_stus,
                       _pickSerials.Tus_job_no,
                       _pickSerials.Tus_job_line,
                       _pickSerials.Tus_exp_dt,
                       _pickSerials.Tus_pgs_prefix,
                       _pickSerials.Tus_base_doc_no_1,
                       _pickSerials.Tus_res_no,
                       _pickSerials.Tus_res_line,
                       _pickSerials.Tus_pkg_uom_qty,
                       _pickSerials.Tus_pkg_uom_tp,
                       _pickSerials.Tus_new_status // Tus_new_status added by Wimal @ 13/09/2018 - Status not chage for decimal items in status chng
                   } into batch
                   select new
                   {
                       scanSeqNo = batch.Key.Tus_usrseq_no,
                       refdoc = batch.Key.Tus_base_doc_no,
                       refdocline = batch.Key.Tus_base_itm_line,
                       bincode = batch.Key.Tus_bin,
                       itemcode = batch.Key.Tus_itm_cd,
                       itemstatus = batch.Key.Tus_itm_stus,
                       itemsnewtatus = batch.Key.Tus_new_status,  // Tus_new_status added by Wimal @ 13/09/2018 - Status not chage for decimal items in status chng
                       jobno = batch.Key.Tus_job_no,
                       jobline = batch.Key.Tus_job_line,
                       expdate = batch.Key.Tus_exp_dt,
                       mainitemcode = batch.Key.Tus_pgs_prefix,
                       batch.Key.Tus_base_doc_no_1,
                       res_no = batch.Key.Tus_res_no,
                       res_line = batch.Key.Tus_res_line,
                       pkg_uom_qty = batch.Key.Tus_pkg_uom_qty,
                       pkg_uom_tp = batch.Key.Tus_pkg_uom_tp,
                       itemqty = batch.Sum(p => p.Tus_qty)
                   }).ToList().OrderBy(x => x.itemcode).OrderBy(x => x.itemstatus).OrderBy(x => x.bincode);//Addded by Chamal/Nuwan 06-Jul-2018
            
            foreach (var non_sers in _tbnonsers)
            {
                reptSeqNo = non_sers.scanSeqNo;

                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = non_sers.bincode;
                invItem.Iti_item_code = non_sers.itemcode;
                invItem.Iti_item_status = non_sers.itemstatus;
                invItem.Iti_qty = non_sers.itemqty;
                invItem.Iti_bal_qty = non_sers.itemqty;
                invItem.Iti_year = _inventoryMovementHeaderMinus.Ith_doc_year;

                //if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                //{
                //    itmLine += 1;
                //    batchLine = 1;
                //}

                if (_inventoryMovementHeaderMinus.TMP_SAVE_PKG_DATA)
                {
                    #region add by lakshan to save pkg uom 08 Dec 2016
                    //New added by Chamal/Nuwan 06-Jul-2018
                    if (!string.IsNullOrEmpty(non_sers.pkg_uom_tp))
                    {
                        invItem.Iti_pkg_uom_tp = non_sers.pkg_uom_tp;
                        invItem.Iti_pkg_uom_qty = non_sers.pkg_uom_qty;
                        if (1 == _inventoryDAL.UpdateInventoryItemForMac(invItem))
                        {
                            itmLine += 1;
                            batchLine = 1;
                        }
                    }
                    else
                    {
                        if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                        {
                            itmLine += 1;
                            batchLine = 1;
                        }
                    }
                    #endregion
                }
                else
                {
                    if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                    {
                        itmLine += 1;
                        batchLine = 1;
                    }
                }

                decimal _itmQty = invItem.Iti_qty;
                string _jobNo = null;
                int _jobLineNo = 0;
                if (_locType == "SERC")//Chamal 03-Sep-2015
                {
                    _jobNo = non_sers.jobno;
                    _jobLineNo = non_sers.jobline;
                }
                //-----------

                DataTable _dtNonFifo = new DataTable();
                //if (non_sers.expdate == null || non_sers.expdate == Convert.ToDateTime("01-Jan-0001").Date)
                //{
                //    _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 0, non_sers.expdate.Date, non_sers.bincode);
                //}
                //else
                //{
                //    _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 1, non_sers.expdate.Date, non_sers.bincode);
                //}
                if (non_sers.expdate == null || non_sers.expdate == Convert.ToDateTime("01-Jan-0001").Date)
                {

                    _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 0, non_sers.expdate.Date, non_sers.bincode);
                    if (_dtNonFifo != null)
                    {
                        if (_dtNonFifo.Rows.Count == 0)
                        {
                            int x = 0;
                        }
                    }
                }
                else
                {
                    _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 1, non_sers.expdate.Date, non_sers.bincode);
                }

                PickSerials.RemoveAll(x => x.Tus_ser_1 == "N/A" && x.Tus_ser_id == 0 && x.Tus_itm_cd == non_sers.itemcode && x.Tus_itm_stus == non_sers.itemstatus/* && x.Tus_new_status == non_sers.newitemstatus*/);
                foreach (DataRow rw in _dtNonFifo.Rows)
                {
                    string _inFifoDocNo = (string)rw["INB_DOC_NO"];
                    string _inFifoBin = (string)rw["INB_BIN"];
                    DateTime _inFifoDocDate = Convert.ToDateTime(rw["INB_DOC_DT"]).Date;
                    int _inFifoItmLine = Convert.ToInt32(rw["INB_ITM_LINE"]);
                    int _inFifoBatLine = Convert.ToInt32(rw["INB_BATCH_LINE"]);
                    decimal _inFifoUnitCost = Convert.ToDecimal(rw["INB_UNIT_COST"].ToString());
                    decimal _itmbalQty = Convert.ToDecimal(rw["INB_QTY"]);

                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeaderMinus.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeaderMinus.Ith_loc;
                    invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                    if (invBatch.Inb_itm_line == 0)
                    {
                        invBatch.Inb_itm_line = itmLine;
                    }

                    if (_itmbalQty <= _itmQty)
                    {
                        invBatch.Inb_qty = _itmbalQty;
                        invBatch.Itb_bal_qty1 = _itmbalQty;
                        invBatch.Itb_bal_qty2 = _itmbalQty;
                        _itmQty = _itmQty - _itmbalQty;
                    }
                    else
                    {
                        invBatch.Inb_qty = _itmQty;
                        invBatch.Itb_bal_qty1 = _itmQty;
                        invBatch.Itb_bal_qty2 = _itmQty;
                        _itmQty = 0;
                    }

                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = string.Empty;
                    invBatch.Inb_bin = _inFifoBin;
                    invBatch.Inb_itm_cd = non_sers.itemcode;
                    invBatch.Inb_itm_stus = non_sers.itemstatus;

                    invBatch.Inb_unit_cost = _inFifoUnitCost;
                    invBatch.Inb_unit_price = _inFifoUnitCost;
                    invBatch.Inb_base_doc_no = _inFifoDocNo;                        // Impotant : When the outward entry, this is the inward doc no
                    invBatch.Inb_base_ref_no = non_sers.refdoc;                     // Impotant : When the DO entry, this is the invoice no
                    invBatch.Inb_doc_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                    invBatch.Inb_base_itmcd = non_sers.itemcode;                    // Impotant : When the outward entry, this is the inward item code
                    invBatch.Inb_base_itmline = _inFifoItmLine;                     // Impotant : When the outward entry, this is the inward item line
                    invBatch.Itb_base_batchline = _inFifoBatLine;                   // Impotant : When the outward entry, this is the inward batch line
                    invBatch.Inb_base_itmstus = non_sers.itemstatus;                // Impotant : When the outward entry, this is the inward item status
                    invBatch.Itb_base_doc_dt = _inFifoDocDate.Date;
                    invBatch.Inb_job_no = string.Empty;
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_base_refline = non_sers.refdocline;                // Impotant : When the DO entry, this is the invoice item line no

                    oOutBatchList.Add(invBatch);

                    if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                    {
                        batchLine += 1;
                        serLine = 1;
                    }

                    #region Re-create pick serial object base on fifo object :: Chamal 10-Oct-2017 with Tharanga
                    ReptPickSerials list = new ReptPickSerials();
                    list.Tus_base_doc_no = non_sers.refdoc;
                    list.Tus_base_itm_line = non_sers.refdocline;
                    list.Tus_usrseq_no = non_sers.scanSeqNo;
                    list.Tus_ser_id = 0;
                    list.Tus_ser_1 = "N/A";
                    list.Tus_ser_2 = "N/A";
                    list.Tus_ser_3 = "N/A";
                    list.Tus_ser_4 = "N/A";
                    list.Tus_ser_line = 0;
                    list.Tus_ser_remarks = "N/A";
                    list.Tus_serial_id = "0";
                    list.Tus_session_id = "0";
                    list.Tus_warr_no = "N/A";
                    list.Tus_warr_period = 0;
                    list.Tus_Warranty_Remark = "N/A";
                    list.Tus_resqty = 0;
                    list.Tus_res_line = 0;
                    list.Tus_qty = invBatch.Inb_qty;
                    list.Tus_bin = _inFifoBin;
                    list.Tus_itm_cd = non_sers.itemcode;
                    list.Tus_itm_stus = non_sers.itemstatus;
                    list.Tus_unit_cost = _inFifoUnitCost;
                    list.Tus_unit_price = _inFifoUnitCost;
                    //list.Tus_new_status = non_sers.itemstatus; // REMOVE by Wimal @ 13/09/2018 - Status not chage for decimal items in status chng
                    list.Tus_new_status = non_sers.itemsnewtatus; // added by Wimal @ 13/09/2018 - Status not chage for decimal items in status chng
                    PickSerials.Add(list);

                    #endregion

                    if (_itmQty <= 0) break;
                }



            }
            // ************************************************************************************* -ADJ Entry
            #endregion -ADJ Entry

            #region +ADJ Entry
            // +ADJ Entry *********************************************************************************
            itmLine = 1;
            batchLine = 1;
            serLine = 1;

            //Added By Prabhath on 1/11/2012 --------------------AVG COST--------------------------------------------------
            #region Avarage Cost Calculation

            //switch (_documentType)
            //{
            //    case "GRN":
            //        _isAvgType = true;
            //        break;

            //    case "AOD":
            //        if (_scm2LocCategory == "DFS")
            //            _isAvgType = true;
            //        else
            //            _isAvgType = false;
            //        break;

            //    case "ADJ":
            //        _isAvgType = true;
            //        break;

            //    case "SRN":
            //        _isAvgType = true;
            //        break;

            //    default:
            //        _isAvgType = false;
            //        break;
            //}

            //if (!string.IsNullOrEmpty(_companycostmethod))
            //    if (_companycostmethod == "AVG" && _isAvgType)
            //    {
            //        var _ItemAvg = (from i in PickSerials
            //                        group i by new { i.Tus_itm_cd, i.Tus_itm_stus } into batch
            //                        select new { Tus_itm_cd = batch.Key.Tus_itm_cd, Tus_itm_stus = batch.Key.Tus_itm_stus, Tus_cost = batch.Sum(p => p.Tus_qty * p.Tus_unit_cost) }).ToList();

            //        foreach (var _itm in _ItemAvg)
            //        {
            //            string _itmCode = _itm.Tus_itm_cd;

            //            decimal _scm2TotBalanceCost = 0;
            //            decimal _scm2BalQty = 0;
            //            decimal _scmTotBalanceCost = 0;
            //            decimal _scmBalQty = 0;

            //            decimal _scm2TotCurrentCost = 0;
            //            decimal _scm2CurrentQty = 0;

            //            string _scm2Status = _itm.Tus_itm_stus; ;
            //            string _scmStatus = string.Empty;
            //            DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(_scm2Status, string.Empty);
            //            if (_tblStus != null)
            //                if (_tblStus.Rows.Count > 0)
            //                {
            //                    foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
            //                }

            //            //Get SCM2 Balance Cost

            //            DataTable _scm2baltbl = _inventoryDAL.GetItemBalanceAvg(_company, _scm2LocCategory, _itmCode, _scm2Status);
            //            if (_scm2baltbl != null)
            //                if (_scm2baltbl.Rows.Count > 0)
            //                {
            //                    _scm2TotBalanceCost = 0;
            //                    foreach (DataRow _r in _scm2baltbl.Rows)
            //                    {
            //                        _scm2TotBalanceCost += Convert.ToDecimal(_r["inl_qty"]) * Convert.ToDecimal(_r["inl_avg_cost"]);
            //                        _scm2BalQty += Convert.ToDecimal(_r["inl_qty"]);
            //                    }
            //                }

            //            //Get SCM Balance Cost
            //            DataTable _scmbaltbl = _ScmCommonDAL.GetItemBalanceAvg(_company, _scmLocCategory, _itmCode, _scmStatus);
            //            if (_scmbaltbl != null)
            //                if (_scmbaltbl.Rows.Count > 0)
            //                {
            //                    _scmTotBalanceCost = 0;
            //                    foreach (DataRow _r in _scmbaltbl.Rows)
            //                    {
            //                        _scmTotBalanceCost += Convert.ToDecimal(_r["qty_in_hand"]) * Convert.ToDecimal(_r["avg_cost"]);
            //                        _scmBalQty += Convert.ToDecimal(_r["qty_in_hand"]);
            //                    }
            //                }

            //            //Get SCM2 Current Entry
            //            _scm2TotCurrentCost = _itm.Tus_cost;
            //            _scm2CurrentQty = PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).Sum(y => y.Tus_qty);

            //            // Calculation
            //            //------------
            //            // Avg Cost = [(Balance Weighted Cost) + (Currecnt Weighted Cost)] / (Total Qty)
            //            // In simplify;
            //            // Avg Cost = [(SCM2 Balance + SCM Balance) + (SCM2 Current Entry)]/(SCM2 Balance Qty + SCM Balance Qty + SCM2 Current Entry Qty)

            //            decimal _newAvgCost = (_scm2TotBalanceCost + _scmTotBalanceCost + _scm2TotCurrentCost) / (_scm2BalQty + _scmBalQty + _scm2CurrentQty);

            //            //Update Entry List
            //            PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).ToList().ForEach(y => y.Tus_base_doc_no = Convert.ToString(Math.Round(_newAvgCost, 4)));
            //        }
            //    }
            #endregion Avarage Cost Calculation
            //End of AVG COST ---------------------------------------------------------------------------------------------

            #region Avarage Cost Calculation add by Lakshan 03Jul2017
            List<INR_AVG_COST> _inrCstList = new List<INR_AVG_COST>();
            if (!_inventoryMovementHeaderPlus.Tmp_avg_cost_calc)
            {
                switch (_documentType)
                {
                    case "GRN":
                        _isAvgType = true;
                        break;
                    case "AOD":
                        {
                            string _locCat = "";
                            DataTable _dtTmpLoc = _inventoryDAL.Get_location_by_code(_inventoryMovementHeaderPlus.Ith_oth_com, _inventoryMovementHeaderPlus.Ith_oth_loc, 1);
                            foreach (DataRow rw in _dtTmpLoc.Rows)
                            {
                                _locCat = (string)rw["ML_CATE_1"];//Location Categry Code
                            }
                            if (_locCat == "DFS")
                            {
                                _isAvgType = true;
                            }
                            else
                            {
                                _isAvgType = false;
                            }
                            //if (_scm2LocCategory == "DFS")
                            //    _isAvgType = true;
                            //else
                            //    _isAvgType = false;

                            break;
                        }
                    case "ADJ":
                        _isAvgType = true;
                        break;
                    case "SRN":
                        _isAvgType = true;
                        break;
                    default:
                        _isAvgType = false;
                        break;
                }
                if (!string.IsNullOrEmpty(_companycostmethod))
                {
                    if (_companycostmethod == "AVG" && _isAvgType)
                    {
                        #region save avg cost summery to inr_avg_cst_mth add by lakshan 07Jul2017
                        DateTime _docDt = _inventoryMovementHeaderPlus.Ith_doc_date;
                        //DateTime _prevMthEnd = new DateTime(_docDt.Year,_docDt.Month,01).AddMonths(1).AddDays(-1);
                        decimal _lastMonthDataAva = _inventoryDAL.GetInrAvgCostMthDataAva(_docDt);
                        if (_lastMonthDataAva == 0)
                        {
                            _inventoryDAL.UpdateInrMnthlyCostData(_inventoryMovementHeaderPlus.Ith_cre_by);
                        }
                        #endregion
                        decimal _avgCst = 0;
                        decimal _noOfUnit = 0;
                        INR_AVG_COST _tmpInrAvgCst = new INR_AVG_COST();
                        INR_AVG_COST_GIT _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                        INR_AVG_COST _saveAvgCst = new INR_AVG_COST();
                        INR_AVG_COST _inrAvgCstAva = new INR_AVG_COST();
                        INR_AVG_COST_GIT _inrAvgCstAvaGit = new INR_AVG_COST_GIT();
                        MasterLocation _mstLocIn = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_loc);
                        List<INR_AVG_COST> _listAvgData = new List<INR_AVG_COST>();
                        INR_AVG_COST _avgData = new INR_AVG_COST();
                        foreach (var _pSer in _reptPickSerials)
                        {
                            _avgData = new INR_AVG_COST();
                            _avgData.Iac_itm_cd = _pSer.Tus_itm_cd;
                            _avgData.Iac_itm_stus = _pSer.Tus_new_status;
                            _avgData.Iac_avg_qty = _pSer.Tus_qty;
                            _avgData.Iac_avg_cost = _pSer.Tus_unit_cost;
                            _avgData.Tmp_mult_cost = _pSer.Tus_qty * _pSer.Tus_unit_cost;
                            _listAvgData.Add(_avgData);
                        }

                        var _itmList = _listAvgData.GroupBy(x => new { x.Iac_itm_cd, x.Iac_itm_stus }).Select(group =>
                            new { Peo = group.Key, docQty = group.Sum(o => o.Iac_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                        foreach (var item in _itmList)
                        {
                            _tmpInrAvgCst = new INR_AVG_COST();
                            _tmpInrAvgCst.Iac_com = _inventoryMovementHeaderPlus.Ith_com;
                            _tmpInrAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAva = _inventoryDAL.GET_INR_AVG_COST_DATA(_tmpInrAvgCst);
                            _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                            _tmpInrAvgCstGit.Iacg_com = _inventoryMovementHeaderPlus.Ith_com;
                            _tmpInrAvgCstGit.Iacg_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCstGit.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCstGit.Iacg_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAvaGit = _inventoryDAL.GET_INR_AVG_GIT_BY_LOC_TP(_tmpInrAvgCstGit);
                            decimal _gitBal = 0;
                            if (_inrAvgCstAvaGit != null)
                            {
                                _gitBal = _inrAvgCstAvaGit.Iacg_avg_qty;
                            }
                            decimal _invBal = _inventoryDAL.GetInrBalanceForAvgCost(_inventoryMovementHeaderPlus.Ith_com, item.Peo.Iac_itm_cd, item.Peo.Iac_itm_stus, _mstLocIn.Ml_cate_1);
                            _invBal = _invBal + _gitBal;
                            if (_documentType == "SRN")
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (_inrAvgCstAva.Iac_avg_cost * item.docQty)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            else
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (item.docCst)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            _saveAvgCst = new INR_AVG_COST();
                            _saveAvgCst.Iac_com = _inventoryMovementHeaderPlus.Ith_com;
                            _saveAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _saveAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _saveAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _saveAvgCst.Iac_avg_dt = DateTime.Now;
                            _saveAvgCst.Iac_avg_cost = Math.Round(_avgCst, 4);
                            _saveAvgCst.Iac_avg_qty = _noOfUnit;
                            _saveAvgCst.Iac_cre_by = _inventoryMovementHeaderPlus.Ith_cre_by;
                            _saveAvgCst.Iac_cre_dt = _inventoryMovementHeaderPlus.Ith_cre_when;
                            _saveAvgCst.Iac_mod_by = _inventoryMovementHeaderPlus.Ith_mod_by;
                            _saveAvgCst.Iac_mod_dt = _inventoryMovementHeaderPlus.Ith_mod_when;
                            //_saveAvgCst.Iac_anal_1 = "";
                            //_saveAvgCst.Iac_anal_2 = "";
                            //_saveAvgCst.Iac_anal_3 = "";
                            //_saveAvgCst.Iac_anal_4 = "";
                            //_saveAvgCst.Iac_anal_5 = "";
                            //_saveAvgCst.Iac_costofsale = "";
                            //_saveAvgCst.Iac_tot_inv_rate = "";
                            //_saveAvgCst.Iac_sold_qty = "";
                            //_saveAvgCst.Iac_sold_qty_intr_com = "";
                            //_saveAvgCst.Iac_avg_inv_days = "";
                            _inrCstList.Add(_saveAvgCst);
                            _inventoryDAL.UpdateInrCostData(_saveAvgCst);
                        }
                    }
                }
            }
            #endregion

            //_docSeqNo = _inventoryDAL.GetSerialID();
            _inventoryMovementHeaderPlus.Ith_seq_no = _docSeqNoPlus;
            _inventoryMovementHeaderPlus.Ith_doc_no = Convert.ToString(_inventoryMovementHeaderPlus.Ith_seq_no);
            _inventoryMovementHeaderPlus.Ith_direct = true;

            #region De-valuating /Written by Sachith, Apply - Prabhath on 13/02/2013
            string _deValType = string.Empty;
            if (_inventoryMovementHeaderPlus.Ith_acc_no == "STATUS_CHANGE") _deValType = "STUSCHG";
            if (_inventoryMovementHeaderPlus.Ith_acc_no == "DIN") _deValType = "DIN";
            if (!string.IsNullOrEmpty(_deValType))
            {
                foreach (ReptPickSerials _ser in _reptPickSerials)
                {
                    InventoryHeader _inventoryHdr = _inventoryDAL.Get_Int_Hdr(_ser.Tus_doc_no);
                    List<InventoryCostRate> _costList = _inventoryDAL.GetInventoryCostRate(_inventoryMovementHeaderPlus.Ith_com, _deValType, _ser.Tus_new_status, (((_inventoryMovementHeaderPlus.Ith_doc_date.Year - _ser.Tus_doc_dt.Year) * 12) + _inventoryMovementHeaderPlus.Ith_doc_date.Month - _ser.Tus_doc_dt.Month), _ser.Tus_itm_stus);
                    if (_costList != null && _costList.Count > 0)
                    {
                        if (_costList[0].Rcr_rt == 0)
                        {
                            _ser.Tus_unit_cost = _ser.Tus_unit_cost - _costList[0].Rcr_val;
                            _ser.Tus_unit_cost = Math.Round(_ser.Tus_unit_cost, 4);
                        }
                        else
                        {
                            _ser.Tus_unit_cost = _ser.Tus_unit_cost - ((_ser.Tus_unit_cost * _costList[0].Rcr_rt) / 100);
                            _ser.Tus_unit_cost = Math.Round(_ser.Tus_unit_cost, 4);
                        }
                    }
                }
            }
            #endregion De-valuating /Written by Sachith, Apply - Prabhath on 13/02/2013
            if (_inventoryMovementHeaderPlus != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeaderPlus);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_new_status, _pickSerials.Tus_new_itm_cd } into itm
                select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_new_status, itm.Key.Tus_new_itm_cd, itemqty = itm.Sum(p => p.Tus_qty) };

            //If line no issue please consider below LINQ statement. (Prabhath on 21/02/2014)
            //var _tbitems =
            //    (from _pickSerials in _reptPickSerials
            //     group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //     select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);

            foreach (var items in _tbitems)
            {

                //Tharaka 2015-11-05
                string ToBinCode = string.Empty;
                string[] ToBinCodes = PickSerials.Select(x => x.Tus_bin_to).Distinct().ToArray();
                if (ToBinCodes != null && ToBinCodes.Length > 0)
                {
                    ToBinCode = ToBinCodes[0];
                }
                if (ToBinCode == null || ToBinCode=="")
                {
                    ToBinCode = binto;
                }

                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeaderPlus.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                if (string.IsNullOrEmpty(ToBinCode))
                {
                    invItem.Iti_bin_code = items.bincode;
                }
                else
                {
                    invItem.Iti_bin_code = ToBinCode;
                }

                if ((items.Tus_new_itm_cd == null) || (string.IsNullOrEmpty(items.Tus_new_itm_cd)))
                {
                    invItem.Iti_item_code = items.itemcode;
                }
                else
                {
                    invItem.Iti_item_code = items.Tus_new_itm_cd;

                }

                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;

                invItem.Iti_year = _inventoryMovementHeaderPlus.Ith_doc_year;

                _inventoryDAL.UpdateInventoryItem(invItem);
                //Added By Prabhath on 1/11/2012
                decimal _particulerAvgCost = 0;
                if (_companycostmethod == "AVG" && _isAvgType)
                {
                    //var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_base_doc_no).Distinct();
                    //foreach (string _h in _avgcost)
                    //    _particulerAvgCost = Convert.ToDecimal(_h);
                }
                //Added By Prabhath on 1/11/2012
                batchLine = 1;



                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_new_status == items.itemstatus
                    group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_new_status, _pickSerials.Tus_unit_cost, _pickSerials.Tus_new_itm_cd, _pickSerials.Tus_itm_stus } into batch
                    select new { bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_new_status, unitcost = batch.Key.Tus_unit_cost, batch.Key.Tus_new_itm_cd, batch.Key.Tus_itm_stus, itemqty = batch.Sum(p => p.Tus_qty) };
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeaderPlus.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeaderPlus.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeaderPlus.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = string.Empty;

                    if (string.IsNullOrEmpty(ToBinCode))
                    {
                        invBatch.Inb_bin = batchs.bincode;
                    }
                    else
                    {
                        invBatch.Inb_bin = ToBinCode;
                    }


                    if ((batchs.Tus_new_itm_cd == null) || (string.IsNullOrEmpty(batchs.Tus_new_itm_cd)))
                    {
                        invBatch.Inb_itm_cd = batchs.itemcode;
                    }
                    else
                    {
                        invBatch.Inb_itm_cd = batchs.Tus_new_itm_cd;

                    }




                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = decimal.Zero;
                    invBatch.Inb_base_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString();
                    invBatch.Inb_base_ref_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString();
                    invBatch.Inb_doc_dt = _inventoryMovementHeaderPlus.Ith_doc_date;
                    invBatch.Inb_base_itmcd = batchs.itemcode;
                    invBatch.Inb_base_itmline = itmLine;
                    invBatch.Inb_base_batchline = batchLine;
                    invBatch.Itb_base_batchline = batchLine;
                    invBatch.Inb_base_itmstus = batchs.Tus_itm_stus;
                    invBatch.Inb_job_no = string.Empty;
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;

                    if (isBinToBin)
                    {
                        if (oOutBatchList.Count > 0)
                        {
                            InventoryBatchN oBatchFile = oOutBatchList.Find(x => x.Inb_itm_cd == batchs.itemcode);
                            if (oBatchFile != null)
                            {
                                invBatch.Inb_unit_price = oBatchFile.Inb_unit_price;
                                invBatch.Inb_unit_cost = oBatchFile.Inb_unit_cost;
                            }
                        }
                    }
                    //added by nuwan for de value process 2016.12.30
                    if (isDeValProcess)
                    {
                        invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                        invBatch.Inb_unit_cost = 0;
                    }
                    _inventoryDAL.UpdateInventoryBatch(invBatch);
                    //Added By Prabhath on 1/11/2012
                    //if (_companycostmethod == "AVG" && _isAvgType) { invBatch.Inb_unit_cost = _particulerAvgCost; }
                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation add by Lakshan 06Jul2017
                    if (!string.IsNullOrEmpty(_companycostmethod))
                    {
                        if (_companycostmethod == "AVG" && _isAvgType)
                        {
                            var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
                            if (v != null)
                            {
                                invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                invBatch.Inb_unit_cost = v.Iac_avg_cost;
                            }
                        }
                    }
                    #endregion Avarage Cost Calculation

                    _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);

                    serLine = 1;
                    var _tbsersPlus =
                        (from _pickSerials in PickSerials
                         where _pickSerials.Tus_bin == batchs.bincode && _pickSerials.Tus_itm_cd == batchs.itemcode && _pickSerials.Tus_new_status == batchs.itemstatus && _pickSerials.Tus_unit_cost == batchs.unitcost && _pickSerials.Tus_itm_stus == batchs.Tus_itm_stus
                         select _pickSerials).Distinct();
                    foreach (var sers in _tbsersPlus)
                    {
                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeaderPlus.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString(); // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeaderPlus.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeaderPlus.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeaderPlus.Ith_loc;
                        if (string.IsNullOrEmpty(ToBinCode))
                        {
                            invSerials.Ins_bin = sers.Tus_bin;
                        }
                        else
                        {
                            invSerials.Ins_bin = ToBinCode;
                        }

                        if ((sers.Tus_new_itm_cd == null) || (string.IsNullOrEmpty(sers.Tus_new_itm_cd)))
                        {
                            invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        }
                        else
                        {
                            invSerials.Ins_itm_cd = sers.Tus_new_itm_cd;

                        }



                        invSerials.Ins_itm_stus = sers.Tus_new_status;
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;

                        if (isBinToBin)
                        {
                            if (oOutBatchList.Count > 0)
                            {
                                InventoryBatchN oBatchFile = oOutBatchList.Find(x => x.Inb_itm_cd == batchs.itemcode);
                                if (oBatchFile != null)
                                {
                                    invSerials.Ins_unit_cost = oBatchFile.Inb_unit_cost;
                                }
                            }
                        }
                        //added by nuwan for de value process 2016.12.30
                        if (isDeValProcess)
                        {
                            invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                            invSerials.Ins_unit_cost = 0;
                        }
                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                        invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                        invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                        invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;
                        invSerials.Ins_ageloc = sers.Tus_ageloc;
                        invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                        invSerials.Ins_isownmrn = sers.Tus_isownmrn;

                        //Add Prabhath on 19/04/2012
                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = null;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeaderPlus.Ith_com;
                        _invWarraDetail.Irsm_cre_by = null;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeaderPlus.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeaderPlus.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeaderPlus.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeaderPlus.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = null;
                        _invWarraDetail.Irsm_exist_grn_dt = _inventoryMovementHeaderPlus.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_exist_grn_no = null;
                        _invWarraDetail.Irsm_exist_supp = null;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        _invWarraDetail.Irsm_itm_stus = sers.Tus_new_status;
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeaderPlus.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = null;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = null;
                        _invWarraDetail.Irsm_orig_grn_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_orig_grn_no = null;
                        _invWarraDetail.Irsm_orig_supp = null;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeaderPlus.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeaderPlus.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = sers.Tus_warr_no;
                        _invWarraDetail.Irsm_warr_period = 0;//TODO : Changed need
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;
                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeaderPlus.Ith_mod_by;
                        //added by nuwan for devalue process 2016.12.30
                        if (isDeValProcess)
                        {
                            _invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                            _invWarraDetail.Irsm_unit_cost = 0;
                        }
                        #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
                        if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
                        {
                            _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeaderPlus.Ith_doc_date;
                        }
                        if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
                        {
                            _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeaderPlus.Ith_doc_date;
                        }
                        if (_invWarraDetail.Irsm_warr_period == 0)
                        {
                            MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                            if (_warPer != null)
                            {
                                if (_warPer.Mwp_val != 0)
                                {
                                    _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
                                    invSerials.Ins_warr_period = _warPer.Mwp_val;
                                }
                                else
                                {
                                    _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
                                    invSerials.Ins_warr_period = 12;
                                }
                            }
                        }
                        if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
                        {
                            MasterItemWarrantyPeriod _warPer = _inventoryDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                            if (_warPer != null)
                            {
                                if (_warPer.Mwp_val != 0)
                                {
                                    _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
                                }
                                else
                                {
                                    _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
                                }
                            }
                        }
                        string _tmpWar = string.Empty;
                        if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
                        {
                            _tmpWar = String.Format("{0:dd}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) +
                                "-" + _inventoryMovementHeaderPlus.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                            _invWarraDetail.Irsm_warr_no = _tmpWar;
                            invSerials.Ins_warr_no = _tmpWar;
                        }
                        else if (_invWarraDetail.Irsm_warr_no == "N/A")
                        {
                            _tmpWar = String.Format("{0:dd}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) +
                                "-" + _inventoryMovementHeaderPlus.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                            _invWarraDetail.Irsm_warr_no = _tmpWar;
                            invSerials.Ins_warr_no = _tmpWar;
                        }
                        else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
                        {
                            _tmpWar = String.Format("{0:dd}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeaderPlus.Ith_doc_date.Date) +
                                "-" + _inventoryMovementHeaderPlus.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                            _invWarraDetail.Irsm_warr_no = _tmpWar;
                            invSerials.Ins_warr_no = _tmpWar;
                        }
                        #endregion
                        // decimal allow none-serialized items are not saved in serial related tables
                        if (sers.Tus_ser_id != 0)
                        {
                            _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                            _inventoryDAL.SaveInventorySerial(invSerials, 1);
                            //Added By Prabhath on 1/11/2012
                            //if (_companycostmethod == "AVG" && _isAvgType) { invSerials.Ins_unit_cost = _particulerAvgCost; }
                            //Added By Prabhath on 1/11/2012
                            #region Avarage Cost Calculation add by Lakshan 06Jul2017
                            if (!string.IsNullOrEmpty(_companycostmethod))
                            {
                                if (_companycostmethod == "AVG" && _isAvgType)
                                {
                                    var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
                                    if (v != null)
                                    {
                                        invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                        invSerials.Ins_unit_cost = v.Iac_avg_cost;
                                    }
                                }
                            }
                            #endregion Avarage Cost Calculation
                            _inventoryDAL.SaveInventorySerialRef(invSerials, 1);
                            serLine += 1;
                        }
                    }
                    batchLine += 1;
                }
                itmLine += 1;
            }

            //List<InventoryBatchN> _BATCH1 = new List<InventoryBatchN>();
            //_BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_seq_no.ToString());
            //DataTable _dt11112 = _BATCH.ToDataTable(); 

            // ********************************************************************************* +ADJ Entry
            #endregion +ADJ Entry

            #region Update location inventory -ADJ
            // Update location inventory -ADJ *********************************************************************************
            var _tblocainvMinus =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { scanseqno = itm.Key.Tus_usrseq_no, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };
            //subodana 2016-12-20



            foreach (var locaitems in _tblocainvMinus)
            {
                reptSeqNo = locaitems.scanseqno;

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeaderMinus.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeaderMinus.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;
                erroritem = locaitems.itemcode;
                _inventoryDAL.UpdateInventoryLocation(invLocation, 0);
            }

            // Update location inventory -ADJ *********************************************************************************
            #endregion Update location inventory -ADJ

            #region Update location inventory +ADJ
            // Update location inventory +ADJ *********************************************************************************
            var _tblocainvPlus =
              from _pickSerials in PickSerials
              where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no && _pickSerials.Tus_com == _pickSerials.Tus_com && _pickSerials.Tus_loc == _pickSerials.Tus_loc
              group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_new_status } into itm
              select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_new_status, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainvPlus)
            {
                //Added By Prabhath on 1/11/2012
                string _scmStatus = string.Empty;
                DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(locaitems.itemstatus, string.Empty);
                if (_tblStus != null)
                    if (_tblStus.Rows.Count > 0)
                    {
                        foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
                    }

                decimal _particulerAvgCost = 0;
                if (_companycostmethod == "AVG" && _isAvgType)
                {
                    //var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == locaitems.itemcode && y.Tus_itm_stus == locaitems.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    //foreach (string _h in _avgcost)
                    //    _particulerAvgCost = Convert.ToDecimal(_h);
                    //_inventoryDAL.UpdateAvgCost(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_loc, _scm2LocCategory, locaitems.itemcode, locaitems.itemstatus, _inventoryMovementHeaderPlus.Ith_cre_by, _particulerAvgCost);
                    ////comented by kapila on 8/1/2016
                    //  _ScmCommonDAL.UpdateAvgCost(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_loc, _scm2LocCategory, locaitems.itemcode, _scmStatus, _inventoryMovementHeaderPlus.Ith_cre_by, _particulerAvgCost);
                }
                //Added By Prabhath on 1/11/2012

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeaderPlus.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeaderPlus.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;
                _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
            }
            // Update location inventory +ADJ *********************************************************************************
            #endregion Update location inventory +ADJ

            #region Delete Temporary Sacn Tables
            _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            #endregion Delete Temporary Sacn Tables

            #region Generate ADJ Document No
            // Generate / Update -ADJ Document No *********************************************************************************
            Int32 _autoNoMinus = _inventoryDAL.GetAutoNumber(_masterAutoNumberMinus.Aut_moduleid, _masterAutoNumberMinus.Aut_direction, _masterAutoNumberMinus.Aut_start_char, _masterAutoNumberMinus.Aut_cate_tp, _masterAutoNumberMinus.Aut_cate_cd, _masterAutoNumberMinus.Aut_modify_dt, _masterAutoNumberMinus.Aut_year).Aut_number;
            string _documentNoMinus = string.Empty;
            if (_inventoryMovementHeaderMinus.Ith_sub_tp == "BTB")
            {
                _documentNoMinus = _inventoryMovementHeaderMinus.Ith_loc + "-" + _inventoryMovementHeaderMinus.Ith_sub_tp + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoMinus.ToString("00000", CultureInfo.InvariantCulture);
            }
            else
            {
                _documentNoMinus = _inventoryMovementHeaderMinus.Ith_loc + "-" + _inventoryMovementHeaderMinus.Ith_doc_tp + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoMinus.ToString("00000", CultureInfo.InvariantCulture);
            }

            _inventoryDAL.UpdateAutoNumber(_masterAutoNumberMinus);
            _inventoryDAL.UpdateMovementDocNo(_docSeqNoMinus, _documentNoMinus);

            // Generate / Update +ADJ Document No *********************************************************************************
            Int32 _autoNoPuls = _inventoryDAL.GetAutoNumber(_masterAutoNumberPlus.Aut_moduleid, _masterAutoNumberPlus.Aut_direction, _masterAutoNumberPlus.Aut_start_char, _masterAutoNumberPlus.Aut_cate_tp, _masterAutoNumberPlus.Aut_cate_cd, _masterAutoNumberPlus.Aut_modify_dt, _masterAutoNumberPlus.Aut_year).Aut_number;
            string _documentNoPuls = string.Empty;
            if (_inventoryMovementHeaderPlus.Ith_sub_tp == "BTB")
            {
                _documentNoPuls = _inventoryMovementHeaderPlus.Ith_loc + "+" + _inventoryMovementHeaderPlus.Ith_sub_tp + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoPuls.ToString("00000", CultureInfo.InvariantCulture);
            }
            else
            {
                _documentNoPuls = _inventoryMovementHeaderPlus.Ith_loc + "+" + _inventoryMovementHeaderPlus.Ith_doc_tp + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoPuls.ToString("00000", CultureInfo.InvariantCulture);
            }

            _inventoryDAL.UpdateMovementDocNo(_docSeqNoPlus, _documentNoPuls);
            _inventoryDAL.UpdateAutoNumber(_masterAutoNumberPlus);
            #endregion Generate ADJ Document No

            #region Update ADJ Document No
            //Update +ADJ other document no is -ADJ and -ADJ other document no is +ADJ
            _inventoryDAL.UpdateOtherDocuments(_documentNoPuls, _documentNoMinus);
            #endregion Update ADJ Document No

            #region Add By Lakshan 11 Oct 2016 Genarate new doc no only for bin to bin transfer
            string _binPlusDoc = "", _binMinusDoc = "";
            if (isBinToBin)
            {
                #region Fill MasterAutoNumber BIN IN
                MasterAutoNumber _autoBinMines = new MasterAutoNumber();
                _autoBinMines.Aut_cate_cd = _inventoryMovementHeaderMinus.Ith_loc;
                _autoBinMines.Aut_cate_tp = "LOC";
                _autoBinMines.Aut_direction = _masterAutoNumberMinus.Aut_direction;
                _autoBinMines.Aut_modify_dt = null;
                _autoBinMines.Aut_moduleid = "BTI";
                _autoBinMines.Aut_number = 5;
                _autoBinMines.Aut_start_char = "BTI";
                _autoBinMines.Aut_year = DateTime.Today.Year;

                Int32 _autoNoBinMines = _inventoryDAL.GetAutoNumber(_autoBinMines.Aut_moduleid, _autoBinMines.Aut_direction, _autoBinMines.Aut_start_char, _autoBinMines.Aut_cate_tp,
                _autoBinMines.Aut_cate_cd, _autoBinMines.Aut_modify_dt, _autoBinMines.Aut_year).Aut_number;
                _binMinusDoc = _inventoryMovementHeaderMinus.Ith_loc + "-" + _autoBinMines.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoBinMines.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_autoBinMines);
                #endregion

                #region Fill MasterAutoNumber BIN OUT
                MasterAutoNumber _autoBinPlus = new MasterAutoNumber();
                _autoBinPlus.Aut_cate_cd = _inventoryMovementHeaderPlus.Ith_loc;
                _autoBinPlus.Aut_cate_tp = "LOC";
                _autoBinPlus.Aut_direction = _masterAutoNumberPlus.Aut_direction;
                _autoBinPlus.Aut_modify_dt = null;
                _autoBinPlus.Aut_moduleid = "BTO";
                _autoBinPlus.Aut_number = 5;
                _autoBinPlus.Aut_start_char = "BTO";
                _autoBinPlus.Aut_year = DateTime.Today.Year;

                Int32 _autoNoBinPlus = _inventoryDAL.GetAutoNumber(_autoBinPlus.Aut_moduleid, _autoBinPlus.Aut_direction, _autoBinPlus.Aut_start_char, _autoBinPlus.Aut_cate_tp,
                _autoBinPlus.Aut_cate_cd, _autoBinPlus.Aut_modify_dt, _autoBinPlus.Aut_year).Aut_number;
                _binPlusDoc = _inventoryMovementHeaderMinus.Ith_loc + "-" + _autoBinPlus.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoBinPlus.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_autoBinPlus);
                #endregion
                #region Update sub Doc No
                InventoryHeader _invHdrTemp = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _documentNoMinus, Ith_com = _inventoryMovementHeaderMinus.Ith_com }).FirstOrDefault();
                _inventoryDAL.UpdateSubDocNoIntHdr(_invHdrTemp.Ith_seq_no, _documentNoMinus, _binMinusDoc);

                _invHdrTemp = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _documentNoPuls, Ith_com = _inventoryMovementHeaderPlus.Ith_com }).FirstOrDefault();
                _inventoryDAL.UpdateSubDocNoIntHdr(_invHdrTemp.Ith_seq_no, _documentNoPuls, _binPlusDoc);
                #endregion

            }
            #endregion

            #region Validate Aod Save by Lakshan 06/Sep/2016 here added by nuwan for check final document saved successfully.
            decimal _updatedQty = 0;
            decimal _batchQty = 0;
            decimal _serQty = PickSerialsForCheck;
            _minusDocNo = "";
            _plusDocNo = "";
            List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _documentNoMinus });
            if (_invBatchData != null)
            {
                if (_invBatchData.Count > 0)
                {
                    _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                    _serQty = PickSerialsForCheck;
                }
            }


            #region Cheak Batch
            if (effect != -1)
            {
                List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_seq_no.ToString());
                bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeaderMinus.Ith_seq_no);
                if (_BATCH.Count == 0)
                {
                    effect = -1;
                    _minusDocNo = "Process Terminated ! Inventory Balance not updated ";
                    return effect;
                }
                if (effect != -1)
                {
                    if (_count == false)
                    {
                        bool _chkBatch = true;
                        MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc);
                        if (_mstLocation != null)
                        {
                            if (!_mstLocation.Ml_is_serial)
                            {
                                if (string.IsNullOrEmpty(_inventoryMovementHeaderMinus.Ith_loading_point) || _inventoryMovementHeaderMinus.Ith_loading_point == "N/A")
                                {
                                    _chkBatch = false;
                                }
                            }
                        }
                        if (_chkBatch)
                        {
                            effect = -1;
                            _minusDocNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                            return effect;
                        }
                    }
                }
            }
            #endregion
            #region Cheak int Itm
            if (effect != -1)
            {
                bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeaderMinus.Ith_seq_no);
                if (_intItmErr == false)
                {
                    effect = -1;
                    _minusDocNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                    return effect;
                }
            }
            #endregion

            #region Check Serials
            if (effect == 1)
            {
                //Added by Chamal to check serial ID duplicate 05-Sep-2016
                List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeaderMinus.Ith_seq_no, null);

                var _varSer = from c in _serList
                              group c by c.Tus_ser_id into grp
                              where grp.Count() > 1
                              select new { SerialID = grp.Key, Count = grp.Count() };
                if (_varSer != null && _varSer.Count() > 0)
                {
                    string _errorSerialID = string.Empty;
                    foreach (var item in _varSer)
                    {
                        if (string.IsNullOrEmpty(_errorSerialID))
                        {
                            _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                        }
                        else
                        {
                            _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                        }
                    }
                    effect = -1;
                    _message = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    _minusDocNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    _genInvDoc = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    return effect;
                }
            }
            #endregion

            #region validate serial count and batch count
            if (_batchQty != _serQty)
            {
                effect = -1;
                _minusDocNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                return effect;
            }
            #endregion

            

       
            #region validate UOM MAC
            if (_inventoryMovementHeaderMinus.TMP_SAVE_PKG_DATA)
            {
                string _mcCom = _inventoryMovementHeaderMinus.Ith_com;
                List<InventoryItem> _mcIntItmList = _inventoryDAL.GET_INT_ITM_DATA_BY_SEQNO(_inventoryMovementHeaderMinus.Ith_seq_no);
                MasterItem _mcItm = new MasterItem();
                foreach (var _iti in _mcIntItmList)
                {
                    bool _mcIsModConvBase = false;
                    _mcItm = _inventoryDAL.GetItem(_mcCom, _iti.Iti_item_code);
                    List<UnitConvert> _unitConvert = _inventoryDAL.GET_UNIT_CONVERTER_DATA(new UnitConvert()
                    {
                        mmu_model = _mcItm.Mi_model,
                        mmu_com = _mcCom
                    });
                    if (_unitConvert.Count > 0)
                    {
                        var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
                        if (_mcModel != null)
                        {
                            _mcIsModConvBase = true;
                        }
                    }
                    if (_mcIsModConvBase)
                    {
                        var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
                        decimal _mcPkgQty = Math.Round(_iti.Iti_qty / _mcModel.mmu_qty, 2);
                        if (_iti.Iti_pkg_uom_qty != _mcPkgQty)
                        {
                            effect = -1;
                            _minusDocNo = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
                            return effect;
                        }
                    }
                    else
                    {
                        if (_iti.Iti_pkg_uom_qty != _iti.Iti_pkg_uom_qty)
                        {
                            effect = -1;
                            _minusDocNo = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
                            return effect;
                        }
                    }
                }
            }
            #endregion
            #endregion
            //Return system generate documents displaying to user
            _minusDocNo = _documentNoMinus;
            _plusDocNo = _documentNoPuls;


            effect = 1;
            /*
            #region Cheak int Itm
            if (effect == 1)
            {
                bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeaderMinus.Ith_seq_no);
                if (_intItmErr == false)
                {
                    effect = -1;
                    _message = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                }
            }
            #endregion

            #region Check Serials
            if (effect == 1)
            {
                //Added by Chamal to check serial ID duplicate 05-Sep-2016
                List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeaderMinus.Ith_seq_no, null);

                var _varSer = from c in _serList
                              group c by c.Tus_ser_id into grp
                              where grp.Count() > 1
                              select new { SerialID = grp.Key, Count = grp.Count() };
                if (_varSer != null && _varSer.Count() > 0)
                {
                    string _errorSerialID = string.Empty;
                    foreach (var item in _varSer)
                    {
                        if (string.IsNullOrEmpty(_errorSerialID))
                        {
                            _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                        }
                        else
                        {
                            _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                        }
                    }
                    effect = -1;
                    _message = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    _minusDocNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    _genInvDoc = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                }
            }
            #endregion
            */
            //    _inventoryRepDAL.ConnectionClose();
            //    _inventoryDAL.ConnectionClose();
            //    tr.Complete();
            //    effect = 1;
            //}

            return effect;
        }

        #endregion Inventory item status change process

        public string AutoPickNonSerialItemsAll(int _seqNo, string _company, string _location, string _bin, string _user, List<InventoryRequestItem> _reqItems)
        {
            bool availability = true;
            string _errorList = string.Empty;
            List<ReptPickSerials> _reMakeSerialList = new List<ReptPickSerials>();

            using (TransactionScope tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                foreach (InventoryRequestItem _ritm in _reqItems)
                {
                    MasterItem _itm = new MasterItem();
                    _itm = GetItem(_company, _ritm.Itri_itm_cd);

                    if (_itm.Mi_is_ser1 == 0)
                    {
                        List<ReptPickSerials> _chk;
                        _chk = _inventoryDAL.GetNonSerializedItemRandomly(_company, _location, _ritm.Itri_itm_cd, _ritm.Itri_itm_stus, _ritm.Itri_app_qty - _ritm.Itri_qty);
                        if (_chk != null)
                        {
                            if (_chk.Count > 0)
                            {
                                decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _ritm.Itri_itm_cd && i.Tus_itm_stus == _ritm.Itri_itm_stus select i.Tus_qty).Sum();
                                if (_statuswiseqty < _ritm.Itri_app_qty - _ritm.Itri_qty) availability = false;
                            }
                            else
                            {
                                availability = false;
                                if (string.IsNullOrEmpty(_errorList)) _errorList = _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus; else _errorList += "," + _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus;
                            }
                        }
                        else
                        {
                            availability = false;
                            if (string.IsNullOrEmpty(_errorList)) _errorList = _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus; else _errorList += "," + _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus;
                        }

                        if (availability)
                        {
                            foreach (ReptPickSerials _pick in _chk)
                            {
                                ReptPickSerials _reptPickSerial = Get_all_details_on_serialID(_company, _location, _bin, _ritm.Itri_itm_cd, _pick.Tus_ser_id);
                                //Update_inrser_INS_AVAILABLE
                                Boolean update_inr_ser = Update_serialID_INS_AVAILABLE(_company, _location, _ritm.Itri_itm_cd, _pick.Tus_ser_id, -1);
                                _reptPickSerial.Tus_cre_by = _user;
                                _reptPickSerial.Tus_usrseq_no = _seqNo;
                                _reptPickSerial.Tus_cre_by = _user;
                                _reptPickSerial.Tus_base_doc_no = _seqNo.ToString();
                                _reptPickSerial.Tus_base_itm_line = _ritm.Itri_line_no;
                                _reptPickSerial.Tus_itm_desc = _itm.Mi_longdesc;
                                _reptPickSerial.Tus_itm_model = _itm.Mi_model;
                                _reptPickSerial.Tus_itm_brand = _itm.Mi_brand;
                                _reptPickSerial.Tus_new_status = _ritm.Itri_note;
                                _reptPickSerial.Tus_new_remarks = "N/A";
                                //enter row into TEMP_PICK_SER
                                _inventoryRepDAL.SavePickedItemSerials(_reptPickSerial);
                                _reMakeSerialList.Add(_pick);
                            }
                        }
                    }
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                if (availability == true) tr.Complete();
            }
            return _errorList;
        }

        //Chamal 22/04/2013
        public bool AutoPickNonSerialItems(int _seqNo, string _company, string _location, string _bin, string _item, string _itemDesc, string _itemModel, string _itemBrand, string _itemStatus, decimal _qty, string _itemType, string _user, int _lineNo)
        {
            bool availability = true;
            string _errorList = string.Empty;
            List<ReptPickSerials> _reMakeSerialList = new List<ReptPickSerials>();

            if (_itemType == "NON")
            {
                List<ReptPickSerials> _chk;
                _chk = _inventoryDAL.GetNonSerializedItemRandomly(_company, _location, _item, _itemStatus, _qty);
                if (_chk != null)
                {
                    if (_chk.Count > 0)
                    {
                        decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _item && i.Tus_itm_stus == _itemStatus select i.Tus_qty).Sum();
                        if (_statuswiseqty < _qty) availability = false;
                    }
                    else
                    {
                        availability = false;
                    }
                }
                else
                {
                    availability = false;
                }

                if (availability)
                {
                    foreach (ReptPickSerials _pick in _chk)
                    {
                        ReptPickSerials _reptPickSerial_ = Get_all_details_on_serialID(_company, _location, _bin, _item, _pick.Tus_ser_id);
                        //Update_inrser_INS_AVAILABLE
                        Boolean update_inr_ser = Update_serialID_INS_AVAILABLE(_company, _location, _item, _pick.Tus_ser_id, -1);

                        _reptPickSerial_.Tus_cre_by = _user;
                        _reptPickSerial_.Tus_usrseq_no = _seqNo;
                        _reptPickSerial_.Tus_cre_by = _user;
                        _reptPickSerial_.Tus_base_doc_no = _seqNo.ToString();
                        _reptPickSerial_.Tus_base_itm_line = 0;
                        _reptPickSerial_.Tus_itm_desc = _itemDesc;
                        _reptPickSerial_.Tus_itm_model = _itemModel;
                        //enter row into TEMP_PICK_SER
                        Int32 affected_rows = SaveAllScanSerials(_reptPickSerial_, null);
                        _reMakeSerialList.Add(_pick);
                    }
                }
            }
            return availability;
        }

        //Written By P.Wijetunge on 9/4/2012
        public MasterAutoNumber GetAutoNumber(string _module, Int16? _direction, string _startChar, string _catType, string _catCode, DateTime? _modifyDate, Int32? _year)
        {
            MasterAutoNumber _masterAutoNumber = new MasterAutoNumber();
            _inventoryDAL = new InventoryDAL();
            _masterAutoNumber = _inventoryDAL.GetAutoNumber(_module, _direction, _startChar, _catType, _catCode, _modifyDate, _year);
            if (_masterAutoNumber == null)
            {
                _masterAutoNumber.Aut_cate_cd = _catCode;
                _masterAutoNumber.Aut_cate_tp = _catType;
                _masterAutoNumber.Aut_direction = _direction;
                _masterAutoNumber.Aut_modify_dt = _modifyDate;
                _masterAutoNumber.Aut_moduleid = _module;
                _masterAutoNumber.Aut_number = 1;
                _masterAutoNumber.Aut_start_char = _startChar;
                _masterAutoNumber.Aut_year = _year;
            }
            else
            {
            }

            return _masterAutoNumber;
        }

        //Written By P.Wijetunge on 9/4/2012
        public Int16 UpdateAutoNumber(MasterAutoNumber _masterAutoNumber)
        {
            Int16 _effects = 0;
            _inventoryDAL = new InventoryDAL();
            //using (TransactionScope _tr = new TransactionScope())
            //{
            //_inventoryDAL.ConnectionOpen();
            _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
            //_inventoryDAL.ConnectionClose();

            _effects = 1;
            //    _tr.Complete();
            //}
            return _effects;
        }

        //Written By P.Wijetunge on 10/4/2012
        public DataTable GetAllPurchaseOrder(string _company, string _adminTeam, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPurchaseOrder(_company, _adminTeam, _status);
        }

        //Written By P.Wijetunge on 10/4/2012
        public DataTable GetAllPurchaseOrderDetail(string _company, string _adminTeam, string _poNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPurchaseOrderDetail(_company, _adminTeam, _poNo);
        }

        //Written By P.Wijetunge on 10/4/2012
        public Int16 SavePickedHeader(ReptPickHeader _scanheaderNew)
        {
            Int16 _effects = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.SavePickedHeader(_scanheaderNew);
                if (_scanheaderNew.Is_doc_Partial_save)
                {
                    _inventoryRepDAL.SavePickedHeaderPartial(_scanheaderNew);
                }
                _inventoryRepDAL.ConnectionClose();

                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        //Written By P.Wijetunge on 10/4/2012
        public Int16 SavePickedItems(List<ReptPickItems> _scanitemNew)
        {
            Int16 _effects = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL.ConnectionOpen();
                foreach (ReptPickItems _ReptPickItem in _scanitemNew)
                {
                    _inventoryRepDAL.SavePickedItems(_ReptPickItem);
                    if (_ReptPickItem.ls_par_save)
                    {
                        _inventoryRepDAL.SavePickedItemsPartial(_ReptPickItem);
                    }
                }

                _inventoryRepDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }

            return _effects;
        }

        //Written By P.Wijetunge on 10/4/2012 - Composite function for save both header and the details
        public Int16 SavePickedHeaderItemDetail(ReptPickHeader _reptPickHeader, List<ReptPickItems> _reptPickItems)
        {
            Int16 _effects = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.SavePickedHeader(_reptPickHeader);

                if (_reptPickItems != null)
                {
                    foreach (ReptPickItems _ReptPickItem in _reptPickItems)
                    {
                        _inventoryRepDAL.SavePickedItems(_ReptPickItem);
                    }
                }

                _inventoryRepDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public List<PurchaseOrderDetail> GetAllPurchaseOrderDetailList(string _company, string _adminTeam, string _poNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPurchaseOrderDetailList(_company, _adminTeam, _poNo);
        }

        #endregion

        #region RCC
        public List<Service_Charge> Get_RCC_Charge(string _com, string _loc, string _schnl, DateTime _date)
        {
            _inventoryDAL = new InventoryDAL();
            List<Service_Charge> _list = null;
            _list = _inventoryDAL.Get_RCC_Charge(_com, _loc, _schnl, _date, "LOC");
            if (_list == null)
            {
                _list = _inventoryDAL.Get_RCC_Charge(_com, _loc, _schnl, _date, "SCHNL");
                if (_list == null)
                    return null;
                else
                    return _list;
            }
            else
            {
                return _list;
            }
        }

        public int DeleteRCCLocation(List<RCCLocations> DEL_LIST)
        {
            Int32 eff = 0;
            _inventoryDAL = new InventoryDAL();

            using (TransactionScope scope = new TransactionScope())
            {
                _inventoryDAL.ConnectionOpen();
                foreach (RCCLocations LOC in DEL_LIST)
                {
                    eff = _inventoryDAL.DeleteRCCLocations(LOC.Ragl_com, LOC.Ragl_agent, LOC.Ragl_loc, LOC.Ragl_mod_by);
                }
                _inventoryDAL.ConnectionClose();
                scope.Complete();
            }
            return eff;
        }

        public int UpdateRCCLocations(List<RCCLocations> _rccLoc_LIST)
        {
            Int32 eff = 0;
            _inventoryDAL = new InventoryDAL();

            using (TransactionScope scope = new TransactionScope())
            {
                _inventoryDAL.ConnectionOpen();
                foreach (RCCLocations LOC in _rccLoc_LIST)
                {
                    eff = _inventoryDAL.UpdateRCCLocations(LOC);
                }
                _inventoryDAL.ConnectionClose();
                scope.Complete();
            }
            return eff;
        }

        public DataTable GetLocsByAgent(string _com, string _agent)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocsByAgent(_com, _agent);
        }

        public List<RCC> GetRCC()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRCC();
        }

        public RCC GetRccByNo(string _RCCNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRCCbyNo(_RCCNo);
        }

        public List<MasterRCCDef> GetRCCDef(string _Type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRCCDefinition(_Type);
        }

        public List<MasterBusinessEntity> GetServiceAgent(string _Type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetServiceAgent(_Type);
        }

        /// <summary>
        /// get Mob cust search by DULANGA 2016-1-21
        /// </summary>
        /// <param name="_Type"></param>
        /// <param name="_code"></param>
        /// <param name="_com"></param>
        /// <returns></returns>
        public List<MasterBusinessEntity> GetMobCustSearch(string _Type, string _code, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMobCustSearch(_Type, _code, _com);
        }

        /// <summary>
        /// search item by words MOB dulanga 2018/10/18
        /// </summary>
        /// <param name="type"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        public DataTable GetMobSearchItem(string type, string code)
        {

            _inventoryDAL = new InventoryDAL();
             return _inventoryDAL.GetMobSearchItem(type, code);

        }




        public DataTable GetNoOfPendingRCC(string _com, string _loc, DateTime _date)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetNoOfPendingRCC(_com, _loc, _date);
        }

        public Boolean IsValidServiceAgent(string _com, string _loc, string _agent)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsValidServiceAgent(_com, _loc, _agent);
        }

        public string GetNextIncentiveNo(string _Loc, MasterAutoNumber _masterAutoNumber)
        {
            Int16 effect = 0;
            _inventoryDAL = new InventoryDAL();

            _inventoryDAL.ConnectionOpen();
            Int32 _docSeqNo = _inventoryDAL.GetSerialID();
            string _documentNo = "";

            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;

            return _documentNo = _masterAutoNumber.Aut_start_char + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
        }

        public Int16 UpdateIncentiveNo(MasterAutoNumber _masterAutoNumber)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Int16 effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
            _inventoryDAL.ConnectionClose();
            return effect;
        }

        public int SaveRCC(RCC _RCC, List<Service_Req_Hdr> _ReqHdr, List<Service_Req_Det> _ReqDet, List<Service_Req_Def> _defList, List<ImageUploadDTO> oMainList, Boolean _isDealer, Boolean _isOnline, MasterAutoNumber _masterAutoNumber, out string _RccNo, out string _aod)
        {
            int effect = 0;
            Int32 _effect = -1;
            int _defLine = 1;
            string Jrd_warr = "";
            DataTable odtnew = new DataTable();
            string _message = string.Empty;
            string aod = string.Empty;
            #region var SCM
            string p_transactionno = "";
            string p_itemcode = "";
            string p_modelno = "";
            string p_serialno = "";
            string p_warrantyno = "";
            DateTime p_warrantystartdate;
            Int32 p_warrantyperiod = 0;
            string p_invoiceno = "";
            string p_customercode = "";
            string p_customername = "";
            string p_customeraddressinvoce = "";
            string p_customerphoneno = "";
            DateTime p_podate;
            string p_itmbrand = "";
            string p_itmdesc = "";
            string p_transaction_location = "";
            string p_locdesc = "";
            string p_salesorderno = "";
            string p_accno = "";
            int p_warrlineno = 0;
            string p_warranty_remarks = "";
            string p_grnno = "";
            DateTime p_grndate;
            string p_supcd = "";
            string p_chassis = "";
            Decimal p_unitprice = 0;
            string p_itemstus = "";
            string p_regno = "";
            string p_frm_loc = "";
            string _genInventoryDoc = "";
            string txtItem="";
            Int32 SerialID = 0;
            #endregion


            List<InventorySerialMaster> GetWarrantyDetails = new List<InventorySerialMaster>();//Tharanga
            try
            {
                _inventoryDAL = new InventoryDAL();
                _custServiceDAL = new CustServiceDAL();
                _generalDAL = new GeneralDAL();
                SCMCommonDAL _SCMCommonDAL = new SCMCommonDAL();
                _salesDAL = new SalesDAL();
                //STNCommonDAL _StnCommonDAL = new STNCommonDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _FMSinventoryDAL.ConnectionOpen();
                _FMSinventoryDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _custServiceDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _SCMCommonDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                //_StnCommonDAL.ConnectionOpen();

                _inventoryDAL.BeginTransaction();
                _custServiceDAL.BeginTransaction();
                _generalDAL.BeginTransaction();
                _SCMCommonDAL.BeginTransaction();
                _salesDAL.BeginTransaction();
                //_StnCommonDAL.BeginTransaction();
                List<ReptPickSerials> _serialList = new List<ReptPickSerials>();
                Int32 _docSeqNo = _inventoryDAL.GetSerialID();

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                string _documentNo = _RCC.Inr_loc_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
                _RCC.Inr_no = _documentNo;
                effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                _RccNo = _documentNo;
                effect = _inventoryDAL.SaveRCC(_RCC);

                //30/12/2014 generate request in scm2 service
                //if (_RCC.Inr_agent == "RAMP" || _RCC.Inr_agent == "RKA2" || _RCC.Inr_agent == "ES002" || _RCC.Inr_agent == "PT001" || _RCC.Inr_agent == "RIT1" || _RCC.Inr_agent == "RCSSC"
                //    || _RCC.Inr_agent == "OHOSC" || _RCC.Inr_agent == "OKDSC" || _RCC.Inr_agent == "OAPSC" || _RCC.Inr_agent == "ORPSC"
                //    || _RCC.Inr_agent == "OGLSC" || _RCC.Inr_agent == "DP15C" || _RCC.Inr_agent == "PTS001" || _RCC.Inr_agent == "MBS001"
                //    || _RCC.Inr_agent == "PTS003" || _RCC.Inr_agent == "RGIT1" || _RCC.Inr_agent == "APIT1" || _RCC.Inr_agent == "RKIT1"
                //    || _RCC.Inr_agent == "TIHSC" || _RCC.Inr_agent == "RBIT1" || _RCC.Inr_agent == "RLIT1")
                if (_RCC.INR_IS_EXTERNAL == false)
                {
                    if (_isOnline == true)
                    {


                        Int32 ReqSeqNo = 0;
                        ReqSeqNo = _custServiceDAL.GetJobSerialID();   // _inventoryDAL.GetReqSerialID(); 13/5/2016


                        foreach (Service_Req_Hdr _requestHdr in _ReqHdr)
                        {
                            _requestHdr.Srb_seq_no = ReqSeqNo;
                            _requestHdr.Srb_reqno = _RccNo;
                            p_customercode = _requestHdr.Srb_b_cust_cd;
                            p_customername = _requestHdr.Srb_b_cust_name;
                            p_customeraddressinvoce = _requestHdr.Srb_b_add1 + _requestHdr.Srb_b_add2 + _requestHdr.Srb_b_add3;
                            p_customerphoneno = _requestHdr.Srb_b_mobino;

                            //p_customerphoneno = _requestHdr.Srb_b_mobino;
                            _custServiceDAL.SaveRequestHeader(_requestHdr);
                        }

                        foreach (Service_Req_Det _requestDet in _ReqDet)
                        {
                            
                            _requestDet.Jrd_seq_no = ReqSeqNo;
                            _requestDet.Jrd_reqno = _RccNo;
                            _requestDet.Jrd_sjobno = _RccNo + ".1";
                            Jrd_warr = _requestDet.Jrd_warr; //add by tharanga
                            p_transaction_location = _requestDet.Jrd_loc;//add by tharanga
                            _custServiceDAL.SaveRequestDetail(_requestDet);

                         

                        }

                        foreach (Service_Req_Def _requestDef in _defList)
                        {
                            _requestDef.Srdf_seq_no = ReqSeqNo;
                            _requestDef.Srdf_def_line = _defLine;
                            _requestDef.Srdf_req_no = _RccNo;
                            _custServiceDAL.SaveRequestDefDetail(_requestDef);
                            _defLine = _defLine + 1;
                        }
                        //// Tharanga
                        ////foreach (Service_Req_Det _requestDet in _ReqDet)
                        ////{
                        ////DataTable odtnew = new DataTable();
                        //#region var SCM SAVE //Add by tharanga
                        //odtnew = _inventoryDAL.sp_get_inv_war_det(Jrd_warr);

                        //    foreach (DataRow r in odtnew.Rows)
                        //    {
                        //        p_transactionno = r["irsm_doc_no"].ToString();
                        //        p_itemcode = r["irsm_itm_cd"].ToString();
                        //        p_modelno = r["irsm_itm_model"].ToString();
                        //        p_serialno = r["irsm_ser_1"].ToString();
                        //        p_warrantyno = r["irsm_warr_no"].ToString();
                        //        p_warrantystartdate = Convert.ToDateTime(r["irsm_warr_start_dt"].ToString());
                        //        p_warrantyperiod = Convert.ToInt32(r["irsm_warr_period"].ToString());
                        //        p_invoiceno = r["irsm_invoice_no"].ToString();
                        //        //p_customercode = r["irsm_cust_cd"].ToString();
                        //        //p_customername = r["irsm_cust_name"].ToString();
                        //        //p_customeraddressinvoce = r["irsm_cust_addr"].ToString();
                        //        //p_customerphoneno = r["irsm_cust_mobile"].ToString();
                        //        p_podate = Convert.ToDateTime(r["irsm_warr_start_dt"].ToString());
                        //        p_itmbrand = r["irsm_itm_brand"].ToString();
                        //        p_itmdesc = r["irsm_itm_desc"].ToString();
                        //        //p_transaction_location = r["irsm_loc"].ToString();
                        //        p_locdesc = "";
                        //            // p_salesorderno
                        //        p_accno = r["irsm_acc_no"].ToString();
                        //        p_warrlineno = 1;
                        //        p_warranty_remarks = r["irsm_warr_rem"].ToString() == "" ? "N/A" : r["irsm_warr_rem"].ToString();
                        //        p_grnno = r["irsm_orig_grn_no"].ToString();
                        //        p_grndate = Convert.ToDateTime(r["irsm_orig_grn_dt"].ToString());
                        //        p_supcd = r["irsm_orig_supp"].ToString() == "" ? "N/A" : r["irsm_orig_supp"].ToString();
                        //        p_chassis =  r["irsm_ser_2"].ToString();
                        //        p_unitprice = Convert.ToDecimal(r["irsm_unit_price"].ToString());
                        //        p_itemstus = r["irsm_itm_stus"].ToString();
                        //        p_regno = r["irsm_reg_no"].ToString();
                        //        p_frm_loc = r["irsm_loc"].ToString();
                        //        _SCMCommonDAL.UpdateTempWaraUpload_Save(p_transactionno, p_itemcode, p_modelno, p_serialno, p_warrantyno, p_warrantystartdate, p_warrantyperiod, p_invoiceno, p_customercode, p_customername, p_customeraddressinvoce, p_customerphoneno, p_podate, p_itmbrand, p_itmdesc, p_transaction_location, p_accno, p_warranty_remarks, p_grnno, p_grndate, p_supcd, p_chassis, p_unitprice, p_itemstus, p_regno, p_frm_loc);

                        //        //DataTable warde = _inventoryDAL.GetWarrantySearch(null, null, null, _requestDet.Jrd_warr, null, null);
                        //        // DataTable odt = _inventoryDAL.GetINRSERMST_Rcc(_requestDet.Jrd_com, null, _requestDet.Jrd_ser1, _requestDet.Jrd_warr, _requestDet.Jrd_invc_no, null);
                        //        // foreach (DataRow r in odt.Rows)
                        //        // {
                        //        //     warrStaDate = Convert.ToDateTime(r["warrantystartdate"].ToString());
                        //        //     p_podate = Convert.ToDateTime(r["Inv_date"].ToString());
                        //        //     p_transactionno = r["Doc_No"].ToString();
                        //        // }
                        //        // DataTable newodt = _salesDAL.GetSalesHdrByReq(_requestDet.Jrd_com, _requestDet.Jrd_invc_no);
                        //        // InvoiceHeader _hdr = new InvoiceHeader();
                        //        // _hdr = _inventoryDAL.GetInvoiceHeaderDetails(_requestDet.Jrd_invc_no);

                        //        // if (_hdr != null)
                        //        // {
                        //        //     p_hpaccount = _hdr.Sah_acc_no;
                        //        // }
                        //        // List<InventorySerialN> _diliverserials = new List<InventorySerialN>();
                        //        //     _diliverserials= _inventoryDAL.GetDeliveredSerialDetail(_requestDet.Jrd_com, _requestDet.Jrd_invc_no);
                        //        //foreach (InventorySerialN inv in _diliverserials)
                        //        // {
                        //        //      p_grnno = inv.Ins_orig_grnno;
                        //        //      GRN_Date = inv.Ins_orig_grndt;
                        //        // }

                        //        //_SCMCommonDAL.UpdateTempWaraUpload_Save(_requestDet, p_transactionno, DateTime.Now, p_customerCD, p_customerName, p_customerADD, p_customerphoneno, p_hpaccount, p_grnno, GRN_Date);  

                        //    } //End Tharanga
                        //#endregion
                        ////}
                    }

                }
                #region var SCM SAVE //Add by tharanga
                odtnew = _inventoryDAL.sp_get_inv_war_det(_RCC.Inr_warr);
                //DataTable _DT = new DataTable();
                //_DT = _StnCommonDAL.GetRCCSerialSearchData(null, null, 0, 0, _RCC.Inr_warr, "WARRANTY");
                foreach (DataRow r in odtnew.Rows)
                {
                    p_transactionno = r["irsm_doc_no"].ToString();
                    p_itemcode = r["irsm_itm_cd"].ToString();
                    p_modelno = r["irsm_itm_model"].ToString();
                    p_serialno = r["irsm_ser_1"].ToString();
                    p_warrantyno = r["irsm_warr_no"].ToString();
                    p_warrantystartdate = Convert.ToDateTime(r["irsm_warr_start_dt"].ToString());
                    p_warrantyperiod = Convert.ToInt32(r["irsm_warr_period"].ToString());
                    p_invoiceno = r["irsm_invoice_no"].ToString();
                    p_customercode = r["irsm_cust_cd"].ToString();
                    p_customername = r["irsm_cust_name"].ToString();
                    p_customeraddressinvoce = r["irsm_cust_addr"].ToString();
                    p_customerphoneno = _RCC.Inr_tel;
                    p_podate = Convert.ToDateTime(r["irsm_warr_start_dt"].ToString());
                    p_itmbrand = r["irsm_itm_brand"].ToString();
                    p_itmdesc = r["irsm_itm_desc"].ToString();
                    p_transaction_location = _RCC.Inr_agent;
                    p_locdesc = "";
                    // p_salesorderno
                    p_accno = r["irsm_acc_no"].ToString();
                    p_warrlineno = 1;
                    p_warranty_remarks = r["irsm_warr_rem"].ToString() == "" ? "N/A" : r["irsm_warr_rem"].ToString();
                    p_grnno = r["irsm_orig_grn_no"].ToString();
                    p_grndate = Convert.ToDateTime(r["irsm_orig_grn_dt"].ToString());
                    p_supcd = r["irsm_orig_supp"].ToString() == "" ? "N/A" : r["irsm_orig_supp"].ToString();
                    p_chassis = r["irsm_ser_2"].ToString();
                    p_unitprice = Convert.ToDecimal(r["irsm_unit_price"].ToString());
                    p_itemstus = r["irsm_itm_stus"].ToString();
                    p_regno = r["irsm_reg_no"].ToString();
                    p_frm_loc = r["irsm_loc"].ToString();
                    _SCMCommonDAL.UpdateTempWaraUpload_Save(p_transactionno, p_itemcode, p_modelno, p_serialno, p_warrantyno, p_warrantystartdate, p_warrantyperiod, p_invoiceno, p_customercode, p_customername, p_customeraddressinvoce, p_customerphoneno, p_podate, p_itmbrand, p_itmdesc, p_transaction_location, p_accno, p_warranty_remarks, p_grnno, p_grndate, p_supcd, p_chassis, p_unitprice, p_itemstus, p_regno, p_frm_loc);

                }
                #endregion
                //_generalDAL = new GeneralDAL();
                //_salesDAL = new SalesDAL();
                string _serLoc = "";
                DataTable _dtserLoc = _salesDAL.GetServiceAgentbyLoc(_RCC.Inr_com_cd, _RCC.Inr_agent);
                if (_dtserLoc != null)
                    _serLoc = _dtserLoc.Rows[0]["mbe_acc_cd"].ToString();

                if (!string.IsNullOrEmpty(_serLoc))
                {
                    if (_isOnline == true)
                    {
                        Service_Chanal_parameter oPara = _generalDAL.GetChannelParamers(_RCC.Inr_hollogram_no, _serLoc);

                        string SaveLoc = oPara.SP_DOC_SAVE_PATH;
                        if (!string.IsNullOrEmpty(SaveLoc))     //11/5/2015
                        {
                            foreach (ImageUploadDTO oSubItem in oMainList)
                            {
                                string folderName = _RCC.Inr_no;
                                folderName = folderName.Replace('/', '_');
                                folderName = _RCC.Inr_dt.Year.ToString() + @"\" + folderName;
                                if (!Directory.Exists(SaveLoc + _RCC.Inr_dt.Year.ToString()))  //21/5/2015
                                {
                                    Directory.CreateDirectory(SaveLoc + _RCC.Inr_dt.Year.ToString());
                                }
                                if (Directory.Exists(SaveLoc + folderName))
                                {
                                    File.WriteAllBytes(SaveLoc + folderName + @"\" + oSubItem.FileName, oSubItem.image);
                                }
                                else
                                {
                                    Directory.CreateDirectory(SaveLoc + folderName);
                                    File.WriteAllBytes(SaveLoc + folderName + @"\" + oSubItem.FileName, oSubItem.image);
                                }
                            }
                        }
                    }
                }

                //update warranty master by customer details
                if (_isDealer == true)
                    _inventoryDAL.UpdateTempWaraCust(_RCC.Inr_cust_cd, _RCC.Inr_cust_name, _RCC.Inr_addr, _RCC.Inr_tel, _RCC.Inr_warr);
                #region add AOD OUT 2018/10/29 add by tharanga
                if (_RCC.Inr_stage != 5)
                {
                    string _othLoc = string.Empty;
                    #region STOCK ITEM AOD OUT
                    if ( _RCC.Inr_tp == "STK")        //AOD out
                    {


                        if (_RCC.Inr_sub_tp == "NOR")
                        {
                               InventoryHeader _inventoryHeader = new InventoryHeader();
                                #region Inventory Header Value Assign
                                _inventoryHeader.Ith_acc_no = string.Empty;
                                _inventoryHeader.Ith_anal_1 = string.Empty;
                                _inventoryHeader.Ith_anal_10 = false;//Direct AOD
                                _inventoryHeader.Ith_anal_11 = false;
                                _inventoryHeader.Ith_anal_12 = false;
                                _inventoryHeader.Ith_anal_2 = string.Empty;
                                _inventoryHeader.Ith_anal_3 = string.Empty;
                                _inventoryHeader.Ith_anal_4 = string.Empty;
                                _inventoryHeader.Ith_anal_5 = string.Empty;
                                _inventoryHeader.Ith_anal_6 = 0;
                                _inventoryHeader.Ith_anal_7 = 0;
                                _inventoryHeader.Ith_anal_8 = Convert.ToDateTime(_RCC.Inr_dt).Date;
                                _inventoryHeader.Ith_anal_9 = Convert.ToDateTime(_RCC.Inr_dt).Date;
                                _inventoryHeader.Ith_bus_entity = string.Empty;
                                _inventoryHeader.Ith_cate_tp = "NOR";
                                _inventoryHeader.Ith_channel = string.Empty;
                                _inventoryHeader.Ith_com = _RCC.Inr_com_cd;
                                _inventoryHeader.Ith_com_docno = string.Empty;
                                _inventoryHeader.Ith_cre_by = _RCC.Inr_cre_by;
                                _inventoryHeader.Ith_cre_when = DateTime.Now.Date;
                                _inventoryHeader.Ith_del_add1 = string.Empty;
                                _inventoryHeader.Ith_del_add2 = string.Empty;
                                _inventoryHeader.Ith_del_code = string.Empty;
                                _inventoryHeader.Ith_del_party = string.Empty;
                                _inventoryHeader.Ith_del_town = string.Empty;
                                _inventoryHeader.Ith_direct = false;
                                _inventoryHeader.Ith_doc_date = Convert.ToDateTime(_RCC.Inr_dt).Date;
                                _inventoryHeader.Ith_doc_no = string.Empty;
                                _inventoryHeader.Ith_doc_tp = string.Empty;
                                _inventoryHeader.Ith_doc_year = Convert.ToDateTime(_RCC.Inr_dt).Date.Year;
                                _inventoryHeader.Ith_entry_no = string.Empty;
                                _inventoryHeader.Ith_entry_tp = string.Empty;
                                _inventoryHeader.Ith_git_close = false;
                                _inventoryHeader.Ith_git_close_date = Convert.ToDateTime(_RCC.Inr_dt).Date;
                                _inventoryHeader.Ith_git_close_doc = string.Empty;
                                _inventoryHeader.Ith_is_manual = false;
                                _inventoryHeader.Ith_isprinted = false;
                                _inventoryHeader.Ith_sub_docno = _RccNo;
                                _inventoryHeader.Ith_loading_point = string.Empty;
                                _inventoryHeader.Ith_loading_user = string.Empty;
                                _inventoryHeader.Ith_loc = _RCC.Inr_loc_cd;
                                _inventoryHeader.Ith_manual_ref = "0";
                                _inventoryHeader.Ith_mod_by = _RCC.Inr_cre_by;
                                _inventoryHeader.Ith_mod_when = DateTime.Now.Date;
                                _inventoryHeader.Ith_noofcopies = 0;
                                _inventoryHeader.Ith_oth_loc = "";
                                _inventoryHeader.Ith_oth_docno = _RccNo;
                                _inventoryHeader.Ith_remarks = string.Empty;
                                _inventoryHeader.Ith_sbu = string.Empty;
                                //_inventoryHeader.Ith_seq_no = 0; removed by Chamal 12-05-2013
                                _inventoryHeader.Ith_session_id = _RCC.Inr_session_id;
                                _inventoryHeader.Ith_stus = "A";
                                _inventoryHeader.Ith_sub_tp = "SERVICE";    // string.Empty; 10/7/2013
                                _inventoryHeader.Ith_cate_tp = "NOR";
                                _inventoryHeader.Ith_vehi_no = string.Empty;
                                _inventoryHeader.Ith_oth_com = _RCC.Inr_com_cd;

                               // DataTable dt = GetVirtualLocation(_RCC.Inr_com_cd, "RCC", out _othLoc);
                                DataTable dt = _inventoryDAL.GetVirtualLocation(_RCC.Inr_com_cd, "RCC", out _othLoc);
                                if (string.IsNullOrEmpty(_othLoc))
                                {

                                    throw new System.ArgumentException("Cannot Process. Virtual location not found ! ", "RCC");
                                }
                                if (!string.IsNullOrEmpty(_othLoc))
                                {
                                    _inventoryHeader.Ith_oth_loc = _othLoc;
                                    MasterLocation _mstLoc = new MasterLocation();//CHNLSVC.General.GetLocationByLocCode(null, OthLocation);
                                    _mstLoc = _generalDAL.GetLocationByLocCode(null, _othLoc);
                                    _inventoryHeader.Ith_oth_com = _mstLoc.Ml_com_cd;
                                }


                                _inventoryHeader.Ith_anal_1 = "0";
                                _inventoryHeader.Ith_anal_2 = string.Empty;
                                #endregion

                             
                                string _genSalesDoc = string.Empty;

                                MasterAutoNumber _inventoryAuto = new MasterAutoNumber();
                                _inventoryAuto.Aut_moduleid = "AOD";
                                _inventoryAuto.Aut_cate_cd = _RCC.Inr_com_cd;
                                _inventoryAuto.Aut_cate_tp = "LOC";
                                _inventoryAuto.Aut_direction = 0;
                                _inventoryAuto.Aut_modify_dt = null;
                                _inventoryAuto.Aut_year = DateTime.Now.Year;

                                //Serials
                                //List<ReptPickSerials> _serialList = new List<ReptPickSerials>();
                                //string _bin = CHNLSVC.Inventory.GetDefaultBinCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                                foreach (Service_Req_Det _requestDet in _ReqDet)
                                {
                                    ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(_RCC.Inr_com_cd, _RCC.Inr_loc_cd, null, _requestDet.Jrd_itm_cd, Convert.ToInt32(_requestDet.Jrd_ser_id));
                                        //Get_all_details_on_serialID(_RCC.Inr_com_cd, _RCC.Inr_loc_cd, null, _requestDet.Jrd_itm_cd,Convert.ToInt32( _requestDet.Jrd_ser_id));
                                    _reptPickSerial_.Tus_cre_by = _RCC.Inr_cre_by;
                                    _reptPickSerial_.Tus_usrseq_no = 1;
                                    _reptPickSerial_.Tus_cre_by = _RCC.Inr_cre_by;
                                    _reptPickSerial_.Tus_base_doc_no = "N/A";
                                    _reptPickSerial_.Tus_base_itm_line = 0;
                                    _reptPickSerial_.Tus_new_remarks = "AOD-OUT";       //kapila

                                    MasterItem msitem = new MasterItem();
                                    msitem = _inventoryDAL.GetItem("", _requestDet.Jrd_itm_cd); //GetItem("", _requestDet.Jrd_itm_cd);
                                    _reptPickSerial_.Tus_itm_desc = msitem.Mi_shortdesc;
                                    _reptPickSerial_.Tus_itm_model = msitem.Mi_model;
                                    _serialList.Add(_reptPickSerial_);
                                }

                           

                                _effect = SaveCommonOutWardEntry_comm(_RCC.Inr_com_cd, _RCC.Inr_pc, _RCC.Inr_com_cd, null, _inventoryHeader, _inventoryAuto, null, null, _serialList, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false, null, true,
                                    _inventoryDAL, _custServiceDAL, _inventoryRepDAL, _generalDAL, _SCMCommonDAL, _FMSinventoryDAL, _salesDAL);
                                if (_effect==-1)
                                {
                                     throw new System.ArgumentException(_message, "RCC");
                                }
                                aod = _genInventoryDoc;
                           // UpdateJobReqByRcc
                                //int x = _inventoryDAL.updateJobReqByRCC(_RccNo, aod);
                                //int y = _inventoryDAL.updateJobReqDetByRCC(_RccNo, aod);
                            
                                int x = _custServiceDAL.updateJobReqByRCC(_RccNo, aod);
                                int y = _custServiceDAL.updateJobReqDetByRCC(_RccNo, aod);
                            
                        }
                        _effect = 1;
                    }
                    #endregion
                }
                #endregion
                _aod = aod;
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _SCMCommonDAL.TransactionCommit();
                _salesDAL.TransactionCommit();

                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _FMSinventoryDAL.TransactionCommit();

                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _RccNo = "ERROR : " + err.Message.ToString();
                _aod = _message;
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _FMSinventoryDAL.TransactionRollback();



            }
            return effect;

            //Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
            //string _documentNo = _RCC.Inr_loc_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 1) + "-" + string.Format(_autoNo.ToString(), "000000");

            //_inventoryDAL.UpdateRCCDocNo(_docSeqNo, _documentNo);
            //_inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
            //_inventoryDAL.ConnectionClose();
            //return 1;
            //effect = 1;
        }

        //kapila 23/4/2012
        public int Update_RCC_JobOpen(RCC _RCC)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Update_RCC_JobOpen(_RCC);
        }

        public DataTable GetMasterTypes(string _code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMasterTypes(_code);
        }

        public int UpdateJobReqByRcc(string _rccno, string _aodno)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            int x = _inventoryDAL.updateJobReqByRCC(_rccno, _aodno);
            int y = _inventoryDAL.updateJobReqDetByRCC(_rccno, _aodno);
            _inventoryDAL.ConnectionClose();
            return x;
        }

        //kapila
        public int CancelAcInstallReq(string _com, string _loc, string _rccno, string _stus, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();

            int x = _custServiceDAL.Update_SCV_Req_Hdr(_rccno);
            int y = _inventoryDAL.UpdateRCCCancelStatus(_com, _loc, _rccno, _stus, _user);

            _inventoryDAL.ConnectionClose();
            _custServiceDAL.ConnectionClose();

            return x;
        }

        public DataTable GetCustIncomeGroup(string _com, string _code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCustIncomeGroup(_com, _code);
        }





        //kapila 25/4/2012
        public int Update_RCC_Repair(RCC _RCC, out string _error)
        {
            int effect = -1;
            _error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                MasterAutoNumber _number = new MasterAutoNumber();
                _number.Aut_cate_cd = _RCC.Inr_loc_cd;
                _number.Aut_cate_tp = "LOC";
                _number.Aut_direction = null;
                _number.Aut_modify_dt = null;
                _number.Aut_moduleid = "RCCACK";
                _number.Aut_number = 0;
                _number.Aut_start_char = "ACK";
                _number.Aut_year = null;

                MasterAutoNumber _auto = _inventoryDAL.GetAutoNumber(_number.Aut_moduleid, null, _number.Aut_start_char, _number.Aut_cate_tp, _number.Aut_cate_cd, null, null);
                string _ack = _RCC.Inr_loc_cd + "-" + _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_auto);
                _inventoryDAL.Update_RCC_Repair(_RCC);
                _inventoryDAL.UpdateAcknowledgment(_RCC.Inr_com_cd, _RCC.Inr_loc_cd, _RCC.Inr_no, _ack);
                _inventoryDAL.TransactionCommit();
                _error = string.Empty;
                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
                _error = ex.Message;
            }

            return effect;
        }

        //kapila 26/4/2012
        public int Update_RCC_complete(RCC _RCC, InventoryHeader _invHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _errMsg)
        {
            int _ef = 0;
            string _aodInNo = string.Empty;
            _errMsg = "";

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            _generalDAL.BeginTransaction();

            try
            {
                //_ef = _inventoryDAL.Update_RCC_complete(_RCC);

                if (_invHeader != null)
                {
                    string _defbin = _inventoryDAL.GetDefaultBinCode(_invHeader.Ith_com, _invHeader.Ith_loc);

                    MasterAutoNumber _aodinAuto = new MasterAutoNumber();
                    _aodinAuto.Aut_cate_cd = _invHeader.Ith_loc;
                    _aodinAuto.Aut_cate_tp = "LOC";
                    _aodinAuto.Aut_direction = 1;
                    _aodinAuto.Aut_modify_dt = null;
                    _aodinAuto.Aut_year = _invHeader.Ith_doc_date.Date.Year;
                    _aodinAuto.Aut_moduleid = "AOD";
                    _aodinAuto.Aut_start_char = "AOD";
                    // List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_reptPickSerials, _invHeader, _defbin);
                    _invHeader.Ith_seq_no = 0;

                    //SaveInwardScanSerial(_invHeader, _reptPickSerials, _reptPickSerialsSub);

                    //  int effect = UpdateInventoryAutoNumber(_invHeader, _aodinAuto, "+", out _aodInNo);

                    int effect = AODReceipt(_invHeader, _reptPickSerials, _reptPickSerialsSub, _aodinAuto, out _aodInNo);

                    _errMsg = _aodInNo;
                    _ef = effect;

                }
                _ef = _inventoryDAL.Update_RCC_complete(_RCC);
                if (_ef == 1)
                {
                    //updated by akila 2017/12/30 - generate sms for completed RCC
                    if (_RCC != null && (!string.IsNullOrEmpty(_RCC.Inr_no)))
                    {
                        if (_RCC.Inr_stage == 4 && _RCC.NeedToSendSmsReminder)
                        {
                            _salesDAL = new SalesDAL();
                            _salesDAL.ConnectionOpen();

                            string _mobileNo = _RCC.Inr_tel;
                            string _custName = _RCC.Inr_cust_name;
                            string _referance = _RCC.Inr_no;
                            string _sender = _RCC.Inr_mod_by;
                            string _locationCode = _RCC.Inr_loc_cd;

                            string _locDesc = _RCC.Inr_loc_cd;
                            DataTable _locDetails = new DataTable();
                            _locDetails = _salesDAL.getLocDesc(_RCC.Inr_com_cd, "LOC", _RCC.Inr_loc_cd);                            
                            if (_locDetails.Rows.Count > 0)
                            {
                                _locDesc = _locDetails.Rows[0]["descp"] == DBNull.Value ? string.Empty : _locDetails.Rows[0]["descp"].ToString();
                            }

                            string _subChannel = "RRC1";
                            DataTable _subChannelDetails = new DataTable();
                            _subChannelDetails = _generalDAL.GetLocationSubChannel(_RCC.Inr_com_cd, _RCC.Inr_loc_cd);
                            if (_subChannelDetails.Rows.Count > 0)
                            {
                                _subChannel = _subChannelDetails.Rows[0]["mli_val"] == DBNull.Value ? "RRC1" : _subChannelDetails.Rows[0]["mli_val"].ToString();
                            }

                            int _period = 14;
                            string _periodControl = "days";
                            DataTable _rccReminderParameters = new DataTable();
                            _rccReminderParameters = _generalDAL.GetSysParaDetails(_RCC.Inr_com_cd, _subChannel, "RCCREM1DT");
                            if (_rccReminderParameters.Rows.Count > 0)
                            {
                                int.TryParse(_rccReminderParameters.Rows[0]["msp_rest_val"].ToString(), out _period);
                                if (_period < 1)
                                {
                                    _period = 14;
                                }
                                _periodControl = _rccReminderParameters.Rows[0]["msp_rest_cate_tp"] == DBNull.Value ? "days" : _rccReminderParameters.Rows[0]["msp_rest_cate_tp"].ToString().ToLower();
                            }

                            MasterCompany _company = new MasterCompany();
                            _company = _inventoryDAL.GetCompByCode(_invHeader.Ith_com);
                            string _comDesc = ((_company == null) || (string.IsNullOrEmpty(_company.Mc_desc))) ? "Abans PLC" : _company.Mc_desc;

                            string _message = string.Format("Reminder!{0}Please collect your item from {1} showroom within {2} {3} from this day, {4} will not hold responsibility for any loss, damage or disposal of the item.", Environment.NewLine, _locDesc, _period.ToString(), _periodControl, _comDesc);

                            if (string.IsNullOrEmpty(_mobileNo))
                            {
                                _errMsg = "Receiver mobile number not found !";
                            }
                            else if (string.IsNullOrEmpty(_message))
                            {
                                _errMsg = "SMS body is empty !";
                            }
                            else if (_mobileNo.Length >= 9)
                            {
                                OutSMS _out = new OutSMS();
                                _out.Msg = _message;
                                _out.Msgstatus = 0;
                                _out.Msgtype = "S";
                                _out.Receivedtime = DateTime.Now;
                                _out.Receiver = _custName; //customer name or code

                                if (_mobileNo.Length == 10)
                                {
                                    _out.Receiverphno = "+94" + _mobileNo.Substring(1, 9);
                                    _out.Senderphno = "+94" + _mobileNo.Substring(1, 9); //mobile number
                                }
                                if (_mobileNo.Length == 9)
                                {
                                    _out.Receiverphno = "+94" + _mobileNo;
                                    _out.Senderphno = "+94" + _mobileNo;
                                }

                                _out.Refdocno = _referance; //reference number
                                _out.Sender = _sender; //send by 
                                _out.Createtime = DateTime.Now;
                                _generalDAL.SaveSMSOut(_out);
                            }
                            else
                            {
                                _errMsg = "Invalid mobile number !";
                            }
                        }
                    }
                    _inventoryDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                }
                // _inventoryDAL.TransactionCommit();
                _ef = 1;
            }

            catch (Exception ex)
            {
                _ef = -1;
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _errMsg = _aodInNo;
            }
            return _ef;
        }

        #endregion

        #region InventoryRequest(MRN/GRAN/DIN/INTER-TRANSFER)

        //Miginda - 30/03/2012
        public int SaveInventoryRequestData(InventoryRequest _inventoryRequest, MasterAutoNumber _mastAutoNo, out string _docNo)
        {
            int result = 0;
            int resultR = 0;
            int seqno = 0;
            int itmballine = 1;
            string _errro = "";
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            InventoryRequest _inventoryRequest_R = new InventoryRequest();
            _securityDAL = new SecurityDAL();

            if (_mastAutoNo != null) //Insert new record.
            {
                #region New Entry

                try
                {
                    //using (TransactionScope scope = new TransactionScope())
                    //{
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    //Save InventoryRequest details to DB.

                    //_inventoryRequest.Itr_seq_no = _inventoryDAL.GetSerialID();
                    //_inventoryRequest.Itr_req_no = Convert.ToString(_inventoryRequest.Itr_seq_no);
                    result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                    //result = _inventoryRequest.Itr_seq_no;

                    //Save InventoryRequest Item details.
                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            _inventoryRequestItem.Itri_seq_no = result;
                            _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);

                            //kapila 7/6/2017
                            itmballine = 1;
                            if (_inventoryRequest.Itr_tp == "MRN")
                            {
                                DataTable _dtItmBal = _inventoryDAL.GetRootBalances(_inventoryRequest.Itr_com, _inventoryRequest.Itr_loc, _inventoryRequestItem.Itri_itm_cd);
                                foreach (DataRow r in _dtItmBal.Rows)
                                {
                                    InventoryReqItemBal _reqItmBal = new InventoryReqItemBal();
                                    _reqItmBal.IRB_ITM = _inventoryRequestItem.Itri_itm_cd;
                                    _reqItmBal.IRB_LINE = itmballine;
                                    _reqItmBal.IRB_LOC = r["inl_loc"].ToString();
                                    _reqItmBal.IRB_QTY = Convert.ToInt32(r["inl_qty"]);
                                    _reqItmBal.IRB_REQ_LINE = _inventoryRequestItem.Itri_line_no;
                                    _reqItmBal.IRB_RT_CD = r["frs_cd"].ToString(); ;
                                    _reqItmBal.IRB_SEQ = result;
                                    _reqItmBal.IRB_STUS = r["inl_itm_stus"].ToString(); ;
                                    itmballine = itmballine + 1;
                                    _inventoryDAL.SaveInventoryRequestItmBal(_reqItmBal);
                                }
                            }
                        }
                        //ADDED BY SACHITH
                        //2012/08/16
                        //SAVE INS_REQ_SER
                        if (_inventoryRequest.InventoryRequestSerialsList != null)
                        {
                            foreach (InventoryRequestSerials _inventoryRequestSerial in _inventoryRequest.InventoryRequestSerialsList)
                            {
                                _inventoryRequestSerial.Itrs_seq_no = result;
                                _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestSerial);
                            }
                        }
                        //END
                    }


                nx:
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                    //Check Save Req No
                    if (_inventoryDAL.CheckInventoryNo("sp_getreqno", "p_req_no", _documentNo) == 1)
                    {
                        goto nx;
                    }
                    // Update document no in Request Header table.
                    _inventoryDAL.UpdateInventoryRequestDocNo(result, _documentNo);
                    _docNo = _documentNo;

                    DataTable _detFound = _inventoryDAL.GetInventoryRequestItemsBySeqNo(result.ToString());
                    #region add reservation log update 07 Nov 2016 Lakshan
                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            #region update reservation det and log add by Lakshan 28 Oct 2016
                            if (_inventoryRequest.Itr_system_module == "MRN" && _inventoryRequest.Temp_is_res_request == true)
                            {
                                // string _errro = "";
                                if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                {
                                    int _res = 0;
                                    _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                        IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                        IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                        IRD_RES_BQTY = _inventoryRequestItem.Itri_qty
                                    });

                                    if (_res > 0)
                                    {
                                        _res = 0;
                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                        {
                                            IRL_CURT_COM = _inventoryRequest.Itr_com,
                                            IRL_CURT_LOC = _inventoryRequest.Itr_issue_from,
                                            IRL_ORIG_DOC_TP = "INV",
                                            IRL_ORIG_DOC_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                            IRL_CURT_DOC_TP = _inventoryRequest.Itr_tp,
                                            IRL_CURT_DOC_NO = _documentNo,
                                            IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                            IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                            IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                            IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_MOD_DT = DateTime.Now,
                                            IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                            IRL_CRE_DT = DateTime.Now,
                                            IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_RES_QTY = _inventoryRequestItem.Itri_qty
                                        }, 0, _inventoryDAL, out _errro);
                                    }
                                    if (_res < 1)
                                    {
                                        _docNo = _errro;
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        return result;
                                    }
                                    if (_res > 0)
                                    {
                                        List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA(new INR_RES_DET()
                                        {
                                            IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus
                                        });
                                        decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                        if (_resBal == 0)
                                        {
                                            _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                            {
                                                IRS_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRS_STUS = "F"
                                            });
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    #endregion


                    if (_detFound == null)
                    {
                        _docNo = "Item list not saved";
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    if (_detFound.Rows.Count <= 0)
                    {
                        _docNo = "Item list not saved";
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    if (result > 0)
                    {
                        if (_inventoryRequest.Itr_sub_tp == "BOQ" && _inventoryRequest.Itr_tp == "MRN")
                        {
                            #region add by lakshan 20Aug2017
                            foreach (InventoryRequestItem _reItm in _inventoryRequest.InventoryRequestItemList)
                            {
                                _inventoryDAL.UpdateBowMrnQty(_reItm.Itri_base_req_no, _reItm.Itri_base_req_line, _reItm.Itri_qty);
                            }
                            List<SatProjectDetails> _boqList = _inventoryDAL.GET_SAT_PRO_DET_DATA(new SatProjectDetails() { SPD_NO = _inventoryRequest.Itr_job_no, SPD_ACTVE = 1 });
                            _boqList = _boqList.Where(c => c.SPD_MRN_BAL > 0).ToList();
                            bool _isFinish = true;
                            if (_boqList != null)
                            {
                                if (_boqList.Count > 0)
                                {
                                    _isFinish = false;
                                }
                            }
                            if (_isFinish)
                            {
                                _inventoryDAL.UPDATE_PROJECT(_inventoryRequest.Itr_job_no, "U");
                            }
                            #endregion
                        }
                        else if (_inventoryRequest.Itr_sub_tp == "ADBOQ" && _inventoryRequest.Itr_tp == "MRN")
                        {

                        }
                        else
                        {
                            _inventoryDAL.UPDATE_PROJECT(_inventoryRequest.Itr_job_no, "U");
                        }

                    }

                    //Add by akila 2017/12/28 - Rcc add item back to stock
                    if ((_inventoryRequest.Rcc_Details != null) && (!string.IsNullOrEmpty(_inventoryRequest.Rcc_Details.Inr_no)) && _inventoryRequest.Rcc_Details.Inr_Is_Add_To_Stk == 1)
                    {
                        _generalDAL = new GeneralDAL();
                        _generalDAL.ConnectionOpen();
                        _generalDAL.BeginTransaction();

                    //    _inventoryRequest.Rcc_Details.Inr_Req_no = _docNo;
                    //    Int16 _rowCount = _generalDAL.UpdateRccWithRequest(_inventoryRequest.Rcc_Details);
                    //    if (_rowCount < 1)
                    //    {
                    //        _generalDAL.TransactionRollback();
                    //        throw new Exception("Couldn't save RCC details");
                    //    }
                    //    _generalDAL.TransactionCommit();
                    //}

                    ////Add by akila 2017/12/28 - Rcc add item back to stock
                    //if ((_inventoryRequest.Rcc_Details != null) && (!string.IsNullOrEmpty(_inventoryRequest.Rcc_Details.Inr_no)) && _inventoryRequest.Rcc_Details.Inr_Is_Add_To_Stk == 1)
                    //{                    
                    //    _generalDAL = new GeneralDAL();
                    //    _generalDAL.ConnectionOpen();
                    //    _generalDAL.BeginTransaction();

                        _inventoryRequest.Rcc_Details.Inr_Req_no = _docNo;
                        Int16 _rowCount = _generalDAL.UpdateRccWithRequest(_inventoryRequest.Rcc_Details);
                        if (_rowCount < 1)
                        {
                            _generalDAL.TransactionRollback();
                            throw new Exception("Couldn't save RCC details");
                        }
                        _generalDAL.TransactionCommit();
                    }
                    _inventoryDAL.TransactionCommit();
                    result = 1;
                }
                catch (Exception ex)
                {
                    result = -1;
                    _inventoryDAL.TransactionRollback();
                    _docNo = ex.Message;
                }
                #endregion
            }
            else //Update an existing record.
            {
                //using (TransactionScope scope = new TransactionScope())
                //{
                #region Update Entry
                try
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    //   _inventoryDAL.BeginTransaction();
                    //Update InventoryRequest item details to DB.
                    result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                    int hdr_seqNo = 0;

                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        result = _inventoryDAL.SAVE_LOG_INTREQITM(_inventoryRequest, null, _inventoryRequest.Itr_cre_by);
                        result = _inventoryDAL.SAVE_LOG_INTREQSER(_inventoryRequest, null, _inventoryRequest.Itr_cre_by);

                        hdr_seqNo = _inventoryDAL.DeleteInventoryRequestItemData(_inventoryRequest);

                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            _inventoryRequestItem.Itri_seq_no = hdr_seqNo;
                            _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        }
                    }

                    if ((_inventoryRequest.InventoryRequestSerialsList != null) && (_inventoryRequest.InventoryRequestSerialsList.Count > 0))
                    {
                        foreach (InventoryRequestSerials _inventoryRequestserial in _inventoryRequest.InventoryRequestSerialsList)
                        {
                            _inventoryRequestserial.Itrs_in_seqno = hdr_seqNo;
                            _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestserial);
                        }
                    }
                    #region add reservation log update 07 Nov 2016 Lakshan
                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            #region update reservation det and log add by Lakshan 28 Oct 2016
                            if (_inventoryRequest.Itr_system_module == "MRN" && _inventoryRequest.Temp_is_res_request == true)
                            {
                                string errr = "";
                                if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                {
                                    int _res = 0;
                                    _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                        IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                        IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                        IRD_RES_BQTY = _inventoryRequestItem.Itri_qty
                                    });
                                    if (_res > 0)
                                    {
                                        _res = 0;
                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                        {
                                            IRL_CURT_COM = _inventoryRequest.Itr_com,
                                            IRL_CURT_LOC = _inventoryRequest.Itr_issue_from,
                                            IRL_ORIG_DOC_TP = "INV",
                                            IRL_ORIG_DOC_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                            IRL_CURT_DOC_TP = "MRN",
                                            IRL_CURT_DOC_NO = _inventoryRequest.Itr_req_no,
                                            IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                            IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                            IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                            IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_MOD_DT = DateTime.Now,
                                            IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                            IRL_CRE_DT = DateTime.Now,
                                            IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_RES_QTY = _inventoryRequestItem.Itri_qty
                                        }, 0, _inventoryDAL, out errr);
                                    }
                                    if (_res < 1)
                                    {
                                        _docNo = errr;
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        return result;
                                    }
                                    if (_res > 0)
                                    {
                                        List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA_NEW(new INR_RES_DET()
                                        {
                                            IRD_RES_NO = _inventoryRequestItem.Itri_res_no
                                        });
                                        decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                        if (_resBal == 0)
                                        {
                                            _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                            {
                                                IRS_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRS_STUS = "F"
                                            });
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    #endregion
                    _docNo = string.Empty;
                    //    _inventoryDAL.TransactionCommit();
                    //scope.Complete();
                    //}
                    result = 1;
                }
                catch (Exception ex)
                {
                    result = -1;
                    //     _inventoryDAL.TransactionRollback();
                    _docNo = ex.Message;
                }
                #endregion
            }

            //Added By Udaya For auto MRN approve mail send 08/Nov/2017
            if (result == 1)
            {
                try
                {
                    #region Email
                    if (_inventoryRequest.Itr_stus == "A")
                    {
                        if (_inventoryRequest.TMP_SEND_MAIL && _inventoryRequest.Itr_com == "AEC")
                        {
                            _generalDAL = new GeneralDAL();
                            _generalDAL.ConnectionOpen();
                            _salesDAL = new SalesDAL();
                            _salesDAL.ConnectionOpen();
                            StringBuilder html = new StringBuilder();
                            string htmlBody = string.Empty;
                            if (_inventoryRequest.InventoryRequestItemList != null)
                            {
                                if (_inventoryRequest.InventoryRequestItemList.Count > 0)
                                {
                                    DataTable dt = new DataTable();
                                    //Building an HTML string.
                                    DataRow dr = null;
                                    dt.Columns.Add(new DataColumn("Item", typeof(string)));
                                    dt.Columns.Add(new DataColumn("Req. Qty", typeof(decimal)));
                                    dt.Columns.Add(new DataColumn("App. Qty", typeof(decimal)));
                                    //Table start.
                                    html.Append("<!DOCTYPE html>");
                                    html.Append("<html>");
                                    html.Append("<body>");
                                    html.Append("<table style=' background-repeat:no-repeat; width:450px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                                    //Building the Header row.
                                    html.Append("<tr>");
                                    foreach (DataColumn column in dt.Columns)
                                    {
                                        html.Append("<th style=' background-color:#B5E3F0; width:100px; margin:0;' >");
                                        html.Append(column.ColumnName);
                                        html.Append("</th>");
                                    }
                                    html.Append("</tr>");
                                    foreach (InventoryRequestItem _updateitem in _inventoryRequest.InventoryRequestItemList)
                                    {
                                        string _itmDes = _generalDAL.GetItemMaster(_updateitem.Itri_itm_cd).Mi_shortdesc;
                                        html.Append("<tr>");
                                        html.Append("<th align='left'>");
                                        html.Append(_updateitem.Itri_itm_cd + " - " + _itmDes);
                                        html.Append("</th>");
                                        html.Append("<th>");
                                        html.Append(_updateitem.Itri_qty);
                                        html.Append("</th>");
                                        html.Append("<th>");
                                        html.Append(_updateitem.Itri_app_qty);
                                        html.Append("</th>");
                                        html.Append("</tr>");

                                    }
                                    html.Append("</table>");
                                }
                            }

                            string locDes = string.Empty;
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();
                            MasterLocation _mstLoc = new MasterLocation();
                            List<MsgInformation> _mail = new List<MsgInformation>();
                            List<MsgInformation> _mailFrmLoc = new List<MsgInformation>();
                            DataTable loctbl = _salesDAL.getLocDesc(_inventoryRequest.Itr_com, "", _inventoryRequest.Itr_rec_to);
                            if (loctbl.Rows.Count > 0)
                            {
                                locDes = loctbl.AsEnumerable().FirstOrDefault().Field<string>("descp");
                            }
                            _mstLoc = _generalDAL.GetLocationInfor(_inventoryRequest.Itr_com, _inventoryRequest.Itr_rec_to);
                            _mail = _generalDAL.GetMsgInformation(_inventoryRequest.Itr_com, "", "MRN_APP");
                            _mailFrmLoc = new List<MsgInformation>() { new MsgInformation() { Mmi_email = _mstLoc.Ml_email } };
                            if (_mail != null)
                            {
                                _mailFrmLoc.AddRange(_mail);
                            }

                            if (_mstLoc != null)
                            {
                                if (_mailFrmLoc != null)
                                {
                                    if (_mailFrmLoc.Count > 0)
                                    {
                                        foreach (MsgInformation _info in _mailFrmLoc)
                                        {
                                            message = new MailMessage();
                                            if (!string.IsNullOrEmpty(_info.Mmi_email) && (_info.Mmi_email != "N/A"))
                                            {
                                                string _preparedU = string.Empty;
                                                string _approvedU = string.Empty;
                                                DataTable _creUsr = _salesDAL.GetinvUser(_inventoryRequest.Itr_cre_by);
                                                if (_creUsr.Rows.Count > 0)
                                                {
                                                    _preparedU = _creUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_USR_NAME");
                                                }
                                                DataTable _appUsr = _salesDAL.GetinvUser(_inventoryRequest.Itr_gran_app_by);
                                                if (_appUsr.Rows.Count > 0)
                                                {
                                                    _approvedU = _appUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_USR_NAME");
                                                }
                                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                                smtpClient.Host = _generalDAL.GetMailHost();
                                                smtpClient.Port = 25;
                                                message.From = fromAddress;
                                                string FOOTER = _generalDAL.GetMailFooterMsg();
                                                string _email = "";
                                                _docNo = _docNo.Replace("Normal:", "");
                                                _email = "Dear Sir/Madam, <br><br>" + "Your MRN Request (" + _docNo + ") Approved by Distribution Department <br>";
                                                _email = _email + "Prepared User : " + _preparedU + " <br>";
                                                _email = _email + "Approved User : " + _approvedU + " <br>";
                                                _email = _email + "Approved Date : " + _inventoryRequest.Itr_mod_dt + " <P>";
                                                _email = _email + "<br>" + html + "<br>";// +FOOTER;
                                                _email = _email + "Thank You, <br>";
                                                _email = _email + "** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** <br>";
                                                _email = _email + "** IT Department ** <br>";
                                                message.To.Add(_info.Mmi_email);
                                                message.Subject = "MRN Approval - " + locDes;
                                                message.IsBodyHtml = false;
                                                message.Body = _email;
                                                message.IsBodyHtml = true;
                                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                                // Send SMTP mail
                                                smtpClient.Send(message);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                result = 1;
                                _generalDAL.ConnectionClose();
                                _salesDAL.ConnectionClose();
                            }
                        }
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    result = 1;
                    _generalDAL.ConnectionClose();
                    _salesDAL.ConnectionClose();
                }
            }
            return result;
        }

        //::GRAN/DIN:: Chamal - 09/07/2012
        public int SaveGRANRequestData(InventoryRequest _inventoryRequest, MasterAutoNumber _mastAutoNo, out string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            int result = 0;

            if (_mastAutoNo != null) //Insert new record.
            {
                using (TransactionScope scope = new TransactionScope())
                {
                    _inventoryDAL.ConnectionOpen();
                    //Save InventoryRequest details to DB.
                    result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);

                    //Save InventoryRequest Item/Serials details.
                    SaveGRANSerials(_inventoryRequest.InventoryRequestSerialsList, _inventoryRequest.Itr_seq_no);

                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);

                    // Update document no in Request Header table.
                    _inventoryDAL.UpdateInventoryRequestDocNo(_inventoryRequest.Itr_seq_no, _documentNo);
                    _inventoryDAL.UpdateAutoNumber(_mastAutoNo);

                    _docNo = _documentNo;

                    result = 1;
                    _inventoryDAL.ConnectionClose();
                    scope.Complete();
                }
            }
            else //Update an existing record.
            {
                using (TransactionScope scope = new TransactionScope())
                {
                    _inventoryDAL.ConnectionOpen();
                    //Update InventoryRequest item details to DB.
                    result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                    int hdr_seqNo = _inventoryDAL.DeleteInventoryRequestItemData(_inventoryRequest);

                    //Save InventoryRequest Item/Serials details.
                    SaveGRANSerials(_inventoryRequest.InventoryRequestSerialsList, hdr_seqNo);

                    _docNo = string.Empty;

                    _inventoryDAL.ConnectionClose();
                    scope.Complete();
                }
            }

            return result;
        }

        #region gran Serials and Items Save process

        private Int16 SaveGRANSerials(List<InventoryRequestSerials> _reptPickSerials, Int32 _docSeqNo)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 serLine = 1;

            List<InventoryRequestSerials> PickSerials = new List<InventoryRequestSerials>();
            PickSerials = _reptPickSerials;

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Itrs_itm_cd, _pickSerials.Itrs_itm_stus } into itm
                select new { itemcode = itm.Key.Itrs_itm_cd, itemstatus = itm.Key.Itrs_itm_stus, itemqty = itm.Sum(p => p.Itrs_qty) };

            foreach (var items in _tbitems)
            {
                InventoryRequestItem invItem = new InventoryRequestItem();
                invItem.Itri_seq_no = _docSeqNo;
                invItem.Itri_line_no = itmLine;
                invItem.Itri_itm_cd = items.itemcode;
                invItem.Itri_itm_stus = items.itemstatus;
                invItem.Itri_qty = items.itemqty;
                invItem.Itri_unit_price = 0;
                invItem.Itri_app_qty = items.itemqty;
                invItem.Itri_res_no = string.Empty;
                invItem.Itri_note = string.Empty;
                invItem.Itri_mitm_cd = string.Empty;
                invItem.Itri_mitm_stus = string.Empty;
                invItem.Itri_mqty = 0;
                // INSERT/UPDATE INT_ITM TABLE
                _inventoryDAL.SaveInventoryRequestItem(invItem);

                serLine = 1;
                var _tbsers =
                    (from _pickSerials in PickSerials
                     where _pickSerials.Itrs_itm_cd == items.itemcode && _pickSerials.Itrs_itm_stus == items.itemstatus
                     select _pickSerials).Distinct();
                foreach (var sers in _tbsers.Distinct())
                {
                    InventoryRequestSerials invSerials = new InventoryRequestSerials();
                    invSerials.Itrs_seq_no = _docSeqNo;
                    invSerials.Itrs_line_no = itmLine;
                    invSerials.Itrs_ser_line = serLine;
                    invSerials.Itrs_itm_cd = sers.Itrs_itm_cd;
                    invSerials.Itrs_itm_stus = sers.Itrs_itm_stus;
                    invSerials.Itrs_ser_1 = sers.Itrs_ser_1;
                    invSerials.Itrs_ser_2 = sers.Itrs_ser_2;
                    invSerials.Itrs_ser_3 = sers.Itrs_ser_3;
                    invSerials.Itrs_ser_4 = sers.Itrs_ser_4;
                    invSerials.Itrs_qty = sers.Itrs_qty;
                    invSerials.Itrs_in_seqno = sers.Itrs_in_seqno;
                    invSerials.Itrs_in_docno = sers.Itrs_in_docno;
                    invSerials.Itrs_in_itmline = sers.Itrs_in_itmline;
                    invSerials.Itrs_in_batchline = sers.Itrs_in_batchline;
                    invSerials.Itrs_in_serline = sers.Itrs_in_serline;
                    invSerials.Itrs_in_docdt = sers.Itrs_in_docdt;
                    invSerials.Itrs_trns_tp = sers.Itrs_trns_tp;
                    invSerials.Itrs_rmk = sers.Itrs_rmk;
                    invSerials.Itrs_ser_id = sers.Itrs_ser_id;
                    invSerials.Itrs_nitm_stus = sers.Itrs_nitm_stus;
                    _inventoryDAL.SaveInventoryRequestSerials(invSerials);
                    serLine += 1;
                }
                itmLine += 1;
            }

            effect = 1;

            return effect;
        }

        #endregion

        //Miginda - 31/03/2012
        public List<InventoryRequest> GetAllInventoryRequestData(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllInventoryRequestData(_inventoryRequest);
        }

        //Chamal 06/06/2012
        public DataTable GetAllInventoryRequestDataTable(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllInventoryRequestDataTable(_inventoryRequest);
        }

        //kapila
        public DataTable getRCCbySerialWar(string _ser, string _war)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getRCCbySerialWar(_ser, _war);
        }

        //Miginda - 02/04/2012
        public InventoryRequest GetInventoryRequestData(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();

            _inventoryDAL.ConnectionOpen();

            //Get Header details.
            InventoryRequest _inventoryReqResult = _inventoryDAL.GetInventoryRequestDataByReqNo(_inventoryRequest);

            if (_inventoryReqResult != null)
            {
                //Get Item details.
                List<InventoryRequestItem> _inventoryRequestItemList = _inventoryDAL.GetInventoryRequestItemDataByReqNo(_inventoryRequest);

                if (_inventoryRequestItemList != null)
                {
                    _inventoryReqResult.InventoryRequestItemList = _inventoryRequestItemList;
                }

                //ADDED SACHITH 2012/08/17
                //GET SERIALS
                DataTable dt = _inventoryDAL.GetAllGRANSerialsTable(_inventoryReqResult.Itr_com, _inventoryReqResult.Itr_loc, _inventoryReqResult.Itr_tp, _inventoryReqResult.Itr_req_no);

                List<InventoryRequestSerials> _inventortrequestserials = FF.DataAccessLayer.DataTableExtensions.ToGenericList<InventoryRequestSerials>(dt, InventoryRequestSerials.ConvertTotal);
                if (_inventortrequestserials != null)
                {
                    _inventoryReqResult.InventoryRequestSerialsList = _inventortrequestserials;
                }
            }

            _inventoryDAL.ConnectionClose();

            return _inventoryReqResult;
        }

        public DataTable GetJobNoByReqNo(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetJobNoByReqNo(_reqNo);
        }
        //Chamal 06/06/2012
        public DataTable GetInventoryRequestItemDataByReqNoTable(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryRequestItemDataByReqNo(_reqNo);
        }

        //Miginda - 18/05/2012
        public int UpdateInventoryRequestStatus(InventoryRequest _inventoryRequest, List<InventoryRequestItem> _itemList = null)
        {
            int result = 0;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                result = _inventoryDAL.UpdateInventoryRequestStatus(_inventoryRequest);
                if ((result > 0) && (_itemList != null))
                {
                    if (_itemList.Count > 0)
                    {
                        List<InventoryRequestItem> _reqItemList = new List<InventoryRequestItem>();
                        _reqItemList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_inventoryRequest.Itr_req_no);


                        if ((_reqItemList != null) && (_reqItemList.Count > 0))
                        {
                            int seqNo = Convert.ToInt32(_reqItemList.FirstOrDefault().Itri_seq_no.ToString());
                            string loc = _inventoryRequest.Itr_issue_from.ToString();
                            foreach (InventoryRequestItem _item in _reqItemList)
                            {
                                _itemList.Where(x => x.Itri_itm_cd == _item.Itri_itm_cd).ToList().ForEach(x => { x.Itri_seq_no = _item.Itri_seq_no; x.Itri_line_no = _item.Itri_line_no; x.Itri_qty = _item.Itri_qty; }); // x.Itri_loc=_item.

                                foreach (InventoryRequestItem _itemdet in _itemList)
                                {

                                    _itemdet.Itri_loc = loc;
                                    _itemdet.Itri_seq_no = seqNo;
                                    _inventoryDAL.SaveInventoryRequestItem(_itemdet);

                                }
                                break;
                            }

                            //foreach (InventoryRequestItem _item in _itemList)
                            //{
                            //    List<InventoryRequestItem> _tmpItemList = _reqItemList.Where(x => x.Itri_itm_cd == _item.Itri_itm_cd).Select(x => x).ToList();
                            //    if (_tmpItemList != null)
                            //    {
                            //        foreach (InventoryRequestItem _itemdet in _tmpItemList)
                            //        {
                            //            _itemdet.Itri_app_qty = _item.Itri_app_qty;
                            //            _itemdet.Itri_bqty = _item.Itri_bqty;



                            //            _inventoryDAL.SaveInventoryRequestItem(_itemdet);
                            //        }
                            //    }
                            //}
                        }
                        _inventoryDAL.TransactionCommit(); /////
                    }
                }


                //kapila 21/4/2017
                #region add reservation log update by lakshan 04 Mar 2017
                List<InventoryRequestItem> _reqList = new List<InventoryRequestItem>();
                _reqList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_inventoryRequest.Itr_req_no);
                if (_reqList != null)
                {
                    if (_reqList.Count > 0)
                    {
                        foreach (var item in _reqList)
                        {

                            if (!string.IsNullOrEmpty(item.Itri_res_no) && (item.Itri_res_no != "N/A"))
                            {

                                InventoryRequest _intMrn = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_req_no }).FirstOrDefault();
                                int _res = 0;
                                string _errro = "";
                                _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                {
                                    IRD_RES_NO = item.Itri_res_no,
                                    IRD_ITM_CD = item.Itri_itm_cd,
                                    IRD_ITM_STUS = item.Itri_itm_stus,
                                    IRD_RES_BQTY = (item.Itri_qty * -1)
                                });

                                INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                                _baseDocCancel.IRL_CURT_COM = _intMrn.Itr_com;
                                _baseDocCancel.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                _baseDocCancel.IRL_ORIG_DOC_TP = _intMrn.Itr_tp;
                                _baseDocCancel.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                                _baseDocCancel.IRL_CURT_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                _baseDocCancel.IRL_CURT_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                _baseDocCancel.IRL_RES_NO = item.Itri_res_no;
                                _baseDocCancel.IRL_ITM_CD = item.Itri_itm_cd;
                                _baseDocCancel.IRL_ITM_STUS = item.Itri_itm_stus;
                                _baseDocCancel.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                _baseDocCancel.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                _baseDocCancel.IRL_RES_QTY = item.Itri_qty;
                                _res = ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                                if (_res > 0)
                                {
                                    INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                    _refDocSave.IRL_CURT_COM = _intMrn.Itr_com;
                                    _refDocSave.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                    _refDocSave.IRL_ORIG_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                    _refDocSave.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                    _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                    _refDocSave.IRL_CURT_DOC_TP = "INV";
                                    _refDocSave.IRL_CURT_DOC_NO = item.Itri_res_no;
                                    _refDocSave.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                    _refDocSave.IRL_RES_NO = item.Itri_res_no;
                                    _refDocSave.IRL_ITM_CD = item.Itri_itm_cd;
                                    _refDocSave.IRL_ITM_STUS = item.Itri_itm_stus;
                                    _refDocSave.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                    _refDocSave.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                    _refDocSave.IRL_MOD_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                    _refDocSave.IRL_CRE_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                    _refDocSave.IRL_RES_QTY = item.Itri_qty;
                                    _res = ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                                }
                                if (_res < 1)
                                {
                                    _res = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();
                                    return _res;
                                }
                            }
                        }
                    }
                }
                #endregion
                //_inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                result = 1;
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }

        //Code by Chamal De Silva on 06/07/2012
        public DataTable GetAllGRANSerialsTable(string _company, string _loc, string _documentType, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllGRANSerialsTable(_company, _loc, _documentType, _docNo);
        }

        //Code by Chamal De Silva on 06/07/2012
        public List<InventoryRequestSerials> GetAllGRANSerialsList(string _company, string _loc, string _documentType, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            List<InventoryRequestSerials> _granInv = new List<InventoryRequestSerials>();
            _granInv = _inventoryDAL.GetAllGRANSerialsList(_company, _loc, _documentType, _docNo);
            if (_documentType == "GRAN")
            {
                //***-----
                //Add by Chamal 28-07-2014
                if (_granInv.Count > 0)
                {
                    var _granItems = from t in _granInv
                                     group t by new { t.Itrs_itm_cd, t.Itrs_itm_stus } into g
                                     select new { g.Key.Itrs_itm_cd, g.Key.Itrs_itm_stus };
                    foreach (var _oneItem in _granItems)
                    {
                        MasterItem _itemMst = new MasterItem();
                        _itemMst = _inventoryDAL.GetItem(_company, _oneItem.Itrs_itm_cd);
                        if (_itemMst.Mi_is_ser1 == 0)
                        {
                            List<ReptPickSerials> _tempInv = new List<ReptPickSerials>();
                            _tempInv = _inventoryDAL.Get_all_serials_for_itemCD(_company, _loc, string.Empty, _oneItem.Itrs_itm_cd);
                            if (_tempInv.Count > 0)
                            {
                                var _invbyStatus = from q in _tempInv where q.Tus_itm_stus == _oneItem.Itrs_itm_stus && q.Tus_new_remarks == null select q;
                                var _granSpecItem = from k in _granInv where k.Itrs_itm_cd == _oneItem.Itrs_itm_cd && k.Itrs_itm_stus == _oneItem.Itrs_itm_stus select k;
                                foreach (var _onegranSpecItem in _granSpecItem)
                                {
                                    foreach (var _oneinvbyStatus in _invbyStatus)
                                    {
                                        InventoryRequestSerials _newGRAN = new InventoryRequestSerials();
                                        _newGRAN.Itrs_in_seqno = _oneinvbyStatus.Tus_seq_no;
                                        _newGRAN.Itrs_in_itmline = _oneinvbyStatus.Tus_itm_line;
                                        _newGRAN.Itrs_in_batchline = _oneinvbyStatus.Tus_batch_line;
                                        _newGRAN.Itrs_in_serline = _oneinvbyStatus.Tus_ser_line;
                                        _newGRAN.Itrs_in_docdt = _oneinvbyStatus.Tus_doc_dt.Date;
                                        _newGRAN.Itrs_ser_id = _oneinvbyStatus.Tus_ser_id;

                                        _newGRAN.Itrs_seq_no = _onegranSpecItem.Itrs_seq_no;
                                        _newGRAN.Itrs_line_no = _onegranSpecItem.Itrs_line_no;
                                        _newGRAN.Itrs_ser_line = _onegranSpecItem.Itrs_ser_line;
                                        _newGRAN.Itrs_itm_cd = _onegranSpecItem.Itrs_itm_cd;
                                        _newGRAN.Itrs_itm_stus = _onegranSpecItem.Itrs_itm_stus;

                                        _inventoryDAL.UpdateGRANSerialsFIFOOrder(_newGRAN);
                                        _oneinvbyStatus.Tus_new_remarks = "OK";
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                _granInv = new List<InventoryRequestSerials>();
                _granInv = _inventoryDAL.GetAllGRANSerialsList(_company, _loc, _documentType, _docNo);
                //-----***
            }
            return _granInv;
        }

        #endregion

        //kapila 18/8/2015
        #region save temporary saved GRN
        public Int16 SaveInwardScanSerial_TempSavedGRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;

            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeader.Ith_com;
            string _documentType = _inventoryMovementHeader.Ith_doc_tp;

            _companycostmethod = _inventoryDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;


            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            #region Set default values for null values :: Chamal 25/10/2012
            foreach (ReptPickSerials pickserials in PickSerials)
            {
                if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
                {
                    pickserials.Tus_base_doc_no = "N/A";
                }
            }
            #endregion Set default values for null values :: Chamal 25/10/2012




            DataTable dt_location = _inventoryDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = Convert.ToString(rw["ML_CATE_2"]); //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
            }

            if (_scm2LocCategory == "DF")
                _scmLocCategory = "DUTY FREE";
            else
                _scmLocCategory = "DUTY PAID";


            //////if (_inventoryMovementHeader.Ith_seq_no == 0)
            //////{
            //////    _inventoryMovementHeader.Ith_seq_no = _inventoryDAL.GetSerialID();
            //////}
            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            ////  if (_inventoryMovementHeader != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };


            foreach (var items in _tbitems)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = items.bincode;
                invItem.Iti_item_code = items.itemcode;
                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;

                _inventoryDAL.UpdateInventoryItem(invItem);


                batchLine = 1;

                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                    group _pickSerials by new
                    {
                        _pickSerials.Tus_bin,
                        _pickSerials.Tus_itm_cd,
                        _pickSerials.Tus_itm_stus,
                        _pickSerials.Tus_unit_cost,
                        _pickSerials.Tus_unit_price,
                        _pickSerials.Tus_base_doc_no,
                        _pickSerials.Tus_doc_no,
                        _pickSerials.Tus_base_itm_line,
                        _pickSerials.Tus_itm_line,
                        _pickSerials.Tus_batch_line,
                        _pickSerials.Tus_job_no,
                        _pickSerials.Tus_job_line,
                        _pickSerials.Tus_batch_no,
                        _pickSerials.Tus_exp_dt,
                        _pickSerials.Tus_manufac_dt
                    } into batch
                    select new
                    {
                        bincode = batch.Key.Tus_bin,
                        itemcode = batch.Key.Tus_itm_cd,
                        itemstatus = batch.Key.Tus_itm_stus,
                        unitcost = batch.Key.Tus_unit_cost,
                        unitprice = batch.Key.Tus_unit_price,
                        basedocno = batch.Key.Tus_base_doc_no,
                        baseitmline = batch.Key.Tus_base_itm_line,
                        outdocno = batch.Key.Tus_doc_no,
                        outitmline = batch.Key.Tus_itm_line,
                        outbatchline = batch.Key.Tus_batch_line,
                        jobno = batch.Key.Tus_job_no,
                        jobline = batch.Key.Tus_job_line,
                        batchno = batch.Key.Tus_batch_no,
                        expdate = batch.Key.Tus_exp_dt,
                        manufacdate = batch.Key.Tus_manufac_dt,

                        itemqty = batch.Sum(p => p.Tus_qty)
                    };
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                    invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                    invBatch.Inb_bin = batchs.bincode;
                    invBatch.Inb_itm_cd = batchs.itemcode;
                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = batchs.unitprice;
                    invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)
                    invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                    invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                    invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                    invBatch.Inb_base_itmcd = batchs.itemcode;
                    invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                    invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                    invBatch.Inb_base_itmstus = batchs.itemstatus;
                    invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;
                    invBatch.Inb_manufac_dt = batchs.manufacdate;

                    //INT_BATCH
                    ////        _inventoryDAL.UpdateInventoryBatch(invBatch);--------------------------

                    //INR_BATCH
                    _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);

                    serLine = 1;
                    var _tbsers =
                        (from _pickSerials in PickSerials
                         where _pickSerials.Tus_bin == batchs.bincode && _pickSerials.Tus_itm_cd == batchs.itemcode && _pickSerials.Tus_itm_stus == batchs.itemstatus && _pickSerials.Tus_unit_cost == batchs.unitcost
                         && _pickSerials.Tus_unit_price == batchs.unitprice
                         && _pickSerials.Tus_base_doc_no == batchs.basedocno
                         && _pickSerials.Tus_doc_no == batchs.outdocno
                         && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                         && _pickSerials.Tus_itm_line == batchs.outitmline
                         && _pickSerials.Tus_batch_line == batchs.outbatchline
                         select _pickSerials).Distinct();
                    foreach (var sers in _tbsers.Distinct())
                    {
                        reptSeqNo = sers.Tus_usrseq_no;

                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                        invSerials.Ins_bin = sers.Tus_bin;
                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        invSerials.Ins_cross_seqno = null;
                        invSerials.Ins_cross_itmline = null;
                        invSerials.Ins_cross_batchline = null;
                        invSerials.Ins_cross_serline = null;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;
                        invSerials.Ins_ageloc = sers.Tus_ageloc;
                        invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                        invSerials.Ins_isownmrn = sers.Tus_isownmrn;



                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                        _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                        _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                        _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                        _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                        _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                        _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                        _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                        _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;


                        if (sers.Tus_ser_id != 0)
                        {
                            //INR_SERMST
                            ////      _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);---------------------------

                            //INT_SER
                            ////      _inventoryDAL.SaveInventorySerial(invSerials, 1);-------------------------------

                            //INR_SER
                            _inventoryDAL.SaveInventorySerialRef(invSerials, 1);

                            serLine += 1;
                        }
                    }

                    batchLine += 1;
                }

                itmLine += 1;
            }

            //UPDATE INT_HDR SET ITH_STUS ='F'
            _inventoryDAL.UpdateOutDocStatus(_inventoryMovementHeader.Ith_oth_docno);

            // Update location inventory
            var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainv)
            {

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;

                //INR_LOC
                _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
            }
            if (reptSeqNo != 0)
            {
                _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            }

            effect = 1;

            return effect;
        }


        #endregion save temporary saved GRN
        public List<MasterItem> GetItemsByCate(string _mainCate, string _subCate, string _itmRange)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemsByCate(_mainCate, _subCate, _itmRange);
        }

        //code by -shani (Consignment Return)
        //11-5-2012
        // to search item by supplier and serial 1 or serial 2
        public DataTable getDetail_on_serial_Supplier(string _company, string _location, string supplierCD, string serial_1, string serial_2)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getDetail_on_serial_Supplier(_company, _location, supplierCD, serial_1, serial_2);
        }

        //10-5-2012
        public List<ReptPickSerials> GET_ser_for_ItmCD_Supplier(string company, string location, string binCode, string itemCode, string supplier)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_ser_for_ItmCD_Supplier(company, location, binCode, itemCode, supplier);
        }

        //kapila
        public DataTable GetSalesDetailsMobSer(string _invNo)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSalesDetailsMobSer(_invNo);
        }

        //code by -Shani  (Status change)
        //9-5-2012

        public Boolean Update_sat_itm_DO_qty(string invoiceNo, Int32 item_Line, int DO_qty)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Boolean rows = false;
            rows = _inventoryDAL.Update_sat_itm_DO_qty(invoiceNo, item_Line, DO_qty);
            _inventoryDAL.ConnectionClose();
            return rows;
        }

        public Int32 GET_SEQNUM_FOR_INVOICE(string doc_type, string company, string invoiceNO, int direction_)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.GET_SEQNUM_FOR_INVOICE(doc_type, company, invoiceNO, direction_);
        }

        public Int32 Get_Scan_SeqNo(string _company, string _location, string _doctype, string _user, int _direction, string _docNo)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.Get_Scan_SeqNo(_company, _location, _doctype, _user, _direction, _docNo);
        }

        //8-5-2012
        public List<ReptPickSerials> Search_serials_for_itemCD(string company, string location, string itemCode, string pbook, string pblvl)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Search_serials_for_itemCD(company, location, itemCode, pbook, pblvl, "", false);
        }
        public List<ReptPickSerials> Search_serials_for_itemCD2(string company, string location, string itemCode, string status, string suplr)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Search_serials_for_itemCD2(company, location, itemCode, status, suplr);
        }

        //2-5-2012
        public Boolean Update_serialID_INS_AVAILABLE(string compny, string location, string itemCD, Int32 ser_ID, int availability)
        {           
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
             Boolean rows = false;
            rows = _inventoryDAL.Update_serialID_INS_AVAILABLE(compny, location, itemCD, ser_ID, availability);
            _inventoryDAL.ConnectionClose();
            return rows;
        }                    

        public ReptPickSerials Get_all_details_on_serialID(string company, string location, string bin, string itemCode, int serial_ID)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();

            return _inventoryDAL.Get_all_details_on_serialID(company, location, bin, itemCode, serial_ID);
        }

        //23-4-2012
        #region

        public List<string> Get_all_Itemcodes()
        {
            List<string> itemCodes = new List<string>();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            itemCodes = _inventoryDAL.Get_all_Itemcodes();

            return itemCodes;
        }

        //sachith 2012/07/19
        public DataTable Get_all_Items()
        {
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.Get_all_Items();
        }

        //sachith 2012/07/19
        public DataTable Get_all_manual_docs_by_type(string _Comp, string _loc, string _code)
        {
            DataTable _dt = null;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _dt = _inventoryDAL.Get_all_manual_docs_by_type(_loc, _code);
            else
                _dt = _FMSinventoryDAL.Get_all_manual_docs_by_type(_loc, _code);
            return _dt;
        }

        //sachith 2012/07/19
        public int UpdateGntManDocDt(string _Comp, string _loc, string _code, string _type, int _current, string _prefix, string _bookNo)
        {
            int _x = 0;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _x = _inventoryDAL.UpdateGntManDocDt(_loc, _code, _type, _current, _prefix, _bookNo);
            else
                _x = _FMSinventoryDAL.UpdateGntManDocDt(_loc, _code, _type, _current, _prefix, _bookNo);
            return _x;
        }

        //sachith 2012/07/19
        public int UpdateGntManDocPages(string _Comp, string _prefix, string _loc, string _code, int _current, int _last, string _user, string _rmk)
        {
            int _x = 0;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _x = _inventoryDAL.UpdateGntManDocPages(_prefix, _loc, _code, _current, _last, _user, _rmk);
            else
                _x = _FMSinventoryDAL.UpdateGntManDocPages(_prefix, _loc, _code, _current, _last, _user, _rmk);
            return _x;
        }

        public List<string> GetAll_binCodes_for_loc(string company, string location)
        {
            List<string> bin_list = new List<string>();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            bin_list = _inventoryDAL.GetAll_binCodes_for_loc(company, location);

            return bin_list;
        }

        //coded by- Shani on 25/4/2012
        public List<ReptPickSerials> Get_all_serials_for_itemCD(string company, string location, string binCode, string itemCode)//searching button
        {
            List<ReptPickSerials> serial_list = new List<ReptPickSerials>();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            serial_list = _inventoryDAL.Get_all_serials_for_itemCD(company, location, binCode, itemCode);
            return serial_list;
        }

        public List<ReptPickSerials> Search_by_serial(string company, string location, string itemCode, string bin, string serial_1, string serial_2)
        {
            List<ReptPickSerials> list_of_serials = new List<ReptPickSerials>();
            InventoryDAL _inventoryDAL = new InventoryDAL();

            list_of_serials = _inventoryDAL.Search_by_serial(company, location, itemCode, bin, serial_1, serial_2);
            return list_of_serials;
        }

        public ReptPickSerials Get_all_details_on_serial(string company, string location, string bin, string itemCode, string serial_1)
        {
            //DataTable dt = new DataTable();
            ReptPickSerials rps = new ReptPickSerials();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            rps = _inventoryDAL.Get_all_details_on_serial(company, location, bin, itemCode, serial_1);
            return rps;
        }

        //Code By - Shani on 24/4/2012
        public Dictionary<string, string> Get_all_ItemSatus()
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_all_ItemSatus();
        }

        public DataTable getDetail_on_serial1(string _company, string _location, string _serial1)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getDetail_on_serial1(_company, _location, _serial1);
        }
        //Nadeeka 16-02-2015
        public DataTable getMovementSerial(string _item, string _serial1)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getMovementSerial(_item, _serial1);
        }




        //Code by -shani on 30/4/2012
        public DataTable Get_location_by_code(string com_code, string location)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_location_by_code(com_code, location);
        }

        public DataTable Get_location_by_code_all(string com_code, string location, int _all)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_location_by_code(com_code, location, _all);
        }

        //Code by -shani on27/4/2012
        public string Get_item_description(string itemCode)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_item_description(itemCode);
        }

        public Boolean Update_TEMP_PICK_SER(string compny, string location, Int32 userseq_no, Int32 ser_id, string newstatus, string newremarks)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            Boolean rows = false;
            rows = rcd.Update_TEMP_PICK_SER(compny, location, userseq_no, ser_id, newstatus, newremarks);
            return rows;
        }

        //Code By- Shani on 2-5-2012
        public Boolean Del_temp_pick_serdummy(string compny, string location, Int32 userSeqNo, Int32 ser_id, string itemCd, string bin)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            Boolean rows = false;
            rows = rcd.Del_temp_pick_serdummy(compny, location, userSeqNo, ser_id, itemCd, bin);
            return rows;
        }

        public Boolean Del_temp_pick_itm(Int32 _seqNo, string _itemCode, string _itemStatus, Int32 _itemLine, Int32 _type)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.Del_temp_pick_itm(_seqNo, _itemCode, _itemStatus, _itemLine, _type);
        }

        //Code By -shani on 26/4/2012
        //Rukshan Add Item Parameter and Del_temp_pick_Subser
        //updated by akila - 2017/09/13
        public Boolean Del_temp_pick_ser(string compny, string location, Int32 userSeqNo, Int32 ser_id, string Item, string _mainSerila, ReptPickItems _pickItem = null)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            bool _isDeleted = false;

            try
            {
                _isDeleted = _inventoryRepDAL.Del_temp_pick_ser(compny, location, userSeqNo, ser_id, Item);
                if (_isDeleted)
                {
                    //update pick item
                    if (_pickItem != null)
                    {
                        _inventoryRepDAL.UpdateScanItemDetails(_pickItem);
                    }
                    _inventoryRepDAL.Del_temp_pick_Subser(userSeqNo, _mainSerila, Item);
                }

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
            }
            catch (Exception)
            {
                _isDeleted = false;
                _inventoryDAL.TransactionRollback();
            }
            return _isDeleted;
            //ReptCommonDAL rcd = new ReptCommonDAL();
            //Boolean rows = false;
            //rows = rcd.Del_temp_pick_ser(compny, location, userSeqNo, ser_id, Item);
            //string _Sid = ser_id.ToString();
            //rows = rcd.Del_temp_pick_Subser(userSeqNo, _mainSerila, Item);
            //return rows;
        }
        // Nadeeka 11-11-2015
        public DataTable GetItemAllocationDet(string _item)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();

            return rcd.GetItemAllocationDet(_item);

        }

        public Boolean Update_inrser_INS_AVAILABLE(string compny, string location, string itemCD, string ser_1, int availability)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Boolean rows = false;
            rows = _inventoryDAL.Update_inrser_INS_AVAILABLE(compny, location, itemCD, ser_1, availability);
            _inventoryDAL.ConnectionClose();
            return rows;
        }

        #endregion

        //Code By -Shani on 5/4/2012
        #region

        public List<string> GetAll_Adj_SubTypes()
        {
            List<string> subTypesList = new List<string>();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            subTypesList = _inventoryDAL.GetAll_Adj_SubTypes();

            return subTypesList;
        }

        public string Get_Adj_SubTypes_description(string subtypeCd)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            string desc = _inventoryDAL.Get_Adj_SubTypes_description(subtypeCd);

            return desc;
        }

        public List<string> GetAll_Adj_SeqNums_for_user(string usrID, string doc_type, int direction_, string company_)
        {
            List<string> seqNumList = new List<string>();
            ReptCommonDAL rcd = new ReptCommonDAL();

            seqNumList = rcd.GetAll_Adj_SeqNums_for_user(usrID, doc_type, direction_, company_);
            return seqNumList;
        }

        public int Generate_new_seq_num(string usrID, string doc_type, int direction_, string company_)
        {
            int seq = 0;
            // ReptCommonDAL rcd = new ReptCommonDAL();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            seq = _inventoryDAL.Generate_new_seq_num(usrID, doc_type, direction_, company_);
            _inventoryDAL.ConnectionClose();
            return seq;
        }

        public Int32 SaveSeq_to_TempPickHDR(ReptPickHeader Rph)
        {
            Int32 result = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                result = _inventoryRepDAL.SavePickedHeader(Rph);

                _inventoryRepDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryRepDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }

        #endregion

        #region get Delivered items
        //Written By Nadeeka on 01/01/2013

        public DataTable GetDeliveryOrderDetailDt(string _company, string _invoice, int _line)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDeliveryOrderDetailDt(_company, _invoice, _line);
        }

        #endregion

        //Written By Nadeeka on 23/07/2013
        public DataTable GetUserNameByUserID(string _UserID)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetUserNameByUserID(_UserID);
        }


        //Written By Nadeeka on 23/07/2013
        public int CheckSubSerialAvl(string _subser, string _subItem)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.CheckSubSerialAvl(_subser, _subItem);
        }

        //Written By Nadeeka on 23/02/2015
        public int checkReqItemAllowCompany(string _item, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.checkReqItemAllowCompany(_item, _com);
        }
        //Written By Nadeeka on 23/02/2015
        public int checkReqItemAllow(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.checkReqItemAllow(_item);
        }
        //Written By Nadeeka on 24/02/2015
        public Boolean CheckJobInventoryBalance(string _com, string _loc, string _job, Int16 _jobline, List<ReptPickItems> _scanitemNew)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            Boolean _IsStockavailable = true;

            foreach (ReptPickItems _ReptPickItem in _scanitemNew)
            {
                if (_inventoryDAL.CheckJobInventoryBalance(_com, _loc, _job, _jobline, _ReptPickItem.Tui_pic_itm_cd, _ReptPickItem.Tui_pic_itm_stus, _ReptPickItem.Tui_req_itm_qty) == 0)
                {
                    _IsStockavailable = false;
                    break;
                }
            }

            return _IsStockavailable;

        }


        //Written By Nadeeka on 07/06/2013
        public DataTable GetCrditNoteforWarrantyClaim(string in_AdjNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCrditNoteforWarrantyClaim(in_AdjNo);
        }

        //Written By Nadeeka on 07/06/2013
        public DataTable GetCrditNoteforWarrantyClaimScm2(string in_AdjNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCrditNoteforWarrantyClaimScm2(in_AdjNo);
        }

        //Written By Nadeeka on 01/01/2013

        public DataTable GetPODetails(string _po)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPODetails(_po);
        }







        //Written By Nadeeka on 01/01/2013
        public DataTable GetPODeliveryDetails(string _po)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPODeliveryDetails(_po);
        }

        //Written By Nadeeka on 08/01/2013
        public DataTable GetInventoryRequestByReqNo(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryRequestByReqNo(_reqNo);
        }

        //Written By Nadeeka on 08/01/2013

        public DataTable GetMoveSubTypeTable(string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMoveSubTypeTable(_type);
        }

        //Written By Nadeeka on 24/04/2013

        public DataTable ServicejobCard(string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.ServicejobCard(_jobNo);
        }

        //Written By Nadeeka on 26/04/2013
        public DataTable ServicejobCardHistory(string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.ServicejobCardHistory(_jobNo);
        }

        //Written By Nadeeka on 26/04/2013
        public DataTable ServicejobCardDefect(string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.ServicejobCardDefect(_jobNo);
        }

        public DataTable GetMoveSubTypeAllTable(string _maintype, string _subtype)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMoveSubTypeAllTable(_maintype, _subtype);
        }



        //Written By Nadeeka on 08/03/2013
        public DataTable DamgeGoodApproval(DateTime in_FromDate, DateTime in_ToDate, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string in_user)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.DamgeGoodApproval(in_FromDate, in_ToDate, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_user);
        }







        //Written By Nadeeka on 08/01/2013
        public DataTable Get_all_LocationsTable(string company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_all_LocationsTable(company);
        }

        //Written By Nadeeka on 08/01/2013

        public DataTable GetInventoryRequestItemsBySeqNo(string _seqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryRequestItemsBySeqNo(_seqNo);
        }

        //Written By Nadeeka on 09/01/2013

        //public DataTable GetInventoryRequestItemsBySeqNo(string _seqNo)
        //{
        //    _inventoryDAL = new InventoryDAL();
        //    return _inventoryDAL.GetInventoryRequestItemsBySeqNo(_seqNo);
        //}

        //Written By Nadeeka on 09/01/2013

        public DataTable GetRCCbyNoTable(string _rcc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRCCbyNoTable(_rcc);
        }


        //Written By Nadeeka on 12-11-2015

        public DataTable GetJobForSerial(string _com, string _item, string _ser, Int32 _serid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetJobForSerial(_com, _item, _ser, _serid);
        }


        public RCC GetRCCbySerial(string _Item, string _Serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRCCbySerial(_Item, _Serial);
        }

        //Written By Nadeeka on 10/01/2013

        public DataTable GetAdhochdrTable(string _ref)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAdhochdrTable(_ref);
        }

        //Written By Nadeeka on 10/01/2013

        public DataTable GetAdhocdetTable(string _ref)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAdhocdetTable(_ref);
        }

        public DataTable FixedAssetBalDetails(string _User)
        {
            _StnCommonDAL = new STNCommonDAL();
            return _StnCommonDAL.FixedAssetBalDetails(_User);
        }

        public DataTable FixedAsset(string _com, string _pc, DateTime _from, DateTime _to, string _user)
        {
            _StnCommonDAL = new STNCommonDAL();
            return _StnCommonDAL.FixedAsset(_com, _pc, _from, _to, _user);
        }

        //Written By Nadeeka on 10/01/2013

        public DataTable GetInventorySerialbyId(string _serId, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventorySerialbyId(_serId, _loc);
        }

        //Written By Nadeeka on 01/01/2013

        public DataTable GetInventoryRequestSerialsBySeqNo(string _seqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryRequestSerialsBySeqNo(_seqNo);
        }

        //Written By Prabhath on 2/5/2012
        public DataTable GetItemComponentTable(string _mainItemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemComponentTable(_mainItemCode);
        }

        #region Consignment Receipt Note

        public List<PurchaseOrder> GetAllPendingConsignmentRequestData(PurchaseOrder _paramPurchaseOrder)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPendingConsignmentRequestData(_paramPurchaseOrder);
        }

        public DataTable GetAllPendingPurchaseOrderDataTable(PurchaseOrder _paramPurchaseOrder)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPendingPurchaseOrderDataTable(_paramPurchaseOrder);
        }

        public DataTable GetPOItemsDataTable(string _comCode, string _poNo, Int32 _all)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOItemsDataTable(_comCode, _poNo, _all);
        }

        public PurchaseOrder GetConsignmentRequestDetails(string _companyCode, string _docNo, string _locCode)
        {
            _inventoryDAL = new InventoryDAL();

            //Get Purchase Order header details.
            PurchaseOrder _purchaseOrder = _inventoryDAL.GetPurchaseOrderHeaderDetails(_companyCode, _docNo);

            if (_purchaseOrder != null)
            {
                //Get Purchase Order item details for given location.(current location)
                _purchaseOrder.PurchaseOrderDeliveryList = _inventoryDAL.GetConsignmentItemDetails(_companyCode, _docNo, _locCode);
            }

            return _purchaseOrder;
        }

        //Code by Chamal 07/02/2013
        public List<PurchaseOrderDelivery> GetConsignmentItemDetails(string _companyCode, string _docNo, string _locCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetConsignmentItemDetails(_companyCode, _docNo, _locCode);
        }

        #endregion

        //Code By Miginda on 08/05/2012
        public Int32 GetRequestUserSeqNo(string _companyCode, string _docNo)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            rcd.ConnectionOpen();
            return rcd.GetRequestUserSeqNo(_companyCode, _docNo);
        }

        //Code By Miginda on 08/05/2012
        public Int32 IsExistInSerialMaster(string _companyCode, string _itemCode, string _serialNo1)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.IsExistInSerialMaster(_companyCode, _itemCode, _serialNo1);
        }

        //Code By Chamal on 06/Feb/2014
        public int IsExistInSerial1(string _com, string _itemCode, string _serialNo1)
        {
            _inventoryDAL = new InventoryDAL();
            int _serID = 0;
            _inventoryDAL.ConnectionOpen();
            _serID = _inventoryDAL.IsExistInSerial1(_com, _itemCode, _serialNo1);
            _inventoryDAL.ConnectionClose();
            return _serID;
        }

        //Code By Chamal on 06/Feb/2014
        public int IsExistInSerial2(string _com, string _itemCode, string _serialNo2)
        {
            _inventoryDAL = new InventoryDAL();
            int _serID = 0;
            _inventoryDAL.ConnectionOpen();
            _serID = _inventoryDAL.IsExistInSerial2(_com, _itemCode, _serialNo2);
            _inventoryDAL.ConnectionClose();
            return _serID;
        }

        //Code By Miginda on 08/05/2012
        public Int32 IsExistInTempPickSerial(string _companyCode, string _userSeqNo, string _itemCode, string _serialNo1)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.IsExistInTempPickSerial(_companyCode, _userSeqNo, _itemCode, _serialNo1);
        }

        public Int32 GetSerialID()
        {
            Int32 _newSerialID = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _newSerialID = _inventoryDAL.GetSerialID();
            _inventoryDAL.ConnectionClose();

            return _newSerialID;
        }

        public DataTable GetAvailableItemStatus(string _company, string _location, string _bin, string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailableItemStatus(_company, _location, _bin, _item, _serial);
        }

        //HW
        public List<InventoryLocation> GetItemInventoryBalance(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalance(_company, _location, _item, _status);
        }

        //hw prabhath on 14 05 2012
        public List<ReptPickSerials> GetNonSerializedItemInTopOrder(string _company, string _location, string _bin, string _item, string _status, decimal _qty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetNonSerializedItemInTopOrder(_company, _location, _bin, _item, _status, _qty);
        }

        public List<string> GetBinCodesforInventoryInward(string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBinCodesforInventoryInward(company, location);
        }

        public Int16 SavePickedSerialsDecimalItems(ReptPickSerials _scanserNew)
        {
            ReptCommonDAL _reptCommonDAL = new ReptCommonDAL();
            _reptCommonDAL.ConnectionOpen();
            Int16 result = _reptCommonDAL.SavePickedSerialsDecimalItems(_scanserNew);
            _reptCommonDAL.ConnectionClose();
            return result;
        }

        //code by -shani (Consignment Return)
        //14-5-2012
        public Boolean Update_temp_pick_serdummy(string user, string compny, string location, Int32 userSeqNo, string serial_1, string itemCd, string bin, Decimal newQty)//serial_1 is "_"
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.Update_temp_pick_serdummy(user, compny, location, userSeqNo, serial_1, itemCd, bin, newQty);
        }

        //14-5-2012
        public List<ReptPickSerials> Get_TEMP_PICK_SER(string _company, string _location, string _user, Int32 _userseqno, Int32 ser_id, string serial_1, string itemCD, string binCD)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.Get_TEMP_PICK_SER(_company, _location, _user, _userseqno, ser_id, serial_1, itemCD, binCD);
        }

        #region Purchase Order

        //Written by darshana 04-06-2012
        public List<PurchaseOrderDelivery> GetPODelItems(PurchaseOrderDelivery _paramPODelItems)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPODelItems(_paramPODelItems);
        }

        public List<PurchaseOrderDetail> GetPOItems(PurchaseOrderDetail _paramPOItems)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOItems(_paramPOItems);
        }

        public PurchaseOrder GetPOHeader(string _com, string _poNo, string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOHeader(_com, _poNo, _type);
        }

        public List<MasterItemTax> GetItemTax(string _company, string _item, string _status, string _taxCode, string _taxRateCode)
        {
            _inventoryDAL = new InventoryDAL();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _list = _inventoryDAL.GetItemTax(_company, _item, _status, _taxCode, _taxRateCode);
            return _list;
        }

        public bool IsValidItemStatus(string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsValidItemStatus(_status);
        }

        public bool IsValidCompanyItem(string _company, string _Item, Int16 _active)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsValidCompanyItem(_company, _Item, _active);
        }

        public bool IsValidSupplier(string _company, string _supplier, Int16 _active, string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsValidSupplier(_company, _supplier, _active, _type);
        }

        public List<QoutationDetails> GetSupplierQuotation(string _com, string _sup, string _type, string _subtype, DateTime _date, decimal _qty, string _status, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            List<QoutationDetails> _list = new List<QoutationDetails>();
            _list = _inventoryDAL.GetSupplierQuotation(_com, _sup, _type, _subtype, _date, _qty, _status, _item);
            return _list;
        }

        public Int16 UpdatePOStatus(PurchaseOrder _UpdatePO)
        {
            Int16 _effects = 0;
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.UpdatePOStatus(_UpdatePO.Poh_doc_no, _UpdatePO.Poh_stus, _UpdatePO.Poh_com, _UpdatePO.Poh_seq_no);
                _inventoryDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        //modify Rukshan 15/oct/2015 add List<InventoryRequestItem > _Porequest
        public Int16 UpdatePOStatusNew(PurchaseOrder _UpdatePO, List<InventoryRequestItem> _Porequest)
        {


            Int16 _effects = 0;
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryDAL.ConnectionOpen();

                //updated by akila 2017/07/03
                _effects = _inventoryDAL.UpdatePOStatusNew(_UpdatePO.Poh_doc_no, _UpdatePO.Poh_stus, _UpdatePO.Poh_com, _UpdatePO.Poh_seq_no, _UpdatePO.Poh_cre_by);

                //updated by akila 2017/07/03
                if (_effects > 0)
                {
                    if (_UpdatePO.Poh_sub_tp == "S") { _inventoryDAL.UpdateConfirmedSCVPO(_UpdatePO.Poh_doc_no, _UpdatePO.Poh_job_no, _UpdatePO.Poh_cre_by); }

                    if (_Porequest != null)
                    {
                        foreach (InventoryRequestItem _PORItems in _Porequest)
                        {
                            _inventoryDAL.Update_PORequestBalanceQty(_PORItems);
                        }

                    }
                }

                //if (_Porequest != null)
                //{
                //    foreach (InventoryRequestItem _PORItems in _Porequest)
                //    {
                //        _inventoryDAL.Update_PORequestBalanceQty(_PORItems);
                //    }

                //}
                _inventoryDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 UpdateSavedPO(PurchaseOrder _UpdatePO, List<PurchaseOrderDetail> _UpdatePOItems, List<PurchaseOrderDelivery> _UpdatePODel, Int32 _SeqNo)
        {
            Int16 _effects = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                // using (TransactionScope _tr = new TransactionScope())
                // {
                // _inventoryDAL.ConnectionOpen();

                _inventoryDAL.DeletePODel(_SeqNo);
                _inventoryDAL.DeletePODet(_SeqNo);
                _inventoryDAL.SaveNewPO(_UpdatePO);

                if (_UpdatePOItems != null)
                {
                    foreach (PurchaseOrderDetail _POItems in _UpdatePOItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                }

                if (_UpdatePODel != null)
                {
                    foreach (PurchaseOrderDelivery _DelItems in _UpdatePODel)
                    {
                        _inventoryDAL.SaveNewPODel(_DelItems);
                    }
                }

                //Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                //string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);

                //_inventoryDAL.UpdatePODocNo(_NewPO.Poh_seq_no, _documentNo);

                //_inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                //docno = _documentNo;

                // _inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                _effects = 1;
                //_tr.Complete();
                return _effects;
            }

            catch (Exception err)
            {
                _effects = -1;
                //  string msg = "ERROR : " + err.Message.ToString();
                //docno = msg;
                _inventoryDAL.TransactionRollback();
                return _effects;
            }

        }

        public Int16 SaveNewPO(PurchaseOrder _NewPO, List<PurchaseOrderDetail> _NewPOItems, List<PurchaseOrderDelivery> _NewPODel, List<PurchaseOrderAlloc> _NewPOAloc, MasterAutoNumber _masterAutoNumber, List<PurchaseReq> _PurchaseReq, List<InventoryRequestItem> _Porequest, out string docno, bool _saveSalesOrder = false)
        {
            Int16 _effects = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();

            // using (TransactionScope _tr = new TransactionScope())
            // {
            try
            {

                _inventoryDAL.SaveNewPO(_NewPO);
                if (_NewPOItems != null)
                {
                    foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                }
                if (_NewPODel != null)
                {
                    foreach (PurchaseOrderDelivery _DelItems in _NewPODel)
                    {
                        _inventoryDAL.SaveNewPODel(_DelItems);
                    }
                }
                //kapila
                if (_NewPOAloc != null)
                {
                    foreach (PurchaseOrderAlloc _AlocItems in _NewPOAloc)
                    {
                        _inventoryDAL.SaveNewPOAloc(_AlocItems);
                    }
                }
                if (_PurchaseReq != null)
                {
                    foreach (PurchaseReq _req in _PurchaseReq)
                    {
                        _req.Por_seq_no = _NewPO.Poh_seq_no;
                        _inventoryDAL.SAVE_PurchaseOrderRequest(_req);
                    }

                }
                if (_Porequest != null)
                {
                    foreach (InventoryRequestItem _PORItems in _Porequest)
                    {

                        _inventoryDAL.Update_PORequestBalanceQty(_PORItems);
                    }

                }

                bool _isSCMImpPo = false;//Add by Chamal 24/06/2013
                if (_NewPO.Poh_tp == "I" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "IMPORTS" && _NewPO.Poh_job_no == "IMPORTS_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "LOCAL_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "QUO_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_isSCMImpPo == false)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);
                    _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                    _inventoryDAL.UpdatePODocNo(_NewPO.Poh_seq_no, _documentNo);
                    docno = _documentNo;
                }
                else
                {
                    docno = _NewPO.Poh_doc_no;
                }


                if (_saveSalesOrder)
                {
                    SalesBLL Salesbl = new SalesBLL();
                    List<InterCompanySalesParameter> oInterCompanySalesParameters = Salesbl.GET_INTERCOM_PAR_BY_SUP(_NewPO.Poh_com, _NewPO.Poh_supp);
                    if (oInterCompanySalesParameters != null && oInterCompanySalesParameters.Count > 0)
                    {
                        SalesOrderHeader SalesOrder = new SalesOrderHeader();
                        SalesOrder.SOH_COM = oInterCompanySalesParameters[0].Sritc_frm_com;
                        SalesOrder.SOH_PC = oInterCompanySalesParameters[0].Sritc_frm_prof;
                        SalesOrder.SOH_TP = "INV";
                        SalesOrder.SOH_SO_TP = oInterCompanySalesParameters[0].Sritc_inv_type;
                        SalesOrder.SOH_SO_SUB_TP = "SA";
                        SalesOrder.SOH_SO_NO = "";
                        SalesOrder.SOH_DT = _NewPO.Poh_dt;
                        SalesOrder.SOH_MANUAL = 0;
                        SalesOrder.SOH_MAN_REF = string.Empty;
                        SalesOrder.SOH_REF_DOC = docno;

                        SalesOrder.SOH_CURRENCY = "LKR";
                        SalesOrder.SOH_EX_RT = 1;
                        SalesOrder.SOH_TOWN_CD = string.Empty;

                        SalesOrder.SOH_MAN_CD = oInterCompanySalesParameters[0].Sritc_ex_cd;
                        SalesOrder.SOH_SALES_EX_CD = oInterCompanySalesParameters[0].Sritc_ex_cd;
                        SalesOrder.SOH_SALES_STR_CD = string.Empty;
                        SalesOrder.SOH_SALES_SBU_CD = string.Empty;
                        SalesOrder.SOH_SALES_SBU_MAN = string.Empty;
                        SalesOrder.SOH_SALES_CHN_CD = string.Empty;
                        SalesOrder.SOH_SALES_CHN_MAN = string.Empty;
                        SalesOrder.SOH_SALES_REGION_CD = string.Empty;
                        SalesOrder.SOH_SALES_REGION_MAN = string.Empty;
                        SalesOrder.SOH_SALES_ZONE_CD = string.Empty;
                        SalesOrder.SOH_SALES_ZONE_MAN = string.Empty;
                        SalesOrder.SOH_STRUCTURE_SEQ = string.Empty;
                        SalesOrder.SOH_ESD_RT = 0;
                        SalesOrder.SOH_WHT_RT = 0;
                        SalesOrder.SOH_EPF_RT = 0;
                        SalesOrder.SOH_PDI_REQ = 0;
                        SalesOrder.SOH_REMARKS = string.Empty;
                        SalesOrder.SOH_IS_ACC_UPLOAD = 0;
                        SalesOrder.SOH_REMARKS = "PO BASE";

                        // SalesOrder.SOH_ANAL_10 = Convert.ToDecimal(lblGrndTotalAmount.Text);
                        // SalesOrder.SOH_ANAL_11 = Convert.ToDecimal(lblAvailableCredit.Text);
                        SalesOrder.SOH_CRE_BY = _NewPO.Poh_cre_by;
                        // SalesOrder.SOH_CRE_WHEN = _NewPO.;
                        SalesOrder.SOH_MOD_BY = _NewPO.Poh_cre_by; ;
                        //SalesOrder.SOH_MOD_WHEN = CHNLSVC.Security.GetServerDateTime();
                        SalesOrder.SOH_SESSION_ID = _NewPO.poh_session_id;
                        SalesOrder.SOH_ANAL_1 = string.Empty;
                        SalesOrder.SOH_ANAL_2 = string.Empty;
                        SalesOrder.SOH_ANAL_3 = string.Empty;
                        SalesOrder.SOH_ANAL_4 = string.Empty;
                        SalesOrder.SOH_ANAL_5 = string.Empty;
                        SalesOrder.SOH_ANAL_6 = string.Empty;
                        SalesOrder.SOH_ANAL_7 = 0;
                        SalesOrder.SOH_ANAL_8 = Convert.ToInt32(0);
                        SalesOrder.SOH_ANAL_9 = Convert.ToInt32(0);
                        SalesOrder.SOH_ANAL_10 = 0;
                        SalesOrder.SOH_ANAL_11 = 0;
                        SalesOrder.SOH_ANAL_12 = Convert.ToDateTime(DateTime.Now);
                        SalesOrder.SOH_DIRECT = 1;
                        SalesOrder.SOH_TAX_INV = 0;
                        SalesOrder.SOH_GRUP_CD = string.Empty;
                        SalesOrder.SOH_ACC_NO = string.Empty;
                        SalesOrder.SOH_TAX_EXEMPTED = 0;
                        //if (_masterBusinessCompany != null)
                        //{
                        //    lblSVatStatus.Text = _masterBusinessCompany.Mbe_is_svat ? "Available" : "None";
                        //}
                        SalesOrder.SOH_IS_SVAT = 0;
                        SalesOrder.SOH_FIN_CHRG = 1;
                        SalesOrder.SOH_DEL_LOC = oInterCompanySalesParameters[0].Sritc_disp_loc;
                        // SalesOrder.SOH_GRN_COM = _customerCompany;
                        SalesOrder.SOH_GRN_LOC = string.Empty;
                        // SalesOrder.SOH_IS_GRN = Convert.ToInt32(_cushascompany);

                        SalesOrder.SOH_IS_DAYEND = 0;
                        SalesOrder.SOH_SCM_UPLOAD = 0;
                        // SalesOrder.SOH_SEQ_NO = Convert.ToInt32(seqnofororder);
                        SalesOrder.mpc_so_res = 0;
                        SalesOrder.SOH_DISP_LOC = oInterCompanySalesParameters[0].Sritc_disp_loc;

                        MasterAutoNumber mastAutoNo = new MasterAutoNumber();
                        mastAutoNo.Aut_cate_cd = SalesOrder.SOH_PC;
                        mastAutoNo.Aut_cate_tp = "LOC";
                        mastAutoNo.Aut_direction = 0;
                        mastAutoNo.Aut_moduleid = "SO";
                        mastAutoNo.Aut_start_char = oInterCompanySalesParameters[0].Sritc_inv_type;
                        mastAutoNo.Aut_year = DateTime.Now.Year;

                        MasterBusinessEntity _mastercustomer = new MasterBusinessEntity();
                        SalesOrder.SOH_D_CUST_CD = oInterCompanySalesParameters[0].Sritc_customer;
                        SalesOrder.SOH_CUS_CD = oInterCompanySalesParameters[0].Sritc_customer;
                        _mastercustomer = Salesbl.GetCustomerProfileByCom(SalesOrder.SOH_D_CUST_CD, null, null, null, null, SalesOrder.SOH_COM);
                        if (_mastercustomer != null)
                        {
                            SalesOrder.SOH_D_CUST_ADD1 = _mastercustomer.Mbe_add1;
                            SalesOrder.SOH_D_CUST_ADD2 = _mastercustomer.Mbe_add2;
                            SalesOrder.SOH_D_CUST_NAME = _mastercustomer.Mbe_name;

                            SalesOrder.SOH_CUS_NAME = _mastercustomer.Mbe_name;
                            SalesOrder.SOH_CUS_ADD1 = _mastercustomer.Mbe_add1;
                            SalesOrder.SOH_CUS_ADD2 = _mastercustomer.Mbe_add2;

                        }


                        string _msg = string.Empty;
                        List<SalesOrderItems> _soItem = new List<SalesOrderItems>();

                        if (_NewPOItems != null)
                        {
                            int i = 1;
                            int WarrantyPeriod = 0;
                            string WarrantyRemarks = "N/A";
                            List<PriceBookLevelRef> _priceBookLevelRefList = new List<PriceBookLevelRef>();

                            foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                            {
                                SalesOrderItems _SOITMOBJ = new SalesOrderItems();



                                _SOITMOBJ.SOI_DISC_RT = _POItems.Pod_dis_rt;
                                _SOITMOBJ.SOI_DISC_AMT = _POItems.Pod_dis_amt;
                                _SOITMOBJ.SOI_INV_QTY = _POItems.Pod_qty;
                                _SOITMOBJ.SOI_QTY = _POItems.Pod_qty;
                                _SOITMOBJ.SOI_ITM_CD = _POItems.Pod_itm_cd;
                                _SOITMOBJ.SOI_ITM_STUS = _POItems.Pod_itm_stus;
                                _SOITMOBJ.SOI_ITM_TAX_AMT = _POItems.Pod_vat;

                                _SOITMOBJ.SOI_PBOOK = oInterCompanySalesParameters[0].Sritc_pb;
                                _SOITMOBJ.SOI_PB_LVL = oInterCompanySalesParameters[0].Sritc_pb_lvl;
                                _SOITMOBJ.SOI_ITM_LINE = i;
                                _SOITMOBJ.SOI_ITM_TP = "M";
                                _SOITMOBJ.SOI_JOB_LINE = i;
                                _SOITMOBJ.SOI_ANAL1 = "1";
                                _SOITMOBJ.SOI_ANAL2 = "1";
                                List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                                _priceDetailRef = Salesbl.GetPrice_01(SalesOrder.SOH_COM, SalesOrder.SOH_PC, SalesOrder.SOH_SO_TP, oInterCompanySalesParameters[0].Sritc_pb, oInterCompanySalesParameters[0].Sritc_pb_lvl,
                                    SalesOrder.SOH_CUS_CD, _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_QTY, SalesOrder.SOH_DT);
                                if (_priceDetailRef.Count > 0)
                                {
                                    _SOITMOBJ.SOI_UNIT_RT = _priceDetailRef[0].Sapd_itm_price;
                                    _SOITMOBJ.SOI_UNIT_AMT = _SOITMOBJ.SOI_UNIT_RT * _POItems.Pod_qty;
                                    _SOITMOBJ.SOI_PB_PRICE = _SOITMOBJ.SOI_UNIT_RT;
                                    _SOITMOBJ.SOI_SEQ = _priceDetailRef[0].Sapd_pb_seq;
                                    // _SOITMOBJ.SOI_ITM_SEQ = _priceDetailRef[0].;
                                }
                                else
                                {
                                    _SOITMOBJ.SOI_UNIT_RT = _POItems.Pod_unit_price;
                                    _SOITMOBJ.SOI_UNIT_AMT = _POItems.Pod_unit_price * _POItems.Pod_qty;
                                    //_SOITMOBJ.SOI_TOT_AMT = _POItems.Pod_line_amt;
                                }
                                decimal total = (_SOITMOBJ.SOI_UNIT_AMT - _SOITMOBJ.SOI_DISC_AMT - _SOITMOBJ.SOI_ITM_TAX_AMT);
                                _SOITMOBJ.SOI_TOT_AMT = total;

                                PriceBookLevelRef _pbLvl = Salesbl.GetPriceLevelForHp(SalesOrder.SOH_COM, _SOITMOBJ.SOI_PBOOK, _SOITMOBJ.SOI_PB_LVL, _SOITMOBJ.SOI_ITM_STUS);
                                if (_pbLvl != null)
                                {
                                    if (_pbLvl.Sapl_set_warr == true)
                                    {
                                        DataTable _temWarr = Salesbl.GetPCWara(SalesOrder.SOH_COM, SalesOrder.SOH_PC, _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS, SalesOrder.SOH_DT);

                                        if (_pbLvl.Sapl_set_warr == true)
                                        {
                                            WarrantyPeriod = _pbLvl.Sapl_warr_period;
                                        }
                                        else if (_temWarr != null && _temWarr.Rows.Count > 0)
                                        {
                                            WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                            WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                                        }
                                        else
                                        {
                                            MasterItemWarrantyPeriod _period = _inventoryDAL.GetItemWarrantyDetail(_POItems.Pod_itm_cd, _POItems.Pod_itm_stus);
                                            if (_period != null)
                                            {
                                                WarrantyPeriod = _period.Mwp_val;
                                                WarrantyRemarks = _period.Mwp_rmk;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        DataTable _temWarr = Salesbl.GetPCWara(SalesOrder.SOH_COM, SalesOrder.SOH_PC,
                                            _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS, SalesOrder.SOH_DT);

                                        if (_temWarr != null && _temWarr.Rows.Count > 0)
                                        {
                                            WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                            WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();

                                            if (WarrantyPeriod == 0)
                                            {
                                                WarrantyRemarks = "N/A";
                                            }
                                        }
                                        else
                                        {
                                            MasterItemWarrantyPeriod _period = _inventoryDAL.GetItemWarrantyDetail(_SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS);
                                            if (_period != null)
                                            {
                                                WarrantyPeriod = _period.Mwp_val;
                                                WarrantyRemarks = _period.Mwp_rmk;

                                                if (WarrantyPeriod == 0)
                                                {
                                                    WarrantyRemarks = "N/A";
                                                }
                                            }

                                        }
                                    }
                                }

                                _SOITMOBJ.SOI_WARR_PERIOD = WarrantyPeriod;
                                _SOITMOBJ.SOI_WARR_REMARKS = WarrantyRemarks;
                                _soItem.Add(_SOITMOBJ);
                                i++;
                            }
                        }
                        int _eff = SaveSalesOrder(SalesOrder, mastAutoNo, _soItem, null, _salesDAL, _financialDAL, _inventoryDAL, out _msg);
                        if (_eff < 0)
                        {
                            _effects = -1;
                            docno = _msg;
                            _inventoryDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            return _effects;
                        }
                    }

                }
                // _inventoryDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();

                _salesDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _effects = 1;
                // _tr.Complete();
                //}
                return _effects;
            }
            catch (Exception err)
            {
                _effects = -1;
                string msg = "ERROR : " + err.Message.ToString();
                docno = msg;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                return _effects;
            }
            //Int16 _effect = 0;
            ////  using (TransactionScope tr = new TransactionScope())
            //{
            //    _inventoryDAL = new InventoryDAL();
            //    //_effect = _securityDAL.UpdateSystemOption(_opt, _user, _sessionID);
            //    _effect = _inventoryDAL.SaveNewPO(_NewPO);
            //    //    tr.Complete();
            //}
            //return _effect;
        }
        public Int16 SaveNewPONew(PurchaseOrder _NewPO, List<PurchaseOrderDetail> _NewPOItems, List<PurchaseOrderDelivery> _NewPODel, List<PurchaseOrderAlloc> _NewPOAloc, MasterAutoNumber _masterAutoNumber, List<PurchaseReq> _PurchaseReq, List<InventoryRequestItem> _Porequest, out string docno, bool _saveSalesOrder = false)
        {
            Int16 _effects = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            try
            {

                _inventoryDAL.SaveNewPO(_NewPO);


                if (_NewPOItems != null)
                {
                    foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                }

                if (_NewPODel != null)
                {
                    foreach (PurchaseOrderDelivery _DelItems in _NewPODel)
                    {
                        _inventoryDAL.SaveNewPODel(_DelItems);
                    }
                }
                //kapila
                if (_NewPOAloc != null)
                {
                    foreach (PurchaseOrderAlloc _AlocItems in _NewPOAloc)
                    {
                        _inventoryDAL.SaveNewPOAloc(_AlocItems);
                    }
                }
                if (_PurchaseReq != null)
                {
                    foreach (PurchaseReq _req in _PurchaseReq)
                    {
                        _req.Por_seq_no = _NewPO.Poh_seq_no;
                        _inventoryDAL.SAVE_PurchaseOrderRequest(_req);
                    }

                }
                if (_Porequest != null)
                {
                    foreach (InventoryRequestItem _PORItems in _Porequest)
                    {

                        _inventoryDAL.Update_PORequestBalanceQty(_PORItems);
                    }

                }

                bool _isSCMImpPo = false;//Add by Chamal 24/06/2013
                if (_NewPO.Poh_tp == "I" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "IMPORTS" && _NewPO.Poh_job_no == "IMPORTS_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "LOCAL_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "QUO_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_isSCMImpPo == false)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);
                    _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                    _inventoryDAL.UpdatePODocNo(_NewPO.Poh_seq_no, _documentNo);
                    docno = _documentNo;
                }
                else
                {
                    docno = _NewPO.Poh_doc_no;
                }


                if (_saveSalesOrder)
                {
                    SalesBLL Salesbl = new SalesBLL();
                    List<InterCompanySalesParameter> oInterCompanySalesParameters = Salesbl.GET_INTERCOM_PAR_BY_SUP(_NewPO.Poh_com, _NewPO.Poh_supp);
                    if (oInterCompanySalesParameters != null && oInterCompanySalesParameters.Count > 0)
                    {
                        SalesOrderHeader SalesOrder = new SalesOrderHeader();
                        SalesOrder.SOH_COM = oInterCompanySalesParameters[0].Sritc_frm_com;
                        SalesOrder.SOH_PC = oInterCompanySalesParameters[0].Sritc_frm_prof;
                        SalesOrder.SOH_TP = "INV";
                        SalesOrder.SOH_SO_TP = oInterCompanySalesParameters[0].Sritc_inv_type;
                        SalesOrder.SOH_SO_SUB_TP = "SA";
                        SalesOrder.SOH_SO_NO = "";
                        SalesOrder.SOH_DT = _NewPO.Poh_dt;
                        SalesOrder.SOH_MANUAL = 0;
                        SalesOrder.SOH_MAN_REF = string.Empty;
                        SalesOrder.SOH_REF_DOC = docno;

                        SalesOrder.SOH_CURRENCY = "LKR";
                        SalesOrder.SOH_EX_RT = 1;
                        SalesOrder.SOH_TOWN_CD = string.Empty;

                        SalesOrder.SOH_MAN_CD = oInterCompanySalesParameters[0].Sritc_ex_cd;
                        SalesOrder.SOH_SALES_EX_CD = oInterCompanySalesParameters[0].Sritc_ex_cd;
                        SalesOrder.SOH_SALES_STR_CD = string.Empty;
                        SalesOrder.SOH_SALES_SBU_CD = string.Empty;
                        SalesOrder.SOH_SALES_SBU_MAN = string.Empty;
                        SalesOrder.SOH_SALES_CHN_CD = string.Empty;
                        SalesOrder.SOH_SALES_CHN_MAN = string.Empty;
                        SalesOrder.SOH_SALES_REGION_CD = string.Empty;
                        SalesOrder.SOH_SALES_REGION_MAN = string.Empty;
                        SalesOrder.SOH_SALES_ZONE_CD = string.Empty;
                        SalesOrder.SOH_SALES_ZONE_MAN = string.Empty;
                        SalesOrder.SOH_STRUCTURE_SEQ = string.Empty;
                        SalesOrder.SOH_ESD_RT = 0;
                        SalesOrder.SOH_WHT_RT = 0;
                        SalesOrder.SOH_EPF_RT = 0;
                        SalesOrder.SOH_PDI_REQ = 0;
                        SalesOrder.SOH_REMARKS = string.Empty;
                        SalesOrder.SOH_IS_ACC_UPLOAD = 0;
                        SalesOrder.SOH_REMARKS = "PO BASE";

                        // SalesOrder.SOH_ANAL_10 = Convert.ToDecimal(lblGrndTotalAmount.Text);
                        // SalesOrder.SOH_ANAL_11 = Convert.ToDecimal(lblAvailableCredit.Text);
                        SalesOrder.SOH_CRE_BY = _NewPO.Poh_cre_by;
                        // SalesOrder.SOH_CRE_WHEN = _NewPO.;
                        SalesOrder.SOH_MOD_BY = _NewPO.Poh_cre_by; ;
                        //SalesOrder.SOH_MOD_WHEN = CHNLSVC.Security.GetServerDateTime();
                        SalesOrder.SOH_SESSION_ID = _NewPO.poh_session_id;
                        SalesOrder.SOH_ANAL_1 = string.Empty;
                        SalesOrder.SOH_ANAL_2 = string.Empty;
                        SalesOrder.SOH_ANAL_3 = string.Empty;
                        SalesOrder.SOH_ANAL_4 = string.Empty;
                        SalesOrder.SOH_ANAL_5 = string.Empty;
                        SalesOrder.SOH_ANAL_6 = string.Empty;
                        SalesOrder.SOH_ANAL_7 = 0;
                        SalesOrder.SOH_ANAL_8 = Convert.ToInt32(0);
                        SalesOrder.SOH_ANAL_9 = Convert.ToInt32(0);
                        SalesOrder.SOH_ANAL_10 = 0;
                        SalesOrder.SOH_ANAL_11 = 0;
                        SalesOrder.SOH_ANAL_12 = Convert.ToDateTime(DateTime.Now);
                        SalesOrder.SOH_DIRECT = 1;
                        SalesOrder.SOH_TAX_INV = 0;
                        SalesOrder.SOH_GRUP_CD = string.Empty;
                        SalesOrder.SOH_ACC_NO = string.Empty;
                        SalesOrder.SOH_TAX_EXEMPTED = 0;
                        //if (_masterBusinessCompany != null)
                        //{
                        //    lblSVatStatus.Text = _masterBusinessCompany.Mbe_is_svat ? "Available" : "None";
                        //}
                        SalesOrder.SOH_IS_SVAT = 0;
                        SalesOrder.SOH_FIN_CHRG = 1;
                        SalesOrder.SOH_DEL_LOC = oInterCompanySalesParameters[0].Sritc_disp_loc;
                        // SalesOrder.SOH_GRN_COM = _customerCompany;
                        SalesOrder.SOH_GRN_LOC = string.Empty;
                        // SalesOrder.SOH_IS_GRN = Convert.ToInt32(_cushascompany);

                        SalesOrder.SOH_IS_DAYEND = 0;
                        SalesOrder.SOH_SCM_UPLOAD = 0;
                        // SalesOrder.SOH_SEQ_NO = Convert.ToInt32(seqnofororder);
                        SalesOrder.mpc_so_res = 0;
                        SalesOrder.SOH_DISP_LOC = oInterCompanySalesParameters[0].Sritc_disp_loc;

                        MasterAutoNumber mastAutoNo = new MasterAutoNumber();
                        mastAutoNo.Aut_cate_cd = SalesOrder.SOH_PC;
                        mastAutoNo.Aut_cate_tp = "LOC";
                        mastAutoNo.Aut_direction = 0;
                        mastAutoNo.Aut_moduleid = "SO";
                        mastAutoNo.Aut_start_char = oInterCompanySalesParameters[0].Sritc_inv_type;
                        mastAutoNo.Aut_year = DateTime.Now.Year;

                        MasterBusinessEntity _mastercustomer = new MasterBusinessEntity();
                        SalesOrder.SOH_D_CUST_CD = oInterCompanySalesParameters[0].Sritc_customer;
                        SalesOrder.SOH_CUS_CD = oInterCompanySalesParameters[0].Sritc_customer;
                        _mastercustomer = Salesbl.GetCustomerProfileByCom(SalesOrder.SOH_D_CUST_CD, null, null, null, null, SalesOrder.SOH_COM);
                        if (_mastercustomer != null)
                        {
                            SalesOrder.SOH_D_CUST_ADD1 = _mastercustomer.Mbe_add1;
                            SalesOrder.SOH_D_CUST_ADD2 = _mastercustomer.Mbe_add2;
                            SalesOrder.SOH_D_CUST_NAME = _mastercustomer.Mbe_name;

                            SalesOrder.SOH_CUS_NAME = _mastercustomer.Mbe_name;
                            SalesOrder.SOH_CUS_ADD1 = _mastercustomer.Mbe_add1;
                            SalesOrder.SOH_CUS_ADD2 = _mastercustomer.Mbe_add2;

                        }


                        string _msg = string.Empty;
                        List<SalesOrderItems> _soItem = new List<SalesOrderItems>();

                        if (_NewPOItems != null)
                        {
                            int i = 1;
                            int WarrantyPeriod = 0;
                            string WarrantyRemarks = "N/A";
                            List<PriceBookLevelRef> _priceBookLevelRefList = new List<PriceBookLevelRef>();

                            foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                            {
                                SalesOrderItems _SOITMOBJ = new SalesOrderItems();



                                _SOITMOBJ.SOI_DISC_RT = _POItems.Pod_dis_rt;
                                _SOITMOBJ.SOI_DISC_AMT = _POItems.Pod_dis_amt;
                                _SOITMOBJ.SOI_INV_QTY = _POItems.Pod_qty;
                                _SOITMOBJ.SOI_QTY = _POItems.Pod_qty;
                                _SOITMOBJ.SOI_ITM_CD = _POItems.Pod_itm_cd;
                                _SOITMOBJ.SOI_ITM_STUS = _POItems.Pod_itm_stus;
                                _SOITMOBJ.SOI_ITM_TAX_AMT = _POItems.Pod_vat;

                                _SOITMOBJ.SOI_PBOOK = oInterCompanySalesParameters[0].Sritc_pb;
                                _SOITMOBJ.SOI_PB_LVL = oInterCompanySalesParameters[0].Sritc_pb_lvl;
                                _SOITMOBJ.SOI_ITM_LINE = i;
                                _SOITMOBJ.SOI_ITM_TP = "M";
                                _SOITMOBJ.SOI_JOB_LINE = i;
                                _SOITMOBJ.SOI_ANAL1 = "1";
                                _SOITMOBJ.SOI_ANAL2 = "1";
                                List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                                _priceDetailRef = Salesbl.GetPrice_01(SalesOrder.SOH_COM, SalesOrder.SOH_PC, SalesOrder.SOH_SO_TP, oInterCompanySalesParameters[0].Sritc_pb, oInterCompanySalesParameters[0].Sritc_pb_lvl,
                                    SalesOrder.SOH_CUS_CD, _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_QTY, SalesOrder.SOH_DT);
                                if (_priceDetailRef.Count > 0)
                                {
                                    _SOITMOBJ.SOI_UNIT_RT = _priceDetailRef[0].Sapd_itm_price;
                                    _SOITMOBJ.SOI_UNIT_AMT = _SOITMOBJ.SOI_UNIT_RT * _POItems.Pod_qty;
                                    _SOITMOBJ.SOI_PB_PRICE = _SOITMOBJ.SOI_UNIT_RT;
                                    _SOITMOBJ.SOI_SEQ = _priceDetailRef[0].Sapd_pb_seq;
                                    // _SOITMOBJ.SOI_ITM_SEQ = _priceDetailRef[0].;
                                }
                                else
                                {
                                    _SOITMOBJ.SOI_UNIT_RT = _POItems.Pod_unit_price;
                                    _SOITMOBJ.SOI_UNIT_AMT = _POItems.Pod_unit_price * _POItems.Pod_qty;
                                    //_SOITMOBJ.SOI_TOT_AMT = _POItems.Pod_line_amt;
                                }
                                decimal total = (_SOITMOBJ.SOI_UNIT_AMT - _SOITMOBJ.SOI_DISC_AMT - _SOITMOBJ.SOI_ITM_TAX_AMT);
                                _SOITMOBJ.SOI_TOT_AMT = total;

                                PriceBookLevelRef _pbLvl = Salesbl.GetPriceLevelForHp(SalesOrder.SOH_COM, _SOITMOBJ.SOI_PBOOK, _SOITMOBJ.SOI_PB_LVL, _SOITMOBJ.SOI_ITM_STUS);
                                if (_pbLvl != null)
                                {
                                    if (_pbLvl.Sapl_set_warr == true)
                                    {
                                        DataTable _temWarr = Salesbl.GetPCWara(SalesOrder.SOH_COM, SalesOrder.SOH_PC, _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS, SalesOrder.SOH_DT);

                                        if (_pbLvl.Sapl_set_warr == true)
                                        {
                                            WarrantyPeriod = _pbLvl.Sapl_warr_period;
                                        }
                                        else if (_temWarr != null && _temWarr.Rows.Count > 0)
                                        {
                                            WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                            WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                                        }
                                        else
                                        {
                                            MasterItemWarrantyPeriod _period = _inventoryDAL.GetItemWarrantyDetail(_POItems.Pod_itm_cd, _POItems.Pod_itm_stus);
                                            if (_period != null)
                                            {
                                                WarrantyPeriod = _period.Mwp_val;
                                                WarrantyRemarks = _period.Mwp_rmk;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        DataTable _temWarr = Salesbl.GetPCWara(SalesOrder.SOH_COM, SalesOrder.SOH_PC,
                                            _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS, SalesOrder.SOH_DT);

                                        if (_temWarr != null && _temWarr.Rows.Count > 0)
                                        {
                                            WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                            WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();

                                            if (WarrantyPeriod == 0)
                                            {
                                                WarrantyRemarks = "N/A";
                                            }
                                        }
                                        else
                                        {
                                            MasterItemWarrantyPeriod _period = _inventoryDAL.GetItemWarrantyDetail(_SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS);
                                            if (_period != null)
                                            {
                                                WarrantyPeriod = _period.Mwp_val;
                                                WarrantyRemarks = _period.Mwp_rmk;

                                                if (WarrantyPeriod == 0)
                                                {
                                                    WarrantyRemarks = "N/A";
                                                }
                                            }

                                        }
                                    }
                                }

                                _SOITMOBJ.SOI_WARR_PERIOD = WarrantyPeriod;
                                _SOITMOBJ.SOI_WARR_REMARKS = WarrantyRemarks;
                                _soItem.Add(_SOITMOBJ);
                                i++;
                            }
                        }
                        int _eff = SaveSalesOrder(SalesOrder, mastAutoNo, _soItem, null, _salesDAL, _financialDAL, _inventoryDAL, out _msg);
                        if (_eff < 0)
                        {
                            _effects = -1;
                            docno = _msg;
                            _inventoryDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            return _effects;
                        }
                    }

                }
                // _inventoryDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();

                _salesDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _effects = 1;
                // _tr.Complete();
                //}
                return _effects;
            }
            catch (Exception err)
            {
                _effects = -1;
                string msg = "ERROR : " + err.Message.ToString();
                docno = msg;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                return _effects;
            }
            //Int16 _effect = 0;
            ////  using (TransactionScope tr = new TransactionScope())
            //{
            //    _inventoryDAL = new InventoryDAL();
            //    //_effect = _securityDAL.UpdateSystemOption(_opt, _user, _sessionID);
            //    _effect = _inventoryDAL.SaveNewPO(_NewPO);
            //    //    tr.Complete();
            //}
            //return _effect;
        }
        public Int16 SaveAllPOList(List<PurchaseOrder> _allpur, MasterAutoNumber _masterAutoNumber, List<PurchaseReq> _PurchaseReq, List<InventoryRequestItem> _Porequest, out string docno, bool _saveSalesOrder = false)
        {
            Int16 _effects = 0;
            docno = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();

            try
            {
                foreach (var _mainlist in _allpur)
                {
                    _inventoryDAL.SaveNewPO(_mainlist);
                       //Added By Dulaj 2018/Dec/04

                if (_Porequest != null && _PurchaseReq != null)
                {
                    if (_Porequest.Count == 0 && _PurchaseReq.Count == 0)
                    {   
                        
                        foreach (PurchaseOrderDetail podet in _mainlist.PurchaseOrderDetailList)
                        {
                            List<InventoryRequestItem> reqList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(podet.Pod_req_no);
                            var reqItm = reqList.Where(x=>x.Itri_itm_cd==podet.Pod_itm_cd&&x.Itri_itm_stus==podet.Pod_itm_stus).ToList();
                            if (reqItm != null && reqItm.Count > 0)
                            {
                                PurchaseReq purReqItm = new PurchaseReq();
                                purReqItm.Por_seq_no = podet.Pod_seq_no;
                                purReqItm.Por_req_no = podet.Pod_req_no;
                                purReqItm.Por_itm_cd = podet.Pod_itm_cd;
                                purReqItm.Por_itm_stus = podet.Pod_itm_stus;
                                purReqItm.Por_act = true;
                                purReqItm.Por_cre_by = "SCM";
                                purReqItm.Por_cre_dt = DateTime.Now;
                                purReqItm.Por_qty = podet.Pod_qty;
                                purReqItm.Por_req_line = reqItm[0].Itri_line_no;
                                _PurchaseReq.Add(purReqItm);
                                reqItm[0].Itri_po_qty = podet.Pod_qty;
                                reqItm[0].Itri_bqty = reqItm[0].Itri_bqty - podet.Pod_qty;
                                reqItm[0].Itri_res_no = podet.Pod_req_no;
                                _Porequest.Add(reqItm[0]);
                            }
                        }
                    }
                }
                    if (_mainlist.PurchaseOrderDetailList != null)
                    {
                        int i = 1;
                        foreach (PurchaseOrderDetail _POItems in _mainlist.PurchaseOrderDetailList)
                        {
                            _POItems.Pod_seq_no = _mainlist.Poh_seq_no;
                            _POItems.Pod_line_no = i;
                            _inventoryDAL.SaveNewPOItem(_POItems);
                            i++;
                        }
                    }
                    if (_mainlist.PurchaseOrderDeliveryList != null)
                    {
                        int k = 1;
                        foreach (PurchaseOrderDelivery _DelItems in _mainlist.PurchaseOrderDeliveryList)
                        {
                            _DelItems.Podi_seq_no = _mainlist.Poh_seq_no;
                            _DelItems.Podi_line_no = k;
                            _inventoryDAL.SaveNewPODel(_DelItems);
                            k++;
                        }
                    }
                    if (_PurchaseReq != null)
                    {
                        int p = 1;
                        foreach (PurchaseReq _req in _PurchaseReq)
                        {
                            _req.Por_seq_no = _mainlist.Poh_seq_no;
                            _req.Por_req_line = p;
                            _inventoryDAL.SAVE_PurchaseOrderRequest(_req);
                            p++;
                        }

                    }
                    if (_Porequest != null)
                    {
                        foreach (InventoryRequestItem _PORItems in _Porequest)
                        {
                            if (_PORItems.Itri_bqty<0)
                            {
                                _PORItems.Itri_bqty = 0;
                            }
                            _inventoryDAL.Update_PORequestBalanceQty(_PORItems);
                        }

                    }
                    bool _isSCMImpPo = false;//Add by Chamal 24/06/2013
                    if (_mainlist.Poh_tp == "I" && _mainlist.Poh_sub_tp == "N" && _mainlist.Poh_ope == "IMPORTS" && _mainlist.Poh_job_no == "IMPORTS_PO")
                    {
                        _isSCMImpPo = true;
                    }

                    if (_mainlist.Poh_tp == "L" && _mainlist.Poh_sub_tp == "N" && _mainlist.Poh_ope == "LOCAL" && _mainlist.Poh_job_no == "LOCAL_PO")
                    {
                        _isSCMImpPo = true;
                    }

                    if (_mainlist.Poh_tp == "L" && _mainlist.Poh_sub_tp == "N" && _mainlist.Poh_ope == "LOCAL" && _mainlist.Poh_job_no == "QUO_PO")
                    {
                        _isSCMImpPo = true;
                    }
                    if (_isSCMImpPo == false)
                    {
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                        string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                        _inventoryDAL.UpdatePODocNo(_mainlist.Poh_seq_no, _documentNo);
                        docno = docno + " ," + _documentNo;
                    }
                    else
                    {
                        docno = _mainlist.Poh_doc_no;
                    }
                    _Porequest = new List<InventoryRequestItem>();
                    _PurchaseReq = new List<PurchaseReq>();
                    #region
                    if (_saveSalesOrder)
                    {
                        SalesBLL Salesbl = new SalesBLL();
                        List<InterCompanySalesParameter> oInterCompanySalesParameters = Salesbl.GET_INTERCOM_PAR_BY_SUP(_mainlist.Poh_com, _mainlist.Poh_supp);
                        if (oInterCompanySalesParameters != null && oInterCompanySalesParameters.Count > 0)
                        {
                            SalesOrderHeader SalesOrder = new SalesOrderHeader();
                            SalesOrder.SOH_COM = oInterCompanySalesParameters[0].Sritc_frm_com;
                            SalesOrder.SOH_PC = oInterCompanySalesParameters[0].Sritc_frm_prof;
                            SalesOrder.SOH_TP = "INV";
                            SalesOrder.SOH_SO_TP = oInterCompanySalesParameters[0].Sritc_inv_type;
                            SalesOrder.SOH_SO_SUB_TP = "SA";
                            SalesOrder.SOH_SO_NO = "";
                            SalesOrder.SOH_DT = _mainlist.Poh_dt;
                            SalesOrder.SOH_MANUAL = 0;
                            SalesOrder.SOH_MAN_REF = string.Empty;
                            SalesOrder.SOH_REF_DOC = docno;

                            SalesOrder.SOH_CURRENCY = "LKR";
                            SalesOrder.SOH_EX_RT = 1;
                            SalesOrder.SOH_TOWN_CD = string.Empty;

                            SalesOrder.SOH_MAN_CD = oInterCompanySalesParameters[0].Sritc_ex_cd;
                            SalesOrder.SOH_SALES_EX_CD = oInterCompanySalesParameters[0].Sritc_ex_cd;
                            SalesOrder.SOH_SALES_STR_CD = string.Empty;
                            SalesOrder.SOH_SALES_SBU_CD = string.Empty;
                            SalesOrder.SOH_SALES_SBU_MAN = string.Empty;
                            SalesOrder.SOH_SALES_CHN_CD = string.Empty;
                            SalesOrder.SOH_SALES_CHN_MAN = string.Empty;
                            SalesOrder.SOH_SALES_REGION_CD = string.Empty;
                            SalesOrder.SOH_SALES_REGION_MAN = string.Empty;
                            SalesOrder.SOH_SALES_ZONE_CD = string.Empty;
                            SalesOrder.SOH_SALES_ZONE_MAN = string.Empty;
                            SalesOrder.SOH_STRUCTURE_SEQ = string.Empty;
                            SalesOrder.SOH_ESD_RT = 0;
                            SalesOrder.SOH_WHT_RT = 0;
                            SalesOrder.SOH_EPF_RT = 0;
                            SalesOrder.SOH_PDI_REQ = 0;
                            SalesOrder.SOH_REMARKS = string.Empty;
                            SalesOrder.SOH_IS_ACC_UPLOAD = 0;
                            SalesOrder.SOH_REMARKS = "PO BASE";

                            // SalesOrder.SOH_ANAL_10 = Convert.ToDecimal(lblGrndTotalAmount.Text);
                            // SalesOrder.SOH_ANAL_11 = Convert.ToDecimal(lblAvailableCredit.Text);
                            SalesOrder.SOH_CRE_BY = _mainlist.Poh_cre_by;
                            // SalesOrder.SOH_CRE_WHEN = _mainlist.;
                            SalesOrder.SOH_MOD_BY = _mainlist.Poh_cre_by; ;
                            //SalesOrder.SOH_MOD_WHEN = CHNLSVC.Security.GetServerDateTime();
                            SalesOrder.SOH_SESSION_ID = _mainlist.poh_session_id;
                            SalesOrder.SOH_ANAL_1 = string.Empty;
                            SalesOrder.SOH_ANAL_2 = string.Empty;
                            SalesOrder.SOH_ANAL_3 = string.Empty;
                            SalesOrder.SOH_ANAL_4 = string.Empty;
                            SalesOrder.SOH_ANAL_5 = string.Empty;
                            SalesOrder.SOH_ANAL_6 = string.Empty;
                            SalesOrder.SOH_ANAL_7 = 0;
                            SalesOrder.SOH_ANAL_8 = Convert.ToInt32(0);
                            SalesOrder.SOH_ANAL_9 = Convert.ToInt32(0);
                            SalesOrder.SOH_ANAL_10 = 0;
                            SalesOrder.SOH_ANAL_11 = 0;
                            SalesOrder.SOH_ANAL_12 = Convert.ToDateTime(DateTime.Now);
                            SalesOrder.SOH_DIRECT = 1;
                            SalesOrder.SOH_TAX_INV = 0;
                            SalesOrder.SOH_GRUP_CD = string.Empty;
                            SalesOrder.SOH_ACC_NO = string.Empty;
                            SalesOrder.SOH_TAX_EXEMPTED = 0;
                            //if (_masterBusinessCompany != null)
                            //{
                            //    lblSVatStatus.Text = _masterBusinessCompany.Mbe_is_svat ? "Available" : "None";
                            //}
                            SalesOrder.SOH_IS_SVAT = 0;
                            SalesOrder.SOH_FIN_CHRG = 1;
                            SalesOrder.SOH_DEL_LOC = oInterCompanySalesParameters[0].Sritc_disp_loc;
                            // SalesOrder.SOH_GRN_COM = _customerCompany;
                            SalesOrder.SOH_GRN_LOC = string.Empty;
                            // SalesOrder.SOH_IS_GRN = Convert.ToInt32(_cushascompany);

                            SalesOrder.SOH_IS_DAYEND = 0;
                            SalesOrder.SOH_SCM_UPLOAD = 0;
                            // SalesOrder.SOH_SEQ_NO = Convert.ToInt32(seqnofororder);
                            SalesOrder.mpc_so_res = 0;
                            SalesOrder.SOH_DISP_LOC = oInterCompanySalesParameters[0].Sritc_disp_loc;

                            MasterAutoNumber mastAutoNo = new MasterAutoNumber();
                            mastAutoNo.Aut_cate_cd = SalesOrder.SOH_PC;
                            mastAutoNo.Aut_cate_tp = "LOC";
                            mastAutoNo.Aut_direction = 0;
                            mastAutoNo.Aut_moduleid = "SO";
                            mastAutoNo.Aut_start_char = oInterCompanySalesParameters[0].Sritc_inv_type;
                            mastAutoNo.Aut_year = DateTime.Now.Year;

                            MasterBusinessEntity _mastercustomer = new MasterBusinessEntity();
                            SalesOrder.SOH_D_CUST_CD = oInterCompanySalesParameters[0].Sritc_customer;
                            SalesOrder.SOH_CUS_CD = oInterCompanySalesParameters[0].Sritc_customer;
                            _mastercustomer = Salesbl.GetCustomerProfileByCom(SalesOrder.SOH_D_CUST_CD, null, null, null, null, SalesOrder.SOH_COM);
                            if (_mastercustomer != null)
                            {
                                SalesOrder.SOH_D_CUST_ADD1 = _mastercustomer.Mbe_add1;
                                SalesOrder.SOH_D_CUST_ADD2 = _mastercustomer.Mbe_add2;
                                SalesOrder.SOH_D_CUST_NAME = _mastercustomer.Mbe_name;

                                SalesOrder.SOH_CUS_NAME = _mastercustomer.Mbe_name;
                                SalesOrder.SOH_CUS_ADD1 = _mastercustomer.Mbe_add1;
                                SalesOrder.SOH_CUS_ADD2 = _mastercustomer.Mbe_add2;

                            }


                            string _msg = string.Empty;
                            List<SalesOrderItems> _soItem = new List<SalesOrderItems>();

                            if (_mainlist.PurchaseOrderDetailList != null)
                            {
                                int i = 1;
                                int WarrantyPeriod = 0;
                                string WarrantyRemarks = "N/A";
                                List<PriceBookLevelRef> _priceBookLevelRefList = new List<PriceBookLevelRef>();

                                foreach (PurchaseOrderDetail _POItems in _mainlist.PurchaseOrderDetailList)
                                {
                                    SalesOrderItems _SOITMOBJ = new SalesOrderItems();



                                    _SOITMOBJ.SOI_DISC_RT = _POItems.Pod_dis_rt;
                                    _SOITMOBJ.SOI_DISC_AMT = _POItems.Pod_dis_amt;
                                    _SOITMOBJ.SOI_INV_QTY = _POItems.Pod_qty;
                                    _SOITMOBJ.SOI_QTY = _POItems.Pod_qty;
                                    _SOITMOBJ.SOI_ITM_CD = _POItems.Pod_itm_cd;
                                    _SOITMOBJ.SOI_ITM_STUS = _POItems.Pod_itm_stus;
                                    _SOITMOBJ.SOI_ITM_TAX_AMT = _POItems.Pod_vat;

                                    _SOITMOBJ.SOI_PBOOK = oInterCompanySalesParameters[0].Sritc_pb;
                                    _SOITMOBJ.SOI_PB_LVL = oInterCompanySalesParameters[0].Sritc_pb_lvl;
                                    _SOITMOBJ.SOI_ITM_LINE = i;
                                    _SOITMOBJ.SOI_ITM_TP = "M";
                                    _SOITMOBJ.SOI_JOB_LINE = i;
                                    _SOITMOBJ.SOI_ANAL1 = "1";
                                    _SOITMOBJ.SOI_ANAL2 = "1";
                                    List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                                    _priceDetailRef = Salesbl.GetPrice_01(SalesOrder.SOH_COM, SalesOrder.SOH_PC, SalesOrder.SOH_SO_TP, oInterCompanySalesParameters[0].Sritc_pb, oInterCompanySalesParameters[0].Sritc_pb_lvl,
                                        SalesOrder.SOH_CUS_CD, _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_QTY, SalesOrder.SOH_DT);
                                    if (_priceDetailRef.Count > 0)
                                    {
                                        _SOITMOBJ.SOI_UNIT_RT = _priceDetailRef[0].Sapd_itm_price;
                                        _SOITMOBJ.SOI_UNIT_AMT = _SOITMOBJ.SOI_UNIT_RT * _POItems.Pod_qty;
                                        _SOITMOBJ.SOI_PB_PRICE = _SOITMOBJ.SOI_UNIT_RT;
                                        _SOITMOBJ.SOI_SEQ = _priceDetailRef[0].Sapd_pb_seq;
                                        // _SOITMOBJ.SOI_ITM_SEQ = _priceDetailRef[0].;
                                    }
                                    else
                                    {
                                        _SOITMOBJ.SOI_UNIT_RT = _POItems.Pod_unit_price;
                                        _SOITMOBJ.SOI_UNIT_AMT = _POItems.Pod_unit_price * _POItems.Pod_qty;
                                        //_SOITMOBJ.SOI_TOT_AMT = _POItems.Pod_line_amt;
                                    }
                                    decimal total = (_SOITMOBJ.SOI_UNIT_AMT - _SOITMOBJ.SOI_DISC_AMT - _SOITMOBJ.SOI_ITM_TAX_AMT);
                                    _SOITMOBJ.SOI_TOT_AMT = total;

                                    PriceBookLevelRef _pbLvl = Salesbl.GetPriceLevelForHp(SalesOrder.SOH_COM, _SOITMOBJ.SOI_PBOOK, _SOITMOBJ.SOI_PB_LVL, _SOITMOBJ.SOI_ITM_STUS);
                                    if (_pbLvl != null)
                                    {
                                        if (_pbLvl.Sapl_set_warr == true)
                                        {
                                            DataTable _temWarr = Salesbl.GetPCWara(SalesOrder.SOH_COM, SalesOrder.SOH_PC, _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS, SalesOrder.SOH_DT);

                                            if (_pbLvl.Sapl_set_warr == true)
                                            {
                                                WarrantyPeriod = _pbLvl.Sapl_warr_period;
                                            }
                                            else if (_temWarr != null && _temWarr.Rows.Count > 0)
                                            {
                                                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                                            }
                                            else
                                            {
                                                MasterItemWarrantyPeriod _period = _inventoryDAL.GetItemWarrantyDetail(_POItems.Pod_itm_cd, _POItems.Pod_itm_stus);
                                                if (_period != null)
                                                {
                                                    WarrantyPeriod = _period.Mwp_val;
                                                    WarrantyRemarks = _period.Mwp_rmk;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            DataTable _temWarr = Salesbl.GetPCWara(SalesOrder.SOH_COM, SalesOrder.SOH_PC,
                                                _SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS, SalesOrder.SOH_DT);

                                            if (_temWarr != null && _temWarr.Rows.Count > 0)
                                            {
                                                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();

                                                if (WarrantyPeriod == 0)
                                                {
                                                    WarrantyRemarks = "N/A";
                                                }
                                            }
                                            else
                                            {
                                                MasterItemWarrantyPeriod _period = _inventoryDAL.GetItemWarrantyDetail(_SOITMOBJ.SOI_ITM_CD, _SOITMOBJ.SOI_ITM_STUS);
                                                if (_period != null)
                                                {
                                                    WarrantyPeriod = _period.Mwp_val;
                                                    WarrantyRemarks = _period.Mwp_rmk;

                                                    if (WarrantyPeriod == 0)
                                                    {
                                                        WarrantyRemarks = "N/A";
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    _SOITMOBJ.SOI_WARR_PERIOD = WarrantyPeriod;
                                    _SOITMOBJ.SOI_WARR_REMARKS = WarrantyRemarks;
                                    _soItem.Add(_SOITMOBJ);
                                    i++;
                                }
                            }
                            int _eff = SaveSalesOrder(SalesOrder, mastAutoNo, _soItem, null, _salesDAL, _financialDAL, _inventoryDAL, out _msg);
                            if (_eff < 0)
                            {
                                _effects = -1;
                                docno = _msg;
                                _inventoryDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                return _effects;
                            }
                        }

                    }
                    #endregion

                }
                _inventoryDAL.TransactionCommit();

                _salesDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _effects = 1;

            }
            catch (Exception ex)
            {
                _effects = -1;
                string msg = "ERROR : " + ex.Message.ToString();
                docno = msg;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                return _effects;
            }

            return _effects;
        }

        public List<InventoryRequest> GetAllMaterialRequestsList(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllMaterialRequestsList(_inventoryRequest);
        }

        public DataTable GetAllMaterialRequestsTable(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllMaterialRequestsTable(_inventoryRequest);
        }

        public InventorySerialMaster GetSerialMasterDetailBySerialID(Int32 _serialID)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialMasterDetailBySerialID(_serialID);
        }

        #endregion

        // Modify Rukshan Add DeleteTempPickSubSerialByItem
        public Int32 DeleteTempPickSerialByItem(string _company, string _location, Int32 _userSeqNo, string _item, string _status, ReptPickItems _pickItem = null)
        {
            //updated by akila 2017/09/13
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            Int32 effect;

            try
            {
                effect = _inventoryRepDAL.DeleteTempPickSerialByItem(_company, _location, _userSeqNo, _item, _status);
                if (effect > 0)
                {
                    //update pick item
                    if (_pickItem != null)
                    {
                        _inventoryRepDAL.UpdateScanItemDetails(_pickItem);
                    }

                    _inventoryRepDAL.DeleteTempPickSubSerialByItem(_userSeqNo, _item);
                }

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
            }
            catch (Exception)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
            }
            return effect;

            //Int32 effect;
            //ReptCommonDAL _inventoryRepDAL = new ReptCommonDAL();
            //_inventoryRepDAL.ConnectionOpen();
            //effect = _inventoryRepDAL.DeleteTempPickSerialByItem(_company, _location, _userSeqNo, _item, _status);
            //effect = _inventoryRepDAL.DeleteTempPickSubSerialByItem(_userSeqNo, _item);
            //_inventoryRepDAL.ConnectionClose();
            //return effect;
        }

        #region Inventory Inward Entry

        //Chamal 24/05/2012
        public DataTable GetAllPendingInventoryOutwardsTable(InventoryHeader _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _table1 = _inventoryDAL.GetAllPendingInventoryOutwardsTable(_inventoryRequest);
            DataTable _table2 = _inventoryDAL.GetAllPendingInventoryOutwardsSCMTable(_inventoryRequest);
            _table1.Merge(_table2);
            return _table1;
        }
        public DataTable GetAllPendingInventoryOutwardsTable2(InventoryHeader _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _table1 = _inventoryDAL.GetAllPendingInventoryOutwardsTable(_inventoryRequest);
            DataTable _table2 = _inventoryDAL.GetAllPendingInventoryOutwardsSCMTable(_inventoryRequest);
            _table1.Merge(_table2);
            if (_inventoryRequest.Ith_oth_com == "AAL")
            {
                if (_table1 != null && _table1.Rows.Count > 0)
                {
                    int i = 0;
                    foreach (var _table in _table1.Rows)
                    {
                        string mrna = _table1.Rows[i]["ITH_OTH_DOCNO"].ToString();
                        string intrno = _inventoryDAL.GetINTRNo(mrna);
                        if (intrno != "")
                        {
                            _table1.Rows[i]["ITH_JOB_NO"] = intrno;
                        }
                        i++;
                    }
                }
            }
            return _table1;
        }

        public String GetDefaultBinCode(String _com, String _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDefaultBinCode(_com, _loc);
        }

        public string GetGITCorrectLocation(string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetGITCorrectLocation(_com);
        }

        public List<ReptPickSerials> GetOutwarditems(string _loc, string _defbin, ReptPickHeader _scanheaderNew, out string _unavailableitemlist)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            //Control @ Client by Prabhath on 04/12/2013 --> Same AOD Outward IN (Cause of Delete Statement.)
            _inventoryRepDAL.ConnectionOpen();
            DataTable _headerchk = _inventoryRepDAL.GetPickHeaderByDocument(_scanheaderNew.Tuh_usr_com, _scanheaderNew.Tuh_doc_no);
            _inventoryRepDAL.DeleteTempPickObjs(_scanheaderNew.Tuh_usrseq_no);
            _inventoryRepDAL.ConnectionClose();
            string _itemlist = string.Empty;

            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                String _outwardType = _scanheaderNew.Tuh_doc_tp; //Need for Implement AOD, DO, PRN

                Int16 _docDirection = 0;
                if (_scanheaderNew.Tuh_direct == true)
                { _docDirection = 1; }

                List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                MasterItem _itmlist = new MasterItem();

                if (_scanheaderNew.Tuh_usrseq_no == 0)
                {
                    _scanheaderNew.Tuh_usrseq_no = _inventoryDAL.Generate_new_seq_num(_scanheaderNew.Tuh_usr_id, _scanheaderNew.Tuh_doc_tp, _docDirection, _scanheaderNew.Tuh_usr_com);
                }

                if (_headerchk != null && _headerchk.Rows.Count > 0)
                {
                    _scanheaderNew.Tuh_pro_user = _headerchk.Rows[0].Field<string>("Tuh_pro_user");
                    _scanheaderNew.Tuh_usr_id = _headerchk.Rows[0].Field<string>("Tuh_usr_id");
                    _scanheaderNew.Tuh_cre_dt = _headerchk.Rows[0].Field<DateTime>("Tuh_cre_dt");
                }

                _inventoryRepDAL.SavePickedHeader(_scanheaderNew);

                //Get Serialized Items
                DataTable _dt0 = new DataTable();
                // DataTable _dt00 = new DataTable();
                //modified kapila on 20/8/2016 (issue of showing duplicate serial)
                _dt0 = _inventoryDAL.GetIntSerDetails(_scanheaderNew.Tuh_doc_no);
                if (_dt0.Rows.Count == 0)
                    _dt0 = _inventoryDAL.GetScmSerDetails(_scanheaderNew.Tuh_doc_no);

                //  _dt0.Merge(_dt00);
                if (_dt0.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt0.Rows)
                    {

                        ReptPickSerials _pick = new ReptPickSerials();
                        _itmlist = _inventoryDAL.GetItem(_scanheaderNew.Tuh_usr_com, (String)_dr["ITS_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            if (_itmlist.Mi_is_ser1 != -1)//updated by akila 2017/08/02
                            {
                                _pick.Tus_base_doc_no = _scanheaderNew.Tuh_doc_no;
                                _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                                _pick.Tus_bin = _defbin;
                                _pick.Tus_com = _scanheaderNew.Tuh_usr_com;
                                _pick.Tus_cre_by = _scanheaderNew.Tuh_usr_id;
                                _pick.Tus_cre_dt = System.DateTime.Now;
                                _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                                _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                                _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                                _pick.Tus_doc_dt = System.DateTime.Now.Date;
                                _pick.Tus_doc_no = _scanheaderNew.Tuh_doc_no;

                                if (_outwardType == "AOD")
                                {
                                    _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                    _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                    _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                    _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                    _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                    _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                                    _pick.Tus_ageloc = _dr["ITS_AGELOC"] == DBNull.Value ? string.Empty : (String)_dr["ITS_AGELOC"];
                                    _pick.Tus_ageloc_dt = _dr["ITS_AGELOC_DT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_AGELOC_DT"];
                                    if (string.IsNullOrEmpty(_dr["ITS_ISOWNMRN"].ToString()))
                                    { _pick.Tus_isownmrn = 0; }
                                    else
                                    { _pick.Tus_isownmrn = Convert.ToInt32(_dr["ITS_ISOWNMRN"]); }

                                }
                                else
                                {
                                    _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                    _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                    _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                    _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                    _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                    _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                                }

                                _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                                _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_itm_model = _itmlist.Mi_model;
                                _pick.Tus_loc = _loc;
                                _pick.Tus_new_remarks = String.Empty;
                                _pick.Tus_new_status = String.Empty;

                                _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                                _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                                _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                                _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];

                                _pick.Tus_out_date = DateTime.Now.Date;
                                _pick.Tus_qty = 1;
                                _pick.Tus_seq_no = 0;
                                _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                                _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                                _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                                _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                                _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                                _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                                _pick.Tus_serial_id = String.Empty;
                                _pick.Tus_session_id = _scanheaderNew.Tuh_session_id;
                                _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);

                                _pick.Tus_usrseq_no = Convert.ToInt32(_scanheaderNew.Tuh_usrseq_no);
                                _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                                _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);

                                _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                                _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 
                                _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015
                                _picklist.Add(_pick);
                                _inventoryRepDAL.SavePickedItemSerials(_pick);

                            }
                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITS_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITS_ITM_CD"];
                    }
                }

                //Get None-Serialized Items
                DataTable _dt1 = new DataTable();
                DataTable _dt11 = new DataTable();
                _dt1 = _inventoryDAL.GetIntBatchDetailsDecimal(_scanheaderNew.Tuh_doc_no);
                _dt11 = _inventoryDAL.GetScmBatchDetailsDecimal(_scanheaderNew.Tuh_doc_no);
                _dt1.Merge(_dt11);
                if (_dt1.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt1.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        _itmlist = _inventoryDAL.GetItem(_scanheaderNew.Tuh_usr_com, (String)_dr["ITB_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _scanheaderNew.Tuh_doc_no;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                            _pick.Tus_bin = _defbin;
                            _pick.Tus_com = _scanheaderNew.Tuh_usr_com;
                            _pick.Tus_cre_by = _scanheaderNew.Tuh_usr_id;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                            _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITB_SEQ_NO"]);
                            _pick.Tus_cross_serline = 0;
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            _pick.Tus_doc_no = _scanheaderNew.Tuh_doc_no;

                            if (_outwardType == "AOD-")
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;
                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }
                            else
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;

                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITB_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = string.Empty;
                            _pick.Tus_orig_grndt = DateTime.MinValue;
                            _pick.Tus_orig_grnno = string.Empty;
                            _pick.Tus_orig_supp = string.Empty;

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = "N/A";
                            _pick.Tus_ser_2 = string.Empty;
                            _pick.Tus_ser_3 = string.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            _pick.Tus_ser_id = 0;
                            _pick.Tus_ser_line = 0;
                            _pick.Tus_serial_id = String.Empty;
                            _pick.Tus_session_id = _scanheaderNew.Tuh_session_id;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITB_UNIT_COST"]);

                            _pick.Tus_usrseq_no = Convert.ToInt32(_scanheaderNew.Tuh_usrseq_no);
                            _pick.Tus_warr_no = string.Empty;
                            _pick.Tus_warr_period = 0;
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015

                            _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                            _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015

                            _picklist.Add(_pick);
                            _inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITB_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITB_ITM_CD"];
                    }
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _tr.Complete();
                _unavailableitemlist = _itemlist;
                return _picklist;
            }
        }

        #endregion

        public bool IsValidItem(string _company, string _item)
        {
            bool _isActive = false;
            _inventoryDAL = new InventoryDAL();
            MasterItem _is = _inventoryDAL.GetItem(_company, _item);
            if (_is != null)
            {
                _isActive = true;
            }
            else
            {
                _isActive = false;
            }
            return _isActive;
        }

        //kapila 30/5/2012
        #region manual docs

        public DataTable GetManualDocs(string _Loc, Int16 _IsRec)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetManualDocs(_Loc, _IsRec);
        }

        public Int32 UpdateTransferStatus(string _RefNo, string _User, string _TransLoc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int32 X = _FMSinventoryDAL.UpdateTransferStatus(_RefNo, _User, _TransLoc);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        public List<ManualDocDetail> GetManualDocDet(string _Ref)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetManualDocDet(_Ref);
        }

        public Int16 SavePickedManualDocDetail(string _refNo, string _Loc, string _user, string _Status)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int16 X = _FMSinventoryDAL.SavePickedManualDocDet(_refNo, _Loc, _user, _Status);
            _FMSinventoryDAL.ConnectionOpen();
            return X;
        }

        public Int16 Delete_Selected_Item_Line(Int32 _BkNo, string _prefix, string _USer)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            bool a = _FMSinventoryDAL.ConnectionOpen();
            Int16 X = _FMSinventoryDAL.DeleteSelectedItem(_BkNo, _prefix, _USer);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        public Int16 UpdateManualDocs(string _RefNo, string _USer)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int16 X = _FMSinventoryDAL.UpdateManualDocs(_RefNo, _USer);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        //kapila
        public Int32 SaveManualDocReceipt(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            Int32 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _inventoryDAL = new InventoryDAL();

            _inventoryRepDAL.ConnectionOpen();
            _FMSinventoryDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();

            effect = SaveInwardScanSerial_FMS(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
            effect = UpdateInventoryAutoNumber_FMS(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);

            _inventoryRepDAL.ConnectionClose();
            _FMSinventoryDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();

            return effect;
        }

        public int GetManualDocSerialList(string _user, string _refNo, Int32 _seqNo, string _defBIN, string _Comp, string _Loc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.Get_Manual_Doc_Serial_List(_user, _refNo, _seqNo, _defBIN, _Comp, _Loc);
        }

        #endregion

        public List<ReptPickItems> GetAllPickItem(string _company, Int32 _userSeqNo, string _docType, string _baseDoc, string _reqitem, string _reqstatus)
        {
            List<ReptPickItems> _list = new List<ReptPickItems>();
            _inventoryRepDAL = new ReptCommonDAL();
            _list = _inventoryRepDAL.GetAllPickItem(_company, _userSeqNo, _docType, _baseDoc, _reqitem, _reqstatus);
            return _list;
        }

        private decimal GetMaxTax(string _company, string _item)
        {
            List<MasterItemTax> _WOStatus = new List<MasterItemTax>();

            //updated by akila 2017/09/06
            Boolean _isStrucBaseTax = false;
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_company);
            if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

            if (_isStrucBaseTax == true)
            {
                MasterItem _mstItem = _inventoryDAL.GetItem(_company, _item);
                _WOStatus = _salesDAL.GetItemTax_strucbase(_company, _item, string.Empty, string.Empty, string.Empty, _mstItem.Mi_anal1);
            }
            else { _WOStatus = _salesDAL.GetItemTax(_company, _item, string.Empty, string.Empty, string.Empty); }

            //_WOStatus = _salesDAL.GetItemTax(_company, _item, string.Empty, string.Empty, string.Empty);
            decimal _maxTax = -1;

            if (_WOStatus != null && _WOStatus.Count > 0)
            {
                var _max = (from _MaxTax in _WOStatus
                            select _MaxTax.Mict_tax_rate).Max();

                _maxTax = _max;
            }
            else { throw new Exception("Tax hsan't defined for item - " + _item); }

            return _maxTax;
        }

        private List<MasterItemTax> GetTax(string _company, string _item, string _status)
        {
            //updated by akila 2017/09/06
            decimal _maxTax = GetMaxTax(_company, _item);

            List<MasterItemTax> _WStatus = new List<MasterItemTax>();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            //_WStatus = _salesDAL.GetItemTax(_company, _item, _status, string.Empty, "VAT");

            Boolean _isStrucBaseTax = false;
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_company);
            if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

            if (_isStrucBaseTax == true)
            {
                MasterItem _mstItem = _inventoryDAL.GetItem(_company, _item);
                _WStatus = _salesDAL.GetItemTax_strucbase(_company, _item, _status, string.Empty, string.Empty, _mstItem.Mi_anal1);
            }
            else { _WStatus = _salesDAL.GetItemTax(_company, _item, _status, string.Empty, "VAT"); }


            if (_WStatus != null && _WStatus.Count > 0)
            {
                foreach (MasterItemTax _itm in _WStatus)
                {
                    decimal _rate = _itm.Mict_tax_rate;
                    decimal _newRate = ((100 + _maxTax) / 100) * 100 / (100 + _rate);
                    _itm.Mict_tax_rate = _newRate;
                    _list.Add(_itm);
                }
            }
            else { throw new Exception("Tax hsan't defined for item - " + _item); }

            //if (_WStatus.Count > 0)
            //{
            //    foreach (MasterItemTax _itm in _WStatus)
            //    {
            //        decimal _rate = _itm.Mict_tax_rate;
            //        decimal _newRate = ((100 + _maxTax) / 100) * 100 / (100 + _rate);
            //        _itm.Mict_tax_rate = _newRate;
            //        _list.Add(_itm);
            //    }
            //}
            //else
            //{
            //    _list = new List<MasterItemTax>() { new MasterItemTax { Mict_act = true, Mict_itm_cd = _item, Mict_stus = _status, Mict_tax_cd = "S", Mict_tax_rate = _maxTax / 100, Mict_taxrate_cd = "S" } };
            //}

            return _list;
        }

        private decimal TaxCalculation(string _company, string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, bool _isTaxPotion)
        {
            if (_level != null)
                if (_level.Sapl_vat_calc)
                {
                    //updated by akila 2017/09/04 - get tax base on structure base defenition
                    List<MasterItemTax> _taxs = new List<MasterItemTax>();

                    if (_isTaxPotion == false)
                    {
                        _taxs = GetTax(_company, _item, _status);
                    }

                    else
                    {
                        Boolean _isStrucBaseTax = false;
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_company);
                        if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                        if (_isStrucBaseTax == true)
                        {
                            MasterItem _mstItem = _inventoryDAL.GetItem(_company, _item);
                            _taxs = _salesDAL.GetItemTax_strucbase(_company, _item, _status, string.Empty, string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                            _taxs = _salesDAL.GetItemTax(_company, _item, _status, string.Empty, string.Empty);
                    }

                    //if (_isTaxPotion == false)
                    //    _taxs = GetTax(_company, _item, _status);
                    //else
                    //    _taxs = _salesDAL.GetItemTax(_company, _item, _status, string.Empty, string.Empty);

                    if (_taxs != null && _taxs.Count > 0)
                    {
                        var _Tax = from _itm in _taxs
                                   select _itm;
                        foreach (MasterItemTax _one in _Tax)
                        {
                            if (_isTaxPotion == false)
                                _pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
                            else
                                _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                        }
                    }
                    else { throw new Exception("Tax hsan't defined for item - " + _item); }

                }

            return _pbUnitPrice;
        }

        #region Delivery Order - InterCompany *** Prabhath 04-05-2012 ***

        public Int16 DeliveryOrderInterCompany(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, ReptCommonDAL _invRepDAL, InventoryDAL _invDAL)
        {
            //_invRepDAL = new ReptCommonDAL();
            //_invRepDAL.ConnectionOpen();
            //_invDAL = new InventoryDAL();
            //_invDAL.ConnectionOpen();

            _inventoryDAL = _invDAL;
            _inventoryRepDAL = _invRepDAL;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            List<ReptPickSerials> _notcons = new List<ReptPickSerials>();

            Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);

            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out documentNo);

            #region Update Invoice Qty
            var _invoice =
            from _pickSerials in _reptPickSerials
            group _pickSerials by new { _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line } into itm
            select new { invoiceno = itm.Key.Tus_base_doc_no, lineno = itm.Key.Tus_base_itm_line, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var invoiceItems in _invoice)
            {
                _invDAL.UpdateInvoicveDOQty(invoiceItems.invoiceno.ToString(), Convert.ToInt16(invoiceItems.lineno.ToString()), Convert.ToDecimal(invoiceItems.itemqty.ToString()));
            }

            _invDAL.UpdateInvoiceDOStatus(_inventoryMovementHeader.Ith_oth_docno);

            #endregion

            return effect;
        }

        #endregion

        public Int16 SaveDeliveryOrderWithInvoice(string _fromCompany, string _fromProfit, string _toCompany, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, InvoiceHeader _invoiceHeader, MasterAutoNumber _invoiceAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _message, out string _genInvoiceNo, out string _genDeliveryOrder, ReptCommonDAL _inventoryRepDAL)
        {
            List<ReptPickSerials> _reptPickSerialList = new List<ReptPickSerials>();
            List<ReptPickSerialsSub> _reptPickSerialSubList = new List<ReptPickSerialsSub>();
            List<InvoiceItem> _invoiceItem = new List<InvoiceItem>();

            string _invoiceNo = string.Empty;
            string _receiptNo = string.Empty;
            string _deliveryOrder = string.Empty;
            string _error = string.Empty;

            string _Message = "";
            Int16 _effect = 0;
            var _invItem = from _itm in _reptPickSerials
                           group _itm by new { _itm.Tus_itm_cd, _itm.Tus_itm_stus } into _items
                           select new { Tus_itm_cd = _items.Key.Tus_itm_cd, Tus_itm_stus = _items.Key.Tus_itm_stus, Tus_qty = _items.Sum(p => p.Tus_qty) };

            DataTable _adminT = _inventoryDAL.Get_location_by_code(_fromCompany, _inventoryHeader.Ith_loc);
            if (_adminT == null || _adminT.Rows.Count <= 0)
            {
                _Message = "Admin team not define";
                _effect = -1;
                _genInvoiceNo = string.Empty;
                _genDeliveryOrder = string.Empty;
                _message = _Message;
                return _effect;
            }

            string _adminTeam = _adminT.Rows[0].Field<string>("ml_ope_cd");
            if (string.IsNullOrEmpty(_adminTeam))
            {
                _Message = "Admin team not define";
                _effect = -1;
                _genInvoiceNo = string.Empty;
                _genDeliveryOrder = string.Empty;
                _message = _Message;
                return _effect;
            }

            List<InterCompanySalesParameter> _priceParam = _salesDAL.GetInterCompanyParameter(_adminTeam, _fromCompany, _fromProfit, _toCompany, string.Empty);

            if (_priceParam != null && _priceParam.Count > 0)
            {
                _invoiceHeader.Sah_pc = _priceParam[0].Sritc_frm_prof;
                _invoiceHeader.Sah_cus_cd = _priceParam[0].Sritc_customer;
                _invoiceHeader.Sah_d_cust_cd = _priceParam[0].Sritc_customer;
                _inventoryHeader.Ith_bus_entity = _priceParam[0].Sritc_customer;
            }

            Int32 _invoiceLine = 0;

            foreach (var _itm in _invItem)
            {
                string _iItem = _itm.Tus_itm_cd;
                string _iStatus = _itm.Tus_itm_stus;
                decimal _iQty = _itm.Tus_qty;
                DateTime _iDate = _invoiceHeader.Sah_dt.Date;
                bool _iIsSerialized = false;

                string _iPriceBook = "";
                string _iPriceLevel = "";
                if (_salesDAL.GetItemTax(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty).Count <= 0) { _Message = "No tax define for the item " + _iItem + "."; _effect = -1; break; };
                if (_priceParam.Count <= 0) { _Message = "No pricing parameters define."; _effect = -1; break; };

                //Assuming there is no multiple book & level for the inter-company
                if (_priceParam.Count > 0)
                    foreach (InterCompanySalesParameter _param in _priceParam)
                    {
                        _iPriceBook = _param.Sritc_pb;
                        _iPriceLevel = _param.Sritc_pb_lvl;
                        _invoiceHeader.Sah_cus_cd = _param.Sritc_customer;
                    }
                List<PriceBookLevelRef> _level = _salesDAL.GetPriceLevelList(_fromCompany, _iPriceBook, _iPriceLevel);

                List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();
                PriceBookLevelRef _priceLevel = new PriceBookLevelRef();

                if (_level.Count <= 0) { _Message = "No price level define."; _effect = -1; break; };
                if (_level.Count > 0)
                    foreach (PriceBookLevelRef _lvl in _level)
                    {
                        _priceLevel = _lvl;
                        _iIsSerialized = _lvl.Sapl_is_serialized; break;
                    }
                //With out customer
                if (_iIsSerialized == false)
                    _priceDetailRef = _salesDAL.GetPriceDetail(_iPriceBook, _iPriceLevel, _iItem, _iQty, _iDate.Date, string.Empty);
                else
                    _priceSerialRef = _salesDAL.GetAllPriceSerial(_iPriceBook, _iPriceLevel, _iItem, _iDate.Date, string.Empty);

                //checked serialized price but it will write as per the requirement.

                if (_priceDetailRef.Count <= 0) { _Message = "There is no price define for the item " + _iItem + "."; _effect = -1; break; };
                _invoiceLine++;
                if (_priceDetailRef.Count > 0)
                    foreach (PriceDetailRef _price in _priceDetailRef)
                    {
                        decimal _AbsoulteUnitPrice = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _price.Sapd_itm_price, 0, false);
                        decimal _taxPortion = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _AbsoulteUnitPrice, 0, true);

                        InvoiceItem _item = new InvoiceItem();
                        _item.Sad_alt_itm_cd = string.Empty;
                        _item.Sad_alt_itm_desc = string.Empty;
                        _item.Sad_comm_amt = 0;
                        _item.Sad_disc_amt = 0;
                        _item.Sad_disc_rt = 0;
                        _item.Sad_do_qty = _iQty;
                        _item.Sad_fws_ignore_qty = 0;
                        _item.Sad_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                        _item.Sad_is_promo = false;
                        _item.Sad_itm_cd = _iItem;
                        _item.Sad_itm_line = _invoiceLine;
                        _item.Sad_itm_seq = _price.Sapd_seq_no;
                        _item.Sad_itm_stus = _iStatus;
                        _item.Sad_itm_tax_amt = _taxPortion;
                        _item.Sad_itm_tp = string.Empty;
                        _item.Sad_pb_lvl = _iPriceLevel;
                        _item.Sad_pb_price = _AbsoulteUnitPrice;
                        _item.Sad_pbook = _iPriceBook;
                        _item.Sad_print_stus = false;
                        _item.Sad_promo_cd = string.Empty;
                        _item.Sad_qty = _iQty;
                        _item.Sad_seq = _price.Sapd_pb_seq;
                        _item.Sad_seq_no = _invoiceHeader.Sah_seq_no;
                        _item.Sad_srn_qty = 0;
                        _item.Sad_tot_amt = _AbsoulteUnitPrice * _iQty + _taxPortion;
                        _item.Sad_unit_amt = _AbsoulteUnitPrice * _iQty;
                        _item.Sad_unit_rt = _AbsoulteUnitPrice;
                        _item.Sad_uom = string.Empty;
                        _item.Sad_warr_based = false;
                        _item.Sad_warr_period = 0;
                        _item.Sad_warr_remarks = string.Empty;

                        _invoiceItem.Add(_item);

                        //Int32 _taxLine = 0;
                        //List<MasterItemTax> _taxList = _salesDAL.GetItemTax(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty);
                        //foreach (MasterItemTax _one in _taxList)
                        //{
                        //    _taxLine++;
                        //    InvoiceItemTax _tax = new InvoiceItemTax();
                        //    _tax.Satx_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                        //    _tax.Satx_itm_cd = _iItem;
                        //    _tax.Satx_itm_line = _taxLine;
                        //    _tax.Satx_itm_tax_amt = (_one.Mict_tax_rate * _AbsoulteUnitPrice / 100) * _iQty;
                        //    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        //    _tax.Satx_itm_tax_tp = _one.Mict_taxrate_cd;
                        //    _tax.Satx_seq_no = _invoiceHeader.Sah_seq_no;

                        //    _invoiceItemTax.Add(_tax);

                        //}

                        //Update the Serial Pick Table from item & status for base doc & base line
                        //_inventoryRepDAL.UpdateBaseDocumentDetail(_invoiceHeader.Sah_seq_no, _invoiceLine, Convert.ToString(_invoiceHeader.Sah_seq_no), _iItem, _iStatus);
                        var _serials = (from _ls in _reptPickSerials
                                        where _ls.Tus_itm_cd == _iItem && _ls.Tus_itm_stus == _iStatus
                                        select _ls).ToList();
                        foreach (ReptPickSerials _one in _serials)
                        {
                            _one.Tus_base_doc_no = _inventoryHeader.Ith_seq_no.ToString();
                            _one.Tus_base_itm_line = _invoiceLine;
                            _one.Tus_unit_price = _item.Sad_unit_rt;
                            _reptPickSerialList.Add(_one);
                        }

                        break;
                    }
            }

            if (_effect != -1)
            {
                SalesBLL _salesBLL = new SalesBLL();
                _salesBLL.CommonSaveInvoiceWithDeliveryOrder(_invoiceHeader, _invoiceItem, null, null, null, _inventoryHeader, _reptPickSerialList, _reptPickSerialSubList, _invoiceAuto, null, _inventoryAuto, true, out _invoiceNo, out _receiptNo, out _deliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                if (!string.IsNullOrEmpty(_error)) _effect = -1;
                if (_effect != -1)
                {
                    _reptPickSerialList.ForEach(x => x.Tus_base_doc_no = _invoiceNo);
                    _inventoryHeader.Ith_oth_docno = _invoiceNo;
                    DeliveryOrderInterCompany(_inventoryHeader, _reptPickSerialList, null, _inventoryAuto, out _deliveryOrder, _inventoryRepDAL, _inventoryDAL);
                }
            }
            _genInvoiceNo = _invoiceNo;
            _genDeliveryOrder = _deliveryOrder;
            _message = _Message;
            return _effect;
        }

        private List<ReptPickSerials> PickItemforAutoIn(List<ReptPickSerials> _outList, InventoryHeader _header, string _defbin)
        {
            List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
            MasterItem _itmlist = new MasterItem();

            //Get Serialized Items
            DataTable _dt0 = new DataTable();
            DataTable _dt00 = new DataTable();
            _dt0 = _inventoryDAL.GetIntSerDetails(_header.Ith_oth_docno);
            //_dt00 = _inventoryDAL.GetScmSerDetails(_header.Ith_oth_docno);
            //_dt0.Merge(_dt00);

            if (_dt0.Rows.Count > 0)
            {
                foreach (DataRow _dr in _dt0.Rows)
                {
                    ReptPickSerials _pick = new ReptPickSerials();
                    _itmlist = _inventoryDAL.GetItem(_header.Ith_com, (String)_dr["ITS_ITM_CD"]);
                    if (_itmlist != null)
                    {
                        _pick.Tus_base_doc_no = _header.Ith_oth_docno;
                        _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                        _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                        _pick.Tus_bin = _defbin;
                        _pick.Tus_com = _header.Ith_com;
                        _pick.Tus_cre_by = _header.Ith_cre_by;
                        _pick.Tus_cre_dt = System.DateTime.Now;
                        _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                        _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                        _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                        _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                        _pick.Tus_doc_dt = System.DateTime.Now.Date;
                        _pick.Tus_doc_no = Convert.ToString(_header.Ith_seq_no);
                        _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                        _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                        _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                        _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                        _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                        _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                        _pick.Tus_itm_brand = _itmlist.Mi_brand;
                        _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                        _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                        _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                        _pick.Tus_itm_model = _itmlist.Mi_model;
                        _pick.Tus_loc = _header.Ith_loc;
                        _pick.Tus_new_remarks = String.Empty;
                        _pick.Tus_new_status = String.Empty;
                        _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                        _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                        _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                        _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];
                        _pick.Tus_out_date = DateTime.Now.Date;
                        _pick.Tus_qty = 1;
                        _pick.Tus_seq_no = 0;
                        _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                        _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                        _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                        _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                        _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                        _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                        _pick.Tus_serial_id = String.Empty;
                        _pick.Tus_session_id = _header.Ith_session_id;
                        _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);
                        if (_header.Ith_anal_4 == "AUTO_IN_AOD")
                        {

                            //if (_header.Ith_anal_5 == "DFS")
                            //{
                            //    //Added by Chamal 12-Jan-2018, due to Bond to DP Auto In Cost Error
                            //    _pick.Tus_base_doc_no = _header.Ith_entry_no;
                            //    _pick.Tus_base_itm_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt32(_dr["ITB_JOB_LINE"]);
                            //    decimal _TmpSActRt = 0;
                            //    DataTable _dtCost = _inventoryDAL.GetActualRateAodIn(_header.Ith_entry_no, Convert.ToInt32(_dr["ITB_JOB_LINE"]));
                            //    if (_dtCost != null)
                            //    {
                            //        if (_dtCost.Rows.Count > 0)
                            //        {
                            //            _pick.Tus_unit_cost = decimal.TryParse(_dtCost.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dtCost.Rows[0][0].ToString()) : 0;
                            //        }
                            //    }
                            //}
                                    }
                        _pick.Tus_usrseq_no = _header.Ith_seq_no;
                        _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                        _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);
                        _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Added by Chamal 08-Apr-2015
                        //   _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : (Int32)_dr["ITB_JOB_LINE"];//Added by Chamal 08-Apr-2015
                        _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt32(_dr["ITB_JOB_LINE"]);//Modified by Nadeeka 25-04-2015
                        _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015
                        _picklist.Add(_pick);
                    }
                }
            }

            //Get None-Serialized Items
            DataTable _dt1 = new DataTable();
            DataTable _dt11 = new DataTable();
            _dt1 = _inventoryDAL.GetIntBatchDetailsDecimal(_header.Ith_oth_docno);
            //_dt11 = _inventoryDAL.GetScmBatchDetailsDecimal(_header.Ith_oth_docno);
            //_dt1.Merge(_dt11);
            if (_dt1.Rows.Count > 0)
            {
                foreach (DataRow _dr in _dt1.Rows)
                {
                    ReptPickSerials _pick = new ReptPickSerials();
                    _itmlist = _inventoryDAL.GetItem(_header.Ith_com, (String)_dr["ITB_ITM_CD"]);
                    if (_itmlist != null)
                    {
                        _pick.Tus_base_doc_no = _header.Ith_oth_docno;
                        _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                        _pick.Tus_batch_line = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                        _pick.Tus_bin = _defbin;
                        _pick.Tus_com = _header.Ith_com;
                        _pick.Tus_cre_by = _header.Ith_cre_by;
                        _pick.Tus_cre_dt = System.DateTime.Now;
                        _pick.Tus_cross_batchline = 0;
                        _pick.Tus_cross_itemline = 0;
                        _pick.Tus_cross_seqno = 0;
                        _pick.Tus_cross_serline = 0;
                        _pick.Tus_doc_dt = System.DateTime.Now.Date;
                        _pick.Tus_doc_no = Convert.ToString(_header.Ith_seq_no);
                        _pick.Tus_exist_grncom = string.Empty;
                        _pick.Tus_exist_grnno = string.Empty;
                        _pick.Tus_exist_grndt = DateTime.MinValue;
                        _pick.Tus_exist_supp = string.Empty;
                        _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                        _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                        _pick.Tus_itm_brand = _itmlist.Mi_brand;
                        _pick.Tus_itm_cd = (String)_dr["ITB_ITM_CD"];
                        _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                        _pick.Tus_itm_line = 0;
                        _pick.Tus_itm_model = _itmlist.Mi_model;
                        _pick.Tus_loc = _header.Ith_loc;
                        _pick.Tus_new_remarks = String.Empty;
                        _pick.Tus_new_status = String.Empty;
                        _pick.Tus_orig_grncom = string.Empty;
                        _pick.Tus_orig_grndt = DateTime.MinValue;
                        _pick.Tus_orig_grnno = string.Empty;
                        _pick.Tus_orig_supp = string.Empty;
                        _pick.Tus_out_date = DateTime.Now.Date;
                        _pick.Tus_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                        _pick.Tus_seq_no = 0;
                        _pick.Tus_ser_1 = "N/A";
                        _pick.Tus_ser_2 = string.Empty;
                        _pick.Tus_ser_3 = string.Empty;
                        _pick.Tus_ser_4 = string.Empty;
                        _pick.Tus_ser_id = 0;
                        _pick.Tus_ser_line = 0;
                        _pick.Tus_serial_id = String.Empty;
                        _pick.Tus_session_id = _header.Ith_session_id;
                        _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITB_UNIT_COST"]);
                        if (_header.Ith_anal_4 == "AUTO_IN_AOD")
                        {
                            //if (_header.Ith_anal_5 == "DFS")
                            //{
                            //    //Added by Chamal 12-Jan-2018, due to Bond to DP Auto In Cost Error
                            //    _pick.Tus_base_doc_no = _header.Ith_entry_no;
                            //    _pick.Tus_base_itm_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt32(_dr["ITB_JOB_LINE"]);
                            //    decimal _TmpSActRt = 0;
                            //    DataTable _dtCost = _inventoryDAL.GetActualRateAodIn(_header.Ith_entry_no, Convert.ToInt32(_dr["ITB_JOB_LINE"]));
                            //    if (_dtCost != null)
                            //    {
                            //        if (_dtCost.Rows.Count > 0)
                            //        {
                            //            _pick.Tus_unit_cost = decimal.TryParse(_dtCost.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dtCost.Rows[0][0].ToString()) : 0;
                            //        }
                            //    }
                            //}
                                    }
                        _pick.Tus_usrseq_no = Convert.ToInt32(_header.Ith_seq_no);
                        _pick.Tus_warr_no = string.Empty;
                        _pick.Tus_warr_period = 0;
                        _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Added by Chamal 08-Apr-2015
                        _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt32(_dr["ITB_JOB_LINE"]);//Added by Chamal 08-Apr-2015
                        _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015
                        _picklist.Add(_pick);
                    }
                }
            }

            return _picklist;
        }

        //26 Apr 2016 Added Transport Mode to SaveCommonOutWardEntry Methode by Lakshan
        #region oldSaveCommonOutWardEntry
        //public Int32 SaveCommonOutWardEntry(string _fromCompany, string _fromProfit, string _toCompany, string _requestNo, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, InvoiceHeader _invoiceHeader, MasterAutoNumber _invoiceAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _genMessage, out string _genSalesDocument, out string _genInventoryDocument, bool _isGRAN, bool _isGRNFromDIN, List<Transport> _traList = null, Boolean withcoonection = false)
                //{
        //    string _salesDocument = string.Empty;
        //    string _inventoryDocument = string.Empty;
        //    Int32 _effect = 0;
        //    string _tempSalesDoc = "";
        //    string _tempInventoryDoc = "";
        //    string _genInvDoc = "";
        //    string _genSalDoc = "";
        //    string _message = string.Empty;
        //    _genMessage = string.Empty;
        //    Boolean _isStrucBaseTax = false;
        //    string _trlocation = _inventoryHeader.Ith_loc;
        //    try
        //    {
        //        //added by Wimal @ 07/Aug/2018
        //        //if (_genInvDal == null)
        //        //{
        //        //    _inventoryDAL = new InventoryDAL();
        //        //}
        //        //else
        //        //{
        //        //    _inventoryDAL = _genInvDal;
        //        //}
        //        if (withcoonection == false)
        //        {


        //            _inventoryDAL = new InventoryDAL();
        //            _custServiceDAL = new CustServiceDAL();
        //            _salesDAL = new SalesDAL();
        //            _inventoryRepDAL = new ReptCommonDAL();
        //            _generalDAL = new GeneralDAL();
        //            _ScmCommonDAL = new SCMCommonDAL();
        //            _FMSinventoryDAL = new FMS_InventoryDAL();
        //            _inventoryDAL.ConnectionOpen();
        //            _inventoryDAL.BeginTransaction();
        //            _salesDAL.ConnectionOpen();
        //            _salesDAL.BeginTransaction();
        //            _inventoryRepDAL.ConnectionOpen();
        //            _inventoryRepDAL.BeginTransaction();
        //            _generalDAL.ConnectionOpen();
        //            _generalDAL.BeginTransaction();
        //            _custServiceDAL.ConnectionOpen();
        //            _custServiceDAL.BeginTransaction();
        //            _FMSinventoryDAL.ConnectionOpen();
        //            _FMSinventoryDAL.BeginTransaction();
        //        }
        //        #region make ADJ+ and ADJ- for Hero Production issue 26Jan2017
        //        if (_inventoryHeader.Tmp_itm_conv_to_fg)
        //        {
        //            string _HEAdjOutDocNo = "", _HEAdjInDocNo = "";
        //            MasterLocation _mstHEOut = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
        //            MasterLocation _mstHEIn = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_oth_loc);
        //            MasterItem _HEMstItem = new MasterItem();
        //            MasterItem _HEFgMstItem = new MasterItem();
        //            List<InventorySerialN> _HEIntSerAdjOutList = new List<InventorySerialN>();
        //            InventorySerialN _HEIntSerAdjOut = new InventorySerialN();
        //            List<InventoryBatchN> _HEIntBatchAdjOutList = new List<InventoryBatchN>();
        //            InventoryBatchN _HEIntBatchAdjOut = new InventoryBatchN();
        //            List<InventorySerialN> _HEAdjInInrSerList = new List<InventorySerialN>();
        //            List<InventorySerialN> _TmpHEAdjInInrSerList = new List<InventorySerialN>();
        //            InventorySerialN _HEAdjInInrSer = new InventorySerialN();
        //            List<InventoryBatchRefN> _HEAdjInInrBatchList = new List<InventoryBatchRefN>();
        //            InventoryBatchRefN _HEAdjInInrBatch = new InventoryBatchRefN();
        //            string _tmpErrMsg = "";
        //            Int32 _HEEff = 0;
        //            #region make ADJ out
        //            MasterAutoNumber _KDAutoNoAdjOut = MasterAutoNumber.CreateNewObject(_inventoryAuto);
        //            _KDAutoNoAdjOut.Aut_cate_cd = _inventoryHeader.Ith_loc;
        //            _KDAutoNoAdjOut.Aut_cate_tp = "LOC";
        //            _KDAutoNoAdjOut.Aut_direction = null;
        //            _KDAutoNoAdjOut.Aut_modify_dt = null;
        //            _KDAutoNoAdjOut.Aut_moduleid = "ADJ";
        //            _KDAutoNoAdjOut.Aut_number = 5;//what is Aut_number
        //            _KDAutoNoAdjOut.Aut_start_char = "ADJ";
        //            _KDAutoNoAdjOut.Aut_year = null;
        //            InventoryHeader _KDInvHdrAdjOut = InventoryHeader.CreateNewObject(_inventoryHeader);
        //            _KDInvHdrAdjOut.Ith_direct = false;
        //            _KDInvHdrAdjOut.Ith_doc_tp = "ADJ";
        //            _KDInvHdrAdjOut.Ith_oth_loc = "";
        //            _KDInvHdrAdjOut.Ith_cate_tp = "PO"; _KDInvHdrAdjOut.Ith_sub_tp = "NOR";
        //            _KDInvHdrAdjOut.Ith_entry_tp = "NOR"; _KDInvHdrAdjOut.Ith_gen_frm = "SCMWEBAODAS";
        //            _HEEff = SaveOutwardScanSerial(_KDInvHdrAdjOut, _reptPickSerials, _reptPickSerialsSub, null, false);
        //            if (_HEEff != 1)
        //            {
        //                #region if error rollback
        //                _tmpErrMsg = "Process Terminated ! ADJ- not update correctly !";
        //                _genMessage = _tmpErrMsg; _genInventoryDocument = _tmpErrMsg; _genSalesDocument = _tmpErrMsg;
        //                _effect = -1;
        //                _inventoryDAL.TransactionRollback();
        //                _salesDAL.TransactionRollback();
        //                _inventoryRepDAL.TransactionRollback();
        //                _generalDAL.TransactionRollback();
        //                _custServiceDAL.TransactionRollback();
        //                _FMSinventoryDAL.TransactionRollback();
        //                return _effect;
        //                #endregion
        //            }
        //            _HEEff = UpdateInventoryAutoNumber(_KDInvHdrAdjOut, _KDAutoNoAdjOut, "-", out _HEAdjOutDocNo);
        //            #endregion
        //            ReptPickSerials _HEPickSer = new ReptPickSerials();
        //            List<ReptPickSerials> _KDPickSerialsAdjOut = new List<ReptPickSerials>();
        //            _HEIntSerAdjOutList = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_KDInvHdrAdjOut.Ith_seq_no);
        //            _HEIntBatchAdjOutList = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_KDInvHdrAdjOut.Ith_seq_no);
        //            foreach (var _heIntSer in _HEIntSerAdjOutList)
        //            {
        //                _heIntSer.Ins_pick = 0;
        //            }
        //            foreach (var _ser in _reptPickSerials)
        //            {
        //                bool _HEIsCorrItm = false;
        //                _HEMstItem = _inventoryDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                if (_HEMstItem != null)
        //                {
        //                    #region validate fg item data
        //                    if (_HEMstItem.Mi_itm_stus == "R")
        //                    {
        //                        if (!string.IsNullOrEmpty(_HEMstItem.Mi_fgitm_cd))
        //                        {
        //                            _HEFgMstItem = _inventoryDAL.GetItemMaster(_HEMstItem.Mi_fgitm_cd);
        //                            if (_HEFgMstItem != null)
        //                            {
        //                                if (_HEFgMstItem.Mi_act)
        //                                {
        //                                    if (_HEMstItem.Mi_is_ser1 == _HEFgMstItem.Mi_is_ser1)
        //                                    {
        //                                        _HEIsCorrItm = true;
        //                                    }
        //                                    else
        //                                    {
        //                                        _tmpErrMsg = "Different item types found [Serialized] !";
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    _tmpErrMsg = "Invalid finished item !";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                _tmpErrMsg = "Invalid finished item !";
        //                            }
        //                        }
        //                        else
        //                        {
        //                            _tmpErrMsg = "Invalid finished item !";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        _tmpErrMsg = "Invalid item status !";
        //                    }
        //                    #endregion
        //                }
        //                if (!_HEIsCorrItm)
        //                {
        //                    #region if error rollback
        //                    _genMessage = _tmpErrMsg; _genInventoryDocument = _tmpErrMsg; _genSalesDocument = _tmpErrMsg;
        //                    _effect = -1;
        //                    _inventoryDAL.TransactionRollback();
        //                    _salesDAL.TransactionRollback();
        //                    _inventoryRepDAL.TransactionRollback();
        //                    _generalDAL.TransactionRollback();
        //                    _custServiceDAL.TransactionRollback();
        //                    _FMSinventoryDAL.TransactionRollback();
        //                    return _effect;
        //                    #endregion
        //                }
        //                else
        //                {
        //                    #region serial object resetup
        //                    if (_HEFgMstItem.Mi_is_ser1 == 1)
        //                    {
        //                        _HEIntSerAdjOut = _HEIntSerAdjOutList.Where(c => c.Ins_com == _ser.Tus_com && c.Ins_loc == _ser.Tus_loc && c.Ins_itm_cd == _ser.Tus_itm_cd
        //                            && c.Ins_itm_stus == _ser.Tus_itm_stus && c.Ins_ser_1 == _ser.Tus_ser_1).FirstOrDefault();
        //                        if (_HEIntSerAdjOut != null)
        //                        {

        //                            _HEPickSer = ReptPickSerials.CreateNewObject(_ser);
        //                            _HEPickSer.Tus_doc_no = _HEAdjOutDocNo;
        //                            _HEPickSer.Tus_orig_supp = _HEIntSerAdjOut.Ins_orig_supp;
        //                            _HEPickSer.Tus_exist_supp = _HEIntSerAdjOut.Ins_exist_supp;
        //                            _HEPickSer.Tus_itm_line = _HEIntSerAdjOut.Ins_itm_line;
        //                            _HEPickSer.Tus_itm_cd = _HEMstItem.Mi_fgitm_cd;
        //                            _HEPickSer.Tus_itm_desc = _HEMstItem.Mi_longdesc;
        //                            _HEPickSer.Tus_itm_model = _HEMstItem.Mi_model;
        //                            _HEPickSer.Tus_unit_cost = _HEIntSerAdjOut.Ins_unit_cost + _HEMstItem.Mi_itmtot_cost;
        //                            _KDPickSerialsAdjOut.Add(_HEPickSer);
        //                        }
        //                    }
        //                    else if (_HEFgMstItem.Mi_is_ser1 == 0)
        //                    {
        //                        _HEIntSerAdjOut = _HEIntSerAdjOutList.Where(c => c.Ins_com == _ser.Tus_com && c.Ins_loc == _ser.Tus_loc && c.Ins_itm_cd == _ser.Tus_itm_cd
        //                            && c.Ins_itm_stus == _ser.Tus_itm_stus && c.Ins_ser_1 == "N/A" && c.Ins_pick == 0).FirstOrDefault();
        //                        if (_HEPickSer != null)
        //                        {
        //                            _HEPickSer = ReptPickSerials.CreateNewObject(_ser);
        //                            _HEIntSerAdjOut.Ins_pick = 1;
        //                            _HEPickSer.Tus_doc_no = _HEAdjOutDocNo;
        //                            _HEPickSer.Tus_orig_supp = _HEIntSerAdjOut.Ins_orig_supp;
        //                            _HEPickSer.Tus_exist_supp = _HEIntSerAdjOut.Ins_exist_supp;
        //                            _HEPickSer.Tus_itm_line = _HEIntSerAdjOut.Ins_itm_line;
        //                            _HEPickSer.Tus_itm_cd = _HEMstItem.Mi_fgitm_cd;
        //                            _HEPickSer.Tus_itm_desc = _HEMstItem.Mi_longdesc;
        //                            _HEPickSer.Tus_itm_model = _HEMstItem.Mi_model;
        //                            _HEPickSer.Tus_unit_cost = _HEIntSerAdjOut.Ins_unit_cost + _HEMstItem.Mi_itmtot_cost;
        //                            _KDPickSerialsAdjOut.Add(_HEPickSer);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        _HEIntBatchAdjOut = _HEIntBatchAdjOutList.Where(c => c.Inb_com == _ser.Tus_com && c.Inb_loc == _ser.Tus_loc && c.Inb_itm_cd == _ser.Tus_itm_cd
        //                            && c.Inb_itm_stus == _ser.Tus_itm_stus).FirstOrDefault();
        //                        _HEPickSer = ReptPickSerials.CreateNewObject(_ser);
        //                        _HEPickSer.Tus_doc_no = _HEAdjOutDocNo;
        //                        _HEPickSer.Tus_itm_line = _HEIntSerAdjOut.Ins_itm_line;
        //                        _HEPickSer.Tus_itm_cd = _HEMstItem.Mi_fgitm_cd;
        //                        _HEPickSer.Tus_itm_desc = _HEMstItem.Mi_longdesc;
        //                        _HEPickSer.Tus_itm_model = _HEMstItem.Mi_model;
        //                        _HEPickSer.Tus_unit_cost = _HEIntBatchAdjOut.Inb_unit_cost + _HEMstItem.Mi_itmtot_cost;
        //                        _KDPickSerialsAdjOut.Add(_HEPickSer);
        //                    }
        //                    #endregion
        //                }
        //            }

        //            #region make Adj IN
        //            MasterAutoNumber _KDAutoNoAdjIn = MasterAutoNumber.CreateNewObject(_inventoryAuto);
        //            _KDAutoNoAdjIn.Aut_cate_cd = _inventoryHeader.Ith_loc;
        //            _KDAutoNoAdjIn.Aut_cate_tp = "LOC";
        //            _KDAutoNoAdjIn.Aut_direction = null;
        //            _KDAutoNoAdjIn.Aut_modify_dt = null;
        //            _KDAutoNoAdjIn.Aut_moduleid = "ADJ";
        //            _KDAutoNoAdjIn.Aut_number = 5;//what is Aut_number
        //            _KDAutoNoAdjIn.Aut_start_char = "ADJ";
        //            _KDAutoNoAdjIn.Aut_year = null;
        //            InventoryHeader _KDInvHdrAdjIn = InventoryHeader.CreateNewObject(_inventoryHeader);
        //            _KDInvHdrAdjIn.Ith_direct = true;
        //            _KDInvHdrAdjIn.Ith_doc_tp = "ADJ";
        //            _KDInvHdrAdjIn.Ith_oth_loc = "";
        //            _KDInvHdrAdjIn.Ith_cate_tp = "PI"; _KDInvHdrAdjIn.Ith_sub_tp = "NOR";
        //            _KDInvHdrAdjIn.Ith_entry_tp = "NOR"; _KDInvHdrAdjIn.Ith_gen_frm = "SCMWEBAODAS";
        //            _KDInvHdrAdjIn.Ith_oth_docno = _HEAdjOutDocNo;
        //            _HEEff = SaveInwardScanSerial(_KDInvHdrAdjIn, _KDPickSerialsAdjOut, _reptPickSerialsSub);
        //            if (_HEEff != 1)
        //            {
        //                #region if error rollback
        //                _tmpErrMsg = "Process Terminated ! ADJ- not update correctly !";
        //                _genMessage = _tmpErrMsg; _genInventoryDocument = _tmpErrMsg; _genSalesDocument = _tmpErrMsg;
        //                _effect = -1;
        //                _inventoryDAL.TransactionRollback();
        //                _salesDAL.TransactionRollback();
        //                _inventoryRepDAL.TransactionRollback();
        //                _generalDAL.TransactionRollback();
        //                _custServiceDAL.TransactionRollback();
        //                _FMSinventoryDAL.TransactionRollback();
        //                return _effect;
        //                #endregion
        //            }
        //            _HEEff = UpdateInventoryAutoNumber(_KDInvHdrAdjIn, _KDAutoNoAdjIn, "+", out _HEAdjInDocNo);
        //            _inventoryHeader.Ith_oth_docno = _HEAdjInDocNo;
        //            #endregion
        //            #region out serial list resetup
        //            _reptPickSerials = new List<ReptPickSerials>();
        //            _HEAdjInInrBatchList = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_KDInvHdrAdjIn.Ith_seq_no);
        //            _HEAdjInInrSerList = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(_KDInvHdrAdjIn.Ith_seq_no);
        //            #region update inr_sermst Iem code
        //            foreach (var _tmpSerMst in _HEAdjInInrSerList)
        //            {
        //                _inventoryDAL.UpdateInrSerMstItemCode(_tmpSerMst.Ins_ser_id, _tmpSerMst.Ins_itm_cd, _KDInvHdrAdjIn.Ith_session_id, _KDInvHdrAdjIn.Ith_cre_by);
        //            }
        //            #endregion
        //            foreach (var _inrBatch in _HEAdjInInrBatchList)
        //            {
        //                if (_HEFgMstItem.Mi_is_ser1 == 1)
        //                {
        //                    _TmpHEAdjInInrSerList = _HEAdjInInrSerList.Where(c => c.Ins_itm_line == _inrBatch.Inb_itm_line && c.Ins_batch_line == _inrBatch.Inb_batch_line).ToList();
        //                    foreach (var tmpInrSer in _TmpHEAdjInInrSerList)
        //                    {
        //                        _HEPickSer = _inventoryDAL.GetSerialDataForDisposalEntry(tmpInrSer.Ins_com, tmpInrSer.Ins_loc, tmpInrSer.Ins_itm_cd, tmpInrSer.Ins_itm_stus, tmpInrSer.Ins_ser_1, "", tmpInrSer.Ins_ser_id).FirstOrDefault();
        //                        if (_HEPickSer != null)
        //                        {
        //                            _HEPickSer.Tus_new_remarks = "AOD-OUT";
        //                            _reptPickSerials.Add(_HEPickSer);
        //                        }
        //                    }
        //                }
        //                else if (_HEFgMstItem.Mi_is_ser1 == 0)
        //                {
        //                    _TmpHEAdjInInrSerList = _HEAdjInInrSerList.Where(c => c.Ins_itm_line == _inrBatch.Inb_itm_line && c.Ins_batch_line == _inrBatch.Inb_batch_line).ToList();
        //                    foreach (var tmpInrSer in _TmpHEAdjInInrSerList)
        //                    {
        //                        _HEPickSer = _inventoryDAL.GetSerialDataForDisposalEntry(tmpInrSer.Ins_com, tmpInrSer.Ins_loc, tmpInrSer.Ins_itm_cd, tmpInrSer.Ins_itm_stus, tmpInrSer.Ins_ser_1, "", tmpInrSer.Ins_ser_id).FirstOrDefault();
        //                        if (_HEPickSer != null)
        //                        {
        //                            _HEPickSer.Tus_new_remarks = "AOD-OUT";
        //                            _reptPickSerials.Add(_HEPickSer);
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    _HEPickSer = new ReptPickSerials();
        //                    _HEPickSer.Tus_itm_desc = _HEFgMstItem.Mi_shortdesc;
        //                    _HEPickSer.Tus_itm_model = _HEFgMstItem.Mi_model;
        //                    _HEPickSer.Tus_com = _inrBatch.Inb_com;
        //                    _HEPickSer.Tus_loc = _inrBatch.Inb_loc;
        //                    _HEPickSer.Tus_bin = _inrBatch.Inb_bin;
        //                    _HEPickSer.Tus_itm_cd = _inrBatch.Inb_itm_cd;
        //                    _HEPickSer.Tus_itm_stus = _inrBatch.Inb_itm_stus;
        //                    _HEPickSer.Tus_qty = _inrBatch.Inb_qty;
        //                    _HEPickSer.Tus_ser_1 = "N/A";
        //                    _HEPickSer.Tus_ser_2 = "N/A";
        //                    _HEPickSer.Tus_ser_3 = "N/A";
        //                    _HEPickSer.Tus_ser_4 = "N/A";
        //                    _HEPickSer.Tus_ser_id = 0;
        //                    _HEPickSer.Tus_serial_id = "0";
        //                    _HEPickSer.Tus_unit_cost = 0;
        //                    _HEPickSer.Tus_unit_price = 0;
        //                    _HEPickSer.Tus_unit_price = 0;
        //                    _HEPickSer.Tus_new_remarks = "AOD-OUT";
        //                    _reptPickSerials.Add(_HEPickSer);
        //                }
        //            }
        //            #endregion
        //        }
        //        #endregion

        //        //kapila 19/7/2017
        //        MasterCompany _masterComp = null;
        //        _masterComp = _generalDAL.GetCompByCode(_fromCompany);
        //        if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

        //        #region validate serial no available in company 27 Nov 2016
        //        if (_inventoryHeader.TMP_CHK_SER_IS_AVA)
        //        {
        //            MasterLocationNew _mstOutLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //            {
        //                Ml_loc_cd = _inventoryHeader.Ith_loc,
        //                Ml_com_cd = _inventoryHeader.Ith_com,
        //                Ml_act = 1
        //            }).FirstOrDefault();
        //            if (_mstOutLoc.Ml_is_serial == 0)
        //            {
        //                var _validateSerialList = _reptPickSerials.Where(c => c.Tus_ser_1 != "N/A").ToList();
        //                string _foundserial = CHECKSERILA_COM(_validateSerialList, _inventoryDAL);
        //                if (!string.IsNullOrEmpty(_foundserial))
        //                {
        //                    _genMessage = _foundserial;
        //                    _genInvDoc = string.Empty;
        //                    _genSalDoc = string.Empty;
        //                    _genSalesDocument = string.Empty;
        //                    _genInventoryDocument = string.Empty;
        //                    _effect = -1;
        //                    _inventoryDAL.ConnectionClose();
        //                    _salesDAL.ConnectionClose();
        //                    _inventoryRepDAL.ConnectionClose();
        //                    _generalDAL.ConnectionClose();
        //                    _custServiceDAL.ConnectionClose();
        //                    _FMSinventoryDAL.ConnectionClose();
        //                    return _effect;
        //                }
        //            }
        //            if (_mstOutLoc.Ml_cate_1 == "DFS")
        //            {
        //                _inventoryHeader.Ith_anal_5 = "DFS";
        //            }
        //        }
        //        #endregion

        //        #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
        //        List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
        //        TmpValidation _tmpLocBalVal = new TmpValidation();
        //        InventoryLocation _tmpLocBal = new InventoryLocation();
        //        if (_inventoryHeader.TMP_CHK_LOC_BAL)
        //        {
        //            var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
        //            foreach (var _outSer in _serialItemData)
        //            {
        //                _tmpLocBalVal = new TmpValidation();
        //                _tmpLocBalVal.Inl_com = _inventoryHeader.Ith_com;
        //                _tmpLocBalVal.Inl_loc = _inventoryHeader.Ith_loc;
        //                _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
        //                _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
        //                _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
        //                _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
        //                {
        //                    Inl_com = _inventoryHeader.Ith_com,
        //                    Inl_loc = _inventoryHeader.Ith_loc,
        //                    Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
        //                    Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
        //                });
        //                _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
        //                _locBalanceDataList.Add(_tmpLocBalVal);
        //            }
        //        }
        //        #endregion


        //        #region Validate Int Req Itm add by Lakshan 9/08/2016
        //        decimal _reqBalBefSave = 0;
        //        #region change get pick ser balance chg by lakshan 26Oct2016
        //        List<ReptPickHeader> _tempPickHdrTemp = new List<ReptPickHeader>();
        //        foreach (var _serData in _reptPickSerials)
        //        {
        //            if (_tempPickHdrTemp.Count > 0)
        //            {
        //                var _seqNoAvailableInHdr = _tempPickHdrTemp.Where(c => c.Tuh_usrseq_no == _serData.Tus_usrseq_no).FirstOrDefault();
        //                if (_seqNoAvailableInHdr == null)
        //                {
        //                    _tempPickHdrTemp.Add(new ReptPickHeader() { Tuh_usrseq_no = _serData.Tus_usrseq_no });
        //                }
        //            }
        //            else
        //            {
        //                _tempPickHdrTemp.Add(new ReptPickHeader() { Tuh_usrseq_no = _serData.Tus_usrseq_no });
        //            }
        //        }
        //        foreach (var _hdrSeq in _tempPickHdrTemp)
        //        {
        //            _reqBalBefSave = _reqBalBefSave + _inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_hdrSeq.Tuh_usrseq_no);
        //        }
        //        //Int32 _tempPickSeqNo = _reptPickSerials.FirstOrDefault().Tus_usrseq_no;
        //        //decimal _reqBalBefSave = _inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_tempPickSeqNo);
        //        #endregion

        //        decimal _updatedQty = 0;
        //        decimal _batchQty = 0;
        //        decimal _serQty = 0;
        //        bool _resUpdateErr = false;
        //        #endregion
        //        #region SaveArea
        //        var _document = (from _doc in _reptPickSerials select _doc.Tus_new_remarks).Distinct();
        //        bool _isInvalidManualDocType = false;
        //        if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_1)) if (_inventoryHeader.Ith_anal_1 == "1") _isInvalidManualDocType = true; else _isInvalidManualDocType = false;
        //        bool _isManualSelect = _inventoryHeader.Ith_is_manual;
        //        foreach (string _documentType in _document)
        //        {
        //            var _serialList = (from _doc in _reptPickSerials where _doc.Tus_new_remarks == _documentType select _doc).ToList();
        //            Int32 UserSeqNo = _inventoryDAL.GetSerialID();
        //            _inventoryHeader.Ith_seq_no = UserSeqNo;
        //            _inventoryHeader.Ith_doc_no = Convert.ToString(UserSeqNo);
        //            if (_documentType == "AOD-OUT")
        //            {
        //                #region aod data
        //                MasterLocation _loc = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc);
        //                bool _isOtherLocAutoIn = false;
        //                if (_loc == null)     //kapila 8/5/2017
        //                {
        //                    _genMessage = " Invalid receive location code " + _inventoryHeader.Ith_oth_loc;
        //                    _effect = -1;
        //                    break;
        //                }
        //                if (_loc.Ml_auto_ain && _loc.Ml_anal1 == "SCM2") _isOtherLocAutoIn = true;
        //                string _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
        //                if (_isGRAN && _isGRNFromDIN == false)
        //                {
        //                    List<ReptPickSerials> _statuschangelist = _serialList.Where(x => x.Tus_itm_stus != x.Tus_new_status).ToList();
        //                    _serialList.RemoveAll(x => x.Tus_itm_stus != x.Tus_new_status);
        //                    InventoryHeader _minusHeader = _inventoryHeader;

        //                    _minusHeader.Ith_cate_tp = "NOR"; _minusHeader.Ith_is_manual = false;
        //                    _minusHeader.Ith_stus = "A"; _minusHeader.Ith_direct = false;
        //                    _minusHeader.Ith_doc_tp = "ADJ"; _minusHeader.Ith_sub_tp = "STUS";
        //                    _minusHeader.Ith_entry_tp = "STUS"; _minusHeader.Ith_direct = false;
        //                    InventoryHeader _plusHeader = _inventoryHeader;
        //                    _plusHeader.Ith_cate_tp = "NOR"; _plusHeader.Ith_is_manual = false;
        //                    _plusHeader.Ith_stus = "A"; _plusHeader.Ith_direct = true;
        //                    _plusHeader.Ith_doc_tp = "ADJ"; _plusHeader.Ith_sub_tp = "STUS";
        //                    _plusHeader.Ith_entry_tp = "STUS"; _plusHeader.Ith_direct = true;
        //                    MasterAutoNumber _minusAuto = new MasterAutoNumber();
        //                    _minusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
        //                    _minusAuto.Aut_cate_tp = "LOC"; _minusAuto.Aut_direction = null;
        //                    _minusAuto.Aut_modify_dt = null; _minusAuto.Aut_moduleid = "ADJ";
        //                    _minusAuto.Aut_number = 0; _minusAuto.Aut_start_char = "ADJ";
        //                    _minusAuto.Aut_year = null; MasterAutoNumber _plusAuto = new MasterAutoNumber();
        //                    _plusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
        //                    _plusAuto.Aut_cate_tp = "LOC"; _plusAuto.Aut_direction = null;
        //                    _plusAuto.Aut_modify_dt = null; _plusAuto.Aut_moduleid = "ADJ";
        //                    _plusAuto.Aut_number = 0; _plusAuto.Aut_start_char = "ADJ";
        //                    _plusAuto.Aut_year = null; string _minusDoc = string.Empty;
        //                    string _plusDoc = string.Empty;
        //                    if (_statuschangelist != null && _statuschangelist.Count > 0) InventoryStatusChangeCommon(_minusHeader, _plusHeader, _statuschangelist, _reptPickSerialsSub, _minusAuto, _plusAuto, out _minusDoc, out _plusDoc);
        //                    if (!string.IsNullOrEmpty(_minusDoc))
        //                    { _tempInventoryDoc = _minusDoc + "," + _plusDoc; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
        //                    _tempInventoryDoc = string.Empty;
        //                    List<ReptPickSerials> _AdjPlusSerialList = new List<ReptPickSerials>();
        //                    foreach (ReptPickSerials _one in _statuschangelist)
        //                    {
        //                        string _serial = _one.Tus_ser_1; string _item = _one.Tus_itm_cd;
        //                        Int64 _serialId = _one.Tus_ser_id; MasterItem msitem = new MasterItem();
        //                        msitem = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _item);
        //                        if (msitem.Mi_is_ser1 == 1 || msitem.Mi_is_ser1 == 0)
        //                        {
        //                            ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, string.Empty, _item, Convert.ToInt32(_serialId));
        //                            _reptPickSerial_.Tus_base_doc_no = _one.Tus_base_doc_no;//add by tharanga item sts change base doc no null
        //                            _AdjPlusSerialList.Add(_reptPickSerial_);

        //                        }
        //                        else
        //                        {

        //                            ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
        //                            _reptPickSerial_.Tus_com = _inventoryHeader.Ith_com; _reptPickSerial_.Tus_base_doc_no = _inventoryHeader.Ith_oth_docno;
        //                            _reptPickSerial_.Tus_base_itm_line = _one.Tus_base_itm_line;
        //                            _reptPickSerial_.Tus_bin = _defbin; _reptPickSerial_.Tus_cre_by = _inventoryHeader.Ith_cre_by;
        //                            _reptPickSerial_.Tus_cre_dt = DateTime.Now; _reptPickSerial_.Tus_cross_batchline = 0; _reptPickSerial_.Tus_cross_itemline = 0;
        //                            _reptPickSerial_.Tus_cross_seqno = 0; _reptPickSerial_.Tus_cross_serline = 0; _reptPickSerial_.Tus_doc_dt = _inventoryHeader.Ith_doc_date;
        //                            _reptPickSerial_.Tus_doc_no = "N/A"; _reptPickSerial_.Tus_exist_grncom = "N/A"; _reptPickSerial_.Tus_isapp = 1;
        //                            _reptPickSerial_.Tus_iscovernote = 1; _reptPickSerial_.Tus_itm_brand = msitem.Mi_brand; _reptPickSerial_.Tus_itm_cd = _item;
        //                            _reptPickSerial_.Tus_itm_desc = msitem.Mi_longdesc; _reptPickSerial_.Tus_itm_line = 0; _reptPickSerial_.Tus_itm_model = msitem.Mi_model;
        //                            _reptPickSerial_.Tus_itm_stus = _one.Tus_itm_stus;
        //                            _reptPickSerial_.Tus_itm_stus = string.IsNullOrEmpty(_one.Tus_new_status) ? _one.Tus_itm_stus : _one.Tus_new_status;
        //                            _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc; _reptPickSerial_.Tus_new_status = _one.Tus_new_status;
        //                            _reptPickSerial_.Tus_qty = _one.Tus_qty; _reptPickSerial_.Tus_ser_1 = "N/A"; _reptPickSerial_.Tus_ser_2 = "N/A";
        //                            _reptPickSerial_.Tus_ser_id = 0; _reptPickSerial_.Tus_ser_line = 0; _reptPickSerial_.Tus_session_id = _inventoryHeader.Ith_session_id;
        //                            _reptPickSerial_.Tus_unit_cost = 0;
        //                            _reptPickSerial_.Tus_unit_price = 0; _reptPickSerial_.Tus_usrseq_no = 1;
        //                            _reptPickSerial_.Tus_warr_no = "N/A"; _reptPickSerial_.Tus_warr_period = 0; _reptPickSerial_.Tus_new_remarks = "AOD-OUT";
        //                            _AdjPlusSerialList.Add(_reptPickSerial_);
        //                        }
        //                    }
        //                    if (_serialList != null) if (_serialList.Count > 0) _AdjPlusSerialList.AddRange(_serialList);
        //                    _serialList = _AdjPlusSerialList;
        //                }
        //                _inventoryHeader.Ith_doc_tp = "AOD"; _inventoryAuto.Aut_moduleid = "AOD"; _inventoryAuto.Aut_start_char = "AOD";
        //                _inventoryAuto.Aut_direction = 0;
        //                if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "AOD") _inventoryHeader.Ith_anal_1 = "0";
        //                string _aodoutno = string.Empty;
        //                _inventoryHeader.Ith_direct = false;
        //                _inventoryHeader.Ith_seq_no = 0;
        //                _inventoryHeader.Ith_is_manual = _isManualSelect;
        //                #endregion
        //                Int16 effect = SaveOutwardScanSerial(_inventoryHeader, _serialList, _reptPickSerialsSub, null, false);

        //                if (effect == 1)
        //                {
        //                    int _reqDataUpdate = 0;
        //                    #region Req Balance Update update by Lakshan 2016 Sep 08
        //                    MasterLocationNew _masterLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //                    {
        //                        Ml_loc_cd = _inventoryHeader.Ith_loc,
        //                        Ml_com_cd = _inventoryHeader.Ith_com,
        //                        Ml_act = 1
        //                    }).FirstOrDefault();
        //                    if (!string.IsNullOrEmpty(_inventoryHeader.Ith_oth_docno))
        //                    {
        //                        var _byItemStatus = from l in _serialList
        //                                            group l by new { l.Tus_itm_cd, l.Tus_itm_stus, l.Tus_base_doc_no, l.Tus_base_itm_line }
        //                                                into item
        //                                                select new
        //                                                {
        //                                                    Tus_itm_cd = item.Key.Tus_itm_cd,
        //                                                    Tus_itm_stus = item.Key.Tus_itm_stus,
        //                                                    Tus_base_doc_no = item.Key.Tus_base_doc_no,
        //                                                    Tus_base_itm_line = item.Key.Tus_base_itm_line,
        //                                                    Tus_qty = item.Sum(p => p.Tus_qty)
        //                                                };
        //                        if (_byItemStatus != null)
        //                            if (_byItemStatus.Count() > 0)
        //                            {
        //                                foreach (var p in _byItemStatus)
        //                                {
        //                                    string _requestno = p.Tus_base_doc_no;
        //                                    string _company = _inventoryHeader.Ith_com;
        //                                    string _location = _trlocation;
        //                                    string _itemcode = p.Tus_itm_cd;
        //                                    string _itemstatus = p.Tus_itm_stus;
        //                                    decimal _qty = p.Tus_qty;
        //                                    string _docstatus = "F";
        //                                    string _user = _inventoryHeader.Ith_cre_by;
        //                                    Int32 _lineNo = p.Tus_base_itm_line;
        //                                    if (_masterLoc.Ml_is_serial == 0 && (_inventoryHeader.Ith_sub_tp == "EX" || _inventoryHeader.Ith_sub_tp == "RE" || _inventoryHeader.Ith_sub_tp == "BOI" || _inventoryHeader.Ith_sub_tp == "EXP"))
        //                                    {
        //                                        _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalanceBond(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
        //                                    }
        //                                    else
        //                                    {
        //                                        _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalance(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
        //                                    }

        //                                }
        //                                var _docs = _byItemStatus.Select(x => x.Tus_base_doc_no).Distinct();
        //                                if (_docs != null) if (_docs.Count() > 0) foreach (string _request in _docs) _inventoryDAL.UpdateRequestHeaderAodOut(_request.Trim(), _inventoryHeader.Ith_cre_by);
        //                            }
        //                    }
        //                    #endregion
        //                }

        //                #region set var data 19 oct 2016
        //                List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _inventoryHeader.Ith_doc_no });
        //                if (_invBatchData != null)
        //                {
        //                    if (_invBatchData.Count > 0)
        //                    {
        //                        _batchQty = _invBatchData.Sum(c => c.Inb_qty);
        //                        _serQty = _serialList.Sum(c => c.Tus_qty);
        //                    }
        //                }
        //                #endregion
        //                _updatedQty = _serialList.Sum(c => c.Tus_qty);
        //                effect = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _aodoutno);
        //                var _lst = (from n in _reptPickSerials
        //                            group n by new { n.Tus_itm_cd, n.Tus_base_doc_no }
        //                                into r
        //                                select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_base_doc_no = r.Key.Tus_base_doc_no, Tus_qty = r.Sum(p => p.Tus_qty) }).ToList();

        //                #region update reservation log data 07 Nov 2016 Lakshan
        //                if (effect == 1 && _inventoryHeader.TMP_IS_RES_UPDATE)
        //                {
        //                    string _errro = "";
        //                    var _resList = (from n in _serialList
        //                                    group n by new { n.Tus_itm_cd, n.Tus_itm_stus, n.Tus_res_no }
        //                                        into r
        //                                        select new
        //                                        {
        //                                            Tus_itm_cd = r.Key.Tus_itm_cd,
        //                                            Tus_itm_stus = r.Key.Tus_itm_stus,
        //                                            Tus_res_no = r.Key.Tus_res_no,
        //                                            Tus_resqty = r.Sum(p => p.Tus_resqty)
        //                                        }).ToList();
        //                    foreach (var _serData in _resList)
        //                    {
        //                        if (!string.IsNullOrEmpty(_serData.Tus_res_no))
        //                        {
        //                            if (_serData.Tus_res_no != "N/A")
        //                            {
        //                                Int32 _res = 0;
        //                                _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
        //                                {
        //                                    IRL_CURT_COM = _inventoryHeader.Ith_com,
        //                                    IRL_CURT_LOC = _inventoryHeader.Ith_loc,
        //                                    IRL_ORIG_DOC_TP = _inventoryHeader.Ith_sub_tp,
        //                                    IRL_ORIG_DOC_NO = _inventoryHeader.Ith_oth_docno,
        //                                    IRL_ORIG_DOC_DT = DateTime.Now,

        //                                    IRL_CURT_DOC_TP = "AOD-OUT",
        //                                    IRL_CURT_DOC_NO = _aodoutno,
        //                                    IRL_CURT_DOC_DT = _inventoryHeader.Ith_doc_date,
        //                                    IRL_RES_NO = _serData.Tus_res_no,
        //                                    IRL_ITM_CD = _serData.Tus_itm_cd,
        //                                    IRL_ITM_STUS = _serData.Tus_itm_stus,
        //                                    IRL_MOD_BY_NEW = _inventoryHeader.Ith_mod_by,
        //                                    IRL_MOD_SESSION = _inventoryHeader.Ith_session_id,
        //                                    IRL_MOD_DT = DateTime.Now,
        //                                    IRL_CRE_BY = _inventoryHeader.Ith_cre_by,
        //                                    IRL_CRE_DT = DateTime.Now,
        //                                    IRL_CRE_SESSION = _inventoryHeader.Ith_session_id,
        //                                    IRL_RES_QTY = _serData.Tus_resqty
        //                                }, 0, _inventoryDAL, out _errro);
        //                                if (_res <= 0)
        //                                {
        //                                    _resUpdateErr = true;
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //                #endregion

        //                #region update item allocation data 10 Jan 2017
        //                if (_inventoryHeader.TMP_IS_ALLOCATION)
        //                {
        //                    var _allData = _serialList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
        //                    InventoryRequest _tmpReqHdr = new InventoryRequest();
        //                    InventoryRequestItem _tmpReqItm = new InventoryRequestItem();
        //                    _tmpReqHdr.Itr_loc = _inventoryHeader.Ith_oth_loc;
        //                    _tmpReqHdr.Itr_com = _inventoryHeader.Ith_oth_com;
        //                    foreach (var item in _allData)
        //                    {
        //                        _tmpReqItm = new InventoryRequestItem();
        //                        _tmpReqItm.Itri_itm_cd = item.Peo.Tus_itm_cd;
        //                        _tmpReqItm.Itri_itm_stus = item.Peo.Tus_itm_stus;
        //                        _tmpReqItm.Itri_qty = item.theCount;
        //                        Int32 _rr = UpdateItemAllocationDataFIFO(_inventoryDAL, _tmpReqItm, _tmpReqHdr, _generalDAL);
        //                    }
        //                }
        //                #endregion
        //                //Comment by Lakshan as per the chaml 08/Sep/2016
        //                //foreach (var s in _lst)
        //                //{ string _item = s.Tus_itm_cd; decimal _qty = s.Tus_qty; string _requestno = s.Tus_base_doc_no; _inventoryDAL.UpdateRequestItem(_requestno, _item, _qty); }

        //                #region Othe save data
        //                if (!string.IsNullOrEmpty(_aodoutno))
        //                { _tempInventoryDoc = _aodoutno; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
        //                _tempInventoryDoc = string.Empty;
        //                if (_isOtherLocAutoIn)
        //                {
        //                    // MasterLocation _mstAodOutLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc, 1);
        //                    //MasterLocation _mstAodreciveLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_loc, 1);
        //                    MasterLocation _mstAodOutLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, 1);
        //                    MasterLocation _mstAodreciveLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc, 1);
        //                    if (!(_mstAodOutLoc.Ml_is_serial == false && _mstAodreciveLoc.Ml_is_serial == true))
        //                    {
        //                        if (_inventoryHeader.Ith_sub_tp != "SERVICE")       //kapila 15/9/2015 no auto AOD in for RCC aod outs
        //                        {
        //                            _inventoryHeader.Ith_acc_no = "AUTO_NO";
        //                            _inventoryHeader.Ith_anal_4 = "AUTO_IN_AOD";
        //                            string _otherloc = _inventoryHeader.Ith_loc;
        //                            _inventoryHeader.Ith_loc = _inventoryHeader.Ith_oth_loc; _inventoryHeader.Ith_oth_loc = _otherloc;
        //                            _inventoryHeader.Ith_oth_docno = _aodoutno; _inventoryHeader.Ith_direct = true;
        //                            _defbin = _inventoryDAL.GetDefaultBinCode(_toCompany, _inventoryHeader.Ith_loc);
        //                            MasterAutoNumber _aodinAuto = new MasterAutoNumber(); _aodinAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
        //                            _aodinAuto.Aut_cate_tp = "LOC"; _aodinAuto.Aut_direction = 1;
        //                            _aodinAuto.Aut_modify_dt = null; _aodinAuto.Aut_year = _inventoryHeader.Ith_doc_date.Date.Year; _aodinAuto.Aut_moduleid = "AOD";
        //                            _aodinAuto.Aut_start_char = "AOD";
        //                            List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_serialList, _inventoryHeader, _defbin);
        //                            #region 05 Dec 2016 base ref no not update correctle
        //                            foreach (var _ser in _aodinserial)
        //                            {
        //                                _ser.Tus_doc_no = _aodoutno;
        //                            }
        //                            #endregion

        //                            # region --------------  ADDED BY WIMAL @ 04/09/2018 - RECEIVE AUTO DUTY FREE AOD OUT -STARS

        //                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                            {
        //                                List<ReptPickSerials> _withSerIdList = _aodinserial.Where(c => c.Tus_ser_id != 0).ToList();
        //                                List<ReptPickSerials> _withotSerIdList = _aodinserial.Where(c => c.Tus_ser_id == 0).ToList();
        //                                List<ReptPickSerials> _newRepTempPickSer = new List<ReptPickSerials>();

        //                                #region Get INT_SERDATA For DFS Location
        //                                List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
        //                                {
        //                                    Ins_doc_no = _inventoryHeader.Ith_oth_docno,
        //                                    Ins_com = _inventoryHeader.Ith_oth_com,
        //                                    Ins_loc = _inventoryHeader.Ith_oth_loc
        //                                });
        //                                Int32 _serialIdZeroDataAvailable = 0;
        //                                if (_intSerList.Count > 0)
        //                                {
        //                                    _serialIdZeroDataAvailable = _intSerList.Where(c => c.Ins_ser_id == 0).ToList().Count();
        //                                }
        //                                #endregion
        //                                if (_intSerList.Count > 0 && _serialIdZeroDataAvailable < 1)
        //                                {
        //                                    #region With Serial Id
        //                                    foreach (var _withSer in _withSerIdList)
        //                                    {
        //                                        foreach (var _intSer in _intSerList)
        //                                        {
        //                                            if (_withSer.TmpSerPick)
        //                                            {
        //                                                continue;
        //                                            }
        //                                            if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
        //                                            {
        //                                                _withSer.Tus_doc_no = _intSer.Ins_doc_no;
        //                                                _withSer.Tus_itm_line = _intSer.Ins_itm_line;
        //                                                _withSer.Tus_batch_line = _intSer.Ins_batch_line;
        //                                                _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
        //                                                _withSer.Tus_unit_price = _intSer.Ins_unit_price;
        //                                                _withSer.Tus_ser_line = _intSer.Ins_ser_line;

        //                                                #region Make grn Data 11 Oct 2016
        //                                                _withSer.Tus_warr_no = _intSer.Ins_warr_no;
        //                                                _withSer.Tus_warr_period = _intSer.Ins_warr_period;
        //                                                _withSer.Tus_orig_grncom = _intSer.Ins_orig_grncom;
        //                                                _withSer.Tus_orig_grnno = _intSer.Ins_orig_grnno;
        //                                                _withSer.Tus_orig_grndt = _intSer.Ins_orig_grndt;
        //                                                _withSer.Tus_orig_supp = _intSer.Ins_orig_supp;
        //                                                _withSer.Tus_exist_grncom = _intSer.Ins_exist_grncom;
        //                                                _withSer.Tus_exist_grnno = _intSer.Ins_exist_grnno;
        //                                                _withSer.Tus_exist_grndt = _intSer.Ins_exist_grndt;
        //                                                _withSer.Tus_exist_supp = _intSer.Ins_exist_supp;
        //                                                #endregion

        //                                                decimal _actRate = 0;
        //                                                var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
        //                                                {
        //                                                    Inb_doc_no = _intSer.Ins_doc_no,
        //                                                    Inb_itm_line = _intSer.Ins_itm_line,
        //                                                    Inb_batch_line = _intSer.Ins_batch_line
        //                                                }).FirstOrDefault();
        //                                                if (_tmpBatchData != null)
        //                                                {
        //                                                    _withSer.Tus_unit_cost = _tmpBatchData.Inb_unit_cost; //If out DFS take cost from cost sheet
        //                                                    _withSer.Tus_unit_price = _tmpBatchData.Inb_unit_price;
        //                                                    _withSer.Tus_new_itm_cd = _tmpBatchData.Inb_base_itmcd;
        //                                                    _withSer.Tus_batch_no = _tmpBatchData.Inb_batch_no;
        //                                                    if (!string.IsNullOrEmpty(_tmpBatchData.Inb_res_no) && _tmpBatchData.Inb_res_no != "N/A")
        //                                                    {
        //                                                        _withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
        //                                                        _withSer.Tus_res_line = _tmpBatchData.Inb_res_lineno;
        //                                                    }

        //                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                    {
        //                                                        decimal _TmpSActRt = 0;
        //                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
        //                                                        if (_dt != null)
        //                                                        {
        //                                                            if (_dt.Rows.Count > 0)
        //                                                            {
        //                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                            }
        //                                                        }
        //                                                        _withSer.Tus_unit_cost = _actRate;
        //                                                        _withSer.Tus_unit_price = _actRate;
        //                                                        _withSer.Tus_base_doc_no = _tmpBatchData.Inb_base_ref_no;
        //                                                        _withSer.Tus_base_itm_line = _tmpBatchData.Inb_base_refline;
        //                                                    }
        //                                                }
        //                                                _withSer.TmpSerPick = true;
        //                                            }
        //                                        }
        //                                        if (_withSer.TmpSerPick)
        //                                        {
        //                                            _newRepTempPickSer.Add(_withSer);
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region Without Serial id
        //                                    if (_withotSerIdList.Count > 0)
        //                                    {
        //                                        List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryHeader.Ith_oth_docno);
        //                                        //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
        //                                        foreach (var _ser in _withotSerIdList)
        //                                        {
        //                                            foreach (var _batch in _batchList)
        //                                            {
        //                                                if (!_ser.TmpSerPick)
        //                                                {
        //                                                    if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
        //                                                    {
        //                                                        MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                        if (_mstItem.Mi_is_ser1 != 0)
        //                                                        {
        //                                                            #region is serial
        //                                                            _ser.Tus_doc_no = _batch.Inb_doc_no;
        //                                                            _ser.Tus_itm_line = _batch.Inb_itm_line;
        //                                                            _ser.Tus_batch_line = _batch.Inb_batch_line;
        //                                                            _ser.Tus_batch_no = _batch.Inb_batch_no;
        //                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                            {
        //                                                                _ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                _ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                            _ser.Tus_unit_price = _batch.Inb_unit_price;
        //                                                            _ser.Tus_itm_brand = _mstItem.Mi_brand;
        //                                                            _ser.Tus_itm_cd = _mstItem.Mi_cd;
        //                                                            _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                            _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
        //                                                            _ser.Tus_itm_model = _mstItem.Mi_model;
        //                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                            {
        //                                                                decimal _actRate = 0;
        //                                                                decimal _TmpSActRt = 0;
        //                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                if (_dt != null)
        //                                                                {
        //                                                                    if (_dt.Rows.Count > 0)
        //                                                                    {
        //                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                    }
        //                                                                }
        //                                                                _ser.Tus_unit_cost = _actRate;
        //                                                                _ser.Tus_unit_price = _actRate;
        //                                                                _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                _ser.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                // _ser.Tus_job_no = _batch.Inb_job_no;
        //                                                                // _ser.Tus_job_line = _batch.Inb_job_line;
        //                                                                // _ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                // _ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
        //                                                            _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
        //                                                            _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                            Int32 _serLine = 0;
        //                                                            if (_newRepTempPickSer.Count > 0)
        //                                                            {
        //                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
        //                                                                if (v != null)
        //                                                                {
        //                                                                    if (v.Count > 0)
        //                                                                    {
        //                                                                        _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                    }
        //                                                                }
        //                                                            }
        //                                                            _ser.Tus_ser_line = _serLine + 1;
        //                                                            _newRepTempPickSer.Add(_ser);
        //                                                            #endregion
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region mst_itm not equal 0
        //                                                            for (int i = 0; i < _ser.Tus_qty; i++)
        //                                                            {
        //                                                                ReptPickSerials _newPickSer = new ReptPickSerials();
        //                                                                _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
        //                                                                _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
        //                                                                _newPickSer.Tus_bin = _ser.Tus_bin;
        //                                                                _newPickSer.Tus_com = _ser.Tus_com;
        //                                                                _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
        //                                                                _newPickSer.Tus_cre_dt = DateTime.Now;
        //                                                                _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
        //                                                                _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
        //                                                                _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
        //                                                                //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                                _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
        //                                                                _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
        //                                                                _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
        //                                                                _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                                _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
        //                                                                _newPickSer.Tus_itm_model = _mstItem.Mi_model;
        //                                                                _newPickSer.Tus_loc = _ser.Tus_loc;
        //                                                                _newPickSer.Tus_out_date = DateTime.Now.Date;
        //                                                                _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
        //                                                                _newPickSer.Tus_ser_1 = "N/A";//
        //                                                                _newPickSer.Tus_ser_2 = "N/A";//
        //                                                                _newPickSer.Tus_ser_3 = "N/A";//
        //                                                                _newPickSer.Tus_ser_4 = "N/A";//

        //                                                                _newPickSer.Tus_qty = 1;
        //                                                                #region Genrate Ser ID
        //                                                                InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
        //                                                                {
        //                                                                    Ins_doc_no = _inventoryHeader.Ith_oth_docno,
        //                                                                    Ins_itm_line = _batch.Inb_itm_line,
        //                                                                    Ins_batch_line = _batch.Inb_batch_line
        //                                                                }).FirstOrDefault();
        //                                                                if (_inSerAodOutNotRes != null)
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
        //                                                                    _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
        //                                                                    #region Make grn Data 11 Oct 2016
        //                                                                    _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
        //                                                                    _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
        //                                                                    _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
        //                                                                    _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
        //                                                                    _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
        //                                                                    _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
        //                                                                    _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
        //                                                                    _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
        //                                                                    _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
        //                                                                    _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
        //                                                                    #endregion
        //                                                                }
        //                                                                else
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
        //                                                                }
        //                                                                #endregion
        //                                                                _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
        //                                                                _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
        //                                                                _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
        //                                                                _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
        //                                                                _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
        //                                                                _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
        //                                                                if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                                {
        //                                                                    _newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                                {
        //                                                                    decimal _actRate = 0;
        //                                                                    decimal _TmpSActRt = 0;
        //                                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                    if (_dt != null)
        //                                                                    {
        //                                                                        if (_dt.Rows.Count > 0)
        //                                                                        {
        //                                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                        }
        //                                                                    }
        //                                                                    _newPickSer.Tus_unit_cost = _actRate;
        //                                                                    _newPickSer.Tus_unit_price = _actRate;
        //                                                                    _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                    _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                    // _newPickSer.Tus_job_no = _batch.Inb_job_no;
        //                                                                    //_newPickSer.Tus_job_line = _batch.Inb_job_line;
        //                                                                    // _newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
        //                                                                _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
        //                                                                _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                                Int32 _serLine = 0;
        //                                                                if (_newRepTempPickSer.Count > 0)
        //                                                                {
        //                                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
        //                                                                        && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
        //                                                                    if (v != null)
        //                                                                    {
        //                                                                        if (v.Count > 0)
        //                                                                        {
        //                                                                            _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                        }
        //                                                                    }
        //                                                                }
        //                                                                _newPickSer.Tus_ser_line = _serLine + 1;
        //                                                                _newRepTempPickSer.Add(_newPickSer);
        //                                                            }
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                    else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
        //                                                    {
        //                                                        MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                        if (_mstItem.Mi_is_ser1 != 0)
        //                                                        {
        //                                                            #region is serial equal 1
        //                                                            _ser.Tus_doc_no = _batch.Inb_doc_no;
        //                                                            _ser.Tus_itm_line = _batch.Inb_itm_line;
        //                                                            _ser.Tus_batch_line = _batch.Inb_batch_line;
        //                                                            _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                            _ser.Tus_unit_price = _batch.Inb_unit_price;
        //                                                            _ser.Tus_batch_no = _batch.Inb_batch_no;
        //                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                            {
        //                                                                _ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                _ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            _ser.Tus_itm_brand = _mstItem.Mi_brand;
        //                                                            _ser.Tus_itm_cd = _mstItem.Mi_cd;
        //                                                            _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                            _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
        //                                                            _ser.Tus_itm_model = _mstItem.Mi_model;
        //                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                            {
        //                                                                decimal _actRate = 0;
        //                                                                decimal _TmpSActRt = 0;
        //                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                if (_dt != null)
        //                                                                {
        //                                                                    if (_dt.Rows.Count > 0)
        //                                                                    {
        //                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                    }
        //                                                                }
        //                                                                _ser.Tus_unit_cost = _actRate;
        //                                                                _ser.Tus_unit_price = _actRate;
        //                                                                _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                _ser.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                //_ser.Tus_job_no = _batch.Inb_job_no;
        //                                                                //_ser.Tus_job_line = _batch.Inb_job_line;
        //                                                                //_ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                //_ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
        //                                                            _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
        //                                                            _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                            Int32 _serLine = 0;
        //                                                            if (_newRepTempPickSer.Count > 0)
        //                                                            {
        //                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
        //                                                                if (v != null)
        //                                                                {
        //                                                                    if (v.Count > 0)
        //                                                                    {
        //                                                                        _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                    }
        //                                                                }
        //                                                            }
        //                                                            _ser.Tus_ser_line = _serLine + 1;
        //                                                            _newRepTempPickSer.Add(_ser);

        //                                                            #endregion
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Mi_is_ser1 equl 0
        //                                                            for (int i = 0; i < _batch.Itb_bal_qty1; i++)
        //                                                            {
        //                                                                ReptPickSerials _newPickSer = new ReptPickSerials();
        //                                                                _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
        //                                                                _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
        //                                                                _newPickSer.Tus_bin = _ser.Tus_bin;
        //                                                                _newPickSer.Tus_com = _ser.Tus_com;
        //                                                                _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
        //                                                                _newPickSer.Tus_cre_dt = DateTime.Now;
        //                                                                _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
        //                                                                _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
        //                                                                _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
        //                                                                // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                                _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
        //                                                                _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
        //                                                                _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                                _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
        //                                                                _newPickSer.Tus_itm_model = _mstItem.Mi_model;
        //                                                                _newPickSer.Tus_loc = _ser.Tus_loc;
        //                                                                _newPickSer.Tus_out_date = DateTime.Now.Date;
        //                                                                _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
        //                                                                _newPickSer.Tus_ser_1 = "N/A";//
        //                                                                _newPickSer.Tus_ser_2 = "N/A";//
        //                                                                _newPickSer.Tus_ser_3 = "N/A";//
        //                                                                _newPickSer.Tus_ser_4 = "N/A";//

        //                                                                _newPickSer.Tus_qty = 1;
        //                                                                #region Genrate Ser ID
        //                                                                InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
        //                                                                {
        //                                                                    Ins_doc_no = _inventoryHeader.Ith_oth_docno,
        //                                                                    Ins_itm_line = _batch.Inb_itm_line,
        //                                                                    Ins_batch_line = _batch.Inb_batch_line
        //                                                                }).FirstOrDefault();
        //                                                                if (_inSerAodOutNotRes != null)
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
        //                                                                    _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
        //                                                                    #region Make grn Data 11 Oct 2016
        //                                                                    _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
        //                                                                    _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
        //                                                                    _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
        //                                                                    _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
        //                                                                    _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
        //                                                                    _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
        //                                                                    _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
        //                                                                    _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
        //                                                                    _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
        //                                                                    _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
        //                                                                    #endregion
        //                                                                }
        //                                                                else
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
        //                                                                }
        //                                                                #endregion
        //                                                                _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
        //                                                                _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
        //                                                                _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
        //                                                                _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                                _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
        //                                                                _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
        //                                                                if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                                {
        //                                                                    _newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                                {
        //                                                                    decimal _actRate = 0;
        //                                                                    decimal _TmpSActRt = 0;
        //                                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                    if (_dt != null)
        //                                                                    {
        //                                                                        if (_dt.Rows.Count > 0)
        //                                                                        {
        //                                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                        }
        //                                                                    }
        //                                                                    _newPickSer.Tus_unit_cost = _actRate;
        //                                                                    _newPickSer.Tus_unit_price = _actRate;
        //                                                                    _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                    _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                    // _newPickSer.Tus_job_no = _batch.Inb_job_no;
        //                                                                    //_newPickSer.Tus_job_line = _batch.Inb_job_line;
        //                                                                    //_newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
        //                                                                _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
        //                                                                _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                                Int32 _serLine = 0;
        //                                                                if (_newRepTempPickSer.Count > 0)
        //                                                                {
        //                                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
        //                                                                    if (v != null)
        //                                                                    { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
        //                                                                }
        //                                                                _newPickSer.Tus_ser_line = _serLine + 1;
        //                                                                _newRepTempPickSer.Add(_ser);
        //                                                            }
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                    #endregion
        //                                }
        //                                else
        //                                {
        //                                    List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryHeader.Ith_oth_docno);
        //                                    #region WitSerial id not in int_ser
        //                                    if (_withSerIdList.Count > 0)
        //                                    {
        //                                        foreach (var _serId in _withSerIdList)
        //                                        {
        //                                            foreach (var _batch in _batchList)
        //                                            {
        //                                                if (!_serId.TmpSerPick)
        //                                                {
        //                                                    if (_serId.Tus_itm_cd == _batch.Inb_itm_cd && _serId.Tus_itm_stus == _batch.Inb_itm_stus && _serId.Tus_qty <= _batch.Itb_bal_qty1)
        //                                                    {
        //                                                        _serId.Tus_doc_no = _batch.Inb_doc_no;
        //                                                        _serId.Tus_itm_line = _batch.Inb_itm_line;
        //                                                        _serId.Tus_batch_line = _batch.Inb_batch_line;
        //                                                        _serId.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                        _serId.Tus_unit_price = _batch.Inb_unit_price;
        //                                                        _serId.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                        _serId.Tus_batch_no = _batch.Inb_batch_no;
        //                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                        {
        //                                                            _serId.Tus_res_no = _batch.Inb_res_no;
        //                                                            _serId.Tus_res_line = _batch.Inb_res_lineno;
        //                                                        }
        //                                                        #region Make grn Data 11 Oct 2016
        //                                                        InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
        //                                                        if (_invHdr != null)
        //                                                        {
        //                                                            _serId.Tus_orig_grncom = _invHdr.Ith_com;
        //                                                            _serId.Tus_orig_grnno = _invHdr.Ith_doc_no;
        //                                                            _serId.Tus_orig_grndt = _invHdr.Ith_doc_date;
        //                                                            _serId.Tus_orig_supp = _invHdr.Ith_bus_entity;
        //                                                            _serId.Tus_exist_grncom = _invHdr.Ith_com;
        //                                                            _serId.Tus_exist_grnno = _invHdr.Ith_doc_no;
        //                                                            _serId.Tus_exist_supp = _invHdr.Ith_bus_entity;
        //                                                            _serId.Tus_exist_grndt = _invHdr.Ith_doc_date;
        //                                                        }
        //                                                        #endregion
        //                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                        {
        //                                                            decimal _actRate = 0;
        //                                                            decimal _TmpSActRt = 0;
        //                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                            if (_dt != null)
        //                                                            {
        //                                                                if (_dt.Rows.Count > 0)
        //                                                                {
        //                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                }
        //                                                            }
        //                                                            _serId.Tus_unit_cost = _actRate;
        //                                                            _serId.Tus_unit_price = _actRate;
        //                                                            _serId.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                            _serId.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                            // _serId.Tus_job_no = _batch.Inb_job_no;
        //                                                            // _serId.Tus_job_line = _batch.Inb_job_line;
        //                                                            // _serId.Tus_res_no = _batch.Inb_res_no;
        //                                                            //_serId.Tus_res_line = _batch.Inb_res_lineno;
        //                                                        }
        //                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _serId.Tus_qty;
        //                                                        _serId.Tus_tmp_qty_to_pick = _serId.Tus_tmp_qty_to_pick - _serId.Tus_qty;
        //                                                        _serId.TmpSerPick = _serId.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                        Int32 _serLine = 0;
        //                                                        if (_newRepTempPickSer.Count > 0)
        //                                                        {
        //                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _serId.Tus_doc_no && c.Tus_itm_line == _serId.Tus_itm_line && c.Tus_batch_line == _serId.Tus_batch_line).ToList();
        //                                                            if (v != null)
        //                                                            {
        //                                                                if (v.Count > 0)
        //                                                                {
        //                                                                    _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                        _serId.Tus_ser_line = _serLine + 1;
        //                                                        _newRepTempPickSer.Add(_serId);
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                    #endregion
        //                                    #region Without Serial id
        //                                    if (_withotSerIdList.Count > 0)
        //                                    {
        //                                        //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
        //                                        foreach (var _ser in _withotSerIdList)
        //                                        {
        //                                            foreach (var _batch in _batchList)
        //                                            {
        //                                                if (!_ser.TmpSerPick)
        //                                                {
        //                                                    if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
        //                                                    {
        //                                                        MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                        if (_mstItem.Mi_is_ser1 != 0)
        //                                                        {
        //                                                            _ser.Tus_doc_no = _batch.Inb_doc_no;
        //                                                            _ser.Tus_itm_line = _batch.Inb_itm_line;
        //                                                            _ser.Tus_batch_line = _batch.Inb_batch_line;
        //                                                            _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                            _ser.Tus_unit_price = _batch.Inb_unit_price;
        //                                                            _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                            _ser.Tus_batch_no = _batch.Inb_batch_no;
        //                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                            {
        //                                                                _ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                _ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                            {
        //                                                                decimal _actRate = 0;
        //                                                                decimal _TmpSActRt = 0;
        //                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                if (_dt != null)
        //                                                                {
        //                                                                    if (_dt.Rows.Count > 0)
        //                                                                    {
        //                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                    }
        //                                                                }
        //                                                                _ser.Tus_unit_cost = _actRate;
        //                                                                _ser.Tus_unit_price = _actRate;
        //                                                                _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                _ser.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                // _ser.Tus_job_no = _batch.Inb_job_no;
        //                                                                // _ser.Tus_job_line = _batch.Inb_job_line;
        //                                                                // _ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                // _ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
        //                                                            _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
        //                                                            _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                            Int32 _serLine = 0;
        //                                                            if (_newRepTempPickSer.Count > 0)
        //                                                            {
        //                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
        //                                                                if (v != null)
        //                                                                {
        //                                                                    if (v.Count > 0)
        //                                                                    {
        //                                                                        _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                    }
        //                                                                }
        //                                                            }
        //                                                            _ser.Tus_ser_line = _serLine + 1;
        //                                                            #region Make grn Data 11 Oct 2016
        //                                                            InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
        //                                                            if (_invHdr != null)
        //                                                            {
        //                                                                _ser.Tus_orig_grncom = _invHdr.Ith_com;
        //                                                                _ser.Tus_orig_grnno = _invHdr.Ith_doc_no;
        //                                                                _ser.Tus_orig_grndt = _invHdr.Ith_doc_date;
        //                                                                _ser.Tus_orig_supp = _invHdr.Ith_bus_entity;
        //                                                                _ser.Tus_exist_grncom = _invHdr.Ith_com;
        //                                                                _ser.Tus_exist_grnno = _invHdr.Ith_doc_no;
        //                                                                _ser.Tus_exist_supp = _invHdr.Ith_bus_entity;
        //                                                                _ser.Tus_exist_grndt = _invHdr.Ith_doc_date;
        //                                                            }
        //                                                            #endregion
        //                                                            _newRepTempPickSer.Add(_ser);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Equal Or Less Balance Qty
        //                                                            for (int i = 0; i < _ser.Tus_qty; i++)
        //                                                            {
        //                                                                ReptPickSerials _newPickSer = new ReptPickSerials();
        //                                                                _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
        //                                                                _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
        //                                                                _newPickSer.Tus_bin = _ser.Tus_bin;
        //                                                                _newPickSer.Tus_com = _ser.Tus_com;
        //                                                                _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
        //                                                                _newPickSer.Tus_cre_dt = DateTime.Now;
        //                                                                _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
        //                                                                _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
        //                                                                _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
        //                                                                //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                                _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
        //                                                                _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
        //                                                                _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
        //                                                                _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                                _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
        //                                                                _newPickSer.Tus_itm_model = _mstItem.Mi_model;
        //                                                                _newPickSer.Tus_loc = _ser.Tus_loc;
        //                                                                _newPickSer.Tus_out_date = DateTime.Now.Date;
        //                                                                _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
        //                                                                _newPickSer.Tus_ser_1 = "N/A";//
        //                                                                _newPickSer.Tus_ser_2 = "N/A";//
        //                                                                _newPickSer.Tus_ser_3 = "N/A";//
        //                                                                _newPickSer.Tus_ser_4 = "N/A";//

        //                                                                _newPickSer.Tus_qty = 1;
        //                                                                #region Genrate Ser ID
        //                                                                InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
        //                                                                {
        //                                                                    Ins_doc_no = _inventoryHeader.Ith_oth_docno,
        //                                                                    Ins_itm_line = _batch.Inb_itm_line,
        //                                                                    Ins_batch_line = _batch.Inb_batch_line
        //                                                                }).FirstOrDefault();
        //                                                                if (_inSerAodOutNotRes != null)
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
        //                                                                    _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
        //                                                                }
        //                                                                else
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
        //                                                                }
        //                                                                #endregion
        //                                                                _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
        //                                                                _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
        //                                                                _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
        //                                                                _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
        //                                                                _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
        //                                                                _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
        //                                                                if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                                {
        //                                                                    _newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                                {
        //                                                                    decimal _actRate = 0;
        //                                                                    decimal _TmpSActRt = 0;
        //                                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                    if (_dt != null)
        //                                                                    {
        //                                                                        if (_dt.Rows.Count > 0)
        //                                                                        {
        //                                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                        }
        //                                                                    }
        //                                                                    _newPickSer.Tus_unit_cost = _actRate;
        //                                                                    _newPickSer.Tus_unit_price = _actRate;
        //                                                                    _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                    _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                    // _newPickSer.Tus_job_no = _batch.Inb_job_no;
        //                                                                    //_newPickSer.Tus_job_line = _batch.Inb_job_line;
        //                                                                    // _newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
        //                                                                _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
        //                                                                _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                                Int32 _serLine = 0;
        //                                                                if (_newRepTempPickSer.Count > 0)
        //                                                                {
        //                                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
        //                                                                        && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
        //                                                                    if (v != null)
        //                                                                    {
        //                                                                        if (v.Count > 0)
        //                                                                        {
        //                                                                            _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                        }
        //                                                                    }
        //                                                                }
        //                                                                _newPickSer.Tus_ser_line = _serLine + 1;
        //                                                                #region Make grn Data 11 Oct 2016
        //                                                                InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
        //                                                                if (_invHdr != null)
        //                                                                {
        //                                                                    _newPickSer.Tus_orig_grncom = _invHdr.Ith_com;
        //                                                                    _newPickSer.Tus_orig_grnno = _invHdr.Ith_doc_no;
        //                                                                    _newPickSer.Tus_orig_grndt = _invHdr.Ith_doc_date;
        //                                                                    _newPickSer.Tus_orig_supp = _invHdr.Ith_bus_entity;
        //                                                                    _newPickSer.Tus_exist_grncom = _invHdr.Ith_com;
        //                                                                    _newPickSer.Tus_exist_grnno = _invHdr.Ith_doc_no;
        //                                                                    _newPickSer.Tus_exist_supp = _invHdr.Ith_bus_entity;
        //                                                                    _newPickSer.Tus_exist_grndt = _invHdr.Ith_doc_date;
        //                                                                }
        //                                                                #endregion
        //                                                                _newRepTempPickSer.Add(_newPickSer);
        //                                                            }
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                    else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
        //                                                    {
        //                                                        MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                        if (_mstItem.Mi_is_ser1 != 0)
        //                                                        {
        //                                                            _ser.Tus_doc_no = _batch.Inb_doc_no;
        //                                                            _ser.Tus_itm_line = _batch.Inb_itm_line;
        //                                                            _ser.Tus_batch_line = _batch.Inb_batch_line;
        //                                                            _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                            _ser.Tus_unit_price = _batch.Inb_unit_price;
        //                                                            _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                            _ser.Tus_batch_no = _batch.Inb_batch_no;
        //                                                            if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                            {
        //                                                                _ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                _ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                            {
        //                                                                decimal _actRate = 0;
        //                                                                decimal _TmpSActRt = 0;
        //                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                if (_dt != null)
        //                                                                {
        //                                                                    if (_dt.Rows.Count > 0)
        //                                                                    {
        //                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                    }
        //                                                                }
        //                                                                _ser.Tus_unit_cost = _actRate;
        //                                                                _ser.Tus_unit_price = _actRate;
        //                                                                _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                _ser.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                //_ser.Tus_job_no = _batch.Inb_job_no;
        //                                                                //_ser.Tus_job_line = _batch.Inb_job_line;
        //                                                                //_ser.Tus_res_no = _batch.Inb_res_no;
        //                                                                //_ser.Tus_res_line = _batch.Inb_res_lineno;
        //                                                            }
        //                                                            _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
        //                                                            _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
        //                                                            _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                            Int32 _serLine = 0;
        //                                                            if (_newRepTempPickSer.Count > 0)
        //                                                            {
        //                                                                var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
        //                                                                if (v != null)
        //                                                                {
        //                                                                    if (v.Count > 0)
        //                                                                    {
        //                                                                        _serLine = v.Max(c => c.Tus_ser_line);
        //                                                                    }
        //                                                                }
        //                                                            }
        //                                                            _ser.Tus_ser_line = _serLine + 1;
        //                                                            #region Make grn Data 11 Oct 2016
        //                                                            InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
        //                                                            if (_invHdr != null)
        //                                                            {
        //                                                                _ser.Tus_orig_grncom = _invHdr.Ith_com;
        //                                                                _ser.Tus_orig_grnno = _invHdr.Ith_doc_no;
        //                                                                _ser.Tus_orig_grndt = _invHdr.Ith_doc_date;
        //                                                                _ser.Tus_orig_supp = _invHdr.Ith_bus_entity;
        //                                                                _ser.Tus_exist_grncom = _invHdr.Ith_com;
        //                                                                _ser.Tus_exist_grnno = _invHdr.Ith_doc_no;
        //                                                                _ser.Tus_exist_supp = _invHdr.Ith_bus_entity;
        //                                                                _ser.Tus_exist_grndt = _invHdr.Ith_doc_date;
        //                                                            }
        //                                                            #endregion
        //                                                            _newRepTempPickSer.Add(_ser);
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Grater Than Batch Qty
        //                                                            int sr = 0;

        //                                                            //while(int i =int(_batch.Itb_bal_qty1); i < _batch.Itb_bal_qty1; i--)
        //                                                            while (_batch.Itb_bal_qty1 > 0)
        //                                                            {
        //                                                                ReptPickSerials _newPickSer = new ReptPickSerials();
        //                                                                _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
        //                                                                _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
        //                                                                _newPickSer.Tus_bin = _ser.Tus_bin;
        //                                                                _newPickSer.Tus_com = _ser.Tus_com;
        //                                                                _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
        //                                                                _newPickSer.Tus_cre_dt = DateTime.Now;
        //                                                                _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
        //                                                                _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
        //                                                                _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
        //                                                                _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
        //                                                                // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
        //                                                                _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
        //                                                                _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
        //                                                                _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
        //                                                                _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
        //                                                                _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
        //                                                                _newPickSer.Tus_itm_model = _mstItem.Mi_model;
        //                                                                _newPickSer.Tus_loc = _ser.Tus_loc;
        //                                                                _newPickSer.Tus_out_date = DateTime.Now.Date;
        //                                                                _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
        //                                                                _newPickSer.Tus_ser_1 = "N/A";//
        //                                                                _newPickSer.Tus_ser_2 = "N/A";//
        //                                                                _newPickSer.Tus_ser_3 = "N/A";//
        //                                                                _newPickSer.Tus_ser_4 = "N/A";//

        //                                                                _newPickSer.Tus_qty = 1;
        //                                                                #region Genrate Ser ID
        //                                                                InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
        //                                                                {
        //                                                                    Ins_doc_no = _inventoryHeader.Ith_oth_docno,
        //                                                                    Ins_itm_line = _batch.Inb_itm_line,
        //                                                                    Ins_batch_line = _batch.Inb_batch_line
        //                                                                }).FirstOrDefault();
        //                                                                if (_inSerAodOutNotRes != null)
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
        //                                                                    _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
        //                                                                }
        //                                                                else
        //                                                                {
        //                                                                    _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
        //                                                                }
        //                                                                #endregion
        //                                                                _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
        //                                                                _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
        //                                                                _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
        //                                                                _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
        //                                                                _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
        //                                                                _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
        //                                                                if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
        //                                                                {
        //                                                                    _newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
        //                                                                {
        //                                                                    decimal _actRate = 0;
        //                                                                    decimal _TmpSActRt = 0;
        //                                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
        //                                                                    if (_dt != null)
        //                                                                    {
        //                                                                        if (_dt.Rows.Count > 0)
        //                                                                        {
        //                                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
        //                                                                        }
        //                                                                    }
        //                                                                    _newPickSer.Tus_unit_cost = _actRate;
        //                                                                    _newPickSer.Tus_unit_price = _actRate;
        //                                                                    _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
        //                                                                    _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
        //                                                                    // _newPickSer.Tus_job_no = _batch.Inb_job_no;
        //                                                                    //_newPickSer.Tus_job_line = _batch.Inb_job_line;
        //                                                                    //_newPickSer.Tus_res_no = _batch.Inb_res_no;
        //                                                                    //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
        //                                                                }
        //                                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
        //                                                                _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
        //                                                                _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
        //                                                                Int32 _serLine = 0;
        //                                                                if (_newRepTempPickSer.Count > 0)
        //                                                                {
        //                                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
        //                                                                    if (v != null)
        //                                                                    { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
        //                                                                }
        //                                                                _newPickSer.Tus_ser_line = _serLine + 1;
        //                                                                #region Make grn Data 11 Oct 2016
        //                                                                InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
        //                                                                if (_invHdr != null)
        //                                                                {
        //                                                                    _newPickSer.Tus_orig_grncom = _invHdr.Ith_com;
        //                                                                    _newPickSer.Tus_orig_grnno = _invHdr.Ith_doc_no;
        //                                                                    _newPickSer.Tus_orig_grndt = _invHdr.Ith_doc_date;
        //                                                                    _newPickSer.Tus_orig_supp = _invHdr.Ith_bus_entity;
        //                                                                    _newPickSer.Tus_exist_grncom = _invHdr.Ith_com;
        //                                                                    _newPickSer.Tus_exist_grnno = _invHdr.Ith_doc_no;
        //                                                                    _newPickSer.Tus_exist_supp = _invHdr.Ith_bus_entity;
        //                                                                    _newPickSer.Tus_exist_grndt = _invHdr.Ith_doc_date;
        //                                                                }
        //                                                                #endregion
        //                                                                _newRepTempPickSer.Add(_newPickSer);
        //                                                            }
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                    #endregion
        //                                }
        //                                _aodinserial = _newRepTempPickSer;
        //                            }
        //                            #endregion

        //                            _inventoryHeader.Ith_seq_no = 0; SaveInwardScanSerial(_inventoryHeader, _aodinserial, _reptPickSerialsSub);
        //                            string _aodInNo = string.Empty; effect = UpdateInventoryAutoNumber(_inventoryHeader, _aodinAuto, "+", out _aodInNo);
        //                            if (!string.IsNullOrEmpty(_aodoutno))
        //                            { _tempInventoryDoc = _aodInNo; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
        //                            _tempInventoryDoc = string.Empty;
        //                        }
        //                    }
        //                }
        //                _effect = 1;
        //                _inventoryHeader.Ith_is_manual = _isManualSelect;
        //                if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
        //                {
        //                    _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
        //                    if (_masterComp.MC_IS_SCM2_FMS == 1)
        //                        _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
        //                    else
        //                        _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
        //                }

        //                //Tharaka 2015-10-29 Genarate Purchase order

        //                DataTable dtSupplier = _inventoryDAL.GET_SUPP_FOR_PO_IN_AOD(_inventoryHeader.Ith_com, _inventoryHeader.Ith_oth_com);

        //                string suppCode = string.Empty;
        //                if (dtSupplier != null && dtSupplier.Rows.Count > 0)
        //                {
        //                    suppCode = dtSupplier.Rows[0]["SUPPLIER"].ToString();
        //                }

        //                if (_inventoryHeader.Ith_sub_tp == "CONSA")
        //                {
        //                    MasterAutoNumber masterAuto = new MasterAutoNumber();
        //                    masterAuto.Aut_cate_cd = _inventoryHeader.Ith_com;
        //                    masterAuto.Aut_cate_tp = "COM";
        //                    masterAuto.Aut_direction = null;
        //                    masterAuto.Aut_modify_dt = null;
        //                    masterAuto.Aut_moduleid = "PUR";
        //                    masterAuto.Aut_number = 5;//what is Aut_number
        //                    masterAuto.Aut_start_char = "PUR";
        //                    masterAuto.Aut_year = null;

        //                    PurchaseOrder _PurchaseOrder = new PurchaseOrder();
        //                    _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_inventoryHeader.Ith_cre_by, "PO", 1, _inventoryHeader.Ith_com);
        //                    _PurchaseOrder.Poh_tp = "I";
        //                    _PurchaseOrder.Poh_sub_tp = "N";
        //                    _PurchaseOrder.Poh_doc_no = string.Empty;
        //                    _PurchaseOrder.Poh_com = _inventoryHeader.Ith_com;
        //                    _PurchaseOrder.Poh_ope = "IMPORTS";
        //                    _PurchaseOrder.Poh_profit_cd = _inventoryHeader.Ith_pc;
        //                    _PurchaseOrder.Poh_dt = DateTime.Now.Date;
        //                    //_PurchaseOrder.Poh_ref = txtSupRef.Text;
        //                    _PurchaseOrder.Poh_job_no = "IMPORTS_PO";
        //                    _PurchaseOrder.Poh_pay_term = "CASH";
        //                    _PurchaseOrder.Poh_supp = suppCode;

        //                    MasterCompany oCom = _generalDAL.GetCompByCode(_inventoryHeader.Ith_oth_com);
        //                    _PurchaseOrder.Poh_cur_cd = oCom.Mc_cur_cd;
        //                    MasterExchangeRate _exc1 = _salesDAL.GetExchangeRate(_inventoryHeader.Ith_com, _PurchaseOrder.Poh_cur_cd, DateTime.Now, _PurchaseOrder.Poh_cur_cd, _inventoryHeader.Ith_pc);
        //                    _PurchaseOrder.Poh_ex_rt = _exc1.Mer_bnkbuy_rt;
        //                    _PurchaseOrder.Poh_trans_term = "";
        //                    _PurchaseOrder.Poh_port_of_orig = "";
        //                    //_PurchaseOrder.Poh_cre_period = txtCreditPeriod.Text;
        //                    //_PurchaseOrder.Poh_frm_yer = Convert.ToDateTime(txtPoDate.Text).Year;
        //                    //_PurchaseOrder.Poh_frm_mon = Convert.ToDateTime(txtPoDate.Text).Month;
        //                    //_PurchaseOrder.Poh_to_yer = Convert.ToDateTime(txtPoDate.Text).Year;
        //                    //_PurchaseOrder.Poh_to_mon = Convert.ToDateTime(txtPoDate.Text).Month;
        //                    _PurchaseOrder.Poh_preferd_eta = DateTime.Now;
        //                    _PurchaseOrder.Poh_contain_kit = false;
        //                    _PurchaseOrder.Poh_sent_to_vendor = false;
        //                    _PurchaseOrder.Poh_sent_by = "";
        //                    _PurchaseOrder.Poh_sent_via = "";
        //                    _PurchaseOrder.Poh_sent_add = "";
        //                    _PurchaseOrder.Poh_stus = "P";
        //                    //_PurchaseOrder.Poh_remarks = txtRemarks.Text;
        //                    _PurchaseOrder.Poh_sub_tot = 0;
        //                    _PurchaseOrder.Poh_tax_tot = 0;
        //                    _PurchaseOrder.Poh_dis_rt = 0;
        //                    _PurchaseOrder.Poh_dis_amt = 0;
        //                    _PurchaseOrder.Poh_oth_tot = 0;
        //                    _PurchaseOrder.Poh_tot = 0;
        //                    _PurchaseOrder.Poh_reprint = false;
        //                    _PurchaseOrder.Poh_tax_chg = false;
        //                    _PurchaseOrder.poh_is_conspo = 0;
        //                    _PurchaseOrder.Poh_cre_by = _inventoryHeader.Ith_cre_by;

        //                    string _grnno = _inventoryHeader.Ith_acc_no;

        //                    List<PurchaseOrderDetail> _NewPODel = new List<PurchaseOrderDetail>();
        //                    Int32 _poline = 0;
        //                    foreach (ReptPickSerials _p in _reptPickSerials)
        //                    {
        //                        MasterItem _mIt = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _p.Tus_itm_cd);
        //                        DataTable _POLine = _inventoryDAL.GetPOLine(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _grnno, _p.Tus_ser_id);
        //                        if (_POLine != null && _POLine.Rows.Count > 0)
        //                        {
        //                            _poline = _POLine.Rows[0].Field<Int32>("itb_base_refline");
        //                        }
        //                        else
        //                            _poline += 1;
        //                        _p.Tus_base_itm_line = _poline;
        //                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
        //                        POItem.Pod_act_unit_price = _p.Tus_unit_cost;
        //                        POItem.Pod_dis_amt = 0;
        //                        POItem.Pod_dis_rt = 0;
        //                        POItem.Pod_grn_bal = 0;
        //                        POItem.Pod_item_desc = _mIt.Mi_longdesc;
        //                        POItem.Pod_itm_cd = _p.Tus_itm_cd;
        //                        POItem.Pod_itm_stus = _p.Tus_itm_stus;
        //                        POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
        //                        POItem.Pod_kit_itm_cd = string.Empty;
        //                        POItem.Pod_kit_line_no = 0;
        //                        POItem.Pod_lc_bal = 0;
        //                        POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
        //                        POItem.Pod_line_no = _p.Tus_base_itm_line;
        //                        POItem.Pod_line_tax = 0;
        //                        POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
        //                        POItem.Pod_nbt = 0;
        //                        POItem.Pod_nbt_before = 0;
        //                        POItem.Pod_pi_bal = 0;
        //                        POItem.Pod_qty = _p.Tus_qty;
        //                        POItem.Pod_ref_no = _PurchaseOrder.Poh_seq_no.ToString();
        //                        POItem.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
        //                        POItem.Pod_si_bal = 0;
        //                        POItem.Pod_tot_tax_before = 0;
        //                        POItem.Pod_unit_price = _p.Tus_unit_cost;
        //                        POItem.Pod_uom = _mIt.Mi_itm_uom;
        //                        POItem.Pod_vat = 0;
        //                        POItem.Pod_vat_before = 0;
        //                        _NewPODel.Add(POItem);
        //                    }

        //                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
        //                    string _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + string.Format("{0:000000}", _autoNo);
        //                    _inventoryDAL.UpdateAutoNumber(masterAuto);
        //                    _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
        //                    _PurchaseOrder.Poh_doc_no = _documentNo;

        //                    _tempSalesDoc = _PurchaseOrder.Poh_doc_no;

        //                    List<PurchaseOrderDelivery> _NewPODelItems = new List<PurchaseOrderDelivery>();
        //                    string docNUmbner = string.Empty;
        //                    string err = string.Empty;

        //                    Int32 result = SavePurchaseOrderWithoutCommit(_PurchaseOrder, _NewPODel, _NewPODelItems, masterAuto, out docNUmbner, out err);
        //                }
        //            }
        //            if (_documentType == "DO")
        //            {
        //                string _invoiceNo = string.Empty; string _deliveryOrder = string.Empty;
        //                string _purchaseOrder = string.Empty; _inventoryHeader.Ith_doc_tp = "DO"; _inventoryAuto.Aut_moduleid = "DO"; _inventoryAuto.Aut_start_char = "DO";
        //                _inventoryAuto.Aut_direction = 0; if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "DO") _inventoryHeader.Ith_anal_1 = "0";
        //                List<InvoiceItem> _invoiceItemList = new List<InvoiceItem>();
        //                var _invItem = from _itm in _reptPickSerials group _itm by new { _itm.Tus_itm_cd, _itm.Tus_itm_stus } into _items select new { Tus_itm_cd = _items.Key.Tus_itm_cd, Tus_itm_stus = _items.Key.Tus_itm_stus, Tus_qty = _items.Sum(p => p.Tus_qty) };
        //                DataTable _adminT = _inventoryDAL.Get_location_by_code(_fromCompany, _inventoryHeader.Ith_loc);
        //                if (_adminT == null || _adminT.Rows.Count <= 0)
        //                { _genMessage = "Admin team not define"; _effect = -1; _genSalesDocument = string.Empty; _genInventoryDocument = string.Empty; return _effect; }
        //                string _adminTeam = _adminT.Rows[0].Field<string>("ml_ope_cd");
        //                if (string.IsNullOrEmpty(_adminTeam))
        //                { _genMessage = "Admin team not define"; _effect = -1; _genSalesDocument = string.Empty; _genInventoryDocument = string.Empty; return _effect; }
        //                List<InterCompanySalesParameter> _priceParam = _salesDAL.GetInterCompanyParameter(_adminTeam, _fromCompany, string.Empty, _toCompany, string.Empty);
        //                string _otherProfitcenter = string.Empty;
        //                string _suppliercd = string.Empty;
        //                if (_priceParam != null && _priceParam.Count > 0)
        //                {
        //                    MasterBusinessEntity _intrCust = new MasterBusinessEntity();//add by Chamal 17-Apr-2015
        //                    _intrCust = _inventoryDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _priceParam[0].Sritc_customer, null, null, "C");

        //                    _invoiceHeader.Sah_pc = _priceParam[0].Sritc_frm_prof;
        //                    _invoiceHeader.Sah_cus_cd = _priceParam[0].Sritc_customer;
        //                    _invoiceHeader.Sah_d_cust_cd = _priceParam[0].Sritc_customer;
        //                    _otherProfitcenter = _priceParam[0].Sritc_to_prof;
        //                    _invoiceHeader.Sah_sales_ex_cd = "N/A";
        //                    _suppliercd = _priceParam[0].Sritc_sup;

        //                    _invoiceHeader.Sah_cus_name = _intrCust.Mbe_name;
        //                    _invoiceHeader.Sah_d_cust_name = _intrCust.Mbe_name;
        //                    _invoiceHeader.Sah_cus_add1 = _intrCust.Mbe_add1;
        //                    _invoiceHeader.Sah_d_cust_add1 = _intrCust.Mbe_add1;
        //                    _invoiceHeader.Sah_cus_add2 = _intrCust.Mbe_add2;
        //                    _invoiceHeader.Sah_d_cust_add2 = _intrCust.Mbe_add2;
        //                    _invoiceHeader.Sah_tax_inv = _intrCust.Mbe_is_tax;
        //                }
        //                PurchaseOrder _PurchaseOrder = new PurchaseOrder();
        //                _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_inventoryHeader.Ith_cre_by, "PO", 1, _fromCompany);
        //                _PurchaseOrder.Poh_tp = "L"; _PurchaseOrder.Poh_sub_tp = "N";
        //                _PurchaseOrder.Poh_doc_no = "-1"; _PurchaseOrder.Poh_com = _toCompany; _PurchaseOrder.Poh_ope = "INV";
        //                _PurchaseOrder.Poh_profit_cd = _otherProfitcenter; _PurchaseOrder.Poh_dt = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Date;
        //                _PurchaseOrder.Poh_ref = "N/A"; _PurchaseOrder.Poh_job_no = "N/A";
        //                _PurchaseOrder.Poh_pay_term = "CREDIT"; _PurchaseOrder.Poh_supp = _suppliercd;
        //                _PurchaseOrder.Poh_cur_cd = "LKR"; _PurchaseOrder.Poh_ex_rt = 0;
        //                _PurchaseOrder.Poh_trans_term = ""; _PurchaseOrder.Poh_port_of_orig = ""; _PurchaseOrder.Poh_cre_period = "0";
        //                _PurchaseOrder.Poh_frm_yer = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year; _PurchaseOrder.Poh_frm_mon = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Month;
        //                _PurchaseOrder.Poh_to_yer = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;
        //                _PurchaseOrder.Poh_to_mon = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Month; _PurchaseOrder.Poh_preferd_eta = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Date;
        //                _PurchaseOrder.Poh_contain_kit = false; _PurchaseOrder.Poh_sent_to_vendor = false;
        //                _PurchaseOrder.Poh_sent_by = ""; _PurchaseOrder.Poh_sent_via = "";
        //                _PurchaseOrder.Poh_sent_add = ""; _PurchaseOrder.Poh_stus = "F"; _PurchaseOrder.Poh_remarks = string.Empty;
        //                _PurchaseOrder.Poh_sub_tot = 0; _PurchaseOrder.Poh_tax_tot = 0; _PurchaseOrder.Poh_dis_rt = 0;
        //                _PurchaseOrder.Poh_dis_amt = 0; _PurchaseOrder.Poh_oth_tot = 0; _PurchaseOrder.Poh_tot = 0;
        //                _PurchaseOrder.Poh_reprint = false; _PurchaseOrder.Poh_tax_chg = false; _PurchaseOrder.poh_is_conspo = 0;
        //                _PurchaseOrder.Poh_cre_by = _inventoryHeader.Ith_cre_by;
        //                Int32 _invoiceLine = 0;

        //                MasterBusinessEntity _suppMaster = new MasterBusinessEntity();//add by Chamal 08-Sep-2015
        //                _suppMaster = _inventoryDAL.GetBusinessCompanyDetail(_PurchaseOrder.Poh_com, _PurchaseOrder.Poh_supp, null, null, "S");

        //                List<PurchaseOrderDetail> _POItemListSave = new List<PurchaseOrderDetail>();
        //                //DataTable _lpStatus = _generalDAL.GetItemLPStatus();
        //                //Edit by Chamal 06-05-2014
        //                DataTable _lpStatus = _inventoryDAL.GetItemStatusMaster("ALL", "ALL");
        //                foreach (var _itm in _invItem)
        //                {
        //                    PurchaseOrderDetail _pItm = new PurchaseOrderDetail();
        //                    string _iItem = _itm.Tus_itm_cd; string _iStatus = _itm.Tus_itm_stus;
        //                    decimal _iQty = _itm.Tus_qty; DateTime _iDate = _invoiceHeader.Sah_dt.Date;
        //                    bool _iIsSerialized = false; string _iPriceBook = "";
        //                    string _iPriceLevel = "";

        //                    List<MasterItemTax> _tax = new List<MasterItemTax>();
        //                    if (_isStrucBaseTax == true)       //kapila 19/7/2017
        //                    {
        //                        MasterItem _mstItem = _inventoryDAL.GetItem(_fromCompany, _iItem);
        //                        _tax = _salesDAL.GetItemTax_strucbase(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
        //                    }
        //                    else
        //                        _tax = _salesDAL.GetItemTax(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty);
        //                    if (_tax == null || _tax.Count == 0)
        //                    {
        //                        _genMessage = "No tax define for the item " + _iItem + "."; _effect = -1;
        //                        break;
        //                    };
        //                    if (_priceParam.Count <= 0)
        //                    {
        //                        _genMessage = " no pricing parameters define.";
        //                        _effect = -1;
        //                        break;
        //                    };
        //                    if (_priceParam.Count > 0)
        //                        foreach (InterCompanySalesParameter _param in _priceParam)
        //                        {
        //                            _iPriceBook = _param.Sritc_pb;
        //                            _iPriceLevel = _param.Sritc_pb_lvl;
        //                            _invoiceHeader.Sah_cus_cd = _param.Sritc_customer;
        //                        }
        //                    List<PriceBookLevelRef> _level = _salesDAL.GetPriceLevelList(_fromCompany, _iPriceBook, _iPriceLevel);
        //                    List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
        //                    List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();
        //                    PriceBookLevelRef _priceLevel = new PriceBookLevelRef();

        //                    if (_level.Count <= 0)
        //                    {
        //                        _genMessage = " no price level define.";
        //                        _effect = -1; break;
        //                    };
        //                    if (_level.Count > 0)
        //                        foreach (PriceBookLevelRef _lvl in _level)
        //                        {
        //                            _priceLevel = _lvl;
        //                            _iIsSerialized = _lvl.Sapl_is_serialized;
        //                            break;
        //                        }
        //                    if (_iIsSerialized == false)
        //                        _priceDetailRef = _salesDAL.GetPriceDetail(_iPriceBook, _iPriceLevel, _iItem, _iQty, _iDate.Date, string.Empty);
        //                    else _priceSerialRef = _salesDAL.GetAllPriceSerial(_iPriceBook, _iPriceLevel, _iItem, _iDate.Date, string.Empty);
        //                    if (_priceDetailRef.Count <= 0)
        //                    {
        //                        _genMessage = " transfer price not define for the item " + _iItem + " against book " + _iPriceBook + " and level " + _iPriceLevel;
        //                        _effect = -1;
        //                        break;
        //                    };
        //                    _invoiceLine++;
        //                    foreach (PriceDetailRef _price in _priceDetailRef)
        //                    {
        //                        //Add by Chamal 16-Sep-2014
        //                        if (_price.Sapd_price_stus == "S") { _genMessage = " transfer price has been suspended for the item " + _iItem + " against book " + _iPriceBook + " and level " + _iPriceLevel; _effect = -1; break; }
        //                        decimal _AbsoulteUnitPrice = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _price.Sapd_itm_price, 0, false);
        //                        decimal _taxPortion = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _AbsoulteUnitPrice, 0, true);
        //                        MasterItem _im = _inventoryDAL.GetItem(_fromCompany, _iItem);
        //                        //var _lp = _lpStatus.AsEnumerable().Where(x => x.Field<string>("mis_scm2_imp") == _iStatus).Select(x => x.Field<string>("mis_cd")).ToList();
        //                        //Edit by Chamal 06-05-2014
        //                        var _lp = _lpStatus.AsEnumerable().Where(x => x.Field<string>("mis_cd") == _iStatus).Select(x => x.Field<string>("mis_lp_cd")).ToList();
        //                        if (_lp == null || _lp.Count <= 0) { _genMessage = " LP status not found " + _iItem + " and " + _iStatus + "."; _effect = -1; break; }

        //                        if (string.IsNullOrEmpty(Convert.ToString(_lp[0]))) { _genMessage = " LP status not found " + _iItem + " and " + _iStatus + "."; _effect = -1; break; }

        //                        string _poLpStatus = Convert.ToString(_lp[0]);
        //                        List<MasterItemTax> _tx = _salesDAL.GetItemTax(_toCompany, _iItem, Convert.ToString(_lp[0]), "VAT", string.Empty);
        //                        bool _isLpTaxpayable = false;
        //                        if (_tx != null && _tx.Count > 0) _isLpTaxpayable = true; else _isLpTaxpayable = false;
        //                        InvoiceItem _item = new InvoiceItem();
        //                        _item.Sad_alt_itm_cd = string.Empty; _item.Sad_alt_itm_desc = string.Empty;
        //                        _item.Sad_comm_amt = 0; _item.Sad_disc_amt = 0; _item.Sad_disc_rt = 0;
        //                        _item.Sad_do_qty = _iQty; _item.Sad_fws_ignore_qty = 0; _item.Sad_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
        //                        _item.Sad_is_promo = false; _item.Sad_itm_cd = _iItem;
        //                        _item.Sad_itm_line = _invoiceLine; _item.Sad_itm_seq = _price.Sapd_seq_no;
        //                        _item.Sad_itm_stus = _iStatus; _item.Sad_itm_tax_amt = _taxPortion;
        //                        _item.Sad_itm_tp = _im.Mi_itm_tp; _item.Sad_pb_lvl = _iPriceLevel; _item.Sad_pb_price = _AbsoulteUnitPrice;
        //                        _item.Sad_pbook = _iPriceBook; _item.Sad_print_stus = false;
        //                        _item.Sad_promo_cd = string.Empty; _item.Sad_qty = _iQty;
        //                        _item.Sad_seq = _price.Sapd_pb_seq; _item.Sad_seq_no = _invoiceHeader.Sah_seq_no;
        //                        _item.Sad_srn_qty = 0; _item.Sad_tot_amt = _AbsoulteUnitPrice * _iQty + _taxPortion;
        //                        _item.Sad_unit_amt = _AbsoulteUnitPrice * _iQty; _item.Sad_unit_rt = _AbsoulteUnitPrice;
        //                        _item.Sad_uom = _im.Mi_itm_uom; _item.Sad_warr_based = false;
        //                        _item.Sad_warr_period = 0; _item.Sad_warr_remarks = string.Empty; _invoiceItemList.Add(_item);
        //                        _pItm.Pod_act_unit_price = (_AbsoulteUnitPrice * _iQty + _taxPortion) / _iQty;
        //                        _pItm.Pod_dis_amt = 0; _pItm.Pod_dis_rt = 0; _pItm.Pod_grn_bal = _iQty;
        //                        _pItm.Pod_item_desc = _im.Mi_longdesc; _pItm.Pod_itm_cd = _iItem; _pItm.Pod_itm_stus = _poLpStatus;
        //                        _pItm.Pod_itm_tp = _im.Mi_itm_tp; _pItm.Pod_line_amt = _AbsoulteUnitPrice * _iQty; _pItm.Pod_line_no = _invoiceLine;
        //                        _pItm.Pod_line_tax = _isLpTaxpayable ? _taxPortion : 0; _pItm.Pod_line_val = _AbsoulteUnitPrice * _iQty + _taxPortion;
        //                        _pItm.Pod_nbt = 0; _pItm.Pod_nbt_before = 0; _pItm.Pod_pi_bal = 0;
        //                        _pItm.Pod_qty = _iQty; _pItm.Pod_ref_no = string.Empty; _pItm.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
        //                        _pItm.Pod_si_bal = 0; _pItm.Pod_tot_tax_before = 0; _pItm.Pod_unit_price = _AbsoulteUnitPrice;
        //                        _pItm.Pod_uom = _im.Mi_itm_uom; _pItm.Pod_vat = _taxPortion; _pItm.Pod_vat_before = 0;
        //                        if (_suppMaster.Mbe_cate == "VAT_C") _pItm.Pod_act_unit_price = _AbsoulteUnitPrice;   //Edit by Chamal 08-Sep-2015
        //                        //_pItm.Pod_itm_stus = _iStatus;
        //                        _POItemListSave.Add(_pItm);
        //                        break;
        //                    }
        //                }
        //                MasterAutoNumber masterAuto = new MasterAutoNumber();
        //                masterAuto.Aut_cate_cd = _toCompany; masterAuto.Aut_cate_tp = "COM";
        //                masterAuto.Aut_direction = null; masterAuto.Aut_modify_dt = null;
        //                masterAuto.Aut_moduleid = "PUR"; masterAuto.Aut_number = 5;
        //                masterAuto.Aut_start_char = "PUR"; masterAuto.Aut_year = null;
        //                _inventoryDAL.SaveNewPO(_PurchaseOrder);
        //                foreach (PurchaseOrderDetail _POItems in _POItemListSave) _inventoryDAL.SaveNewPOItem(_POItems);
        //                Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
        //                string _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + string.Format("{0:000000}", _autoNo);
        //                _inventoryDAL.UpdateAutoNumber(masterAuto);
        //                _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
        //                _purchaseOrder = _documentNo;
        //                List<ReptPickSerials> _reptPickSerialList = _reptPickSerials;
        //                List<ReptPickSerialsSub> _reptPickSerialSubList = new List<ReptPickSerialsSub>();
        //                if (_effect != -1)
        //                {
        //                    _invoiceAuto = new MasterAutoNumber(); _invoiceAuto.Aut_cate_cd = _invoiceHeader.Sah_pc;
        //                    _invoiceAuto.Aut_cate_tp = "PRO"; _invoiceAuto.Aut_direction = 1;
        //                    _invoiceAuto.Aut_modify_dt = null; _invoiceAuto.Aut_moduleid = "CRED";
        //                    _invoiceAuto.Aut_start_char = _invoiceHeader.Sah_pc + "-" + "CR" + "-"; _invoiceAuto.Aut_modify_dt = null;
        //                    _invoiceAuto.Aut_year = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;
        //                    List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
        //                    try
        //                    {
        //                        _invoiceLine = 1;
        //                        DataTable _tbl = _salesDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
        //                        string _executiveType = string.Empty;
        //                        foreach (DataRow _r in _tbl.Rows)
        //                        { _executiveType = Convert.ToString(_r["esep_cat_cd"]); }
        //                        List<SaleCommission> _saveCommission = new List<SaleCommission>();
        //                        Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
        //                        Int32 RecieptSeqNo = -1;
        //                        _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
        //                        _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);
        //                        decimal _totalValue = _invoiceItemList.Sum(x => x.Sad_tot_amt);
        //                        decimal _totalReceiptAmt = 0;
        //                        _invoiceHeader.Sah_anal_7 = _totalValue;
        //                        _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;
        //                        DataTable _tblESDEPFWHF = new DataTable();
        //                        _tblESDEPFWHF = _salesDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
        //                        Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
        //                        if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
        //                        _invoiceHeader.Sah_esd_rt = ESD_rt;
        //                        _invoiceHeader.Sah_epf_rt = EPF_rt;
        //                        _invoiceHeader.Sah_wht_rt = WHT_rt;
        //                        _salesDAL.SaveSalesHeader(_invoiceHeader);
        //                        foreach (InvoiceItem _itm in _invoiceItemList)
        //                        {
        //                            MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
        //                            _itm.Sad_seq_no = InvoiceSeqNo;
        //                            _invoiceLine = _itm.Sad_itm_line;
        //                            _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
        //                            _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
        //                            _itm.Sad_itm_tp = _item.Mi_itm_tp;
        //                            _itm.Sad_uom = _item.Mi_itm_uom;
        //                            _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
        //                            if (_invoiceHeader.Sah_tax_exempted)
        //                            { _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt; _itm.Sad_itm_tax_amt = 0; }
        //                            _salesDAL.SaveSalesItem(_itm);
        //                            _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);
        //                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
        //                            _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

        //                            if (_inventoryHeader.Ith_process_name == "othcomout")//add by tharanga correct othr com outward doc DO base ref line corecction
        //                            {
        //                                _reptPickSerials.Where(r => r.Tus_itm_cd == _itm.Sad_itm_cd && r.Tus_itm_stus == _itm.Sad_itm_stus).ToList()
        //                                    .ForEach(i =>
        //                                    {
        //                                        i.Tus_base_itm_line = _invoiceLine;
        //                                    });//itm_Lineno
        //                            }
        //                            foreach (MasterItemTax _one in _itmTax)
        //                            {
        //                                InvoiceItemTax _tax = new InvoiceItemTax();
        //                                _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                                _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                                _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
        //                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
        //                                _tax.Satx_job_line = 0;
        //                                _tax.Satx_job_no = "";
        //                                _tax.Satx_seq_no = InvoiceSeqNo;
        //                                _salesDAL.SaveSalesItemTax(_tax);
        //                            }
        //                        }
        //                    nxt1:
        //                        _invoiceAuto.Aut_year = null;
        //                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
        //                        _invoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
        //                        _invoiceAuto.Aut_year = null;
        //                        _invoiceAuto.Aut_modify_dt = null;
        //                        if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invoiceNo) == 1)
        //                        { _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto); goto nxt1; }
        //                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
        //                        _salesDAL.UpdateInvoiceWithTaxCommission(_invoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);
        //                        _inventoryHeader.Ith_oth_com = _toCompany;
        //                        _inventoryHeader.Ith_oth_docno = _invoiceNo;
        //                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
        //                        _inventoryHeader.Ith_sub_docno = _purchaseOrder;
        //                        _reptPickSerials.ForEach(x => x.Tus_base_doc_no = _invoiceNo);
        //                        _inventoryHeader.Ith_direct = false;
        //                        _inventoryHeader.Ith_doc_tp = "DO";
        //                        _inventoryHeader.Ith_cate_tp = "CRED";
        //                        _inventoryHeader.Ith_bus_entity = _invoiceHeader.Sah_cus_cd;
        //                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
        //                        DeliveryOrderInterCompany(_inventoryHeader, _reptPickSerials, null, _inventoryAuto, out _deliveryOrder, _inventoryRepDAL, _inventoryDAL);
        //                        _tempInventoryDoc = _deliveryOrder;
        //                        _tempSalesDoc = _invoiceNo + "," + _purchaseOrder;
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        _message += "Generated error " + ex.Message;
        //                        _effect = -1;
        //                    }
        //                }
        //                if (_effect != -1) _effect = 1;
        //                if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
        //                {
        //                    _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
        //                    if (_masterComp.MC_IS_SCM2_FMS == 1)
        //                        _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
        //                    else
        //                        _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
        //                }
        //            }
        //            if (_documentType == "PRN")
        //            {
        //                _inventoryHeader.Ith_cate_tp = "INTR";
        //                foreach (ReptPickSerials _ser in _reptPickSerials)
        //                {
        //                    //Updated by akila 2018/02/27 - As per the chamal & dharshanas confirmetion, orginal supplier and grn no need to updat with int ser details
        //                    _inventoryHeader.Ith_bus_entity = _ser.Tus_exist_supp;
        //                    _inventoryHeader.Ith_acc_no = _ser.Tus_exist_grnno;

        //                    //InventorySerialMaster _master = _inventoryDAL.GetSerialMasterDetailBySerialID(_ser.Tus_ser_id);
        //                    //if (_master != null && !string.IsNullOrEmpty(_master.Irsm_com))
        //                    //{ _inventoryHeader.Ith_bus_entity = _master.Irsm_exist_supp; _inventoryHeader.Ith_acc_no = _master.Irsm_exist_grn_no; }
        //                    break;
        //                }
        //                string _grnno = _inventoryHeader.Ith_acc_no;
        //                PurchaseOrder POHeader = new PurchaseOrder();
        //                List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();
        //                POHeader.Poh_com = _inventoryHeader.Ith_com;
        //                POHeader.Poh_contain_kit = false;
        //                POHeader.Poh_cre_period = string.Empty;
        //                POHeader.Poh_cur_cd = "LKR";
        //                POHeader.Poh_dis_amt = 0;
        //                POHeader.Poh_dis_rt = 0;
        //                POHeader.Poh_doc_no = _inventoryHeader.Ith_seq_no.ToString();
        //                POHeader.Poh_dt = _inventoryHeader.Ith_doc_date;
        //                POHeader.Poh_ex_rt = 1;
        //                POHeader.Poh_frm_mon = 0;
        //                POHeader.Poh_frm_yer = 0;
        //                POHeader.Poh_job_no = "PURCHASE RETURN";
        //                POHeader.Poh_ope = _inventoryHeader.Ith_sbu;
        //                POHeader.Poh_oth_tot = 0;
        //                POHeader.Poh_pay_term = null;
        //                POHeader.Poh_port_of_orig = string.Empty;
        //                POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
        //                POHeader.Poh_profit_cd = _inventoryHeader.Ith_pc;
        //                POHeader.Poh_ref = "INTR";
        //                POHeader.Poh_remarks = "PURCHASE RETURN";
        //                POHeader.Poh_reprint = false;
        //                POHeader.Poh_sent_add = string.Empty;
        //                POHeader.Poh_sent_by = string.Empty;
        //                POHeader.Poh_sent_to_vendor = false;
        //                POHeader.Poh_sent_via = string.Empty;
        //                POHeader.Poh_seq_no = _inventoryHeader.Ith_seq_no;
        //                POHeader.Poh_stus = "F";
        //                POHeader.Poh_sub_tot = 0;
        //                POHeader.Poh_sub_tp = "R";
        //                POHeader.Poh_supp = _inventoryHeader.Ith_bus_entity;

        //                POHeader.Poh_tax_chg = false;
        //                POHeader.Poh_tax_tot = 0;
        //                POHeader.Poh_to_mon = 0;
        //                POHeader.Poh_to_yer = 0;
        //                POHeader.Poh_to_yer = 0;
        //                POHeader.Poh_tot = 0;
        //                POHeader.Poh_tp = "L";
        //                POHeader.Poh_trans_term = string.Empty;
        //                POHeader.Poh_cre_by = _inventoryHeader.Ith_cre_by;
        //                Int32 _poline = 1;


        //                foreach (ReptPickSerials _p in _reptPickSerials)
        //                {
        //                    MasterItem _mIt = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _p.Tus_itm_cd);
        //                    DataTable _POLine = _inventoryDAL.GetPOLine(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _grnno, _p.Tus_ser_id);
        //                    if (_POLine != null && _POLine.Rows.Count > 0)
        //                    {
        //                        _poline = _POLine.Rows[0].Field<Int32>("itb_base_refline");
        //                    }
        //                    else _poline += 1;
        //                    {
        //                        _p.Tus_base_itm_line = _poline;
        //                    }

        //                    //updated by akila 218/02/28
        //                    if (POItems != null && POItems.Count > 0)
        //                    {
        //                        var _existingItems = POItems.Where(x => x.Pod_act_unit_price == _p.Tus_unit_cost && x.Pod_itm_cd == _p.Tus_itm_cd && x.Pod_itm_stus == _p.Tus_itm_stus && x.Pod_line_no == _p.Tus_base_itm_line && x.Pod_seq_no == POHeader.Poh_seq_no).ToList();
        //                        if (_existingItems != null && _existingItems.Count > 0)
        //                        {
        //                            POItems.Where(x => x.Pod_act_unit_price == _p.Tus_unit_cost && x.Pod_itm_cd == _p.Tus_itm_cd && x.Pod_itm_stus == _p.Tus_itm_stus && x.Pod_line_no == _p.Tus_base_itm_line && x.Pod_seq_no == POHeader.Poh_seq_no).ToList()
        //                            .ForEach(y =>
        //                            {
        //                                y.Pod_qty += _p.Tus_qty;
        //                                y.Pod_line_amt = (y.Pod_act_unit_price * y.Pod_qty);
        //                                y.Pod_line_val = (y.Pod_act_unit_price * y.Pod_qty);
        //                            });
        //                        }
        //                        else
        //                        {
        //                            PurchaseOrderDetail POItem = new PurchaseOrderDetail();
        //                            #region Fill PO Items Object
        //                            POItem.Pod_act_unit_price = _p.Tus_unit_cost;
        //                            POItem.Pod_dis_amt = 0;
        //                            POItem.Pod_dis_rt = 0;
        //                            POItem.Pod_grn_bal = 0;
        //                            POItem.Pod_item_desc = _mIt.Mi_longdesc;
        //                            POItem.Pod_itm_cd = _p.Tus_itm_cd;
        //                            POItem.Pod_itm_stus = _p.Tus_itm_stus;
        //                            POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
        //                            POItem.Pod_kit_itm_cd = string.Empty;
        //                            POItem.Pod_kit_line_no = 0;
        //                            POItem.Pod_lc_bal = 0;
        //                            POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
        //                            POItem.Pod_line_no = _p.Tus_base_itm_line;
        //                            POItem.Pod_line_tax = 0;
        //                            POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
        //                            POItem.Pod_nbt = 0;
        //                            POItem.Pod_nbt_before = 0;
        //                            POItem.Pod_pi_bal = 0;
        //                            POItem.Pod_qty = _p.Tus_qty;
        //                            POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
        //                            POItem.Pod_seq_no = POHeader.Poh_seq_no;
        //                            POItem.Pod_si_bal = 0;
        //                            POItem.Pod_tot_tax_before = 0;
        //                            POItem.Pod_unit_price = _p.Tus_unit_cost;
        //                            POItem.Pod_uom = _mIt.Mi_itm_uom;
        //                            POItem.Pod_vat = 0;
        //                            POItem.Pod_vat_before = 0;
        //                            #endregion
        //                            POItems.Add(POItem);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
        //                        #region Fill PO Items Object
        //                        POItem.Pod_act_unit_price = _p.Tus_unit_cost;
        //                        POItem.Pod_dis_amt = 0;
        //                        POItem.Pod_dis_rt = 0;
        //                        POItem.Pod_grn_bal = 0;
        //                        POItem.Pod_item_desc = _mIt.Mi_longdesc;
        //                        POItem.Pod_itm_cd = _p.Tus_itm_cd;
        //                        POItem.Pod_itm_stus = _p.Tus_itm_stus;
        //                        POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
        //                        POItem.Pod_kit_itm_cd = string.Empty;
        //                        POItem.Pod_kit_line_no = 0;
        //                        POItem.Pod_lc_bal = 0;
        //                        POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
        //                        POItem.Pod_line_no = _p.Tus_base_itm_line;
        //                        POItem.Pod_line_tax = 0;
        //                        POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
        //                        POItem.Pod_nbt = 0;
        //                        POItem.Pod_nbt_before = 0;
        //                        POItem.Pod_pi_bal = 0;
        //                        POItem.Pod_qty = _p.Tus_qty;
        //                        POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
        //                        POItem.Pod_seq_no = POHeader.Poh_seq_no;
        //                        POItem.Pod_si_bal = 0;
        //                        POItem.Pod_tot_tax_before = 0;
        //                        POItem.Pod_unit_price = _p.Tus_unit_cost;
        //                        POItem.Pod_uom = _mIt.Mi_itm_uom;
        //                        POItem.Pod_vat = 0;
        //                        POItem.Pod_vat_before = 0;
        //                        #endregion
        //                        POItems.Add(POItem);
        //                    }

        //                    //PurchaseOrderDetail POItem = new PurchaseOrderDetail();
        //                    //#region Fill PO Items Object
        //                    //POItem.Pod_act_unit_price = _p.Tus_unit_cost;
        //                    //POItem.Pod_dis_amt = 0;
        //                    //POItem.Pod_dis_rt = 0;
        //                    //POItem.Pod_grn_bal = 0;
        //                    //POItem.Pod_item_desc = _mIt.Mi_longdesc;
        //                    //POItem.Pod_itm_cd = _p.Tus_itm_cd;
        //                    //POItem.Pod_itm_stus = _p.Tus_itm_stus;
        //                    //POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
        //                    //POItem.Pod_kit_itm_cd = string.Empty;
        //                    //POItem.Pod_kit_line_no = 0;
        //                    //POItem.Pod_lc_bal = 0;
        //                    //POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
        //                    //POItem.Pod_line_no = _p.Tus_base_itm_line;
        //                    //POItem.Pod_line_tax = 0;
        //                    //POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
        //                    //POItem.Pod_nbt = 0;
        //                    //POItem.Pod_nbt_before = 0;
        //                    //POItem.Pod_pi_bal = 0;
        //                    //POItem.Pod_qty = _p.Tus_qty;
        //                    //POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
        //                    //POItem.Pod_seq_no = POHeader.Poh_seq_no;
        //                    //POItem.Pod_si_bal = 0;
        //                    //POItem.Pod_tot_tax_before = 0;
        //                    //POItem.Pod_unit_price = _p.Tus_unit_cost;
        //                    //POItem.Pod_uom = _mIt.Mi_itm_uom;
        //                    //POItem.Pod_vat = 0;
        //                    //POItem.Pod_vat_before = 0;
        //                    //#endregion
        //                    //POItems.Add(POItem);
        //                    _inventoryDAL.UpdateAODOUTPickItem(_p.Tus_orig_grnno, _p.Tus_ser_id);

        //                }

        //                try
        //                {
        //                    _inventoryDAL.SaveNewPO(POHeader);
        //                }
        //                catch (Exception)
        //                {

        //                    if (string.IsNullOrEmpty(_inventoryHeader.Ith_bus_entity))
        //                    {
        //                        _effect = -1;
        //                        _message = "Process Terminated ! supplier details not found !";
        //                        goto AB;
        //                    }
        //                }
        //                foreach (PurchaseOrderDetail _POItems in POItems) _inventoryDAL.SaveNewPOItem(_POItems);
        //                MasterAutoNumber _AutoNo = new MasterAutoNumber();
        //                _AutoNo.Aut_cate_cd = _inventoryHeader.Ith_com;
        //                _AutoNo.Aut_cate_tp = "COM";
        //                _AutoNo.Aut_direction = null;
        //                _AutoNo.Aut_modify_dt = null;
        //                _AutoNo.Aut_moduleid = "PRT";
        //                _AutoNo.Aut_start_char = "PRT";
        //                _AutoNo.Aut_year = null;
        //                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
        //                _inventoryDAL.UpdatePODocNo(Convert.ToInt32(POHeader.Poh_seq_no), _documentNo);
        //                _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(POHeader.Poh_seq_no), _documentNo);
        //                string _doc = string.Empty;
        //                UpdateInventoryAutoNumber(_inventoryHeader, _AutoNo, "-", out _doc);
        //                _inventoryHeader.Ith_oth_docno = _documentNo;
        //                _inventoryHeader.Ith_doc_tp = "PRN";
        //                _inventoryAuto.Aut_moduleid = "PRN";
        //                _inventoryAuto.Aut_start_char = "PRN";
        //                _inventoryAuto.Aut_direction = 0;
        //                if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "PRN") _inventoryHeader.Ith_anal_1 = "0";
        //                _effect = SaveOutwardScanSerial(_inventoryHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
        //                UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _tempInventoryDoc);
        //                if (_effect != -1) _effect = 1;
        //                if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true) _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_PRN", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
        //            }
        //            if (_documentType == "NON")
        //            { _effect = -1; break; }
        //            if (string.IsNullOrEmpty(_documentType))
        //            { _effect = -1; break; }
        //            if (_effect == -1)
        //            { break; }
        //            if (!string.IsNullOrEmpty(_tempInventoryDoc)) if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc;
        //            if (!string.IsNullOrEmpty(_tempSalesDoc)) if (string.IsNullOrEmpty(_genSalDoc)) _genSalDoc = _tempSalesDoc; else _genSalDoc += "," + _tempInventoryDoc;
        //                #endregion
        //        }


        //        //int _reqDataUpdate = 0;
        //        if (_effect != -1)
        //        {
        //            #region Req Balance Update update by Lakshan 2016 Sep 08
        //            /*  MasterLocationNew _masterLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //           {
        //               Ml_loc_cd = _inventoryHeader.Ith_loc,
        //               Ml_com_cd = _inventoryHeader.Ith_com,
        //               Ml_act = 1
        //           }).FirstOrDefault();
        //            if (!string.IsNullOrEmpty(_inventoryHeader.Ith_oth_docno))
        //            {
        //                var _byItemStatus = from l in _reptPickSerials
        //                                    group l by new { l.Tus_itm_cd, l.Tus_itm_stus, l.Tus_base_doc_no, l.Tus_base_itm_line }
        //                                        into item
        //                                        select new
        //                                        {
        //                                            Tus_itm_cd = item.Key.Tus_itm_cd,
        //                                            Tus_itm_stus = item.Key.Tus_itm_stus,
        //                                            Tus_base_doc_no = item.Key.Tus_base_doc_no,
        //                                            Tus_base_itm_line = item.Key.Tus_base_itm_line,
        //                                            Tus_qty = item.Sum(p => p.Tus_qty)
        //                                        };
        //                if (_byItemStatus != null)
        //                    if (_byItemStatus.Count() > 0)
        //                    {
        //                        foreach (var p in _byItemStatus)
        //                        {
        //                            string _requestno = p.Tus_base_doc_no;
        //                            string _company = _inventoryHeader.Ith_com;
        //                            string _location = _trlocation;
        //                            string _itemcode = p.Tus_itm_cd;
        //                            string _itemstatus = p.Tus_itm_stus;
        //                            decimal _qty = p.Tus_qty;
        //                            string _docstatus = "F";
        //                            string _user = _inventoryHeader.Ith_cre_by;
        //                            Int32 _lineNo = p.Tus_base_itm_line;
        //                            if (_masterLoc.Ml_is_serial == 0 && (_inventoryHeader.Ith_sub_tp == "EX" || _inventoryHeader.Ith_sub_tp == "RE" || _inventoryHeader.Ith_sub_tp == "BOI"))
        //                            {
        //                                _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalanceBond(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
        //                            }
        //                            else
        //                            {
        //                                _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalance(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
        //                            }

        //                        }
        //                        var _docs = _byItemStatus.Select(x => x.Tus_base_doc_no).Distinct();
        //                        if (_docs != null) if (_docs.Count() > 0) foreach (string _request in _docs) _inventoryDAL.UpdateRequestHeader(_request.Trim(), _inventoryHeader.Ith_cre_by);
        //                    }
        //            }*/
        //            #endregion

        //            foreach (int seqno in _reptPickSerials.Select(x => x.Tus_usrseq_no).Distinct().ToList()) _inventoryRepDAL.DeleteTempPickObjs(seqno);
        //        }
        //        #endregion

        //        //kapila 11/7/2017 (update request status=F)
        //        if (!string.IsNullOrEmpty(_requestNo))   //kapila 14/7/2017

        //            if (_effect != -1 && _requestNo.Contains("GRAN"))
        //            {
        //                if (_inventoryHeader.GRAN_UpdateReqStatus == true) // add by tharanga 
        //                {
        //                    var _result = _reptPickSerials.GroupBy(x => new { x.Tus_base_doc_no }).Select(g => new { g.Key.Tus_base_doc_no });
        //                    foreach (var GRNno in _result)
        //                    {
        //                        _inventoryDAL.UpdateReqStatusByReqNo(GRNno.Tus_base_doc_no, _inventoryHeader.Ith_cre_by);
        //                    }

        //                }
        //                else
        //                {
        //                    _inventoryDAL.UpdateReqStatusByReqNo(_requestNo, _inventoryHeader.Ith_cre_by);
        //                }

        //            }

        //        #region Validate Int Req Itm add by Lakshan 9/08/2016
        //        if (_effect != -1 && _reqBalBefSave > 0 && !_requestNo.Contains("GRAN"))
        //        {
        //            #region Get multiple document balance Lakshan 06 Oct 2016
        //            decimal _reqBalAftSave = 0;
        //            foreach (var _hdrSeq in _tempPickHdrTemp)
        //            {
        //                _reqBalAftSave = _reqBalAftSave = +_inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_hdrSeq.Tuh_usrseq_no);
        //            }
        //            // decimal _reqBalAftSave = _inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_tempPickSeqNo);
        //            #endregion

        //            decimal _reqNetBal = _reqBalBefSave - _reqBalAftSave;
        //            if (_updatedQty != _reqNetBal)
        //            {
        //                _effect = -1;
        //                //   _message = "Precess Terminated. Request item update incorrect !";
        //                _message = "Precess Terminated. Request item has no inventory balance !";
        //            }
        //        }
        //        #endregion

        //        #region Save Trans action Details by Lakshan
        //        if (_effect != -1)
        //        {
        //            if (_traList != null)
        //            {
        //                foreach (Transport item in _traList)
        //                {
        //                    if (item.Slip_no_auto_gen)
        //                    {
        //                        if (item.MstAuto != null)
        //                        {
        //                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(item.MstAuto.Aut_moduleid, item.MstAuto.Aut_direction, item.MstAuto.Aut_start_char, item.MstAuto.Aut_cate_tp,
        //                                item.MstAuto.Aut_cate_cd, item.MstAuto.Aut_modify_dt, item.MstAuto.Aut_year).Aut_number;
        //                            string _documentNo = _inventoryHeader.Ith_loc + "-" + item.Mbe_curr_slip_cd + "-" + "CO" + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
        //                            _inventoryDAL.UpdateAutoNumber(item.MstAuto);
        //                            item.Itrn_ref_no = _documentNo;
        //                        }
        //                    }
        //                    item.Itrn_ref_doc = _genInvDoc;
        //                    item.Itrn_trns_no = _inventoryHeader.Ith_doc_no;
        //                    _inventoryDAL.Save_Int_Transport(item); //Change from _generalDAL to inventoryDAL  - 16/05/2018
        //                }
        //            }
        //        }

        //        #endregion

        //        if (_effect != -1)
        //        {
        //            #region Job Request Generation by Lakshan 03 Sep 2016
        //            MasterLocationNew _mstOutLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //            {
        //                Ml_loc_cd = _inventoryHeader.Ith_loc,
        //                Ml_com_cd = _inventoryHeader.Ith_com,
        //                Ml_act = 1
        //            }).FirstOrDefault();

        //            MasterLocationNew _mstloc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //            {
        //                Ml_loc_cd = _inventoryHeader.Ith_oth_loc,
        //                Ml_com_cd = _inventoryHeader.Ith_oth_com,
        //                Ml_act = 1
        //            }).FirstOrDefault();
        //            if (_mstloc != null)
        //            {
        //                if (_mstloc.Ml_loc_tp == "SERC" && _mstloc.Ml_is_online == 1)
        //                {
        //                    //AS per the Sanjeewa 15 Oct 2016
        //                    List<InventoryRequestItem> _intReqItmList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(_inventoryHeader.Ith_oth_docno);
        //                    bool _reAva = false;
        //                    if (_intReqItmList != null)
        //                    {
        //                        if (_intReqItmList.Count > 0)
        //                        {
        //                            _reAva = true;
        //                        }
        //                    }
        //                    if (!_reAva)
        //                    {
        //                        if (_mstOutLoc.Ml_loc_tp != "SERS") //AS per the kapila 29/9/2016 if (_mstOutLoc.Ml_loc_tp != "SERC")
        //                        {
        //                            #region Make Req Hdr
        //                            Int32 ReqSeqNo = 0;
        //                            ReqSeqNo = _custServiceDAL.GetJobSerialID();   // _inventoryDAL.GetReqSerialID(); 13/5/2016
        //                            Service_Req_Hdr _serReqHdr = new Service_Req_Hdr();
        //                            _serReqHdr.Srb_seq_no = ReqSeqNo;
        //                            _serReqHdr.Srb_reqno = _genInvDoc;
        //                            _serReqHdr.Srb_dt = _inventoryHeader.Ith_doc_date;
        //                            _serReqHdr.Srb_com = _inventoryHeader.Ith_com;
        //                            _serReqHdr.Srb_jobcat = "WW";
        //                            _serReqHdr.Srb_jobtp = "I";
        //                            _serReqHdr.Srb_jobstp = "RCC";
        //                            _serReqHdr.Srb_manualref = _inventoryHeader.Ith_manual_ref;
        //                            _serReqHdr.Srb_otherref = "";
        //                            _serReqHdr.Srb_refno = _inventoryHeader.Ith_oth_docno;
        //                            _serReqHdr.Srb_jobstage = 1;
        //                            _serReqHdr.Srb_rmk = _inventoryHeader.Ith_remarks;
        //                            _serReqHdr.Srb_prority = "NORMAL";
        //                            _serReqHdr.Srb_st_dt = _inventoryHeader.Ith_doc_date;
        //                            _serReqHdr.Srb_ed_dt = _inventoryHeader.Ith_doc_date;
        //                            _serReqHdr.Srb_noofprint = 0;
        //                            _serReqHdr.Srb_lastprintby = "";
        //                            _serReqHdr.Srb_orderno = "";
        //                            _serReqHdr.Srb_custexptdt = _inventoryHeader.Ith_doc_date;
        //                            _serReqHdr.Srb_substage = "";
        //                            _serReqHdr.Srb_cust_cd = _inventoryHeader.Ith_loc;
        //                            _serReqHdr.Srb_stus = "P";
        //                            _serReqHdr.Srb_cust_name = _mstloc.Ml_loc_desc;
        //                            _serReqHdr.Srb_add1 = _mstloc.Ml_add1;
        //                            _serReqHdr.Srb_add2 = _mstloc.Ml_add2;
        //                            DataTable _dtIncGrp = _inventoryDAL.GetBusEntityDataByAccCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc);
        //                            if (_dtIncGrp == null)
        //                            {
        //                                _effect = -1;
        //                                _message = "Process Terminated ! Income group data not found !" + "Location : " + _inventoryHeader.Ith_oth_loc;
        //                            }
        //                            if (_dtIncGrp.Rows.Count == 0)
        //                            {
        //                                _effect = -1;
        //                                _message = "Process Terminated ! Income group data not found !";
        //                            }
        //                            if (_dtIncGrp.Rows.Count > 0)
        //                            {
        //                                _serReqHdr.Srb_b_cust_cd = _dtIncGrp.Rows[0]["mbe_income_grup"].ToString();
        //                                _serReqHdr.Srb_b_cust_name = _dtIncGrp.Rows[0]["mbe_name"].ToString();
        //                                _serReqHdr.Srb_b_mobino = _dtIncGrp.Rows[0]["mbe_mob"].ToString();
        //                                _serReqHdr.Srb_b_add1 = _dtIncGrp.Rows[0]["mbe_add1"].ToString();
        //                                _serReqHdr.Srb_b_add2 = _dtIncGrp.Rows[0]["mbe_add2"].ToString();
        //                                _serReqHdr.Srb_b_phno = _dtIncGrp.Rows[0]["mbe_tel"].ToString();
        //                                _serReqHdr.Srb_b_email = _dtIncGrp.Rows[0]["mbe_email"].ToString();
        //                            }
        //                            //  _serReqHdr.Srb_b_cust_cd = _inventoryHeader.Ith_loc;
        //                            // _serReqHdr.Srb_b_cust_name = _mstloc.Ml_loc_desc;
        //                            // _serReqHdr.Srb_b_add1 = _mstloc.Ml_add1;
        //                            _serReqHdr.Srb_cre_by = _inventoryHeader.Ith_cre_by;
        //                            _serReqHdr.Srb_cre_dt = DateTime.Now;
        //                            _serReqHdr.Srb_mod_by = _inventoryHeader.Ith_mod_by;
        //                            _serReqHdr.Srb_mod_dt = DateTime.Now;
        //                            #endregion
        //                            if (_effect != -1)
        //                            {
        //                                int res = _custServiceDAL.SaveRequestHeader(_serReqHdr);
        //                                #region MyRegion
        //                                if (res > 0)
        //                                {
        //                                    List<InventorySerialN> _intSer = _inventoryDAL.Get_INT_SER_DATA((new InventorySerialN()
        //                                    {
        //                                        Ins_com = _inventoryHeader.Ith_com,
        //                                        Ins_loc = _inventoryHeader.Ith_loc,
        //                                        Ins_doc_no = _genInvDoc
        //                                    }));
        //                                    List<Service_Req_Det> _serReqDetList = new List<Service_Req_Det>();
        //                                    List<MasterItemWarrantyPeriod> _warrPeriodList = new List<MasterItemWarrantyPeriod>();
        //                                    MasterItem _mstItem = new MasterItem();
        //                                    foreach (var _ser in _intSer)
        //                                    {
        //                                        Service_Req_Det _serReqDet = new Service_Req_Det();
        //                                        _serReqDet.Jrd_seq_no = _serReqHdr.Srb_seq_no;
        //                                        _serReqDet.Jrd_reqno = _genInvDoc;
        //                                        _serReqDet.Jrd_reqline = _ser.Ins_ser_line;
        //                                        _serReqDet.Jrd_sjobno = _genInvDoc + ".1";
        //                                        _serReqDet.Jrd_loc = _inventoryHeader.Ith_oth_loc;
        //                                        _serReqDet.Jrd_pc = string.IsNullOrEmpty(_inventoryHeader.Ith_pc) ? _inventoryHeader.Ith_oth_loc : _inventoryHeader.Ith_oth_loc;
        //                                        _serReqDet.Jrd_itm_cd = _ser.Ins_itm_cd;
        //                                        _serReqDet.Jrd_itm_stus = _ser.Ins_itm_stus;
        //                                        _mstItem = _generalDAL.GetItemMaster(_ser.Ins_itm_cd);
        //                                        if (_mstItem != null)
        //                                        {
        //                                            _serReqDet.Jrd_itm_desc = _mstItem.Mi_shortdesc;
        //                                            _serReqDet.Jrd_brand = _mstItem.Mi_brand;
        //                                            _serReqDet.Jrd_model = _mstItem.Mi_model;
        //                                            _serReqDet.Jrd_warr_stus = _mstItem.Mi_warr ? 1 : 0;
        //                                        }
        //                                        _serReqDet.Jrd_itm_cost = _ser.Ins_unit_cost;
        //                                        _serReqDet.Jrd_ser1 = _ser.Ins_ser_1;
        //                                        _serReqDet.Jrd_ser2 = _ser.Ins_ser_2;
        //                                        _serReqDet.Jrd_warr = _ser.Ins_warr_no;
        //                                        _warrPeriodList = _generalDAL.getitemWarranty(_serReqDet.Jrd_itm_cd);
        //                                        if (_warrPeriodList != null)
        //                                        {
        //                                            var v = _warrPeriodList.Where(c => c.Mwp_itm_cd == _ser.Ins_itm_cd && c.Mwp_itm_stus == _ser.Ins_itm_stus).FirstOrDefault();
        //                                            if (v != null)
        //                                            {
        //                                                _serReqDet.Jrd_chg_warr_rmk = v.Mwp_rmk;
        //                                                _serReqDet.Jrd_warrperiod = v.Mwp_val;
        //                                                _serReqDet.Jrd_warrrmk = v.Mwp_rmk;
        //                                            }
        //                                        }
        //                                        _serReqDet.Jrd_chg_warr_stdt = _ser.Ins_doc_dt;
        //                                        _serReqDet.Jrd_warrstartdt = _ser.Ins_doc_dt;
        //                                        _serReqDet.Jrd_iswrn = 0;

        //                                        _serReqDet.Jrd_isstockupdate = 1;
        //                                        // _serReqDet.Jrd_regno ="";
        //                                        //_serReqDet.Jrd_milage = "";
        //                                        //_serReqDet.Jrd_warr_stus = 1;
        //                                        // _serReqDet.Jrd_onloan = _ser.Ins_loc;
        //                                        _serReqDet.Jrd_warrreplace = 0;
        //                                        _serReqDet.Jrd_aodissueloc = _inventoryHeader.Ith_loc;
        //                                        _serReqDet.Jrd_aodissuedt = _ser.Ins_doc_dt;
        //                                        _serReqDet.Jrd_aodissueno = _genInvDoc;
        //                                        _serReqDet.Jrd_stage = 1;
        //                                        _serReqDet.Jrd_com = _ser.Ins_com;
        //                                        _serReqDet.Jrd_used = 0;
        //                                        _serReqDet.Jrd_jobno = "";
        //                                        _serReqDet.Jrd_jobline = 0;
        //                                        _serReqDetList.Add(_serReqDet);
        //                                    }
        //                                    foreach (var v in _serReqDetList)
        //                                    {
        //                                        res = _custServiceDAL.SaveRequestDetail(v);
        //                                    }
        //                                }
        //                                #endregion
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //            #endregion
        //        }
        //        if (_effect != -1)
        //        {
        //            #region Add by Lakshan to insert JOB for KD operation
        //            //MasterLocationNew _mstDispLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //            //{
        //            //    Ml_loc_cd = _inventoryHeader.Ith_loc,
        //            //    Ml_com_cd = _inventoryHeader.Ith_com,
        //            //    Ml_act = 1
        //            //}).FirstOrDefault();

        //            //MasterLocationNew _mstInpLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
        //            //{
        //            //    Ml_loc_cd = _inventoryHeader.Ith_oth_loc,
        //            //    Ml_com_cd = _inventoryHeader.Ith_oth_com,
        //            //    Ml_act = 1
        //            //}).FirstOrDefault();
        //            //if (_mstDispLoc.Ml_loc_tp == "KD")
        //            //{
        //            //    ServiceJobHeader _serJobHdr = new ServiceJobHeader();
        //            //    _salesDAL.Save_Job_Header(_serJobHdr);
        //            //}
        //            #endregion
        //        }
        //        #region Validate Aod Save by Lakshan 06/Sep/2016
        //        #region Cheak Batch
        //        if (_effect != -1)
        //        {
        //            List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
        //            _BATCH = _inventoryDAL.GETInventorybatch(_inventoryHeader.Ith_com, _inventoryHeader.Ith_seq_no.ToString());
        //            bool _count = _inventoryDAL.checkBatch_ser(_inventoryHeader.Ith_seq_no);
        //            if (_BATCH.Count == 0)
        //            {
        //                _effect = -1;
        //                _message = "Process Terminated ! Inventory Balance not updated ";
        //            }
        //            if (_effect != -1)
        //            {
        //                if (_count == false)
        //                {
        //                    bool _chkBatch = true;
        //                    MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
        //                    if (_mstLocation != null)
        //                    {
        //                        if (!_mstLocation.Ml_is_serial)
        //                        {
        //                            if (string.IsNullOrEmpty(_inventoryHeader.Ith_loading_point) || _inventoryHeader.Ith_loading_point == "N/A")
        //                            {
        //                                _chkBatch = false;
        //                            }
        //                        }
        //                    }
        //                    if (_chkBatch)
        //                    {
        //                        _effect = -1;
        //                        _message = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
        //                    }
        //                }
        //            }
        //        }
        //        #endregion
        //        #region Cheak int Itm
        //        if (_effect != -1)
        //        {
        //            bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryHeader.Ith_seq_no);
        //            if (_intItmErr == false)
        //            {
        //                _effect = -1;
        //                _message = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
        //            }
        //        }
        //        #endregion

        //        #region Check Serials
        //        if (_effect == 1)
        //        {
        //            //Added by Chamal to check serial ID duplicate 05-Sep-2016
        //            List<ReptPickSerials> _serList = new List<ReptPickSerials>();
        //            _serList = _inventoryDAL.GetSerialsByDocument(_inventoryHeader.Ith_seq_no, null);

        //            var _varSer = from c in _serList
        //                          group c by c.Tus_ser_id into grp
        //                          where grp.Count() > 1
        //                          select new { SerialID = grp.Key, Count = grp.Count() };
        //            if (_varSer != null && _varSer.Count() > 0)
        //            {
        //                string _errorSerialID = string.Empty;
        //                foreach (var item in _varSer)
        //                {
        //                    if (string.IsNullOrEmpty(_errorSerialID))
        //                    {
        //                        _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
        //                    }
        //                    else
        //                    {
        //                        _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
        //                    }
        //                }
        //                _effect = -1;
        //                _message = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
        //                _genInventoryDocument = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
        //                _genInvDoc = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
        //            }
        //        }
        //        #endregion

        //        #region validate serial count and batch count
        //        if (_batchQty != _serQty)
        //        {
        //            _effect = -1;
        //            _message = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
        //        }
        //        #endregion

        //        #region validate reservation update 07 Nov 2016
        //        if (_effect == 1 && _inventoryHeader.TMP_IS_RES_UPDATE)
        //        {
        //            if (_resUpdateErr)
        //            {
        //                _effect = -1;
        //                _message = " Reservation data not update correctly !";
        //            }
        //        }
        //        #endregion

        //        #region validate location balance update correctly 27 Nov 2016
        //        if (_inventoryHeader.TMP_CHK_LOC_BAL && _effect == 1)
        //        {
        //            foreach (var _itemVal in _locBalanceDataList)
        //            {
        //                _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
        //                {
        //                    Inl_com = _itemVal.Inl_com,
        //                    Inl_loc = _itemVal.Inl_loc,
        //                    Inl_itm_cd = _itemVal.Inl_itm_cd,
        //                    Inl_itm_stus = _itemVal.Inl_itm_stus
        //                });
        //                _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
        //                _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_bef_save - _itemVal.Inl_qty_aft_save;
        //                if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
        //                {
        //                    _itemVal.Inl_err_ava = 1;
        //                }
        //            }
        //            var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
        //            if (_balUpdteErr != null)
        //            {
        //                if (_balUpdteErr.Count > 0)
        //                {
        //                    _effect = -1;
        //                    _message = "Process Terminated ! Inventory Balance not updated [LOC]";
        //                }
        //            }
        //        }
        //        #endregion

        //        #region validate UOM MAC
        //        if (_inventoryHeader.TMP_SAVE_PKG_DATA)
        //        {
        //            string _mcCom = _inventoryHeader.Ith_com;
        //            List<InventoryItem> _mcIntItmList = _inventoryDAL.GET_INT_ITM_DATA_BY_SEQNO(_inventoryHeader.Ith_seq_no);
        //            MasterItem _mcItm = new MasterItem();
        //            foreach (var _iti in _mcIntItmList)
        //            {
        //                bool _mcIsModConvBase = false;
        //                _mcItm = _inventoryDAL.GetItem(_mcCom, _iti.Iti_item_code);
        //                List<UnitConvert> _unitConvert = _inventoryDAL.GET_UNIT_CONVERTER_DATA(new UnitConvert()
        //                {
        //                    mmu_model = _mcItm.Mi_model,
        //                    mmu_com = _mcCom
        //                });
        //                if (_unitConvert.Count > 0)
        //                {
        //                    var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
        //                    if (_mcModel != null)
        //                    {
        //                        _mcIsModConvBase = true;
        //                    }
        //                }
        //                if (_mcIsModConvBase)
        //                {
        //                    var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
        //                    decimal _mcPkgQty = Math.Round(_iti.Iti_qty / _mcModel.mmu_qty, 2);
        //                    if (_iti.Iti_pkg_uom_qty != _mcPkgQty)
        //                    {
        //                        _effect = -1;
        //                        _message = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
        //                    }
        //                }
        //                else
        //                {
        //                    if (_iti.Iti_pkg_uom_qty != _iti.Iti_pkg_uom_qty)
        //                    {
        //                        _effect = -1;
        //                        _message = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
        //                    }
        //                }
        //            }
        //        }
        //        #endregion
        //        #endregion
        //    AB:
        //        if (_effect != -1)
        //        {
        //            _inventoryDAL.TransactionCommit();
        //            _salesDAL.TransactionCommit();
        //            _inventoryRepDAL.TransactionCommit();
        //            _generalDAL.TransactionCommit();
        //            _custServiceDAL.TransactionCommit();
        //            _FMSinventoryDAL.TransactionCommit();
        //        }
        //        else
        //        {
        //            _genInvDoc = string.Empty;
        //            _genSalDoc = string.Empty;
        //            _effect = -1;
        //            _inventoryDAL.TransactionRollback();
        //            _salesDAL.TransactionRollback();
        //            _inventoryRepDAL.TransactionRollback();
        //            _generalDAL.TransactionRollback();
        //            _custServiceDAL.TransactionRollback();
        //            _FMSinventoryDAL.TransactionRollback();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        // _message = ex.Message;
        //        _message = string.IsNullOrEmpty(_message) ? ex.Message : _message;
        //        _genInvDoc = string.Empty;
        //        _genSalDoc = string.Empty;
        //        _effect = -1;
        //        _inventoryDAL.TransactionRollback();
        //        _salesDAL.TransactionRollback();
        //        _inventoryRepDAL.TransactionRollback();
        //        _generalDAL.TransactionRollback();
        //        _custServiceDAL.TransactionRollback();
        //        _FMSinventoryDAL.TransactionRollback();
        //    }
        //    _genMessage = string.IsNullOrEmpty(_message) ? _genMessage : _message;
        //    _genInventoryDocument = _genInvDoc;
        //    _genSalesDocument = _genSalDoc;
        //    return _effect;
        //}
                #endregion
        public Int32 SaveCommonOutWardEntry(string _fromCompany, string _fromProfit, string _toCompany, string _requestNo, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, InvoiceHeader _invoiceHeader, MasterAutoNumber _invoiceAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _genMessage, out string _genSalesDocument, out string _genInventoryDocument, bool _isGRAN, bool _isGRNFromDIN, List<Transport> _traList = null, Boolean withcoonection = false)
            {
            Int32 eff = -1;
            eff=SaveCommonOutWardEntry_comm(_fromCompany, _fromProfit, _toCompany, _requestNo, _inventoryHeader, _inventoryAuto, _invoiceHeader, _invoiceAuto, _reptPickSerials, _reptPickSerialsSub, out  _genMessage, out  _genSalesDocument, out  _genInventoryDocument, _isGRAN, _isGRNFromDIN, _traList, withcoonection);

            return eff;
        }

        //kapila 12/6/2012
        public InventorySerialRefN GetAvailableWarranty(string _comp, string _Loc, string _Item, string _Serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailableWarranty(_comp, _Loc, _Item, _Serial);
        }

        //kapila 13/6/2012
        public DataTable GetIssuedWarranty(Int32 _seq, Int32 _itmLine, Int32 _batchLine, Int32 _serLine)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetIssuedWarranty(_seq, _itmLine, _batchLine, _serLine);
        }

        //kapila 14/6/2012
        public DataTable GetIssuedWarrantyOth(string _comp, string _Loc, string _Item, string _Serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetIssuedWarrantyOth(_comp, _Loc, _Item, _Serial);
        }

        //created by shani 14-06-2012
        public string Get_default_binCD(string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_default_binCD(company, location);
        }

        public List<ReptPickItems> IsPickQtyExceedRequestQty(int _userSeq, string _reqItem, string _reqStatus)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.IsPickQtyExceedRequestQty(_userSeq, _reqItem, _reqStatus);
        }

        public Int16 UpdateMigrationInvoiceDetails(string _invno, int _invline, decimal _tax, decimal _tot)
        {
            _inventoryDAL = new InventoryDAL();
            Int16 x = 0;
            try
            {                
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                x = _inventoryDAL.UpdateMigrationInvoiceDetails(_invno, _invline, _tax, _tot);

                _inventoryDAL.TransactionCommit();

                return 1;
            }
            catch (Exception ex)
            {
                x = -1;
                _inventoryDAL.TransactionRollback();
            }
            return x;
        }

        private Int16 SaveInwardScanSerial_FMS(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;

            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            DataTable dt_location = Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
            }

            Int32 _docSeqNo = _FMSinventoryDAL.GetSerialID();
            _inventoryMovementHeader.Ith_seq_no = _docSeqNo;
            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            if (_inventoryMovementHeader != null) _FMSinventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var items in _tbitems)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = items.bincode;
                invItem.Iti_item_code = items.itemcode;
                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                // INSERT/UPDATE INT_ITM TABLE
                _FMSinventoryDAL.UpdateInventoryItem(invItem);

                batchLine = 1;

                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                    group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_unit_cost, _pickSerials.Tus_unit_price, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_batch_line } into batch
                    select new { bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, unitcost = batch.Key.Tus_unit_cost, unitprice = batch.Key.Tus_unit_price, basedocno = batch.Key.Tus_base_doc_no, baseitmline = batch.Key.Tus_base_itm_line, basebatchline = batch.Key.Tus_batch_line, itemqty = batch.Sum(p => p.Tus_qty) };
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = string.Empty;
                    invBatch.Inb_bin = batchs.bincode;
                    invBatch.Inb_itm_cd = batchs.itemcode;
                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = batchs.unitprice;
                    invBatch.Inb_base_doc_no = batchs.basedocno;
                    invBatch.Inb_base_ref_no = string.Empty;
                    invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                    invBatch.Inb_base_itmcd = string.Empty;
                    invBatch.Inb_base_itmline = batchs.baseitmline;
                    invBatch.Itb_base_batchline = batchs.basebatchline;
                    invBatch.Inb_base_itmstus = string.Empty;
                    invBatch.Inb_job_no = string.Empty;
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;

                    // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
                    _FMSinventoryDAL.UpdateInventoryBatch(invBatch);
                    _FMSinventoryDAL.UpdateInventoryBatchRef(invBatch, 1); //Edit - Prabhath on 19/04/2012

                    serLine = 1;
                    var _tbsers =
                        (from _pickSerials in PickSerials
                         where _pickSerials.Tus_bin == batchs.bincode && _pickSerials.Tus_itm_cd == batchs.itemcode && _pickSerials.Tus_itm_stus == batchs.itemstatus && _pickSerials.Tus_unit_cost == batchs.unitcost
                         select _pickSerials).Distinct();
                    foreach (var sers in _tbsers.Distinct())
                    {
                        reptSeqNo = sers.Tus_seq_no;

                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                        invSerials.Ins_bin = sers.Tus_bin;
                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _FMSinventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                        invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                        invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                        invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;

                        //Add Prabhath on 19/04/2012
                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                        _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                        _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                        _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                        _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus;
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                        _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                        _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                        _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = sers.Tus_serial_id.ToString();
                        _invWarraDetail.Irsm_warr_period = 0;//TODO : Changed need
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;

                        // decimal allow none-serialized items are not saved in serial related tables
                        if (sers.Tus_ser_id != 0)
                        {
                            _FMSinventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                            _FMSinventoryDAL.SaveInventorySerial(invSerials, 1);
                            //Edit - Prabhath on 19/04/2012
                            _FMSinventoryDAL.SaveInventorySerialRef(invSerials, 1);
                            serLine += 1;
                        }
                    }

                    batchLine += 1;
                }

                itmLine += 1;
            }

            // Update location inventory
            var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainv)
            {
                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;
                _FMSinventoryDAL.UpdateInventoryLocation(invLocation, 1);
            }

            _FMSinventoryDAL.DeleteTempPickObjs(reptSeqNo);

            effect = 1;

            return effect;
        }

        public List<ReptPickSerials> Get_all_Serial_details(string _RefNo, string _USer, string _Comp, string _Loc)
        {
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            List<ReptPickSerials> _Lst = _FMSinventoryDAL.Get_all_Serial_details(_RefNo, _USer, _Comp, _Loc);
            _FMSinventoryDAL.ConnectionClose();
            return _Lst;
        }

        public Int16 SaveAllScanManualDocPages(ReptPickSerials _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            using (TransactionScope tr = new TransactionScope())
            {
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _FMSinventoryDAL.ConnectionOpen();
                if (_reptPickSerials != null) _FMSinventoryDAL.SavePickedItemSerials(_reptPickSerials);
                //                if (_reptPickSerialsSub != null) _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);

                _FMSinventoryDAL.ConnectionClose();
                effect = 1;
                tr.Complete();
            }

            return effect;
        }

        public Int16 Manual_Doc_Transfer(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            //using (TransactionScope _tr = new TransactionScope())
            //{
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();

            Int16 effect = SaveOutwardScanSerial_FMS(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
            effect = UpdateInventoryAutoNumber_FMS(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);
            _inventoryRepDAL.ConnectionClose();
            _FMSinventoryDAL.ConnectionClose();
            //_tr.Complete();
            return effect;
            //}
        }

        private Int16 SaveOutwardScanSerial_FMS(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;

            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            DataTable dt_location = Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
            }

            //11/04/2012 - Prabhath
            Int32 _docSeqNo = _FMSinventoryDAL.GetSerialID();
            _inventoryMovementHeader.Ith_seq_no = _docSeqNo;

            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            if (_inventoryMovementHeader != null) _FMSinventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            // Select Serialized items and apply serialized inventory method
            var _tbsers =
                  from _pickSerials in PickSerials
                  where _pickSerials.Tus_ser_id != 0 // This is no need to feauture becoz
                  select _pickSerials;
            foreach (var sers in _tbsers)
            {
                reptSeqNo = sers.Tus_usrseq_no;

                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = sers.Tus_bin;
                invItem.Iti_item_code = sers.Tus_itm_cd;
                invItem.Iti_item_status = sers.Tus_itm_stus;
                invItem.Iti_qty = sers.Tus_qty;
                invItem.Iti_bal_qty = sers.Tus_qty;
                invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;

                if (1 == _FMSinventoryDAL.UpdateInventoryItem(invItem))
                {
                    itmLine += 1;
                    batchLine = 1;
                }

                InventoryBatchN invBatch = new InventoryBatchN();
                invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;

                invBatch.Inb_itm_line = _FMSinventoryDAL.GetInventoryItemLine(invItem);
                if (invBatch.Inb_itm_line == 0)
                {
                    invBatch.Inb_itm_line = itmLine;
                }

                invBatch.Inb_batch_line = batchLine;
                invBatch.Inb_batch_no = string.Empty;
                invBatch.Inb_bin = sers.Tus_bin;
                invBatch.Inb_itm_cd = sers.Tus_itm_cd;
                invBatch.Inb_itm_stus = sers.Tus_itm_stus;
                invBatch.Inb_qty = sers.Tus_qty;
                invBatch.Inb_unit_cost = sers.Tus_unit_cost;
                invBatch.Itb_bal_qty1 = sers.Tus_qty;
                invBatch.Itb_bal_qty2 = sers.Tus_qty;
                invBatch.Inb_unit_price = sers.Tus_unit_price;
                invBatch.Inb_base_doc_no = sers.Tus_doc_no;                     // Impotant : When the outward entry, this is the inward doc no
                invBatch.Inb_base_ref_no = string.Empty;
                invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                invBatch.Inb_base_itmcd = sers.Tus_itm_cd;                      // Impotant : When the outward entry, this is the inward item code
                invBatch.Inb_base_itmline = sers.Tus_itm_line;                  // Impotant : When the outward entry, this is the inward item line
                invBatch.Itb_base_batchline = sers.Tus_batch_line;              // Impotant : When the outward entry, this is the inward batch line
                invBatch.Inb_base_itmstus = sers.Tus_itm_stus;                  // Impotant : When the outward entry, this is the inward item status
                invBatch.Inb_job_no = string.Empty;
                invBatch.Itb_git_ignore = false;
                invBatch.Itb_git_ignore_by = null;
                invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                invBatch.Inb_res_no = null;
                invBatch.Inb_res_lineno = 0;
                invBatch.Inb_base_doc_no1 = null;
                invBatch.Inb_base_doc_no2 = null;
                invBatch.Inb_base_doc_no3 = null;
                invBatch.Inb_cur_cd = null;
                invBatch.Inb_grup_cur_cd = null;

                if (1 == _FMSinventoryDAL.UpdateInventoryBatch(invBatch))
                {
                    batchLine += 1;
                    serLine = 1;
                }

                InventorySerialN invSerials = new InventorySerialN();
                invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                //invSerials.Its_item_line = itmLine;
                invSerials.Ins_itm_line = invBatch.Inb_itm_line;
                invSerials.Ins_batch_line = _FMSinventoryDAL.GetInventoryBatchLine(invBatch);
                if (invSerials.Ins_batch_line == 0)
                {
                    invSerials.Ins_batch_line = batchLine;
                }

                invSerials.Ins_direct = false; // false = Out, Outward
                invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                invSerials.Ins_bin = sers.Tus_bin;
                invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                invSerials.Ins_ser_id = sers.Tus_ser_id;
                invSerials.Ins_ser_1 = sers.Tus_ser_1;
                invSerials.Ins_ser_2 = sers.Tus_ser_2;
                invSerials.Ins_ser_3 = sers.Tus_ser_3;
                invSerials.Ins_ser_4 = sers.Tus_ser_4;
                invSerials.Ins_warr_no = sers.Tus_warr_no;
                invSerials.Ins_warr_period = sers.Tus_warr_period;
                invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                //invSerials.Ins_issue_dt = sers.Tus_out_date;
                invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                invSerials.Ins_cross_serline = sers.Tus_ser_line;
                invSerials.Ins_issue_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                serLine = _FMSinventoryDAL.GetInventorySerLine(invSerials);
                if (serLine == 0)
                    serLine = 1;
                else
                    serLine += 1;

                invSerials.Ins_ser_line = serLine;

                _FMSinventoryDAL.SaveInventorySerial(invSerials, 0);
                _FMSinventoryDAL.SaveInventorySerialRef(invSerials, 0);
            }

            // Select None-Serialized items and apply FIFO inventory method
            var _tbnonsers =
                  from _pickSerials in PickSerials
                  where _pickSerials.Tus_ser_id == 0
                  group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into batch
                  select new { bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, itemqty = batch.Sum(p => p.Tus_qty) };
            foreach (var non_sers in _tbnonsers)
            {
                // TODO : Will be completed ....
            }

            // Update location inventory
            var _tblocainv =
              from _pickSerials in PickSerials
              where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no && _pickSerials.Tus_com == _pickSerials.Tus_com && _pickSerials.Tus_loc == _pickSerials.Tus_loc
              group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
              select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainv)
            {
                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;
                _FMSinventoryDAL.UpdateInventoryLocation(invLocation, 0);
            }

            _FMSinventoryDAL.DeleteTempPickObjs(reptSeqNo);

            effect = 1;

            return effect;
        }

        public Boolean IsValidManualDocument(string _Comp, string _Loc, string _DocType, Int32 _NextNo)
        {
            Boolean _isValid = false;
            GeneralDAL _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            InventoryDAL _inventoryDAL = new InventoryDAL();
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _isValid = _inventoryDAL.IsValidManualDocument(_Comp, _Loc, _DocType, _NextNo);
            else
                _isValid = _FMSinventoryDAL.IsValidManualDocument(_Comp, _Loc, _DocType, _NextNo);
            return _isValid;
        }

        public Boolean IsValidManualDocument_prefix(string _Comp, string _Loc, string _DocType, Int32 _NextNo, string _prefix)
        {
            Boolean _isValid = false;
            GeneralDAL _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            InventoryDAL _inventoryDAL = new InventoryDAL();
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _isValid = _inventoryDAL.IsValidManualDocument_prefix(_Comp, _Loc, _DocType, _NextNo, _prefix);
            else
                _isValid = _FMSinventoryDAL.IsValidManualDocument_prefix(_Comp, _Loc, _DocType, _NextNo, _prefix);

            return _isValid;
        }


        public Int32 GetNextManualDocNo(string _Comp, string _Loc, string _DocType)
        {
            Int32 X = 0;
            GeneralDAL _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            InventoryDAL _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                X = _inventoryDAL.GetNextManualDocNo(_Comp, _Loc, _DocType);
            else
                X = _FMSinventoryDAL.GetNextManualDocNo(_Comp, _Loc, _DocType);

            _FMSinventoryDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return X;
        }

        public Int32 UpdateManualDocNo(string _Comp, string _Loc, string _DocType, Int32 _DocNo, string _TxnNo)
        {
            Int32 X = 0;
            try
            {
                GeneralDAL _generalDAL = new GeneralDAL();
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _FMSinventoryDAL = new FMS_InventoryDAL();
                _FMSinventoryDAL.ConnectionOpen();
                _FMSinventoryDAL.BeginTransaction();

                if (_masterComp.MC_IS_SCM2_FMS == 1)
                    X = _inventoryDAL.UpdateManualDocNo(_Loc, _DocType, _DocNo, _TxnNo);
                else
                    X = _FMSinventoryDAL.UpdateManualDocNo(_Loc, _DocType, _DocNo, _TxnNo);

                _FMSinventoryDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _FMSinventoryDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
            return X;
        }

        public Int32 Update_Manual_DocNo(string _Loc, string _DocType, Int32 _DocNo, string _TxnNo)
        {
            FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int32 X = _FMSinventoryDAL.UpdateManualDocNo(_Loc, _DocType, _DocNo, _TxnNo);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        public Boolean IsRccSerialFound(string _Item, string _Serial)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsRccSerialFound(_Item, _Serial);
        }
        public Boolean IsRccSerialFoundJob(string _Item, string _Serial, string _job)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsRccSerialFoundJob(_Item, _Serial, _job);
        }

        //kapila 25/6/2012
        public Boolean Check_Temp_coll_Man_doc_dt(string _Comp, string _User, string _Loc, string _item, string _Prefix, Int32 _RecNo, string _module)
        {
            Boolean effect = false;
            try
            {
                _generalDAL = new GeneralDAL();
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _FMSinventoryDAL.ConnectionOpen();

                if (_masterComp.MC_IS_SCM2_FMS == 1)
                    effect = _inventoryDAL.Check_Temp_coll_Man_doc_dt(_User, _Loc, _item, _Prefix, _RecNo, _module);
                else
                    effect = _FMSinventoryDAL.Check_Temp_coll_Man_doc_dt(_User, _Loc, _item, _Prefix, _RecNo, _module);

            }
            catch (Exception ex)
            {
                _FMSinventoryDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return false;
            }
            return effect;
        }

        public int save_temp_existing_receipt_det(string _Comp, string _User, string _Loc, string _item, string _Prefix, Int32 _RecNo, string _module)
        {
            int effect = 0;
            try
            {
                _generalDAL = new GeneralDAL();
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _FMSinventoryDAL.ConnectionOpen();

                if (_masterComp.MC_IS_SCM2_FMS == 1)
                    effect = _inventoryDAL.save_temp_existing_receipt_det(_User, _Loc, _item, _Prefix, _RecNo, _module);
                else
                    effect = _FMSinventoryDAL.save_temp_existing_receipt_det(_User, _Loc, _item, _Prefix, _RecNo, _module);
            }
            catch (Exception ex)
            {
                _FMSinventoryDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
            return effect;
        }

        public Int32 delete_temp_current_receipt_det(string _Comp, string _User, string _module)
        {
            Int32 X = 0;
            try
            {
                _generalDAL = new GeneralDAL();
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _FMSinventoryDAL.ConnectionOpen();
                _FMSinventoryDAL.BeginTransaction();

                if (_masterComp.MC_IS_SCM2_FMS == 1)
                    X = _inventoryDAL.delete_temp_current_receipt_det(_User, _module);
                else
                    X = _FMSinventoryDAL.delete_temp_current_receipt_det(_User, _module);

                _FMSinventoryDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _FMSinventoryDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
            return X;
        }

        public Int32 delete_temp_current_receipt(string _Comp, string _User, string _Prefix, Int32 _RecNo)
        {
            Int32 X = 0;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                X = _inventoryDAL.delete_temp_current_receipt(_User, _Prefix, _RecNo);
            else
                X = _FMSinventoryDAL.delete_temp_current_receipt(_User, _Prefix, _RecNo);

            _FMSinventoryDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return X;
        }

        public List<InventoryBatchN> GetDeliveryOrderDetail(string _company, string _invoice, int _line)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDeliveryOrderDetail(_company, _invoice, _line);
        }

        //kapila 17/7/2012
        public int SaveManualDocPages(string _Comp, Int32 _user_deqno, string _refNo)
        {
            int effect = 0;
            int x = 0;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            if (_masterComp.MC_IS_SCM2_FMS == 1)
            {
                effect = _inventoryDAL.Save_manual_doc_pages(_user_deqno, _refNo);
                x = _inventoryDAL.DeleteTempPickSer(_refNo); //kapila 11/6/2014
            }
            else
            {
                effect = _FMSinventoryDAL.Save_manual_doc_pages(_user_deqno, _refNo);
                x = _FMSinventoryDAL.DeleteTempPickSer(_refNo); //kapila 11/6/2014
            }

            return effect;
        }

        public BusinessObjects.MasterItem GetItemByModel(string _model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemByModel(_model);
        }
        /// <summary>
        /// Added by DULANGA 2016-1-23
        /// </summary>
        /// <param name="_model"></param>
        /// <returns></returns>
        public List<BusinessObjects.MasterItem> GetAllItemByModel(string _model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllItemByModel(_model);
        }




        public List<ReptPickSerials> GetInvoiceSerial(string _company, string _location, string _user, string _session, string _defBin, string _invoice, int _baseRefline)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceSerial(_company, _location, _user, _session, _defBin, _invoice, _baseRefline);
        }

        public DataTable GetItemCostSerialSCM(string _doNo, string _item, string _itemstatus, string _serial, int _isSer)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemCostSerialSCM(_doNo, _item, _itemstatus, _serial, _isSer);
        }

        public List<InventoryRequestItem> GetMaterialRequestItemByRequestNoList(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMaterialRequestItemByRequestNoList(_reqNo);
        }

        public DataTable GetMaterialRequestItemByRequestNoTable(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMaterialRequestItemByRequestNoTable(_reqNo);
        }

        //public short SRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        //{
        //    throw new NotImplementedException();
        //}

        //public short SRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        //{
        //    throw new NotImplementedException();
        //}

        public HpRevertHeader GetRevertHeaderfromAccountnoForRelease(string _company, string _profitcenter, string _accountno, Int16 _revertstatus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRevertHeaderfromAccountnoForRelease(_company, _profitcenter, _accountno, _revertstatus);
        }

        public List<ReptPickSerials> GetAdjustmentDetailFromRevertNo(string _company, string _accountno, string _revertno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAdjustmentDetailFromRevertNo(_company, _accountno, _revertno);
        }

        public List<MasterCompanyItemStatus> GetAllCompanyStatuslist(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllCompanyStatuslist(_company);
        }

        public DataTable GetRCCSerialSearchData_Customer(string _com, string _loc, int _isSameLoc, int _isStockItem, string _searchText, string _searchCriteria)
        {
            //updated by akila 2017/11/13
            //check in scm2 side 
            DataTable _returnTable = new DataTable();
            _inventoryDAL = new InventoryDAL();
            _returnTable = _inventoryDAL.GetRCCSerialSearchData(_com, _loc, _isSameLoc, _isStockItem, _searchText, _searchCriteria);
            if (_returnTable.Rows.Count < 1)
            {
                _ScmCommonDAL = new SCMCommonDAL();
                _returnTable = _ScmCommonDAL.GetRCCSerialSearchData(_com, _loc, _isSameLoc, _isStockItem, _searchText, _searchCriteria);

                if (_returnTable.Rows.Count > 0)
                {
                    int i = 0;
                    foreach (DataRow _drcol in _returnTable.Rows)
                    {
                        InventoryHeader _int_hdr = _inventoryDAL.Get_Int_Hdr(_drcol["Doc_No"].ToString());
                        
                        if (_int_hdr.Ith_sub_tp=="RVTRL")
                        {
                            _returnTable.Rows[i].Delete();                            
                        }
                        i = i + 1;
                    }
                }
            }

            return _returnTable;

            //_ScmCommonDAL = new SCMCommonDAL();
            //return _ScmCommonDAL.GetRCCSerialSearchData(_com, _loc, _isSameLoc, _isStockItem, _searchText, _searchCriteria);
        }

        public DataTable GetRCCSerialSearchData_STN(string _com, string _loc, int _isSameLoc, int _isStockItem, string _searchText, string _searchCriteria, out string _err)
        {
            DataTable _DT = null;
            _err = null;
            try
            {
                _StnCommonDAL = new STNCommonDAL();
                _DT = _StnCommonDAL.GetRCCSerialSearchData(_com, _loc, _isSameLoc, _isStockItem, _searchText, _searchCriteria);
            }
            catch (Exception err)
            {
                _err = "ERROR : " + err.Message.ToString();
            }
            return _DT;
        }



        public DataTable GetLocationByType(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationByType(_initialSearchParams, _searchCatergory, _searchText);
        }

        public List<InventorySerialN> GetDeliveredSerialDetail(string _company, string _invoiceno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDeliveredSerialDetail(_company, _invoiceno);
        }

        public List<ReptPickSerials> GetInvoiceAdvanceReceiptSerial(string _company, string _invoiceno)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_company, _invoiceno);
        }

        #region FixAsset Or Adhoc Request And Approve

        public Int32 Save_Adhocheader(InventoryAdhocHeader adhocHdr)
        {
            Int32 effect = 0;

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            effect = effect + _inventoryDAL.Save_Adhocheader(adhocHdr);

            _inventoryDAL.ConnectionClose();
            return effect;

        }

        public Int32 Save_AdhocDetail(List<InventoryAdhocDetail> adhocdet)
        {
            Int32 effect = 0;

            //  try {
            using (TransactionScope tr = new TransactionScope())
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                foreach (InventoryAdhocDetail det in adhocdet)
                {
                    effect = effect + _inventoryDAL.Save_AdhocDetail(det);
                }
                _inventoryDAL.ConnectionClose();
                // effect = 1;
                tr.Complete();
            }
            return effect;
            //}
            //catch(Exception ex){
            //    return effect = -1;
            //}
        }

        public List<ReptPickSerials> GET_ser_FOR_STATUS(string company, string location, string itemCode, string ItmStatus)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            List<ReptPickSerials> list = new List<ReptPickSerials>();
            list = _inventoryDAL.GET_ser_FOR_STATUS(company, location, itemCode, ItmStatus);

            _inventoryDAL.ConnectionClose();
            return list;
        }

        public Int32 Save_Adhoc_Request(InventoryAdhocHeader adhoc_hdr, List<InventoryAdhocDetail> adhoc_Det, List<ReptPickSerials> requestedSerialId_list, out string RefNum)
        {
            Int32 effect = 0;

            try
            {
                using (TransactionScope tr = new TransactionScope())
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();

                    //************

                    MasterAutoNumber _auto = new MasterAutoNumber();
                    //_auto.Aut_cate_cd = _businessEntity.Mbe_cre_pc;//_invoiceHeader.Sah_pc;
                    //_auto.Aut_cate_tp = "PRO";
                    if (adhoc_hdr.Iadh_tp == 2)
                    {
                        _auto.Aut_moduleid = "FIX";
                        _auto.Aut_start_char = "FIX";
                        _auto.Aut_number = 0;
                        _auto.Aut_cate_cd = adhoc_hdr.Iadh_loc;
                        _auto.Aut_cate_tp = "FIX";
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                        string _cusNo = adhoc_hdr.Iadh_loc + "-" + _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_auto);                        //************

                        adhoc_hdr.Iadh_ref_no = _cusNo;
                    }
                    else if (adhoc_hdr.Iadh_tp == 1)
                    {
                        _auto.Aut_moduleid = "FGAP";
                        _auto.Aut_start_char = "FGAP";
                        _auto.Aut_number = 0;

                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                        string _cusNo = adhoc_hdr.Iadh_loc + "-" + _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_auto);                        //************

                        adhoc_hdr.Iadh_anal5 = adhoc_hdr.Iadh_ref_no;
                        adhoc_hdr.Iadh_ref_no = _cusNo;
                    }
                    effect = _inventoryDAL.Save_Adhocheader(adhoc_hdr); //save request header
                    string Ref_no = adhoc_hdr.Iadh_ref_no;

                    RefNum = Ref_no;

                    Int32 seqNo = effect;
                    Int32 lineNo = 1;
                    foreach (InventoryAdhocDetail det in adhoc_Det)
                    {
                        det.Iadd_line = lineNo++;
                        det.Iadd_ref_no = Ref_no;
                        det.Iadd_seq = seqNo;
                        /////********************************
                        var _duplicate = from _dup in requestedSerialId_list
                                         where _dup.Tus_itm_cd == det.Iadd_claim_itm //&& _dup.Sccd_brd == obj.Sccd_brd
                                         select _dup;

                        if (_duplicate.Count() != 0)
                        {
                            foreach (ReptPickSerials rpc in requestedSerialId_list)
                            {
                                if (det.Iadd_claim_itm == rpc.Tus_itm_cd)
                                {
                                    det.Iadd_anal4 = rpc.Tus_ser_id;
                                    effect = effect + _inventoryDAL.Save_AdhocDetail(det); //save request detail line
                                    det.Iadd_line = lineNo++;

                                    //--------------
                                    // Boolean EF = _inventoryDAL.Update_serialID_INS_AVAILABLE(rpc.Tus_com, rpc.Tus_loc, rpc.Tus_itm_cd, rpc.Tus_ser_id, -1);
                                    //--------------
                                }
                            }
                        }
                        else
                        {
                            effect = effect + _inventoryDAL.Save_AdhocDetail(det); //save request detail line
                        }

                        /////********************************
                        //effect = effect + _inventoryDAL.Save_AdhocDetail(det); //save request detail line
                    }
                    _inventoryDAL.ConnectionClose();

                    tr.Complete();
                }
            }
            catch (TransactionAbortedException txnEx)
            {
                effect = -2;
                RefNum = "N/A";
                return effect;
            }
            catch (Exception ex)
            {
                effect = -1;
                RefNum = "N/A";
                return effect;
            }

            return effect;
        }

        public List<InventoryAdhocDetail> GET_adhocDET_byRefNo(string company, string location, Int32 type_, string RefNo, Int32 status, out InventoryAdhocHeader adhocHDR)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            List<InventoryAdhocDetail> list = new List<InventoryAdhocDetail>();
            list = _inventoryDAL.GET_adhocDET_byRefNo(company, location, type_, RefNo, status, out adhocHDR);

            _inventoryDAL.ConnectionClose();
            return list;
        }

        public Int32 Save_Adhoc_Approve(InventoryAdhocHeader adhoc_hdr, List<InventoryAdhocDetail> adhoc_Det_approved)
        {
            Int32 effect = 0;
            //try
            //{
            using (TransactionScope tr = new TransactionScope())
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                //effect = _inventoryDAL.Save_Adhocheader(adhoc_hdr); //save request header
                //Update_Adhoc_Header(Int32 seqNo,Int32 status, string approvedBy,DateTime approvedDate,string collectedBy,DateTime collectedDate,string adj_no)
                effect = _inventoryDAL.Update_Adhoc_Header(adhoc_hdr.Iadh_seq, adhoc_hdr.Iadh_stus, adhoc_hdr.Iadh_app_by, adhoc_hdr.Iadh_app_dt, adhoc_hdr.Iadh_coll_by, adhoc_hdr.Iadh_coll_dt, adhoc_hdr.Iadh_adj_no);

                string Ref_no = adhoc_hdr.Iadh_ref_no;
                Int32 seqNo = adhoc_hdr.Iadh_seq;
                Int32 lineNo = _inventoryDAL.Get_last_AdhocDet_LineNo(seqNo, Ref_no) + 1;
                foreach (InventoryAdhocDetail det in adhoc_Det_approved)
                {
                    det.Iadd_line = lineNo++;
                    det.Iadd_ref_no = Ref_no;
                    det.Iadd_seq = seqNo;
                    effect = effect + _inventoryDAL.Save_AdhocDetail(det); //save approve detail line
                }
                _inventoryDAL.ConnectionClose();

                tr.Complete();
            }
            //}
            //catch (TransactionAbortedException txnEx)
            //{
            //    effect = -2;
            //    return effect;
            //}
            //catch (Exception ex)
            //{
            //    effect = -1;
            //    return effect;
            //}

            return effect;
        }

        public Int32 Save_Adhoc_Confirm(InventoryAdhocHeader adhoc_hdr, List<InventoryAdhocDetail> adhoc_Det_Confirmed)
        {
            Int32 effect = 0;
            try
            {
                using (TransactionScope tr = new TransactionScope())
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();

                    //effect = _inventoryDAL.Save_Adhocheader(adhoc_hdr); //save request header
                    //Update_Adhoc_Header(Int32 seqNo,Int32 status, string approvedBy,DateTime approvedDate,string collectedBy,DateTime collectedDate,string adj_no)

                    //TODO: insert ADJ(-) and pass the ADJ# to the adhocHeader and update.
                    effect = _inventoryDAL.Update_Adhoc_Header(adhoc_hdr.Iadh_seq, adhoc_hdr.Iadh_stus, adhoc_hdr.Iadh_app_by, adhoc_hdr.Iadh_app_dt, adhoc_hdr.Iadh_coll_by, adhoc_hdr.Iadh_coll_dt, adhoc_hdr.Iadh_adj_no);

                    string Ref_no = adhoc_hdr.Iadh_ref_no;
                    Int32 seqNo = adhoc_hdr.Iadh_seq;
                    Int32 lineNo = _inventoryDAL.Get_last_AdhocDet_LineNo(seqNo, Ref_no) + 1;
                    if (adhoc_Det_Confirmed != null)
                    {
                        foreach (InventoryAdhocDetail det in adhoc_Det_Confirmed)
                        {
                            det.Iadd_line = lineNo++;
                            det.Iadd_ref_no = Ref_no;
                            det.Iadd_seq = seqNo;
                            effect = effect + _inventoryDAL.Save_AdhocDetail(det); //save approve detail line
                        }
                    }
                    if (adhoc_hdr.Iadh_stus == 4)
                    {
                        List<InventoryAdhocDetail> adhod_detList = _inventoryDAL.GetAdhocdet_List(Ref_no);
                        foreach (InventoryAdhocDetail det in adhod_detList)
                        {
                            try
                            {
                                Boolean EF = _inventoryDAL.Update_serialID_INS_AVAILABLE(adhoc_hdr.Iadh_com, adhoc_hdr.Iadh_loc, det.Iadd_claim_itm, det.Iadd_anal4, 1);
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                    _inventoryDAL.ConnectionClose();

                    tr.Complete();
                }
            }
            catch (TransactionAbortedException txnEx)
            {
                effect = -2;
                return effect;
            }
            catch (Exception ex)
            {
                effect = -1;
                return effect;
            }

            return effect;
        }

        public Int32 Save_FGAP_confirmation(InventoryAdhocHeader adhoc_hdr, List<InventoryAdhocDetail> adhoc_Det_Confirmed, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, List<HpTransaction> transactList, MasterAutoNumber receipAuto, MasterAutoNumber tranxAuto, string loc, string pc, out string receiptNoOut)
        {
            Int32 effect = 0;
            #region Process
            if (receiptHeaderList == null || receipItemList == null || transactList == null)
            {
                receiptNoOut = string.Empty;
                return 0;
            }
            try
            {
                #region
                using (TransactionScope _tr = new TransactionScope())
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();

                    _salesDAL = new SalesDAL();
                    _salesDAL.ConnectionOpen();

                    _FMSinventoryDAL = new FMS_InventoryDAL();
                    _FMSinventoryDAL.ConnectionOpen();

                    //-------------------------------------
                    string _receiptNo = "";
                    foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        _receiptNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _receiptNo;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                        foreach (HpTransaction tr in transactList)
                        {
                            if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                            {
                                tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                            }
                            // effect = _salesDAL.Save_HpTransaction(tr);
                        }

                        Int32 line = 0;
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                                // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    }
                    //save receipt detali list
                    foreach (RecieptItem rec_itm in receipItemList)
                    {
                        _salesDAL.SaveReceiptItem(rec_itm);//save receipt item
                    }
                    //save transactions
                    foreach (HpTransaction tr in transactList)
                    {
                        //create MST_AUTO number for transaction table (for each tx object)
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                        string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                        tr.Hpt_ref_no = _cusNo;
                        //assign auto number to the tx obj.
                        tr.Hpt_seq = _inventoryDAL.GetSerialID();
                        _salesDAL.Save_HpTransaction(tr);
                    }

                    //-----------------confirmation--------------------
                    effect = Save_Adhoc_Confirm(adhoc_hdr, adhoc_Det_Confirmed);
                    if (effect < 0)
                    {
                        throw new System.Exception("Confirmation fail exception");
                    }
                    //-------------------------------------
                    _inventoryDAL.ConnectionClose();
                    _salesDAL.ConnectionClose();
                    _FMSinventoryDAL.ConnectionClose();
                    _tr.Complete();
                }
                receiptNoOut = receiptHeaderList[0].Sar_receipt_no;

                return 1;
                #endregion
            }
            catch (Exception ex)
            {
                receiptNoOut = string.Empty;
                return -1;
            }
            #endregion
        }

        #endregion FixAsset Or Adhoc Request And Approve

        public MasterItemBlock GetBlockedItem(string _company, string _profit, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBlockedItem(_company, _profit, _item);
        }

        public DataTable GetLastNoSeqPageDetails(DateTime _asAtDate, string _Loc)
        {   // Sanjeewa
            DataTable _dt = null;
            //  _generalDAL = new GeneralDAL();
            //  MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();

            //if (_masterComp.MC_IS_SCM2_FMS == 1)
            //    _dt = _inventoryDAL.GetLastNoSeqPageDetails(_asAtDate, _Loc);
            //else
            _dt = _FMSinventoryDAL.GetLastNoSeqPageDetails(_asAtDate, _Loc);

            return _dt;

        }

        public DataTable GetGVPrintDetails(string _com, string _pc, int _book, int _fpage, int _tpage)
        {   // Sanjeewa
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGVPrintDetails(_com, _pc, _book, _fpage, _tpage);
        }

        #region Delivery Order
        //public Int16 DeliveryOrder_Auto(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string documentNo, InventoryHeader _inventoryMovementHeaderGRN, List<ReptPickSerials> _reptPickSerialsGRN, List<ReptPickSerialsSub> _reptPickSerialsSubGRN, MasterAutoNumber _masterAutoNumberGRN, out string documentNoGRN)
        //{
        //    //string documentNo = null;
        //    using (TransactionScope _tr = new TransactionScope())
        //    {
        //        _inventoryRepDAL = new ReptCommonDAL();
        //        _inventoryRepDAL.ConnectionOpen();
        //        _inventoryDAL = new InventoryDAL();
        //        _inventoryDAL.ConnectionOpen();
        //        _ScmCommonDAL = new SCMCommonDAL();
        //        _ScmCommonDAL.ConnectionOpen();

        //        List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
        //        PickSerials = _reptPickSerials;

        //        List<ReptPickSerials> _cons = new List<ReptPickSerials>();
        //        List<ReptPickSerials> _notcons = new List<ReptPickSerials>();

        //        DataTable _newSeqNosTable = new DataTable();
        //        _newSeqNosTable.Columns.Add("DocType", typeof(string));
        //        _newSeqNosTable.Columns.Add("SeqNo", typeof(int));

        //        #region Consignment stock transfer to normal stock
        //        var _consSupp = from _ListConsSupp in _reptPickSerials
        //                        where _ListConsSupp.Tus_itm_stus == "CONS"
        //                        group _ListConsSupp by new { _ListConsSupp.Tus_orig_supp } into list
        //                        select new { supp = list.Key.Tus_orig_supp };
        //        foreach (var listsSupp in _consSupp)
        //        {
        //            InventoryHeader ConsPickHeader = new InventoryHeader();
        //            ReptPickSerials ConsPickSerials = new ReptPickSerials();

        //            _cons.Clear();

        //            #region Fill Consignment Header Object
        //            ConsPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
        //            ConsPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
        //            ConsPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
        //            ConsPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
        //            ConsPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
        //            ConsPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
        //            ConsPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
        //            ConsPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
        //            ConsPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
        //            ConsPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
        //            ConsPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
        //            ConsPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
        //            ConsPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
        //            //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
        //            ConsPickHeader.Ith_bus_entity = listsSupp.supp;
        //            ConsPickHeader.Ith_cate_tp = "NOR";
        //            ConsPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
        //            ConsPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
        //            ConsPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
        //            ConsPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
        //            ConsPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
        //            ConsPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
        //            ConsPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
        //            ConsPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
        //            ConsPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
        //            ConsPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
        //            //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
        //            ConsPickHeader.Ith_direct = false;
        //            ConsPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
        //            ConsPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString(); // ADJ Seq No
        //            //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
        //            ConsPickHeader.Ith_doc_tp = "ADJ";
        //            ConsPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
        //            ConsPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
        //            ConsPickHeader.Ith_entry_tp = _inventoryMovementHeader.Ith_entry_tp;
        //            ConsPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
        //            ConsPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
        //            ConsPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
        //            ConsPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
        //            ConsPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
        //            ConsPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
        //            ConsPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
        //            ConsPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
        //            ConsPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
        //            ConsPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
        //            ConsPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
        //            ConsPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
        //            ConsPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
        //            ConsPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
        //            ConsPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
        //            ConsPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
        //            ConsPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
        //            ConsPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // ADJ Seq No
        //            ConsPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
        //            ConsPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
        //            ConsPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
        //            ConsPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
        //            ConsPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
        //            _newSeqNosTable.Rows.Add("ADJ", ConsPickHeader.Ith_seq_no);
        //            #endregion

        //            var _consPickSerials = from _ListConsPickSerials in _reptPickSerials
        //                                   where _ListConsPickSerials.Tus_itm_stus == "CONS" && _ListConsPickSerials.Tus_orig_supp == listsSupp.supp
        //                                   select new ReptPickSerials
        //                                   {
        //                                       #region Seelct * From ReptPickSerials
        //                                       Tus_batch_line = _ListConsPickSerials.Tus_batch_line,
        //                                       Tus_bin = _ListConsPickSerials.Tus_bin,
        //                                       Tus_com = _ListConsPickSerials.Tus_com,
        //                                       Tus_cre_by = _ListConsPickSerials.Tus_cre_by,
        //                                       Tus_cre_dt = _ListConsPickSerials.Tus_cre_dt,
        //                                       Tus_cross_batchline = _ListConsPickSerials.Tus_cross_batchline,
        //                                       Tus_cross_itemline = _ListConsPickSerials.Tus_cross_itemline,
        //                                       Tus_cross_seqno = _ListConsPickSerials.Tus_cross_seqno,
        //                                       Tus_cross_serline = _ListConsPickSerials.Tus_cross_serline,
        //                                       Tus_doc_dt = _ListConsPickSerials.Tus_doc_dt,
        //                                       Tus_doc_no = ConsPickHeader.Ith_seq_no.ToString(), //Doc No
        //                                       Tus_exist_grncom = _ListConsPickSerials.Tus_exist_grncom,
        //                                       Tus_exist_grndt = _ListConsPickSerials.Tus_exist_grndt,
        //                                       Tus_exist_grnno = _ListConsPickSerials.Tus_exist_grnno,
        //                                       Tus_exist_supp = _ListConsPickSerials.Tus_exist_supp,
        //                                       Tus_itm_brand = _ListConsPickSerials.Tus_itm_brand,
        //                                       Tus_itm_cd = _ListConsPickSerials.Tus_itm_cd,
        //                                       Tus_itm_desc = _ListConsPickSerials.Tus_itm_desc,
        //                                       Tus_itm_line = _ListConsPickSerials.Tus_itm_line,
        //                                       Tus_itm_model = _ListConsPickSerials.Tus_itm_model,
        //                                       Tus_itm_stus = _ListConsPickSerials.Tus_itm_stus,
        //                                       Tus_loc = _ListConsPickSerials.Tus_loc,
        //                                       Tus_orig_grncom = _ListConsPickSerials.Tus_orig_grncom,
        //                                       Tus_orig_grndt = _ListConsPickSerials.Tus_orig_grndt,
        //                                       Tus_orig_grnno = _ListConsPickSerials.Tus_orig_grnno,
        //                                       Tus_orig_supp = _ListConsPickSerials.Tus_orig_supp,
        //                                       Tus_out_date = _ListConsPickSerials.Tus_out_date,
        //                                       Tus_qty = _ListConsPickSerials.Tus_qty,
        //                                       Tus_seq_no = ConsPickHeader.Ith_seq_no, //Seq No
        //                                       Tus_serial_id = _ListConsPickSerials.Tus_serial_id,
        //                                       Tus_ser_1 = _ListConsPickSerials.Tus_ser_1,
        //                                       Tus_ser_2 = _ListConsPickSerials.Tus_ser_2,
        //                                       Tus_ser_3 = _ListConsPickSerials.Tus_ser_3,
        //                                       Tus_ser_4 = _ListConsPickSerials.Tus_ser_4,
        //                                       Tus_ser_id = _ListConsPickSerials.Tus_ser_id,
        //                                       Tus_ser_line = _ListConsPickSerials.Tus_ser_line,
        //                                       Tus_session_id = _ListConsPickSerials.Tus_session_id,
        //                                       Tus_unit_cost = _ListConsPickSerials.Tus_unit_cost,
        //                                       Tus_unit_price = _ListConsPickSerials.Tus_unit_price,
        //                                       Tus_usrseq_no = ConsPickHeader.Ith_seq_no, //Scan Seq No
        //                                       Tus_warr_no = _ListConsPickSerials.Tus_warr_no,
        //                                       Tus_new_status = _ListConsPickSerials.Tus_new_status,
        //                                       Tus_new_remarks = _ListConsPickSerials.Tus_new_remarks,
        //                                       Tus_warr_period = _ListConsPickSerials.Tus_warr_period
        //                                       #endregion
        //                                   };

        //            foreach (var listsConsPickSerials in _consPickSerials)
        //            {
        //                #region Fill Consignment Serials Object
        //                ConsPickSerials.Tus_batch_line = listsConsPickSerials.Tus_batch_line;
        //                ConsPickSerials.Tus_bin = listsConsPickSerials.Tus_bin;
        //                ConsPickSerials.Tus_com = listsConsPickSerials.Tus_com;
        //                ConsPickSerials.Tus_cre_by = listsConsPickSerials.Tus_cre_by;
        //                ConsPickSerials.Tus_cre_dt = listsConsPickSerials.Tus_cre_dt;
        //                ConsPickSerials.Tus_cross_batchline = listsConsPickSerials.Tus_cross_batchline;
        //                ConsPickSerials.Tus_cross_itemline = listsConsPickSerials.Tus_cross_itemline;
        //                ConsPickSerials.Tus_cross_seqno = listsConsPickSerials.Tus_cross_seqno;
        //                ConsPickSerials.Tus_cross_serline = listsConsPickSerials.Tus_cross_serline;
        //                ConsPickSerials.Tus_doc_dt = listsConsPickSerials.Tus_doc_dt;
        //                ConsPickSerials.Tus_doc_no = listsConsPickSerials.Tus_doc_no;
        //                ConsPickSerials.Tus_exist_grncom = listsConsPickSerials.Tus_exist_grncom;
        //                ConsPickSerials.Tus_exist_grndt = listsConsPickSerials.Tus_exist_grndt;
        //                ConsPickSerials.Tus_exist_grnno = listsConsPickSerials.Tus_exist_grnno;
        //                ConsPickSerials.Tus_exist_supp = listsConsPickSerials.Tus_exist_supp;
        //                ConsPickSerials.Tus_itm_brand = listsConsPickSerials.Tus_itm_brand;
        //                ConsPickSerials.Tus_itm_cd = listsConsPickSerials.Tus_itm_cd;
        //                ConsPickSerials.Tus_itm_desc = listsConsPickSerials.Tus_itm_desc;
        //                ConsPickSerials.Tus_itm_line = listsConsPickSerials.Tus_itm_line;
        //                ConsPickSerials.Tus_itm_model = listsConsPickSerials.Tus_itm_model;
        //                ConsPickSerials.Tus_itm_stus = listsConsPickSerials.Tus_itm_stus; //CONS
        //                ConsPickSerials.Tus_loc = listsConsPickSerials.Tus_loc;
        //                ConsPickSerials.Tus_orig_grncom = listsConsPickSerials.Tus_orig_grncom;
        //                ConsPickSerials.Tus_orig_grndt = listsConsPickSerials.Tus_orig_grndt;
        //                ConsPickSerials.Tus_orig_grnno = listsConsPickSerials.Tus_orig_grnno;
        //                ConsPickSerials.Tus_orig_supp = listsConsPickSerials.Tus_orig_supp;
        //                ConsPickSerials.Tus_out_date = listsConsPickSerials.Tus_out_date;
        //                ConsPickSerials.Tus_qty = listsConsPickSerials.Tus_qty;
        //                ConsPickSerials.Tus_seq_no = listsConsPickSerials.Tus_seq_no;
        //                ConsPickSerials.Tus_serial_id = listsConsPickSerials.Tus_serial_id;
        //                ConsPickSerials.Tus_ser_1 = listsConsPickSerials.Tus_ser_1;
        //                ConsPickSerials.Tus_ser_2 = listsConsPickSerials.Tus_ser_2;
        //                ConsPickSerials.Tus_ser_3 = listsConsPickSerials.Tus_ser_3;
        //                ConsPickSerials.Tus_ser_4 = listsConsPickSerials.Tus_ser_4;
        //                ConsPickSerials.Tus_ser_id = listsConsPickSerials.Tus_ser_id;
        //                ConsPickSerials.Tus_ser_line = listsConsPickSerials.Tus_ser_line;
        //                ConsPickSerials.Tus_session_id = listsConsPickSerials.Tus_session_id;
        //                ConsPickSerials.Tus_unit_cost = listsConsPickSerials.Tus_unit_cost;
        //                ConsPickSerials.Tus_unit_price = listsConsPickSerials.Tus_unit_price;
        //                ConsPickSerials.Tus_usrseq_no = listsConsPickSerials.Tus_usrseq_no;
        //                ConsPickSerials.Tus_warr_no = listsConsPickSerials.Tus_warr_no;
        //                ConsPickSerials.Tus_new_status = listsConsPickSerials.Tus_new_status;
        //                ConsPickSerials.Tus_new_remarks = listsConsPickSerials.Tus_new_remarks;
        //                ConsPickSerials.Tus_warr_period = listsConsPickSerials.Tus_warr_period;
        //                #endregion
        //                _cons.Add(ConsPickSerials);
        //            }

        //            //Save ADJ -
        //            SaveOutwardScanSerial(ConsPickHeader, _cons, null);

        //            //----- Start to create GRN ------
        //            InventoryHeader GRNPickHeader = new InventoryHeader();
        //            List<ReptPickSerials> GRNPickSerials = new List<ReptPickSerials>();

        //            PurchaseOrder POHeader = new PurchaseOrder();
        //            List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();

        //            #region Fill GRN Header Object
        //            GRNPickHeader.Ith_acc_no = _inventoryMovementHeader.Ith_acc_no;
        //            GRNPickHeader.Ith_anal_1 = _inventoryMovementHeader.Ith_anal_1;
        //            GRNPickHeader.Ith_anal_10 = _inventoryMovementHeader.Ith_anal_10;
        //            GRNPickHeader.Ith_anal_11 = _inventoryMovementHeader.Ith_anal_11;
        //            GRNPickHeader.Ith_anal_12 = _inventoryMovementHeader.Ith_anal_12;
        //            GRNPickHeader.Ith_anal_2 = _inventoryMovementHeader.Ith_anal_2;
        //            GRNPickHeader.Ith_anal_3 = _inventoryMovementHeader.Ith_anal_3;
        //            GRNPickHeader.Ith_anal_4 = _inventoryMovementHeader.Ith_anal_4;
        //            GRNPickHeader.Ith_anal_5 = _inventoryMovementHeader.Ith_anal_5;
        //            GRNPickHeader.Ith_anal_6 = _inventoryMovementHeader.Ith_anal_6;
        //            GRNPickHeader.Ith_anal_7 = _inventoryMovementHeader.Ith_anal_7;
        //            GRNPickHeader.Ith_anal_8 = _inventoryMovementHeader.Ith_anal_8;
        //            GRNPickHeader.Ith_anal_9 = _inventoryMovementHeader.Ith_anal_9;
        //            //ConsPickHeader.Ith_bus_entity = _inventoryMovementHeader.Ith_bus_entity;
        //            GRNPickHeader.Ith_bus_entity = listsSupp.supp;
        //            GRNPickHeader.Ith_cate_tp = "LOCAL";
        //            GRNPickHeader.Ith_channel = _inventoryMovementHeader.Ith_channel;
        //            GRNPickHeader.Ith_com = _inventoryMovementHeader.Ith_com;
        //            GRNPickHeader.Ith_com_docno = _inventoryMovementHeader.Ith_com_docno;
        //            GRNPickHeader.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
        //            GRNPickHeader.Ith_cre_when = _inventoryMovementHeader.Ith_cre_when;
        //            GRNPickHeader.Ith_del_add1 = _inventoryMovementHeader.Ith_del_add1;
        //            GRNPickHeader.Ith_del_add2 = _inventoryMovementHeader.Ith_del_add2;
        //            GRNPickHeader.Ith_del_code = _inventoryMovementHeader.Ith_del_code;
        //            GRNPickHeader.Ith_del_party = _inventoryMovementHeader.Ith_del_party;
        //            GRNPickHeader.Ith_del_town = _inventoryMovementHeader.Ith_del_town;
        //            //ConsPickHeader.Ith_direct = _inventoryMovementHeader.Ith_direct;
        //            GRNPickHeader.Ith_direct = true;
        //            GRNPickHeader.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
        //            GRNPickHeader.Ith_doc_no = _inventoryDAL.GetSerialID().ToString();
        //            //ConsPickHeader.Ith_doc_tp = _inventoryMovementHeader.Ith_doc_tp;
        //            GRNPickHeader.Ith_doc_tp = "GRN";
        //            GRNPickHeader.Ith_doc_year = _inventoryMovementHeader.Ith_doc_year;
        //            GRNPickHeader.Ith_entry_no = _inventoryMovementHeader.Ith_entry_no;
        //            GRNPickHeader.Ith_entry_tp = _inventoryMovementHeader.Ith_entry_tp;
        //            GRNPickHeader.Ith_git_close = _inventoryMovementHeader.Ith_git_close;
        //            GRNPickHeader.Ith_git_close_date = _inventoryMovementHeader.Ith_git_close_date;
        //            GRNPickHeader.Ith_git_close_doc = _inventoryMovementHeader.Ith_git_close_doc;
        //            GRNPickHeader.Ith_isprinted = _inventoryMovementHeader.Ith_isprinted;
        //            GRNPickHeader.Ith_is_manual = _inventoryMovementHeader.Ith_is_manual;
        //            GRNPickHeader.Ith_job_no = _inventoryMovementHeader.Ith_job_no;
        //            GRNPickHeader.Ith_loading_point = _inventoryMovementHeader.Ith_loading_point;
        //            GRNPickHeader.Ith_loading_user = _inventoryMovementHeader.Ith_loading_user;
        //            GRNPickHeader.Ith_loc = _inventoryMovementHeader.Ith_loc;
        //            GRNPickHeader.Ith_manual_ref = _inventoryMovementHeader.Ith_manual_ref;
        //            GRNPickHeader.Ith_mod_by = _inventoryMovementHeader.Ith_mod_by;
        //            GRNPickHeader.Ith_mod_when = _inventoryMovementHeader.Ith_mod_when;
        //            GRNPickHeader.Ith_noofcopies = _inventoryMovementHeader.Ith_noofcopies;
        //            GRNPickHeader.Ith_oth_docno = _inventoryMovementHeader.Ith_oth_docno;
        //            GRNPickHeader.Ith_oth_loc = _inventoryMovementHeader.Ith_oth_loc;
        //            GRNPickHeader.Ith_remarks = _inventoryMovementHeader.Ith_remarks;
        //            GRNPickHeader.Ith_sbu = _inventoryMovementHeader.Ith_sbu;
        //            GRNPickHeader.Ith_seq_no = _inventoryDAL.GetSerialID(); // GRN Seq No
        //            GRNPickHeader.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
        //            GRNPickHeader.Ith_stus = _inventoryMovementHeader.Ith_stus;
        //            GRNPickHeader.Ith_sub_docno = _inventoryMovementHeader.Ith_sub_docno;
        //            GRNPickHeader.Ith_sub_tp = _inventoryMovementHeader.Ith_sub_tp;
        //            GRNPickHeader.Ith_vehi_no = _inventoryMovementHeader.Ith_vehi_no;
        //            _newSeqNosTable.Rows.Add("GRN", GRNPickHeader.Ith_seq_no);
        //            #endregion

        //            #region Fill PO Header Object
        //            POHeader.Poh_com = _inventoryMovementHeader.Ith_com;
        //            POHeader.Poh_contain_kit = false; // ???
        //            POHeader.Poh_cre_period = "N/A"; // ??
        //            POHeader.Poh_cur_cd = "LKR";
        //            POHeader.Poh_dis_amt = 0;
        //            POHeader.Poh_dis_rt = 0;
        //            POHeader.Poh_doc_no = GRNPickHeader.Ith_seq_no.ToString();
        //            POHeader.Poh_dt = _inventoryMovementHeader.Ith_doc_date;
        //            POHeader.Poh_ex_rt = 1;
        //            POHeader.Poh_frm_mon = 0;
        //            POHeader.Poh_frm_yer = 0;
        //            POHeader.Poh_job_no = "N/A";
        //            POHeader.Poh_ope = "N/A"; // ???
        //            POHeader.Poh_oth_tot = 0;
        //            POHeader.Poh_pay_term = null;
        //            POHeader.Poh_port_of_orig = "N/A";
        //            POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
        //            POHeader.Poh_profit_cd = _inventoryMovementHeader.Ith_pc;
        //            POHeader.Poh_ref = GRNPickHeader.Ith_seq_no.ToString();
        //            POHeader.Poh_remarks = "AUTO GENERATED";
        //            POHeader.Poh_reprint = false;
        //            POHeader.Poh_sent_add = string.Empty;
        //            POHeader.Poh_sent_by = string.Empty;
        //            POHeader.Poh_sent_to_vendor = false;
        //            POHeader.Poh_sent_via = string.Empty;
        //            POHeader.Poh_seq_no = GRNPickHeader.Ith_seq_no;
        //            POHeader.Poh_stus = "A";
        //            POHeader.Poh_sub_tot = 0;
        //            POHeader.Poh_sub_tp = "N"; //Normal
        //            POHeader.Poh_supp = listsSupp.supp;
        //            POHeader.Poh_tax_chg = false;
        //            POHeader.Poh_tax_tot = 0;
        //            POHeader.Poh_to_mon = 0;
        //            POHeader.Poh_to_yer = 0;
        //            POHeader.Poh_to_yer = 0;
        //            POHeader.Poh_tot = 0;
        //            POHeader.Poh_tp = "L"; //Local Purchase
        //            POHeader.Poh_trans_term = string.Empty;
        //            _newSeqNosTable.Rows.Add("PO", POHeader.Poh_seq_no);
        //            #endregion

        //            GRNPickSerials = _cons;

        //            foreach (ReptPickSerials p in GRNPickSerials)
        //            {
        //                p.Tus_usrseq_no = GRNPickHeader.Ith_seq_no;
        //                p.Tus_seq_no = GRNPickHeader.Ith_seq_no;
        //                p.Tus_doc_no = GRNPickHeader.Ith_seq_no.ToString();
        //                p.Tus_itm_stus = "GOD";
        //                p.Tus_base_doc_no = GRNPickHeader.Ith_seq_no.ToString();
        //                p.Tus_base_itm_line = 0;
        //            }

        //            Int16 _poLineNo = 1;
        //            var _grnPickSerials = from p in GRNPickSerials
        //                                  where p.Tus_itm_stus == "GOD"
        //                                  group p by new { p.Tus_itm_cd, p.Tus_unit_price, p.Tus_base_doc_no, p.Tus_base_itm_line } into list
        //                                  select new { itemcode = list.Key.Tus_itm_cd, unitprice = list.Key.Tus_unit_price, pono = list.Key.Tus_base_doc_no, polineno = list.Key.Tus_base_itm_line, poqty = list.Sum(p => p.Tus_qty) };
        //            foreach (var _p in _grnPickSerials)
        //            {
        //                foreach (ReptPickSerials p in PickSerials)
        //                {
        //                    if (_p.itemcode == p.Tus_itm_cd || _p.unitprice == p.Tus_unit_price)
        //                    {
        //                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
        //                        p.Tus_base_itm_line = _poLineNo;

        //                        #region Fill PO Items Object
        //                        POItem.Pod_act_unit_price = p.Tus_unit_price;
        //                        POItem.Pod_dis_amt = 0;
        //                        POItem.Pod_dis_rt = 0;
        //                        POItem.Pod_grn_bal = 0;
        //                        POItem.Pod_item_desc = p.Tus_itm_brand;
        //                        POItem.Pod_itm_cd = p.Tus_itm_cd;
        //                        POItem.Pod_itm_stus = p.Tus_itm_stus;
        //                        POItem.Pod_itm_tp = "M";
        //                        POItem.Pod_kit_itm_cd = "N/A";
        //                        POItem.Pod_kit_line_no = 0;
        //                        POItem.Pod_lc_bal = 0;
        //                        POItem.Pod_line_amt = _p.unitprice * _p.poqty;
        //                        POItem.Pod_line_no = _poLineNo;
        //                        POItem.Pod_line_tax = 0;
        //                        POItem.Pod_line_val = _p.unitprice * _p.poqty;
        //                        POItem.Pod_nbt = 0;
        //                        POItem.Pod_nbt_before = 0;
        //                        POItem.Pod_pi_bal = 0;
        //                        POItem.Pod_qty = _p.poqty;
        //                        POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
        //                        POItem.Pod_seq_no = POHeader.Poh_seq_no;
        //                        POItem.Pod_si_bal = 0;
        //                        POItem.Pod_tot_tax_before = 0;
        //                        POItem.Pod_unit_price = _p.unitprice;
        //                        POItem.Pod_uom = "NOS";
        //                        POItem.Pod_vat = 0;
        //                        POItem.Pod_vat_before = 0;
        //                        #endregion

        //                        POItems.Add(POItem);

        //                        _poLineNo += 1;
        //                    }
        //                }

        //            }

        //            //Save GRN
        //            SaveInwardScanSerial(GRNPickHeader, GRNPickSerials, null);
        //            //Save PO
        //            _inventoryDAL.SaveNewPO(POHeader);
        //            foreach (PurchaseOrderDetail _POItems in POItems)
        //            {
        //                _inventoryDAL.SaveNewPOItem(_POItems);
        //            }
        //            //_inventoryDAL.SaveNewPODel(null);

        //            //Get Save GRN Serials and update cross inward document as GRN No
        //            #region Update scan serial list cross references
        //            List<InventorySerialN> _saveGRNSers = new List<InventorySerialN>();
        //            _saveGRNSers = _inventoryDAL.GetIntSerList(GRNPickHeader.Ith_seq_no, string.Empty);

        //            foreach (ReptPickSerials p in PickSerials)
        //            {
        //                foreach (InventorySerialN q in _saveGRNSers)
        //                {
        //                    if (p.Tus_itm_cd == q.Ins_itm_cd || p.Tus_ser_id == q.Ins_ser_id)
        //                    {
        //                        p.Tus_unit_cost = q.Ins_unit_cost;
        //                        p.Tus_itm_stus = "GOD";
        //                        p.Tus_doc_no = q.Ins_seq_no.ToString();
        //                        p.Tus_seq_no = q.Ins_seq_no;
        //                        p.Tus_itm_line = q.Ins_itm_line;
        //                        p.Tus_batch_line = q.Ins_batch_line;
        //                        p.Tus_ser_line = q.Ins_ser_line;
        //                    }
        //                }
        //            }
        //            #endregion

        //        }

        //        #endregion

        //        //var _tbitems =
        //        //from _pickSerials in _reptPickSerials
        //        //group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
        //        //select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

        //        Int16 effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
        //        effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out documentNo);

        //        #region update Consignment related document auto nos
        //        MasterAutoNumber _AutoNo = new MasterAutoNumber();
        //        int _e = 0;
        //        if (_newSeqNosTable.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < _newSeqNosTable.Rows.Count; i++)
        //            {
        //                if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "ADJ")
        //                {
        //                    _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
        //                    _AutoNo.Aut_moduleid = "ADJ";
        //                    _AutoNo.Aut_direction = null;
        //                    _AutoNo.Aut_start_char = "ADJ";
        //                    _AutoNo.Aut_cate_tp = "LOC";
        //                    //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
        //                    _AutoNo.Aut_year = null;

        //                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                    string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
        //                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                }
        //                else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "GRN")
        //                {
        //                    _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
        //                    _AutoNo.Aut_moduleid = "GRN";
        //                    _AutoNo.Aut_direction = null;
        //                    _AutoNo.Aut_start_char = "GRN";
        //                    _AutoNo.Aut_cate_tp = "LOC";
        //                    //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
        //                    _AutoNo.Aut_year = null;

        //                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                    string _documentNo = _inventoryMovementHeader.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
        //                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                }
        //                else if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "PO")
        //                {
        //                    _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
        //                    _AutoNo.Aut_moduleid = "PO_LOCAL";
        //                    _AutoNo.Aut_direction = null;
        //                    _AutoNo.Aut_start_char = "PO";
        //                    _AutoNo.Aut_cate_tp = "COM";
        //                    _AutoNo.Aut_year = null;

        //                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                    string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
        //                    _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                }
        //            }
        //        }
        //        #endregion

        //        #region Update Invoice Qty
        //        var _invoice =
        //        from _pickSerials in _reptPickSerials
        //        group _pickSerials by new { _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line } into itm
        //        select new { invoiceno = itm.Key.Tus_base_doc_no, lineno = itm.Key.Tus_base_itm_line, itemqty = itm.Sum(p => p.Tus_qty) };

        //        foreach (var invoiceItems in _invoice)
        //        {
        //            _inventoryDAL.UpdateInvoicveDOQty(invoiceItems.invoiceno.ToString(), Convert.ToInt16(invoiceItems.lineno.ToString()), Convert.ToDecimal(invoiceItems.itemqty.ToString()));
        //        }

        //        _inventoryDAL.UpdateInvoiceDOStatus(_inventoryMovementHeader.Ith_oth_docno);

        //        #endregion

        //        _inventoryRepDAL.ConnectionClose();
        //        _inventoryDAL.ConnectionClose();
        //        _ScmCommonDAL.ConnectionClose();
        //        _tr.Complete();

        //        GRN(_inventoryMovementHeaderGRN, _reptPickSerialsGRN, _reptPickSerialsSubGRN, _masterAutoNumberGRN, out documentNoGRN);
        //        return effect;
        //    }
        //}
        #endregion

        public InventorySerialN GetDeliveredSerialForItem(string _company, string _invoiceno, string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDeliveredSerialForItem(_company, _invoiceno, _item, _serial);
        }

        public DataTable GetMRNItem(string _company, string _loc, string _itm)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMRNItem(_company, _loc, _itm);
        }

        public Int32 CheckAvailableSerial(string _company, string _location, string _item, string _description, string _brand, string _model, string _serial, string _warranty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckAvailableSerial(_company, _location, _item, _description, _brand, _model, _serial, _warranty);
        }

        public DataTable GetAvailableSerialShortDetail(string _company, string _location, string _item, string _description, string _brand, string _model, string _serial, string _warranty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailableSerialShortDetail(_company, _location, _item, _description, _brand, _model, _serial, _warranty);
        }

        public List<ReptPickSerials> GetNonSerializedItemRandomly(string _company, string _location, string _item, string _status, decimal _qty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetNonSerializedItemRandomly(_company, _location, _item, _status, _qty);
        }

        public MasterItemWarrantyPeriod GetItemWarrantyDetail(string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemWarrantyDetail(_item, _status);
        }

        public DataTable GetTemSerStatus(string _com, string _loc, string _item, int _seq)
        {
            ReptCommonDAL _repDal = new ReptCommonDAL(); ;
            return _repDal.GetTemSerStatus(_com, _loc, _item, _seq);
        }

        public DataTable GetTemSerByCodeStatus(string _com, string _loc, string _item, string _stus, int _seq)
        {
            ReptCommonDAL _repDal = new ReptCommonDAL(); ;
            return _repDal.GetTemSerByCodeStatus(_com, _loc, _item, _stus, _seq);
        }

        public int UpdateUnitCost(string _com, string _loc, string _item, string _stus, string _ser, decimal _cost, int _seq)
        {
            int result = 0;
            ReptCommonDAL _repDal = new ReptCommonDAL();
            _repDal.ConnectionOpen();
            result = _repDal.UpdateUnitCost(_com, _loc, _item, _stus, _ser, _cost, _seq);
            _repDal.ConnectionClose();
            return result;
        }

        public DataTable GetFIFONotFollowedDetails(string _user, string _brand, string _model, string _itemcode, string _Itemstatus,
            string _itemcat1, string _itemcat2, string _itemcat3, DateTime _asatdate, string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetFIFONotFollowedDetails(_user, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _asatdate, _com, _loc);
        }







        public DataTable GetExchangeDetails(string _DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetExchangeDetails(_DocNo);
        }

        public DataTable GetFATDetails(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetFATDetails(_fromDate, _toDate, _User, _com, _pc);
        }



        public string getItemDescription(string _itemcode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemDescription(_itemcode);
        }











        public DataTable GetSerialBalance_Asat(DateTime _asatDate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialBalance_Asat(_asatDate);
        }







        public DataTable GetCompeleteItemfromAssambleItem(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCompeleteItemfromAssambleItem(_item);
        }
        public DataTable GetItemfromAssambleItem(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemfromAssambleItem(_item);
        }

        public DataTable GetModuleStatus(string _module)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetModuleStatus(_module);
        }

        public DataTable GetDINList(string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDINList("DIN", _com, _loc);
        }

        public DataTable GetItemByAll(string _brand, string _cat1, string _cat2, string _cat3)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemByAll(_brand, _cat1, _cat2, _cat3);
        }

        public DataTable GetSerialByItem(string _brand, string _cat1, string _cat2, string _cat3, string _itm)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialByItem(_brand, _cat1, _cat2, _cat3, _itm);
        }

        public DataTable GetLOC_from_Hierachy(string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLOC_from_Hierachy(com, channel, subChannel, area, region, zone, pc_code);
        }

        #region

        public InventoryHeader Get_Int_Hdr(string DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Hdr(DocNo);
        }

        public List<ReptPickSerials> Get_Int_Ser(string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Ser(_docNo);
        }

        public DataTable Get_Int_Itm(string DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Itm(DocNo);
        }

        public DataTable Get_SerialOfDoc(string docNo, string itemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_SerialOfDoc(docNo, itemCode);
        }

        #endregion

        #region Invalid Transaction Correction

        //Shani on 14-11-2012
        //public Int32 SaveAOD_OutWardEntry(string _fromCompany, string _fromProfit, string _toCompany, string _requestNo, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, InvoiceHeader _invoiceHeader, MasterAutoNumber _invoiceAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _genMessage, out string _genSalesDocument, out string _genInventoryDocument, bool _isGRAN, bool _isGRNFromDIN)
        public Int32 SaveAOD_OutWardEntry(string _fromCompany, string _fromProfit, string _toCompany, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, bool _isOtherLocAutoIn, out string _genMessage, out string _genInventoryDocument, out string lastOutDocNo, out string lastInDocNo)
        {
            //add by shani on 27-11-2012
            lastOutDocNo = string.Empty;
            lastInDocNo = string.Empty;

            string _salesDocument = string.Empty;
            string _inventoryDocument = string.Empty;

            Int32 _effect = 0;
            // string _tempSalesDoc = "";
            string _tempInventoryDoc = "";
            string _genInvDoc = "";
            // string _genSalDoc = "";
            string _message = string.Empty;
            string _trlocation = _inventoryHeader.Ith_loc;

            //using (TransactionScope _tr = new TransactionScope())
            //{
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _inventoryDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            _ScmCommonDAL = new SCMCommonDAL();
            _ScmCommonDAL.ConnectionOpen();

            var _document = (from _doc in _reptPickSerials
                             select _doc.Tus_new_remarks).Distinct();

            foreach (string _documentType in _document)
            {
                //Get All Document Types
                var _serialList = (from _doc in _reptPickSerials
                                   where _doc.Tus_new_remarks == _documentType
                                   select _doc).ToList();

                //Get Sequance No and Assign it to inventory header
                Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                _inventoryHeader.Ith_seq_no = UserSeqNo;
                _inventoryHeader.Ith_doc_no = Convert.ToString(UserSeqNo);

                if (_documentType == "AOD-OUT")
                {
                    #region AOD Region
                    // MasterLocation _loc = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_oth_loc);
                    // bool _isOtherLocAutoIn = false;
                    // if (_loc.Ml_auto_ain) _isOtherLocAutoIn = true;
                    string _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);

                    _inventoryHeader.Ith_doc_tp = "AOD";

                    _inventoryAuto.Aut_moduleid = "AOD";
                    _inventoryAuto.Aut_start_char = "AOD";
                    _inventoryAuto.Aut_direction = 0;

                    #region AOD OUT
                    // AODIssue(_inventoryHeader, _serialList, _reptPickSerialsSub, _inventoryAuto, out _tempInventoryDoc);
                    _inventoryHeader.Ith_direct = false;
                    string _aodoutno = string.Empty;
                    Int16 effect = SaveOutwardScanSerial(_inventoryHeader, _serialList, _reptPickSerialsSub, null, false);//****
                    effect = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _aodoutno);//****
                    //Int16 effect = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _aodoutno);//-1)
                    //foreach(ReptPickSerials rps in _serialList)
                    //{
                    //    rps.Tus_doc_no = _aodoutno;
                    //}
                    //effect = SaveOutwardScanSerial(_inventoryHeader, _serialList, _reptPickSerialsSub);//-2)

                    var _lst = (from n in _reptPickSerials
                                group n by new { n.Tus_itm_cd } into r
                                select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_qty = r.Sum(p => p.Tus_qty) }).ToList();
                    foreach (var s in _lst)
                    {
                        string _item = s.Tus_itm_cd;
                        decimal _qty = s.Tus_qty;
                        _inventoryDAL.UpdateRequestItem(_inventoryHeader.Ith_manual_ref, _item, _qty);
                    }

                    //Add by Chamal 01-Aug-2014
                    var _lst1 = (from n in _reptPickSerials
                                 group n by new { n.Tus_itm_cd, n.Tus_ser_id, n.Tus_base_doc_no } into r
                                 select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_ser_id = r.Key.Tus_ser_id, Tus_base_doc_no = r.Key.Tus_base_doc_no }).ToList();
                    foreach (var s in _lst1)
                    {
                        string _item = s.Tus_itm_cd;
                        int _ser_id = s.Tus_ser_id;
                        string _gran_no = s.Tus_base_doc_no;

                        _inventoryDAL.UpdateGRANSerials(_inventoryHeader.Ith_com, _gran_no, _item, _ser_id);
                    }
                    #endregion
                    if (!string.IsNullOrEmpty(_aodoutno))
                    {
                        _tempInventoryDoc = _aodoutno;
                        if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                        else _genInvDoc += "," + _tempInventoryDoc;

                        lastOutDocNo = _aodoutno; //add by shani on 27-11-2012
                    }

                    _tempInventoryDoc = string.Empty;
                    //If other location auto in
                    if (_isOtherLocAutoIn == true)
                    {
                        string _otherloc = _inventoryHeader.Ith_loc;
                        _inventoryHeader.Ith_loc = _inventoryHeader.Ith_oth_loc;
                        _inventoryHeader.Ith_oth_loc = _otherloc;
                        _inventoryHeader.Ith_oth_docno = _aodoutno;
                        _inventoryHeader.Ith_direct = true;

                        _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);

                        MasterAutoNumber _aodinAuto = new MasterAutoNumber();
                        _aodinAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                        _aodinAuto.Aut_cate_tp = "LOC";
                        _aodinAuto.Aut_direction = 1;
                        _aodinAuto.Aut_modify_dt = null;
                        _aodinAuto.Aut_year = _inventoryHeader.Ith_doc_date.Date.Year;
                        _aodinAuto.Aut_moduleid = "AOD";
                        _aodinAuto.Aut_start_char = "AOD";

                        List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_serialList, _inventoryHeader, _defbin);
                        SaveInwardScanSerial(_inventoryHeader, _aodinserial, _reptPickSerialsSub);
                        string _aodInNo = string.Empty;
                        effect = UpdateInventoryAutoNumber(_inventoryHeader, _aodinAuto, "+", out _aodInNo);

                        if (!string.IsNullOrEmpty(_aodoutno))
                        {
                            _tempInventoryDoc = _aodInNo;
                            if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                            else _genInvDoc += "," + _tempInventoryDoc;

                            lastInDocNo = _aodInNo;  //add by shani on 27-11-2012
                        }
                        _tempInventoryDoc = string.Empty;
                    }
                    _effect = 1;
                    #endregion
                }

                if (_effect == -1)
                {
                    break;
                }

                //Collecting Documents
                if (!string.IsNullOrEmpty(_tempInventoryDoc))
                    if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                    else _genInvDoc += "," + _tempInventoryDoc;

                //if (!string.IsNullOrEmpty(_tempSalesDoc))
                //    if (string.IsNullOrEmpty(_genSalDoc)) _genSalDoc = _tempSalesDoc;
                //    else _genSalDoc += "," + _tempInventoryDoc;
            }
            #region Commented

            //if (_effect != -1)
            //{
            //    #region Update MRN for Close
            //    if (!string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref))
            //    {
            //        var _byItemStatus = from l in _reptPickSerials
            //                            group l by new { l.Tus_itm_cd, l.Tus_itm_stus } into item
            //                            select new { Tus_itm_cd = item.Key.Tus_itm_cd, Tus_itm_stus = item.Key.Tus_itm_stus, Tus_qty = item.Sum(p => p.Tus_qty) };
            //        if (_byItemStatus != null)
            //            if (_byItemStatus.Count() > 0)
            //                foreach (var p in _byItemStatus)
            //                {
            //                    //UpdateRequestStatus(string _request, string _company, string _location, string _item, string _itemstatus, decimal _qty, string _docstatus, string _user)
            //                    string _requestno = _inventoryHeader.Ith_manual_ref;
            //                    string _company = _inventoryHeader.Ith_com;
            //                    string _location = _trlocation;
            //                    string _itemcode = p.Tus_itm_cd;
            //                    string _itemstatus = p.Tus_itm_stus;
            //                    decimal _qty = p.Tus_qty;
            //                    string _docstatus = "F";
            //                    string _user = _inventoryHeader.Ith_cre_by;
            //                    _inventoryDAL.UpdateRequestStatus(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user);
            //                }



            //        _inventoryDAL.UpdateRequestHeader(_inventoryHeader.Ith_manual_ref, _inventoryHeader.Ith_cre_by);
            //    }

            //    #endregion
            //}
            #endregion
            _inventoryDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            _inventoryRepDAL.ConnectionClose();
            _generalDAL.ConnectionClose();
            _ScmCommonDAL.ConnectionClose();
            //if (_effect != -1)
            //        _tr.Complete();
            //}

            _genMessage = _message;
            _genInventoryDocument = _genInvDoc;
            // _genSalesDocument = _genSalDoc;
            return _effect;
        }

        public Int32 Correct_InvalidTransaction(string IssuedLoc, string InvalidLoc, string CorrectLoc, InventoryHeader invHdr_in, List<ReptPickSerials> PickSerialsList, List<ReptPickSerialsSub> reptPickSerials_SubList, MasterAutoNumber masterAutoNum_in, MasterAutoNumber masterAutoNum_out, out string newAOD_out_docNo)
        {
            Int32 effect = 0;
            newAOD_out_docNo = string.Empty;

            //add by shani on 27-11-2012
            string lastOutDocNo = string.Empty;
            string lastInDocNo = string.Empty;

            try
            {
                using (TransactionScope tr = new TransactionScope())
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    //---------------------AOD-IN by wrong Loc-----------------------------------------------------------------------------
                    string documntNo = string.Empty;

                    effect = AODReceipt(invHdr_in, PickSerialsList, reptPickSerials_SubList, masterAutoNum_in, out documntNo);
                    if (effect == -99 || effect < 1)
                    {
                        return -1; //trow exception
                    }
                    //---------------------AOD-OUT by wrong Loc, AND AOD-IN by Issued Loc.--------------------------------------------------
                    foreach (ReptPickSerials RPS in PickSerialsList)
                    {
                        RPS.Tus_new_remarks = "AOD-OUT";
                    }
                    invHdr_in.Ith_doc_no = documntNo;
                    invHdr_in.Ith_loc = InvalidLoc;//lblInvalidLoc.Text.Trim();
                    invHdr_in.Ith_oth_docno = documntNo; //un-commented on 27-11-2012
                    invHdr_in.Ith_direct = false;
                    invHdr_in.Ith_oth_loc = IssuedLoc;//lblIssuedLoc.Text.Trim();

                    string _message = string.Empty;
                    string _genInventoryDoc = string.Empty;

                    effect = SaveAOD_OutWardEntry(invHdr_in.Ith_com, invHdr_in.Ith_pc, invHdr_in.Ith_com, invHdr_in, masterAutoNum_out, PickSerialsList, reptPickSerials_SubList, true, out _message, out _genInventoryDoc, out lastOutDocNo, out lastInDocNo);
                    _inventoryDAL.ConnectionClose();

                    //--------------------- AOD-OUT by Issued Loc. TO THE CORRECT LOC--------------------------------------------------

                    //new out values to header. (From Issued Loc to Correct Loc)
                    invHdr_in.Ith_stus = "A";
                    invHdr_in.Ith_doc_no = documntNo;
                    invHdr_in.Ith_loc = IssuedLoc;//lblIssuedLoc.Text.Trim();
                    invHdr_in.Ith_oth_docno = lastInDocNo; // documntNo; //un-comment on 27-11-2012
                    invHdr_in.Ith_direct = false;
                    invHdr_in.Ith_oth_loc = CorrectLoc; //txtCorrectLoc.Text.Trim();

                    //new out values to MasterAutoNumber.(From Issued Loc to Correct Loc)
                    masterAutoNum_out.Aut_cate_cd = IssuedLoc; //lblIssuedLoc.Text.Trim();
                    string _message2 = string.Empty;

                    effect = SaveAOD_OutWardEntry(invHdr_in.Ith_com, invHdr_in.Ith_pc, invHdr_in.Ith_com, invHdr_in, masterAutoNum_out, PickSerialsList, reptPickSerials_SubList, false, out _message2, out newAOD_out_docNo, out lastOutDocNo, out lastInDocNo);
                    //---------------------------------------------------------------------------------------------------------

                    effect = 1;
                    tr.Complete();
                }
                return effect;
            }
            catch (Exception ex)
            {
                return effect = -1;
            }
        }

        #endregion

        public Int32 DeleteTempPickItembyItem(Int32 _userseqno, string _item, string _status)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            Int32 _l = _inventoryRepDAL.DeleteTempPickItembyItem(_userseqno, _item, _status);
            _inventoryRepDAL.ConnectionClose();
            return _l;
        }

        public Int32 UpdateTempPickItem(Int32 _userseqno, string _item, string _status, decimal _qty)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            Int32 _l = _inventoryRepDAL.UpdateTempPickItem(_userseqno, _item, _status, _qty);
            _inventoryRepDAL.ConnectionClose();
            return _l;
        }

        public Int32 IsExistInWarrantyMaster(string _companyCode, string _warrantyno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsExistInWarrantyMaster(_companyCode, _warrantyno);
        }

        public Int32 IsExistWarrantyInTempPickSerial(string _companyCode, string _warranty)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.IsExistWarrantyInTempPickSerial(_companyCode, _warranty);
        }

        public DataTable GetSerialDetailsBySerial(string _com, string _loc, string _itemCode, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialDetailsBySerial(_com, _loc, _itemCode, _serial);
        }

        public DataTable GetSerialDetailsBySerialwithoutItem(string _com, string _loc, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialDetailsBySerialwithoutItem(_com, _loc, _serial);
        }


        public DataTable GetSerialDetailsBySerialCompany(string _com, string _itemCode, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialDetailsBySerialCompany(_com, _itemCode, _serial);
        }


        public DataTable GetSerialDetailsBySerial1(string _com, string _loc, string _itemCode, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialDetailsBySerial1(_com, _loc, _itemCode, _serial);
        }

        public DataTable GetMultipleItemforOneSerial(string _company, string _location, string _item, string _serial, string _warranty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMultipleItemforOneSerial(_company, _location, _item, _serial, _warranty);
        }

        public List<InventoryLocation> GetSCMInventoryBalance(string _company, string _location, string _item)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMInventoryBalance(_company, _location, _item);
        }

        //Written by Prabhath on 11/01/2013
        public List<InventoryLocation> GetInventoryBalanceSCMnSCM2(string _company, string _location, string _item, string _status)
        {
            List<InventoryLocation> _scm2Balance = GetItemInventoryBalance(_company, _location, _item, _status);
            List<InventoryLocation> _scmBalance = GetSCMInventoryBalance(_company, _location, _item);
            List<InventoryLocation> _return = null;
            if (_scm2Balance != null && _scmBalance != null)
                if (_scm2Balance.Count > 0 && _scmBalance.Count > 0)
                {
                    _return = _scm2Balance.Union(_scmBalance).ToList();
                }
                else if (_scm2Balance.Count <= 0 && _scmBalance.Count > 0)
                {
                    _return = _scmBalance;
                }
                else if (_scm2Balance.Count > 0 && _scmBalance.Count <= 0)
                {
                    _return = _scm2Balance;
                }
            return _return;
        }

        public DataTable GetItemInventoryBalanceStatus(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalanceStatus(_company, _location, _item, _status);
        }

        public DataTable StockBalanceSearch(DateTime _from, DateTime _to, string _item, string _loc, string _com, bool isStatus)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable output = new DataTable();
            DataTable input = _inventoryDAL.StockBalanceSearch(DateTime.MinValue, _from, _item, _loc, _com);
            output.Columns.Add("Location", typeof(string));
            output.Columns.Add("Other_Loc", typeof(string));
            output.Columns.Add("Doc_Date", typeof(DateTime));
            output.Columns.Add("Doc_No", typeof(string));
            output.Columns.Add("Other_Doc", typeof(string));
            output.Columns.Add("Man_Ref", typeof(string));
            output.Columns.Add("Doc_Type", typeof(string));
            output.Columns.Add("In", typeof(int));
            output.Columns.Add("Out", typeof(int));
            output.Columns.Add("Balance", typeof(int));
            output.Columns.Add("Status", typeof(string));
            int balance = 0;
            //sataus wise opening balance add
            if (isStatus)
            {
                var inbal = (from tem in input.AsEnumerable()
                             where tem["ith_direct"].ToString() == "1"
                             group tem by new { STATUS = tem["itb_itm_stus"], LOC = tem["ith_loc"] } into ss
                             select new
                             {
                                 COU = ss.Sum(tem => Convert.ToDecimal(tem["itb_qty"])),
                                 STATUS = ss.Key.STATUS,
                                 LOC = ss.Key.LOC
                             }).ToList();
                var outbal = (from tem in input.AsEnumerable()
                              where tem["ith_direct"].ToString() == "0"
                              group tem by new { STATUS = tem["itb_itm_stus"], LOC = tem["ith_loc"] } into ss
                              select new
                              {
                                  COU = ss.Sum(tem => Convert.ToDecimal(tem["itb_qty"])),
                                  STATUS = ss.Key.STATUS,
                                  LOC = ss.Key.LOC
                              }).ToList();

                //if outs has more rows than ins
                if (outbal.Count > inbal.Count)
                {
                    for (int i = 0; i < outbal.Count; i++)
                    {
                        DataRow dr = output.NewRow();
                        //if in and out has same status
                        var temp = inbal.Where(x => x.STATUS.ToString() == outbal[i].STATUS.ToString()).ToList();
                        if (temp != null && temp.Count > 0)
                        {
                            dr[7] = temp[0].COU;
                            dr[8] = outbal[i].COU;
                            dr[0] = outbal[i].LOC;
                            dr[10] = outbal[i].STATUS;
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                            continue;
                        }
                        else
                        {
                            dr[7] = 0;
                            dr[8] = outbal[i].COU;
                            dr[0] = outbal[i].LOC;
                            dr[10] = outbal[i].STATUS;
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                            continue;
                        }
                    }
                }
                //if ins has more rows than outs OR ins and outs equal
                else
                {
                    for (int i = 0; i < inbal.Count; i++)
                    {
                        DataRow dr = output.NewRow();
                        //if out and in has same status
                        var temp = outbal.Where(x => x.STATUS.ToString() == inbal[i].STATUS.ToString()).ToList();
                        if (temp != null && temp.Count > 0)
                        {
                            dr[7] = inbal[i].COU;
                            dr[8] = temp[0].COU;
                            dr[0] = inbal[i].LOC;
                            dr[10] = inbal[i].STATUS;
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                            continue;
                        }
                        else
                        {
                            dr[7] = inbal[i].COU;
                            dr[8] = 0;
                            dr[0] = inbal[i].LOC;
                            dr[10] = inbal[i].STATUS;
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                            continue;
                        }
                    }
                }
            }
            else
            {
                var inbal = (from tem in input.AsEnumerable()
                             where tem["ith_direct"].ToString() == "1"
                             group tem by new { LOC = tem["ith_loc"] } into ss
                             select new
                             {
                                 COU = ss.Sum(tem => Convert.ToDecimal(tem["itb_qty"])),
                                 LOC = ss.Key.LOC
                             }).ToList();
                var outbal = (from tem in input.AsEnumerable()
                              where tem["ith_direct"].ToString() == "0"
                              group tem by new { LOC = tem["ith_loc"] } into ss
                              select new
                              {
                                  COU = ss.Sum(tem => Convert.ToDecimal(tem["itb_qty"])),
                                  LOC = ss.Key.LOC
                              }).ToList();

                //id ouths has more rows than ins
                if (outbal.Count > inbal.Count)
                {
                    for (int i = 0; i < outbal.Count; i++)
                    {
                        DataRow dr = output.NewRow();
                        //if in and out has same location
                        var temp = inbal.Where(x => x.LOC.ToString() == outbal[i].LOC.ToString()).ToList();
                        if (temp != null && temp.Count > 0)
                        {
                            dr[7] = temp[0].COU;
                            dr[8] = outbal[i].COU;
                            dr[0] = outbal[i].LOC;
                            dr[10] = "";
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                        }
                        //if not
                        else
                        {
                            dr[7] = 0;
                            dr[8] = outbal[i].COU;
                            dr[0] = outbal[i].LOC;
                            dr[10] = "";
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                        }
                    }
                }
                //if ins has more rows than ins or equal rows
                else
                {
                    for (int i = 0; i < inbal.Count; i++)
                    {
                        DataRow dr = output.NewRow();
                        //if ins and outs has same location
                        var temp = outbal.Where(x => x.LOC.ToString() == inbal[i].LOC.ToString()).ToList();
                        if (temp != null && temp.Count > 0)
                        {
                            dr[7] = inbal[i].COU;
                            dr[8] = temp[0].COU;
                            dr[0] = inbal[i].LOC;
                            dr[10] = "";
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                        }
                        //if not
                        else
                        {
                            dr[7] = inbal[i].COU;
                            dr[8] = 0;
                            dr[0] = inbal[i].LOC;
                            dr[10] = "";
                            dr[2] = _from;
                            dr[6] = "OPENING_BAL";
                            balance = balance + Convert.ToInt32(dr[7]) - Convert.ToInt32(dr[8]);
                            dr[9] = balance;
                            output.Rows.Add(dr);
                        }
                    }
                }
            }

            //other rows
            DataTable input1 = _inventoryDAL.StockBalanceSearch(_from, _to, _item, _loc, _com);
            foreach (DataRow dr in input1.Rows)
            {
                DataRow drTem = output.NewRow();
                //insert in
                if (dr["ith_direct"].ToString() == "1")
                {
                    drTem[0] = dr[1].ToString();
                    drTem[1] = dr[2].ToString();
                    drTem[2] = dr[3].ToString();
                    drTem[3] = dr[4].ToString();
                    drTem[4] = dr[5].ToString();
                    drTem[5] = dr[6].ToString();
                    drTem[6] = dr[7].ToString();
                    drTem[7] = 0;
                    drTem[8] = Convert.ToInt32(dr[9]);
                    balance = balance + Convert.ToInt32(drTem[7]) - Convert.ToInt32(drTem[8]);
                    drTem[9] = balance;
                    drTem[10] = dr[8].ToString();
                }
                //insert out
                else
                {
                    drTem[0] = dr[1].ToString();
                    drTem[1] = dr[2].ToString();
                    drTem[2] = dr[3].ToString();
                    drTem[3] = dr[4].ToString();
                    drTem[4] = dr[5].ToString();
                    drTem[5] = dr[6].ToString();
                    drTem[6] = dr[7].ToString();
                    drTem[7] = Convert.ToInt32(dr[9]);
                    drTem[8] = 0;
                    balance = balance + Convert.ToInt32(drTem[7]) - Convert.ToInt32(drTem[8]);
                    drTem[9] = balance;
                    drTem[10] = dr[8].ToString();
                }
                output.Rows.Add(drTem);
            }
            output.TableName = "tbl";
            return output;
        }

        public List<MasterLocation> getAllLoc_WithSubLoc(string com, string main_Loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getAllLoc_WithSubLoc(com, main_Loc);
        }

        public DataTable SerialBalanceSearch(DateTime _from, DateTime _to, string _item, string _loc, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable output = new DataTable();
            DataTable input = _inventoryDAL.SerialBalanceSearch(_from, _to, _item, _loc, _com);
            output.Columns.Add("Date", typeof(DateTime));
            output.Columns.Add("Status", typeof(string));
            output.Columns.Add("Type", typeof(string));
            output.Columns.Add("Reference", typeof(string));
            output.Columns.Add("Serial_1", typeof(string));
            output.Columns.Add("Serial_2", typeof(string));
            output.Columns.Add("Issue_Date", typeof(DateTime));
            output.Columns.Add("Issue_Type", typeof(string));
            output.Columns.Add("Issue_Reference", typeof(string));

            var ins = (from tem in input.AsEnumerable()
                       where tem["ith_direct"].ToString() == "1"
                       group tem by new { Serial_ID = tem["its_ser_id"], Serial_1 = tem["its_ser_1"], Serial_2 = tem["its_ser_2"], Type = tem["ith_doc_tp"], Date = tem["ith_doc_date"], Status = tem["its_itm_stus"], REF = tem["ith_doc_no"] } into ss
                       orderby ss.Key.Serial_ID
                       select new
                       {
                           SERIAL_ID = ss.Key.Serial_ID,
                           TYPE = ss.Key.Type,
                           DATE = ss.Key.Date,
                           STATUS = ss.Key.Status,
                           REF = ss.Key.REF,
                           SERIAL_1 = ss.Key.Serial_1,
                           SERIAL_2 = ss.Key.Serial_2
                       }).ToList();
            var outs = (from tem in input.AsEnumerable()
                        where tem["ith_direct"].ToString() == "0"
                        group tem by new { Serial_ID = tem["its_ser_id"], Serial_1 = tem["its_ser_1"], Serial_2 = tem["its_ser_2"], Type = tem["ith_doc_tp"], Date = tem["ith_doc_date"], Status = tem["its_itm_stus"], REF = tem["ith_doc_no"] } into ss
                        orderby ss.Key.Serial_ID
                        select new
                        {
                            SERIAL_ID = ss.Key.Serial_ID,
                            TYPE = ss.Key.Type,
                            DATE = ss.Key.Date,
                            STATUS = ss.Key.Status,
                            REF = ss.Key.REF,
                            SERIAL_1 = ss.Key.Serial_1,
                            SERIAL_2 = ss.Key.Serial_2
                        }).ToList();
            //populate datatable

            //if ins has more rows than outs
            if (ins.Count > outs.Count)
            {
                for (int i = 0; i < ins.Count; i++)
                {
                    var tem = outs.Where(x => x.SERIAL_ID.ToString() == ins[i].SERIAL_ID.ToString()).ToList();
                    if (tem != null && tem.Count > 0)
                    {
                        DataRow dr = output.NewRow();
                        dr[0] = ins[i].DATE;
                        dr[1] = ins[i].STATUS;
                        dr[2] = ins[i].TYPE;
                        dr[3] = ins[i].REF;
                        dr[4] = ins[i].SERIAL_1;
                        dr[5] = ins[i].SERIAL_2;
                        dr[6] = tem[tem.Count - 1].DATE;
                        dr[7] = tem[tem.Count - 1].TYPE;
                        dr[8] = tem[tem.Count - 1].REF;
                        output.Rows.Add(dr);
                    }
                    else
                    {
                        DataRow dr = output.NewRow();
                        dr[0] = ins[i].DATE;
                        dr[1] = ins[i].STATUS;
                        dr[2] = ins[i].TYPE;
                        dr[3] = ins[i].REF;
                        dr[4] = ins[i].SERIAL_1;
                        dr[5] = ins[i].SERIAL_2;
                        dr[6] = DBNull.Value;
                        dr[7] = "";
                        dr[8] = "";
                        output.Rows.Add(dr);
                    }
                }
            }
            //outs has more rows than ins or equal rows
            else
            {
                for (int i = 0; i < outs.Count; i++)
                {
                    var tem = ins.Where(x => x.SERIAL_ID.ToString() == outs[i].SERIAL_ID.ToString()).ToList();
                    if (tem != null && tem.Count > 0)
                    {
                        DataRow dr = output.NewRow();
                        dr[0] = tem[tem.Count - 1].DATE;
                        dr[1] = tem[tem.Count - 1].STATUS;
                        dr[2] = tem[tem.Count - 1].TYPE;
                        dr[3] = tem[tem.Count - 1].REF;
                        dr[4] = tem[tem.Count - 1].SERIAL_1;
                        dr[5] = tem[tem.Count - 1].SERIAL_2;
                        dr[6] = outs[0].DATE;
                        dr[7] = outs[0].TYPE;
                        dr[8] = outs[0].REF;
                        output.Rows.Add(dr);
                    }
                    else
                    {
                        DataRow dr = output.NewRow();
                        dr[0] = DBNull.Value;
                        dr[1] = "";
                        dr[2] = "";
                        dr[3] = "";
                        dr[4] = "";
                        dr[5] = "";
                        dr[6] = outs[i].DATE;
                        dr[7] = outs[i].TYPE;
                        dr[8] = outs[i].REF;
                        output.Rows.Add(dr);
                    }
                }
            }

            output.TableName = "tbl";
            return output;
        }

        public DataTable Get_InrSer_NotAvailableItems(string _company, string _loc, string _itemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_InrSer_NotAvailableItems(_company, _loc, _itemCode);
        }

        public DataTable get_CostUpdateDetails()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_CostUpdateDetails();
        }


        public List<ReptPickSerials> GetInventorySerialListById(string _serId, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventorySerialListById(_serId, _loc);
        }

        public Boolean CheckPreRequestAdhocSer(string company, string location, Int32 serID)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckPreRequestAdhocSer(company, location, serID);
        }

        //darshana on 07-02-2013
        public List<ReptPickSerials> GetRevReqSerial(string _company, string _location, string _user, string _session, string _defBin, string _invoice, string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRevReqSerial(_company, _location, _user, _session, _defBin, _invoice, _reqNo);
        }

        //darshana on 08-02-2013 - this is copy of GetInvoiceSerial function
        public List<ReptPickSerials> GetInvoiceSerialForReversal(string _company, string _location, string _user, string _session, string _defBin, string _invoice, int _baseRefline)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceSerialForReversal(_company, _location, _user, _session, _defBin, _invoice, _baseRefline);
        }

        public ReptPickSerials Get_all_details_on_doc(string company, string location, string itemCode, string doc, string serial)
        {
            //DataTable dt = new DataTable();
            ReptPickSerials rps = new ReptPickSerials();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            rps = _inventoryDAL.Get_all_details_on_doc(company, location, itemCode, doc, serial);
            return rps;
        }

        public Boolean UpdateSerialIDAvailable(string compny, string location, string itemCD, Int32 ser_ID, int availability, int oldAvailable)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Boolean rows = false;
            rows = _inventoryDAL.UpdateSerialIDAvailable(compny, location, itemCD, ser_ID, availability, oldAvailable);
            _inventoryDAL.ConnectionClose();
            return rows;
        }




        public ReptPickSerials GetReservedByserialID(string company, string location, string bin, string itemCode, int serial_ID)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetReservedByserialID(company, location, bin, itemCode, serial_ID);
        }

        public DataTable GetSerialItem(string _serialtype, string _company, string _serial, Int16 _isWholeWord)
        {
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();
            DataTable _scm2 = _inventoryDAL.GetSCM2SerialiItem(_serialtype, _company, _serial, _isWholeWord);

            //Edit by Chamal 07-Sep-2016
            //DataTable _scm = _ScmCommonDAL.GetSCMSerialiItem(_serialtype, _company, _serial, _isWholeWord);
            //_scm2.Merge(_scm, false, MissingSchemaAction.Add);
            if (_scm2.Rows.Count > 0)
            {
                DataView _view = new DataView(_scm2);

                string[] column = { "INS_LOC", "INS_ITM_CD", "INS_SER_1", "MI_LONGDESC", "MI_BRAND", "MI_MODEL", "INS_SER_2" };
                _scm2 = _view.ToTable(true, column);
            }
            else
            {
                var cols = new string[] { "INS_LOC", "INS_ITM_CD", "INS_SER_1", "MI_LONGDESC", "MI_BRAND", "MI_MODEL", "INS_SER_2" };

                // _scm2.TableName = "tblSer";
                if (_scm2.Columns.Count == 0)
                {
                    foreach (var col in cols)
                        _scm2.Columns.Add(col);
                }


            }
            return _scm2;
        }

        public DataTable GetSeriaLocation(string _serialType, string _company, string _serial, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();
            DataTable _scm2 = _inventoryDAL.GetSCM2CurrentLocation(_serialType, _company, _serial, _item);

            DataTable dtCom = _inventoryDAL.CheckISCM2(_company);
            if (dtCom.Rows.Count <= 0)
            {
                DataTable _scm = _ScmCommonDAL.GetSCMCurrentLocation(_serialType, _company, _serial, _item);
                _scm2.Merge(_scm, false, MissingSchemaAction.Add);
            }
            return _scm2;
        }

        public DataTable GetSeriaMovement(string _serialType, string _company, string _serial, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _scm2 = _inventoryDAL.GetSCM2Movement(_serialType, _company, _serial, _item);

            DataTable dtCom = _inventoryDAL.CheckISCM2(_company);
            if (dtCom.Rows.Count <= 0)
            {
                _ScmCommonDAL = new SCMCommonDAL();
                DataTable _scm = _ScmCommonDAL.GetSCMMovement(_serialType, _company, _serial, _item);
                _scm2.Merge(_scm, false, MissingSchemaAction.Add);
            }

            return _scm2;
        }

        public DataTable GetSCMWarranty(string _item, string _serial, string _invoice)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMWarranty(_item, _serial, _invoice);
        }

        public DataTable GetWarrantyClaimReqyest(string _company, string _profitcenter, string _type, int _isApproved, string _status, DateTime _fromDate, DateTime _toDate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetWarrantyClaimReqyest(_company, _profitcenter, _type, _isApproved, _status, _fromDate, _toDate);
        }

        public List<RequestApprovalDetail> GetWarrantyClaimReqDetail(string _request)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetWarrantyClaimReqDetail(_request);
        }

        public List<RequestApprovalDetail> GetWarrantyClaimInvoiceDuplicate(string _invoice, string _item, string _lineno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetWarrantyClaimInvoiceDuplicate(_invoice, _item, _lineno);
        }

        public DataTable GetWarrantyClaimAdj(string _adjustment)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetWarrantyClaimAdj(_adjustment);
        }

        public DataTable GetMoveSubTypeMainTable(string _subType, string _mainType)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMoveSubTypeMainTable(_subType, _mainType);
        }

        public List<string> Get_User_Seq_Batch(string _user, string _docType, int _direction_, string _company, string _location)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.Get_User_Seq_Batch(_user, _docType, _direction_, _company, _location);
        }

        public DataTable GetManualDocsGet_manual_docs_ByRef(string _Comp, string _ref)
        {
            DataTable _dt = null;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _dt = _inventoryDAL.Get_manual_docs_ByRef(_ref);
            else
                _dt = _FMSinventoryDAL.Get_manual_docs_ByRef(_ref);

            return _dt;
        }

        public Int32 UpdateTransferStatus_NEW(string _RefNo, string _User, string _TransLoc, string userloc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int32 X = _FMSinventoryDAL.UpdateTransferStatus_NEW(_RefNo, _User, _TransLoc, userloc);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        public Int32 SaveTransferReqManualDocs(string _RefNo, string _User, string _TransLoc, string userloc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int32 X = _FMSinventoryDAL.UpdateTransferStatus_NEW(_RefNo, _User, _TransLoc, userloc);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        public Int32 Save_mandoc_request_serials(string reqNo, string document, Int32 UserPermissionLevel, string userID)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL.ConnectionOpen();
            _FMSinventoryDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            List<RequestApprovalSerials> ReqApp_ser = new List<RequestApprovalSerials>();
            int line = 1;
            DataTable dt = _FMSinventoryDAL.GetTempManualDocDet(userID);
            if (dt != null)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string prifix = dr["MDD_PREFIX"].ToString();//MDD_BK_NO,MDD_ITM_CD
                    Int32 bookNo = Convert.ToInt32(dr["MDD_BK_NO"].ToString());
                    string book_No = dr["MDD_BK_NO"].ToString();
                    string itemcode = dr["MDD_ITM_CD"].ToString();

                    RequestApprovalSerials _tempReqAppSer = new RequestApprovalSerials();
                    _tempReqAppSer.Gras_ref = reqNo;
                    _tempReqAppSer.Gras_line = line;
                    //_tempReqAppSer.Gras_anal1 = itemcode;
                    //_tempReqAppSer.Gras_anal2 = prifix;
                    _tempReqAppSer.Gras_anal3 = document;
                    _tempReqAppSer.Gras_anal4 = itemcode;
                    _tempReqAppSer.Gras_anal5 = prifix;
                    _tempReqAppSer.Gras_anal6 = bookNo;
                    //_tempReqAppSer.Gras_anal7 = 0;
                    // _tempReqAppSer.Gras_anal8 = 0;
                    // _tempReqAppSer.Gras_anal9 = 0;
                    // _tempReqAppSer.Gras_anal10 = 0;
                    ReqApp_ser.Add(_tempReqAppSer);
                }
            }
            //------------------------------------------------
            Int32 effect = 0;

            //delete existing serials by ref no

            _inventoryDAL.DeleteRequestSerial(reqNo);
            foreach (RequestApprovalSerials ras in ReqApp_ser)
            {
                ras.Gras_line = line;
                ras.Gras_ref = reqNo;
                effect = _generalDAL.Save_RequestApprove_Ser(ras);
                effect = _generalDAL.Save_RequestApprove_Ser_Log(ras, UserPermissionLevel);
                line = line + 1;
            }

            _generalDAL.ConnectionClose();
            _FMSinventoryDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return 1;
        }

        public List<QuotationHeader> GetLatestValidQuotation(string _com, string _sup, string _type, string _subtype, DateTime _date, decimal _qty, string _status, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            List<QuotationHeader> _list = new List<QuotationHeader>();
            _list = _inventoryDAL.GetLatestValidQuotation(_com, _sup, _type, _subtype, _date, _qty, _status, _item);
            return _list;
        }

        public List<MasterItemSimilar> GetSimilarItems(string _type, string _item, string _company, DateTime _date, string _docNo, string _promoCode, string _location, string _proftCenter)
        {
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            List<MasterItemSimilar> _listReturn = null;
            List<MasterItemSimilar> _listAll = new List<MasterItemSimilar>();
            DataTable _dtChnl = null;

            if (_type == "S")    //kapila 3/1/2017
            {
                //profit center
                _listAll = _inventoryDAL.GetSimilarItems(_type, _item, _company, _date.Date, "PC", _proftCenter);
                if (_listAll == null || _listAll.Count <= 0)
                {
                    //sub channel
                    _dtChnl = _salesDAL.GetChanelOnPC(_company, _proftCenter, "SCHNL");
                    _listAll = _inventoryDAL.GetSimilarItems(_type, _item, _company, _date.Date, "SCHNL", _dtChnl.Rows[0]["MPI_VAL"].ToString());
                    if (_listAll == null || _listAll.Count <= 0)
                    {
                        //sub channel
                        _dtChnl = _salesDAL.GetChanelOnPC(_company, _proftCenter, "CHNL");
                        _listAll = _inventoryDAL.GetSimilarItems(_type, _item, _company, _date.Date, "CHNL", _dtChnl.Rows[0]["MPI_VAL"].ToString());
                    }
                }
            }
            else
            {
                _listAll = _inventoryDAL.GetSimilarItems(_type, _item, _company, _date.Date, "PC", _proftCenter);
            }

            if (_listAll != null)
            {
                if (_listAll.Count > 0)
                {
                    //Check Invoice No/GRN No
                    if (!string.IsNullOrEmpty(_docNo))
                    {
                        var _chkList = (from _l in _listAll
                                        where _l.Misi_doc_no == _docNo
                                        select _l).ToList();
                        if (_chkList != null)
                        {
                            if (_chkList.Count > 0)
                            {
                                _listReturn = _chkList;
                                return _listReturn;
                            }
                        }
                    }

                    //Check Promotion
                    if (!string.IsNullOrEmpty(_promoCode) && _type == "S")
                    {
                        var _chkList = (from _l in _listAll
                                        where _l.Misi_promo == _promoCode
                                        select _l).ToList();
                        if (_chkList != null)
                        {
                            if (_chkList.Count > 0)
                            {
                                _listReturn = _chkList;
                                return _listReturn;
                            }
                        }
                    }

                    //Check Profit Center
                    if (!string.IsNullOrEmpty(_proftCenter) && _type == "S")
                    {
                        var _chkList = (from _l in _listAll
                                        where _l.Misi_pc == _proftCenter
                                        select _l).ToList();
                        if (_chkList != null)
                        {
                            if (_chkList.Count > 0)
                            {
                                _listReturn = _chkList;
                                return _listReturn;
                            }
                        }
                    }

                    //Check Location
                    if (!string.IsNullOrEmpty(_location) && _type == "I")
                    {
                        var _chkList = (from _l in _listAll
                                        where _l.Misi_loc == _location
                                        select _l).ToList();
                        if (_chkList != null)
                        {
                            if (_chkList.Count > 0)
                            {
                                _listReturn = _chkList;
                                return _listReturn;
                            }
                        }
                    }
                }

            }


            return _listAll;
        }

        public List<InventoryWarrantySubDetail> GetSubItemSerials(string _mItem, string _mSerial, int _mSerID)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            List<InventoryWarrantySubDetail> _listAll = _inventoryDAL.GetSubItemSerials(_mItem, _mSerial, _mSerID);
            _inventoryDAL.ConnectionClose();
            return _listAll;
        }

        public Int16 SavePickedManualDocDetail_TRNS(string _refNo, string _Loc, string _user, string _Status)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int16 X = _FMSinventoryDAL.SavePickedManualDocDet_TRNS(_refNo, _Loc, _user, _Status);
            _FMSinventoryDAL.ConnectionOpen();
            return X;
        }

        public Int32 SaveManualDocDet(List<ManualDocDetail> _mandocList)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            int effect = 0;
            foreach (ManualDocDetail _mandoc in _mandocList)
            {
                effect = _FMSinventoryDAL.SaveManualDocDet(_mandoc);
            }
            _FMSinventoryDAL.ConnectionClose();
            return effect;
        }

        public DataTable GetTempManualDocDet(string _Comp, string _User)
        {
            DataTable _dt = null;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _FMSinventoryDAL = new FMS_InventoryDAL();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _dt = _inventoryDAL.GetTempManualDocDet(_User);
            else
                _dt = _FMSinventoryDAL.GetTempManualDocDet(_User);
            return _dt;
        }

        public List<ManualDocDetail> Get_manual_doc(string _Comp, string p_ref, string p_itmCd, string p_prifix, string p_bookNo)
        {
            List<ManualDocDetail> _Lst = null;
            _generalDAL = new GeneralDAL();
            MasterCompany _masterComp = _generalDAL.GetCompByCode(_Comp);

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();

            if (_masterComp.MC_IS_SCM2_FMS == 1)
                _Lst = _inventoryDAL.Get_manual_doc(p_ref, p_itmCd, p_prifix, p_bookNo);
            else
                _Lst = _FMSinventoryDAL.Get_manual_doc(p_ref, p_itmCd, p_prifix, p_bookNo);

            _FMSinventoryDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return _Lst;
        }

        public Int32 UpdateManualDocs_NEW(string _RefNo, string _USer, string loc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            Int32 X = _FMSinventoryDAL.UpdateManualDocs_NEW(_RefNo, _USer, loc);
            _FMSinventoryDAL.ConnectionClose();
            return X;
        }

        public int UpdateRegistrationRefundSerials(string com, string invoice, string _location, string _itemCode, string _engine, string _chassis, Int32 Status)
        {
            ReptCommonDAL _inventoryRepDAL = new ReptCommonDAL();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            SalesDAL _salesDal = new SalesDAL();

            _inventoryRepDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            _salesDal.ConnectionOpen();

            Int32 effect = _inventoryRepDAL.DeleteResSerial(invoice, _location, _itemCode, _engine, _chassis);

            Int32 rows = 0;
            // rows = _inventoryDAL.Update_inrser_INS_AVAILABLE(com, _location, _itemCode, _engine, Status);
            rows = _salesDal.UpdateRegResAvailability(com, _itemCode, _engine, _chassis, Status);
            _inventoryDAL.ConnectionClose();
            _inventoryRepDAL.ConnectionClose();
            //UpdateRegResAvailability
            return 1;
        }

        public DataTable CheckIsAodReceived(string _document)
        {
            //Remove POS and SCM connection by Chamal 12-10-2018
            //_ScmCommonDAL = new SCMCommonDAL();
            _inventoryDAL = new InventoryDAL();
            //_PosCommonDAL = new POSCommonDAL();
            //_ScmCommonDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            //DataTable dtSCM = _ScmCommonDAL.CheckIsAodReceived("(U)" + _document);
            DataTable dtSCM2 = _inventoryDAL.CheckIsAodReceived(_document);
            //DataTable dtPOS = _PosCommonDAL.CheckIsAodReceived("(U)" + _document);
            //dtSCM.Merge(dtSCM2);
            //dtSCM.Merge(dtPOS);
            //_ScmCommonDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return dtSCM2;
        }

        public DataTable SearchGiftVoucher(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.SearchGiftVoucher(_initialSearchParams, _searchCatergory, _searchText);
        }

        public DataTable SearchGiftVoucherByPage(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.SearchGiftVoucherByPage(_initialSearchParams, _searchCatergory, _searchText);
        }

        public List<ReptPickSerials> GetAvailableGiftVoucher(string _company, string _profitcenter, string _item)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            _FMSinventoryDAL.ConnectionOpen();
            return _FMSinventoryDAL.GetAvailableGiftVoucher(_company, _profitcenter, _item);
            _FMSinventoryDAL.ConnectionClose();
        }

        public DataTable GetAvailable_GV_books(Int32 _book, string _item, string _company)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetAvailable_GV_books(_book, _item, _company);
        }

        public ReptPickSerials GetGiftVoucherDetail(string _company, string _profitcenter, string _item, Int32 _book, Int32 _page, string _prefix)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGiftVoucherDetail(_company, _profitcenter, _item, _book, _page, _prefix);
        }

        public List<GiftVoucherPages> GetAllGvbyPages(string _com, string _pc, string _stus, string _itm, Int32 _page)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetAllGvbyPages(_com, _pc, _stus, _itm, _page);
        }

        public List<GiftVoucherPages> GetGiftVoucherPages(string _com, int _page)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGiftVoucherPages(_com, _page);
        }

        public List<InventorySerialMaster> GetWarrantyDetails(string _invoice, string _acc, string _item, string _serial, string _warranty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetWarrantyDetails(_invoice, _acc, _item, _serial, _warranty);
        }

        public DataTable GetInvoiceAccountNoFromItem(string _item, string _serial, string _warranty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceAccountNoFromItem(_item, _serial, _warranty);
        }

        public DataTable GetDetailByGiftVoucher(string _company, string _profitcenter, int _page, string _type)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetDetailByGiftVoucher(_company, _profitcenter, _page, _type);
        }

        public DataTable GetDetailByPageNItem(string _company, string _profitcenter, int _page, string _item)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetDetailByPageNItem(_company, _profitcenter, _page, _item);
        }

        public List<GiftVoucherItems> GetGiftVoucherItems(string _com, int _page)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGiftVoucherItems(_com, _page);
        }

        public Int16 GiftVoucherAdjusment(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, List<GiftVoucherItems> _gift)
        {
            Int16 effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _FMSinventoryDAL.ConnectionOpen();

                effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                //new update gv balance
                foreach (GiftVoucherItems gv in _gift)
                {
                    _FMSinventoryDAL.UpdateGiftVpucherPagesBalance(gv.Gvi_com, gv.Gvi_page, gv.Gvi_qty, gv.Gvi_itm);
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _FMSinventoryDAL.ConnectionClose();
                _tr.Complete();
            }
            return effect;
        }

        public GiftVoucherPages GetGiftVoucherPage(string _com, string _pc, string _item, int _book, int _page, string _prefix)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGiftVoucherPage(_com, _pc, _item, _book, _page, _prefix);
        }

        public DataTable GetAvailableGvBooks(string _com, string _pc, string _tp, string _status, string _itm, string _prefix)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetAvailableGvBooks(_com, _pc, _tp, _status, _itm, _prefix);
        }

        public List<GiftVoucherPages> GetAvailableGvPages(string _com, string _pc, string _tp, string _status, Int32 _book, string _gvCd)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetAvailableGvPages(_com, _pc, _tp, _status, _book, _gvCd);
        }

        public List<GiftVoucherPages> GetAvailableGvPagesRange(string _com, string _pc, string _tp, string _status, Int32 _book, string _gvCd, Int32 _frmPg, Int32 _toPg)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetAvailableGvPagesRange(_com, _pc, _tp, _status, _book, _gvCd, _frmPg, _toPg);
        }

        public List<GiftVoucherPages> GetGiftVoucherByOthRef(string _com, string _pc, string _refDoc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGiftVoucherByOthRef(_com, _pc, _refDoc);
        }

        public List<GiftVoucherItems> GetGiftVoucherAllItems(string _book, string _page, string _com, string _pc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGiftVoucherAllItems(_book, _page, _com, _pc);
        }

        public DataTable GetInventoryBalanceByBatch(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryBalanceByBatch(_company, _location, _item, _status);
        }

        public DataTable CheckSerialAvailability(string _serialtype, string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckSerialAvailability(_serialtype, _item, _serial);
        }
        public DataTable CheckSerialAvailabilityscm(string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckSerialAvailabilityscm(_item, _serial);
        }

        public DataTable GetReplaceOriginalItems(string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetReplaceOriginalItems(_serial);
        }

        public int DocDateCorrection(string _docType, string _docNo, DateTime _docDt, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.UpdateMovementDocDate(_docNo, _docDt, _user);
        }

        public DataTable CheckInwardDocumentUseStatus(string _company, string _location, string _document)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckInwardDocumentUseStatus(_company, _location, _document);
        }

        public DataTable GetBuyBackInventoryDocument(string _company, string _location, string _invoiceno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBuyBackInventoryDocument(_company, _location, _invoiceno);
        }

        public DataTable GetConsginmentDocumentByInvoice(string _company, string _location, string _invoice)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetConsginmentDocumentByInvoice(_company, _location, _invoice);
        }

        public DataTable GetChannelDetail(string _company, string _channel)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetChannelDetail(_company, _channel);
        }

        public DataTable GetToLocationPermission(string _fromcompany, string _fromlocation, string _tocompany, string _tocategory, string _module)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetToLocationPermission(_fromcompany, _fromlocation, _tocompany, _tocategory, _module);
        }

        public List<ReptPickSerials> GetNonSerializedItemRandomlyByDate(string _company, string _location, string _item, string _status, decimal _qty, DateTime _date)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetNonSerializedItemRandomlyByDate(_company, _location, _item, _status, _qty, _date);
        }

        public MasterItemBlock GetBlockedItemByPriceType(string _company, string _profit, string _item, int _pricetype)
        {
            _inventoryDAL = new InventoryDAL();
            MasterItemBlock _itmBlock = new MasterItemBlock();
           // for (int i = 1; i < 15; i++)
           //{
                _itmBlock = _inventoryDAL.GetBlockedItemByPriceType(_company, _profit, _item, _pricetype, 0);
               // if (_itmBlock != null) break;
            //}
            return _itmBlock;
        }

        public Int32 UpdateRCCStatus(Int32 _is_app, Int32 _is_rej, string _user, DateTime _date, string _rccno)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Int32 X = _inventoryDAL.UpdateRCCStatus(_is_app, _is_rej, _user, _date, _rccno);
            _inventoryDAL.ConnectionClose();
            return X;
        }

        public Int16 UpdateRCCReqRaise(string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Int16 X = _inventoryDAL.UpdateRCCReqRaise(_docno);
            _inventoryDAL.ConnectionClose();
            return X;
        }

        public DataTable GetMRNProcessTracking(string _mrnNo, DateTime _from, DateTime _to, string _locList, string _com)
        {
            DataTable _result = new DataTable();
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();
            //create result table

            /*
             * table fields
               //int_req
               itr_loc
               itr_req_no
               itr_dt
               itr_issue_from
               itr_rec_to

                //inv_dispatch_request
                disp_reqt_seq
                disp_location
                disp_date
                disp_authorized_by1

                //inv_dispatch_warehouse_header
                disp_app_seq_no
                disp_from_location
                disp_to_location
                disp_req_status

                //INV_MOVEMENT_HEADER
                year_seq_no
                doc_no
                doc_type
                doc_date
                approved_by_1
             */
            _result.TableName = "tbl";

            _result.Columns.Add("itr_loc");
            _result.Columns.Add("itr_req_no");
            _result.Columns.Add("itr_dt");
            _result.Columns.Add("itr_issue_from");
            _result.Columns.Add("itr_rec_to");

            _result.Columns.Add("disp_reqt_seq");
            _result.Columns.Add("disp_location");
            _result.Columns.Add("disp_date");
            _result.Columns.Add("disp_authorized_by1");

            _result.Columns.Add("disp_app_seq_no");
            _result.Columns.Add("disp_from_location");
            _result.Columns.Add("disp_to_location");
            _result.Columns.Add("disp_req_status");

            _result.Columns.Add("year_seq_no");
            _result.Columns.Add("doc_no");
            _result.Columns.Add("doc_type");
            _result.Columns.Add("doc_date");
            _result.Columns.Add("approved_by_1");
            _result.Columns.Add("ITR_SEQ_NO");
            _result.Columns.Add("create_when");

            Boolean _isSCM2 = false;
            //         MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
            //if (_masterComp.MC_ISscm == 1) 

            //get mrns from int_req table
            DataTable _mrnTable = _inventoryDAL.GetMRNTracking(_locList, _com, _mrnNo, _from, _to);

            foreach (DataRow dr in _mrnTable.Rows)
            {
                DataRow row = _result.NewRow();
                row[18] = dr["ITR_SEQ_NO"];
                row[0] = dr["itr_loc"];
                row[1] = dr["itr_req_no"];
                row[2] = Convert.ToDateTime(dr["itr_dt"]).ToString("dd/MMM/yyyy");
                row[3] = dr["itr_issue_from"];
                row[4] = dr["itr_rec_to"];
                bool isAddRow = false;

                DataTable _mrnRequest = null;

                //updated by akila 2018/03/07 - As per the Dharshana's approvel option, which is using to get mrn details from scm, will be removed.
                _mrnRequest = _inventoryDAL.GetMRNRequest(dr["ITR_REQ_NO"].ToString());
                //if (_com == "ABL" || _com == "LRP")
                //    _mrnRequest = _inventoryDAL.GetMRNRequest(dr["ITR_REQ_NO"].ToString());
                //else
                //    _mrnRequest = _ScmCommonDAL.GetMRN_Request(dr["ITR_REQ_NO"].ToString());

                if (_mrnRequest.Rows.Count > 0)
                {
                    //for each mrn get equal record from inv_dispatch_request
                    foreach (DataRow dr1 in _mrnRequest.Rows)
                    {
                        DataRow _row1 = _result.NewRow();
                        _row1 = row;
                        row[5] = dr1["disp_reqt_seq"];  //dr1["itr_req_no"];
                        row[6] = dr1["disp_location"];  //dr1["itr_loc"];
                        row[7] = Convert.ToDateTime(dr1["disp_date"]).ToString("dd/MMM/yyyy");  //Convert.ToDateTime(dr1["itr_dt"]).ToString("dd/MMM/yyyy");
                        row[8] = dr1["disp_authorized_by1"];  //dr1["itr_cre_by"];

                        DataTable _warehousRequest = null;
                        _warehousRequest = _inventoryDAL.GetWarehouse_Request(dr1["disp_reqt_seq"].ToString());
                        //if (_com == "ABL" || _com == "LRP")
                        //    _warehousRequest = _inventoryDAL.GetWarehouse_Request(dr1["disp_reqt_seq"].ToString());
                        //else
                        //    _warehousRequest = _ScmCommonDAL.GetWarehouseRequest(dr1["disp_reqt_seq"].ToString());

                        if (_warehousRequest.Rows.Count > 0)
                        {
                            //for each inv_dispatch_request get equal record from inv_dispatch_warehouse_header
                            foreach (DataRow dr2 in _warehousRequest.Rows)
                            {
                                DataRow _row2 = _result.NewRow();
                                _row2 = _row1;
                                row[9] = dr2["disp_app_seq_no"];
                                row[10] = dr2["disp_from_location"];
                                row[11] = dr2["disp_to_location"];
                                row[12] = dr2["disp_req_status"];

                                DataTable _movmentHeader = null;
                                _movmentHeader = _inventoryDAL.GetMovementbyreqapp(dr2["disp_app_seq_no"].ToString());
                                //if (_com == "ABL" || _com == "LRP")
                                //    _movmentHeader = _inventoryDAL.GetMovementbyreqapp(dr2["disp_app_seq_no"].ToString());
                                //else
                                //    _movmentHeader = _ScmCommonDAL.GetMovementHeader(dr2["disp_app_seq_no"].ToString());


                                if (_movmentHeader.Rows.Count > 0)
                                {
                                    //for each inv_dispatch_warehouse_header get equal record from INV_MOVEMENT_HEADER
                                    foreach (DataRow dr3 in _movmentHeader.Rows)
                                    {
                                        DataRow _row3 = _result.NewRow();
                                        _row3 = _row2;
                                        row[13] = dr3["year_seq_no"];
                                        row[14] = dr3["doc_no"];
                                        row[15] = dr3["doc_type"];
                                        row[16] = Convert.ToDateTime(dr3["doc_date"]).ToString("dd/MMM/yyyy");
                                        row[17] = dr3["approved_by_1"];
                                        row[19] = dr3["create_when"];
                                        isAddRow = true;
                                        _result.Rows.Add(_row3.ItemArray);
                                    }
                                }
                                if (!isAddRow)
                                {
                                    isAddRow = true;
                                    _result.Rows.Add(_row2.ItemArray);
                                }
                            }
                        }
                        if (!isAddRow)
                        {
                            isAddRow = true;
                            _result.Rows.Add(_row1.ItemArray);
                        }
                    }
                }

                if (!isAddRow)
                {
                    isAddRow = true;
                    _result.Rows.Add(row.ItemArray);
                }
            }

            //for each record get equal from

            return _result;
        }

        public DataTable GetMRNTrackingDetails(string _com, string _mrn, string _dispatch, string _warehouse, string _mov)
        {
            DataTable _result = new DataTable();
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();
            Boolean _rowUpdate = false;
            /*
                itri_itm_cd
                itri_itm_stus
                itri_qty

                dispd_item_code
                dispd_requsted_qty
                dispd_item_status
                dispd_approved_qty

                disp_item_code
                disp_item_status
                disp_item_qty

                item_code
                item_status
                qty
             */

            _result.TableName = "Det";

            _result.Columns.Add("itri_itm_cd");
            _result.Columns.Add("itri_itm_stus");
            _result.Columns.Add("itri_qty");

            _result.Columns.Add("dispd_item_code");
            _result.Columns.Add("dispd_item_status");
            _result.Columns.Add("dispd_requsted_qty");
            _result.Columns.Add("dispd_approved_qty");

            _result.Columns.Add("disp_item_code");
            _result.Columns.Add("disp_item_status");
            _result.Columns.Add("disp_item_qty");

            _result.Columns.Add("item_code");
            _result.Columns.Add("item_status");
            _result.Columns.Add("qty");

            _result.Columns.Add("Categori");
            _result.Columns.Add("Subcategori");
            _result.Columns.Add("Range");

            //get mrn items

            bool isAddRow = false;
            DataTable _mrnTable = null;
            _mrnTable = _inventoryDAL.GetInventoryRequestItemsBySeqNo(_mrn);
            if (_mrnTable != null && _mrnTable.Rows.Count > 0)
            {
                foreach (DataRow _dr in _mrnTable.Rows)
                {
                    string _itemCd = "";
                    isAddRow = false;
                    DataRow _row = _result.NewRow();
                    _row[0] = _dr["itri_itm_cd"];
                    _row[1] = _dr["itri_itm_stus"];
                    _row[2] = _dr["itri_qty"];
                    //    _itemCd = _dr["itri_itm_cd"].ToString();

                    _row["Categori"] = _dr["mi_cate_1"];
                    _row["Subcategori"] = _dr["mi_cate_2"];
                    _row["Range"] = _dr["mi_cate_3"];

                    _result.Rows.Add(_row);
                }
            }

            DataTable _tdispatchTable = null;

            //updated by akila 2018/03/07 - As per the Dharshana's approval option, which is using to get mrn details from scm, will be removed.
            _tdispatchTable = _inventoryDAL.Get_Dispatch_Details(_dispatch);
            //if (_com == "ABL" || _com == "LRP")    //kapila 26/9/2016
            //    _tdispatchTable = _inventoryDAL.Get_Dispatch_Details(_dispatch);
            //else
            //    _tdispatchTable = _ScmCommonDAL.GetDispatchDetails(_dispatch);

            List<DataRow> _rwList = new List<DataRow>();
            foreach (DataRow tdr in _tdispatchTable.Rows)
            {
                _rwList = new List<DataRow>();
                _rowUpdate = false;
                string item = tdr["dispd_item_code"].ToString();
                foreach (DataRow dr in _result.Rows)
                {
                    if (dr["itri_itm_cd"].ToString() == item)
                    {
                        dr[3] = tdr["dispd_item_code"];
                        dr[4] = tdr["dispd_item_status"];
                        dr[5] = tdr["dispd_requsted_qty"];
                        dr[6] = tdr["dispd_approved_qty"];
                        _result.AcceptChanges();
                        _rowUpdate = true;
                        goto L1;
                    }
                    //else {
                    //    DataRow _row = _result.NewRow();
                    //    _row[3] = tdr["dispd_item_code"];
                    //    _row[4] = tdr["dispd_item_status"];
                    //    _row[5] = tdr["dispd_requsted_qty"];
                    //    _row[6] = tdr["dispd_approved_qty"];
                    //    _rwList.Add(_row);
                    //   // _result.AcceptChanges();
                    //}
                }
            L1:
                if (_rowUpdate == false)
                {
                    DataRow _row = _result.NewRow();
                    _row[3] = tdr["dispd_item_code"];
                    _row[4] = tdr["dispd_item_status"];
                    _row[5] = tdr["dispd_requsted_qty"];
                    _row[6] = tdr["dispd_approved_qty"];
                    _rwList.Add(_row);

                    foreach (DataRow dd in _rwList)
                    {
                        _result.Rows.Add(dd);
                    }
                }
            }

            DataTable _movmentTable = null;
            _movmentTable = _inventoryDAL.Get_Movment_Details(_dispatch);
            //if (_com == "ABL" || _com == "LRP")    //kapila 26/9/2016
            //    _movmentTable = _inventoryDAL.Get_Movment_Details(_dispatch);
            //else
            //    _movmentTable = _ScmCommonDAL.GetMovmentDetails(_mov);

            if (_movmentTable != null && _movmentTable.Rows.Count > 0)
            {
                foreach (DataRow _dr3 in _movmentTable.Rows)
                {
                    string item = _dr3["item_code"].ToString();
                    foreach (DataRow dr in _result.Rows)
                    {
                        if (dr["dispd_item_code"].ToString() == item)
                        {
                            dr[10] = _dr3["item_code"];
                            dr[11] = _dr3["status"];
                            dr[12] = _dr3["qty"];
                            //isAddRow = true;
                            _result.AcceptChanges();
                        }
                    }
                }
            }

            /*
            DataTable _dispatchTable = new DataTable();
            _dispatchTable = _tdispatchTable.Clone();
            //foreach (DataRow tdr in _tdispatchTable.Rows) {
            //    if (tdr["dispd_item_code"].ToString() == _itemCd) {
            //        _dispatchTable.ImportRow(tdr);
            //    }
            //}
            _dispatchTable = _tdispatchTable;

            if (_dispatchTable != null && _dispatchTable.Rows.Count > 0)
            {
                foreach (DataRow _dr1 in _dispatchTable.Rows)
                {
                    DataRow _row1 = _result.NewRow();
                    _row1 = _row;
                    _row1[3] = _dr1["dispd_item_code"];
                    _row1[4] = _dr1["dispd_item_status"];
                    _row1[5] = _dr1["dispd_requsted_qty"];
                    _row1[6] = _dr1["dispd_approved_qty"];

                    DataTable _warehouseTable = _ScmCommonDAL.GetWarehouseDetails(_warehouse);
                    if (_warehouseTable != null && _warehouseTable.Rows.Count > 0)
                    {
                        foreach (DataRow dr2 in _warehouseTable.Rows)
                        {
                            DataRow _row2 = _result.NewRow();
                            _row2 = _row1;
                            _row2[7] = dr2["disp_item_code"];
                            _row2[8] = dr2["disp_item_status"];
                            _row2[9] = dr2["disp_item_qty"];
                            DataTable _movmentTable = _ScmCommonDAL.GetMovmentDetails(_mov);
                            if (_movmentTable != null && _movmentTable.Rows.Count > 0)
                            {
                                foreach (DataRow _dr3 in _movmentTable.Rows)
                                {
                                    DataRow _row3 = _result.NewRow();
                                    _row3 = _row2;
                                    _row3[10] = _dr3["item_code"];
                                    _row3[11] = _dr3["status"];
                                    _row3[12] = _dr3["qty"];
                                    //isAddRow = true;
                                    _result.Rows.Add(_row3.ItemArray);
                                }
                            }
                            if (!isAddRow)
                            {
                                isAddRow = true;
                                _result.Rows.Add(_row2.ItemArray);
                            }
                        }
                    }
                    if (!isAddRow)
                    {
                        isAddRow = true;
                        _result.Rows.Add(_row1.ItemArray);
                    }
                }
            }
            if (!isAddRow)
            {
                isAddRow = true;
                _result.Rows.Add(_row.ItemArray);
            }
        }
    }
             */

            return _result;
        }

        public bool CheckSCMBondNo(string _company, string _bondNo, out string _siNo, out string _lcNo, out string _costSheetRef, out DateTime _bondDate, out string _suppCode)
        {
            bool _IsValid = false;
            _costSheetRef = string.Empty;
            _bondDate = DateTime.Now.Date;
            _lcNo = string.Empty;
            _siNo = string.Empty;
            _suppCode = string.Empty;

            _ScmCommonDAL = new SCMCommonDAL();
            _ScmCommonDAL.ConnectionOpen();
            DataTable _dt = _ScmCommonDAL.CheckBondNo(_company, _bondNo);
            if (_dt != null && _dt.Rows.Count > 0)
            {
                foreach (DataRow _dr in _dt.Rows)
                {
                    _costSheetRef = _dr["COST_SHEET_REF"].ToString();
                    _bondDate = Convert.ToDateTime(_dr["DOCUMENT_DATE"]).Date;
                    _lcNo = _dr["SUN_BOND_NO"].ToString();
                    _siNo = _dr["RELATED_DOCUMENT"].ToString();
                    _suppCode = _dr["EXPORTER"].ToString();
                    _IsValid = true;
                }
            }
            _ScmCommonDAL.ConnectionClose();
            return _IsValid;
        }

        public bool SaveSCMBondAsPO(string _bondNo, DateTime _bondDate, string _suppCode, string _siNo, string _lcNo, string _user, string _company, string _pc, string _loc)
        {
            Int32 row_aff = 0;
            int _delLineNo = 0;
            string _rtnDocNo = string.Empty;
            string _def_item_status = "GDLP";

            PurchaseOrder _poHdr = new PurchaseOrder();
            List<PurchaseOrderDetail> _poItemList = new List<PurchaseOrderDetail>();
            List<PurchaseOrderDelivery> _poItemDelList = new List<PurchaseOrderDelivery>();
            MasterAutoNumber masterAuto = new MasterAutoNumber();

            string _poType = "I";
            if (_bondNo.Contains("-PO")) _poType = "L";
            if (_bondNo.Contains("-CREQ")) _poType = "C";

            #region Fill PO Header
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _poHdr.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_user, "PO", 1, _company);
            _inventoryDAL.ConnectionClose();
            if (_poType == "I") _poHdr.Poh_tp = "I"; else _poHdr.Poh_tp = "L";
            _poHdr.Poh_sub_tp = "N";
            if (_poType == "C") _poHdr.Poh_sub_tp = "C";
            _poHdr.Poh_doc_no = _bondNo;
            _poHdr.Poh_com = _company;
            _poHdr.Poh_ope = "IMPORTS";
            if (_poType == "L") _poHdr.Poh_ope = "LOCAL";
            if (_poType == "C") _poHdr.Poh_ope = "LOCAL";
            _poHdr.Poh_profit_cd = _pc;
            _poHdr.Poh_dt = _bondDate.Date;
            _poHdr.Poh_ref = _siNo;
            _poHdr.Poh_job_no = "IMPORTS_PO";
            if (_poType == "L") _poHdr.Poh_job_no = "LOCAL_PO";
            if (_poType == "C") _poHdr.Poh_job_no = "QUO_PO";
            _poHdr.Poh_pay_term = "LC";
            _poHdr.Poh_supp = _suppCode;
            _poHdr.Poh_cur_cd = "LKR";
            _poHdr.Poh_ex_rt = 1;
            _poHdr.Poh_trans_term = "";
            _poHdr.Poh_port_of_orig = "";
            _poHdr.Poh_cre_period = "0";
            _poHdr.Poh_frm_yer = _bondDate.Year;
            _poHdr.Poh_frm_mon = _bondDate.Month;
            _poHdr.Poh_to_yer = _bondDate.Year;
            _poHdr.Poh_to_mon = _bondDate.Month;
            _poHdr.Poh_preferd_eta = _bondDate.Date;
            _poHdr.Poh_contain_kit = false;
            _poHdr.Poh_sent_to_vendor = false;
            _poHdr.Poh_sent_by = "";
            _poHdr.Poh_sent_via = "";
            _poHdr.Poh_sent_add = "";
            _poHdr.Poh_stus = "A";
            _poHdr.Poh_remarks = _lcNo;
            _poHdr.Poh_sub_tot = 0;
            _poHdr.Poh_tax_tot = 0;
            _poHdr.Poh_dis_rt = 0;
            _poHdr.Poh_dis_amt = 0;
            _poHdr.Poh_oth_tot = 0;
            _poHdr.Poh_tot = 0;
            _poHdr.Poh_reprint = false;
            _poHdr.Poh_tax_chg = false;
            _poHdr.poh_is_conspo = 0;
            _poHdr.Poh_cre_by = _user;
            #endregion

            _ScmCommonDAL = new SCMCommonDAL();
            _ScmCommonDAL.ConnectionOpen();
            DataTable _dt = null;
            if (_poType == "L")
            {
                _dt = _ScmCommonDAL.GetLOPOItems(_bondNo);
            }
            else if (_poType == "C")
            {
                _dt = _ScmCommonDAL.GetCONSQUOItems(_bondNo);
                _def_item_status = "CONS";
            }
            else
            {
                _dt = _ScmCommonDAL.GetBondItems(_bondNo);
                _def_item_status = "GOD";
            }

            _ScmCommonDAL.ConnectionClose();
            if (_dt != null && _dt.Rows.Count > 0)
            {
                foreach (DataRow _dr in _dt.Rows)
                {
                    #region Fill PO Item
                    PurchaseOrderDetail _poItem = new PurchaseOrderDetail();
                    _poItem.Pod_seq_no = _poHdr.Poh_seq_no;
                    _poItem.Pod_act_unit_price = Convert.ToDecimal(_dr["COST_PRICE_ACTUAL"].ToString());
                    _poItem.Pod_dis_amt = 0;
                    _poItem.Pod_dis_rt = 0;
                    _poItem.Pod_grn_bal = Convert.ToDecimal(_dr["CURRENT_QTY"].ToString());
                    _poItem.Pod_item_desc = _dr["DESCRIPTION"].ToString();
                    _poItem.Pod_itm_cd = _dr["ITEM_CODE"].ToString();
                    _poItem.Pod_itm_stus = _def_item_status;
                    _poItem.Pod_itm_tp = "M";
                    _poItem.Pod_kit_itm_cd = "";
                    _poItem.Pod_kit_line_no = 0;
                    _poItem.Pod_lc_bal = 0;
                    _poItem.Pod_line_amt = Convert.ToDecimal(_dr["COST_PRICE_ACTUAL"].ToString()) * Convert.ToDecimal(_dr["QUNTITY"].ToString()); ;
                    _poItem.Pod_line_no = Convert.ToInt32(_dr["ITEM_LINE_NO"].ToString());
                    _poItem.Pod_line_tax = 0;
                    _poItem.Pod_line_val = 0;
                    _poItem.Pod_nbt = 0;
                    _poItem.Pod_nbt_before = 0;
                    _poItem.Pod_pi_bal = 0;
                    _poItem.Pod_qty = Convert.ToDecimal(_dr["QUNTITY"].ToString());
                    _poItem.Pod_ref_no = "-";
                    if (_poType == "I") _poItem.Pod_ref_no = _dr["PI_NO"].ToString();
                    _poItem.Pod_si_bal = 0;
                    _poItem.Pod_tot_tax_before = 0;
                    _poItem.Pod_unit_price = Convert.ToDecimal(_dr["COST_PRICE_ACTUAL"].ToString());
                    _poItem.Pod_uom = "";
                    _poItem.Pod_vat = 0;
                    _poItem.Pod_vat_before = 0;
                    #endregion
                    _poItemList.Add(_poItem);

                    if (_poItemDelList.Count > 0)
                    {
                        //var max_DelQuery = (from tab1 in _poItemDelList select tab1.Podi_del_line_no).Max();
                        var result = (from rs in _poItemDelList where rs.Podi_line_no == Convert.ToInt32(_dr["ITEM_LINE_NO"].ToString()) select rs.Podi_del_line_no).ToList();
                        if (result != null && result.Count > 0)
                        {
                            _delLineNo = Convert.ToInt32(result.Max());
                        }
                        else _delLineNo = 0;
                    }
                    else
                    {
                        _delLineNo = 0;
                    }
                    #region Fill PO Delivery
                    _delLineNo = _delLineNo + 1;
                    PurchaseOrderDelivery _poItemDel = new PurchaseOrderDelivery();
                    _poItemDel.Podi_seq_no = _poHdr.Poh_seq_no;
                    _poItemDel.Podi_line_no = Convert.ToInt32(_dr["ITEM_LINE_NO"].ToString()); ;
                    _poItemDel.Podi_del_line_no = _delLineNo;
                    _poItemDel.Podi_loca = _loc;
                    _poItemDel.Podi_itm_cd = _dr["ITEM_CODE"].ToString();
                    _poItemDel.Podi_itm_stus = _def_item_status;
                    _poItemDel.Podi_qty = Convert.ToDecimal(_dr["QUNTITY"].ToString());
                    _poItemDel.Podi_bal_qty = Convert.ToDecimal(_dr["CURRENT_QTY"].ToString());
                    #endregion
                    _poItemDelList.Add(_poItemDel);
                }
            }
            row_aff = SaveNewPO(_poHdr, _poItemList, _poItemDelList, null, masterAuto, null, null, out _rtnDocNo);
            if (row_aff == 1)
            {
                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                int _ef = _ScmCommonDAL.Update_Bond_Status(_bondNo);
                _ScmCommonDAL.ConnectionClose();
                return true;
            }
            else
            {
                return false;
            }
        }

        public DataTable GetAvailableToken(DateTime _date, string _company, string _profitcenter, int _token)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAvailableToken(_date, _company, _profitcenter, _token);
        }

        public DataTable GetDocNoByJobNo(string _com, string _loc, string _jobno, out string _docno, Int32 _isExternal)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDocNoByJobNo(_com, _loc, _jobno, out  _docno, _isExternal);
        }

        public DataTable GetOutDocNoByJobNo(string _com, string _loc, string _jobno, out string _docno, Int32 _isExternal)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetOutDocNoByJobNo(_com, _loc, _jobno, out  _docno, _isExternal);
        }

        public DataTable SearchGranDin(string _com, string _loc, string _type, string _from, string _to, string _stus, string _cre, string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchGranDin(_com, _loc, _type, _from, _to, _stus, _cre, _item, _serial);
        }

        public Boolean IsExternalServiceAgent(string _com, string _code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsExternalServiceAgent(_com, _code);
        }

        public DataTable GetServiceLocation(string _com, string _code, out string _svcLoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetServiceLocation(_com, _code, out _svcLoc);
        }

        public DataTable GetVirtualLocation(string _com, string _type, out string _vLoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetVirtualLocation(_com, _type, out _vLoc);
        }

        public DataTable GetFixAssetLocation(string _com, string _loc, out string _fLoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetFixAssetLocation(_com, _loc, out _fLoc);
        }

        public void upload_MovementsMinus_RCC(DataRow dr)
        {
            //Open_Connections(0);

            string _sql = "";
            bool AOD_EX = false;

            int I_He = 0;
            //int I_It = 0;
            int I_Se = 0;

            string Str_Doc_Type = "";
            string para_Com = "";
            string para_Loca = "";

            string para_Ems_SeqNo = "";
            string para_Doc_No = "";
            string para_Ems_DocNo = "";
            string para_OthetDoc_No = "";
            System.DateTime para_Mov_Date = default(System.DateTime);
            string para_Other_Loca = "";
            string para_Profit_Center = "";
            string para_Channel = "";
            string para_Sub_Type = "";
            string para_Entry_Type = "";

            string para_bin = "";
            string para_ItemCode = "";
            string para_ItemStatus = "";
            double para_ItemQty = 0;
            double para_ItemCost = 0;

            string para_ItemSerial = "";
            string para_ItemChassis = "";
            string para_ItemWarr = "";
            System.DateTime para_Com_Grn_Date = default(System.DateTime);
            string para_Com_Grn_No = "";
            string para_Main_MFC = "N/A";

            Int16 _ems_itm_line = 0;
            Int16 _ems_batch_line = 0;
            Int16 _ems_ser_line = 0;

            string _ems_scm_in_doc_no = "";
            Int16 _ems_in_itm_line = 0;
            Int16 _ems_in_batch_line = 0;
            Int16 _ems_in_ser_line = 0;

            string _ems_ser_id = "0";
            string p_LocaType = "";

            Int32 _ref = 0;

            // Item Master Variables
            string itm_Desc = "";
            string itm_Model = "";
            string itm_Brand = "";
            string itm_Cate_1 = "";
            string itm_Cate_2 = "";
            string itm_Cate_3 = "";
            string itm_Uom = "";
            string itm_Serialize = "";
            string itm_Warranty = "";

            // Location Master Variables
            string loc_Ope = "";
            string loc_Chnl = "";

            //Movement Variable
            Int16 Move_I_Line_No = 0;
            Int16 Move_C_Line_No = 0;
            Int16 Move_Fifo_Line_No = 0;
            Int16 Move_S_Line_No = 0;

            //Login user
            string p_LoginUser = "EMS";
            string p_ComCostMethod = "FIFO";

            //Oracle Varialbe
            DataSet _emsData = new DataSet();

            // Get Header
            _sql = "SELECT ITH_SEQ_NO, ITH_COM, ITH_LOC, ITH_DOC_NO, ITH_DOC_YEAR, ITH_DOC_TP, ITH_OTH_DOCNO, ITH_DOC_DATE, ITH_OTH_LOC, ITH_ENTRY_NO, ITH_SUB_TP, ITH_ENTRY_TP, ITH_COM, ITH_BUS_ENTITY, ITH_REMARKS, ITH_VEHI_NO, ITH_DIRECT, ITH_CHANNEL, ITH_PC, ITH_DEL_ADD1, ITH_DEL_ADD2 " +
            "FROM INT_HDR " +
            "WHERE ITH_DIRECT = 0 AND  ITH_STUS IN ('A','F') AND ITH_JOB_NO='" + dr["INR_NO"].ToString() + "' AND ITH_COM ='" + dr["INR_COM_CD"].ToString() + "' " +
            " AND ITH_LOC='" + dr["INR_LOC_CD"].ToString() + "'" +
            "ORDER BY ITH_DOC_DATE";

            _emsData.Tables.Add("EMS_INT_HDR");

            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_SEQ_NO");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_COM");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_LOC");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DOC_NO");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DOC_YEAR");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DOC_TP");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_CATE_TP");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_OTH_DOCNO");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DOC_DATE");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_OTH_LOC");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_ENTRY_NO");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_SUB_TP");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_ENTRY_TP");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_BUS_ENTITY");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_REMARKS");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_VEHI_NO");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DIRECT");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_CHANNEL");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_PC");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DEL_ADD1");
            _emsData.Tables["EMS_INT_HDR"].Columns.Add("ITH_DEL_ADD2");

            DataRow _hdr = _emsData.Tables["EMS_INT_HDR"].NewRow();
            _hdr["ITH_SEQ_NO"] = "";
            _hdr["ITH_COM"] = dr["INR_COM_CD"].ToString();
            _hdr["ITH_LOC"] = dr["INR_LOC_CD"].ToString();
            _hdr["ITH_DOC_NO"] = "";
            _hdr["ITH_DOC_YEAR"] = DateTime.Now.Date.Year;
            _hdr["ITH_DOC_TP"] = "AOD";
            _hdr["ITH_CATE_TP"] = "NOR";
            _hdr["ITH_OTH_DOCNO"] = "";
            _hdr["ITH_DOC_DATE"] = DateTime.Now.Date;
            _hdr["ITH_OTH_LOC"] = "";
            _hdr["ITH_ENTRY_NO"] = "";
            _hdr["ITH_BUS_ENTITY"] = "";
            _hdr["ITH_REMARKS"] = "";
            _hdr["ITH_VEHI_NO"] = "";
            _hdr["ITH_DIRECT"] = "0";
            _hdr["ITH_CHANNEL"] = "";
            _hdr["ITH_PC"] = "";
            _hdr["ITH_REMARKS"] = "";
            _hdr["ITH_DEL_ADD1"] = "";
            _hdr["ITH_DEL_ADD2"] = "";

            _emsData.Tables["EMS_INT_HDR"].Rows.Add(_hdr);

            //OracleCommand _oCom = new OracleCommand(_sql, oConnection);
            //_oDa.SelectCommand = _oCom;
            //_oDa.Fill(_emsData, "EMS_INT_HDR");

            // Get Items
            _sql = "SELECT EMS.INT_ITM.ITI_DOC_NO AS DOCNO, EMS.INT_ITM.ITI_ITM_CD AS ITEM, EMS.MST_ITM_STUS.MIS_OLD_CD AS ITEMSTATUS, SUM(EMS.INT_ITM.ITI_QTY) AS QTY " +
                "FROM EMS.INT_ITM" +
                 "WHERE EMS.INT_ITM.ITI_SEQ_NO =" + Convert.ToInt32(_emsData.Tables["EMS_INT_HDR"].Rows[0]["ITH_SEQ_NO"].ToString()) + "";
            //_oCom = new OracleCommand(_sql, oConnection);
            //_oDa.SelectCommand = _oCom;
            //_oDa.Fill(_emsData, "EMS_INT_ITM");

            _emsData.Tables.Add("EMS_INT_ITM");

            _emsData.Tables["EMS_INT_ITM"].Columns.Add("DOCNO");
            _emsData.Tables["EMS_INT_ITM"].Columns.Add("ITEM");
            _emsData.Tables["EMS_INT_ITM"].Columns.Add("ITEMSTATUS");
            _emsData.Tables["EMS_INT_ITM"].Columns.Add("QTY");

            DataRow _itm = _emsData.Tables["EMS_INT_ITM"].NewRow();

            InventoryDAL _iDal = new InventoryDAL();
            MasterItem msitem = _iDal.GetItem(dr["INR_COM_CD"].ToString(), dr["INR_ITM"].ToString());

            _itm["DOCNO"] = "";
            _itm["ITEM"] = msitem.Mi_cd;
            _itm["ITEMSTATUS"] = msitem.Mi_itm_stus;
            _itm["QTY"] = 1;

            _emsData.Tables["EMS_INT_ITM"].Rows.Add(_itm);

            //Get Serials
            _sql = "SELECT EMS.INT_SER.ITS_BIN AS BIN, EMS.INT_SER.ITS_DOC_NO AS DOCNO, EMS.INT_SER.ITS_ITM_CD AS ITEM, EMS.MST_ITM_STUS.MIS_OLD_CD AS ITEMSTATUS, EMS.INT_SER.ITS_UNIT_COST AS UNITCOST, '1' AS QTY, " +
                "EMS.INT_SER.ITS_SER_1 AS SER1, EMS.INT_SER.ITS_SER_2 AS SER2, EMS.INT_SER.ITS_SER_3 AS SER3, EMS.INT_SER.ITS_WARR_NO AS WARR, EMS.INT_SER.ITS_ORIG_GRNDT AS GRNDATE, EMS.INT_SER.ITS_ORIG_GRNNO AS GRNNO, " +
                "EMS.INT_SER.ITS_SER_ID AS SERID, EMS.INT_SER.ITS_ITM_LINE AS ITM_LINE, EMS.INT_SER.ITS_BATCH_LINE AS BATCH_LINE, EMS.INT_SER.ITS_SER_LINE AS SER_LINE " +
                "FROM EMS.INT_SER" +
                "WHERE EMS.INT_SER=" + Convert.ToInt32(_emsData.Tables["EMS_INT_HDR"].Rows[0]["ITH_SEQ_NO"].ToString()) + "";

            _emsData.Tables.Add("EMS_INT_SER");

            _emsData.Tables["EMS_INT_SER"].Columns.Add("BIN");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("DOCNO");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("ITEM");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("ITEMSTATUS");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("UNITCOST");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("QTY");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("SER1");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("SER2");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("SER3");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("WARR");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("GRNDATE");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("GRNNO");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("SERID");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("ITM_LINE");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("BATCH_LINE");
            _emsData.Tables["EMS_INT_SER"].Columns.Add("SER_LINE");

            DataRow _ser = _emsData.Tables["EMS_INT_SER"].NewRow();
            //get serial details
            List<ReptPickSerials> _serialList = new List<ReptPickSerials>();
            string _bin = _iDal.GetDefaultBinCode(dr["INR_COM_CD"].ToString(), dr["INR_LOC_CD"].ToString());
            ReptPickSerials _reptPickSerial_ = _iDal.Get_all_details_on_serialID(dr["INR_COM_CD"].ToString(), dr["INR_LOC_CD"].ToString(), _bin, dr["INR_ITM"].ToString(), Convert.ToInt32(dr["INR_SERIAL_ID"].ToString()));

            _ser["BIN"] = _reptPickSerial_.Tus_bin;
            _ser["DOCNO"] = _reptPickSerial_.Tus_doc_no;
            _ser["ITEM"] = _reptPickSerial_.Tus_itm_cd;
            _ser["ITEMSTATUS"] = _reptPickSerial_.Tus_itm_stus;
            _ser["UNITCOST"] = _reptPickSerial_.Tus_unit_cost;
            _ser["QTY"] = 1;
            _ser["SER1"] = _reptPickSerial_.Tus_ser_1;
            _ser["SER2"] = _reptPickSerial_.Tus_ser_2;
            _ser["SER3"] = _reptPickSerial_.Tus_ser_3;
            _ser["WARR"] = _reptPickSerial_.Tus_warr_no;
            _ser["GRNDATE"] = _reptPickSerial_.Tus_orig_grndt;
            _ser["GRNNO"] = _reptPickSerial_.Tus_orig_grnno;
            _ser["SERID"] = _reptPickSerial_.Tus_ser_id;
            _ser["ITM_LINE"] = _reptPickSerial_.Tus_itm_line;
            _ser["BATCH_LINE"] = _reptPickSerial_.Tus_batch_line;
            _ser["SER_LINE"] = _reptPickSerial_.Tus_ser_line;

            _emsData.Tables["EMS_INT_SER"].Rows.Add(_ser);

            //_oCom = new OracleCommand(_sql, oConnection);
            //_oDa.SelectCommand = _oCom;
            //_oDa.Fill(_emsData, "EMS_INT_SER");

            //      Close_Connections();

            _emsData.Tables["EMS_INT_HDR"].Clear();
            _emsData.Tables["EMS_INT_ITM"].Clear();
            _emsData.Tables["EMS_INT_SER"].Clear();
        }

        public DataTable Search_RCC(string _com, string _loc, string _RCCno, DateTime _from, DateTime _to, string _stus, string _item, string _serial, string _warr)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Search_RCC(_com, _loc, _RCCno, _from, _to, _stus, _item, _serial, _warr);
        }

        public DataTable SEARCH_rccByDate(string _com, string _loc, string _stage, string _from, string _to, string isSR_AcceptPending)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SEARCH_rccByDate(_com, _loc, _stage, _from, _to, isSR_AcceptPending);
        }

        public DataTable Get_INT_RCC_STAGES_INFO(string _rccNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_INT_RCC_STAGES_INFO(_rccNo);
        }

        public bool CheckAllocationItemRagistration(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _tbl = _inventoryDAL.CheckAllocationItemRagistration(_item);
            if (_tbl == null && _tbl.Rows.Count <= 0) return false; else return true;
        }

        public Int16 CheckItemSerialStatus(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _tbl = _inventoryDAL.CheckItemSerialStatus(_item);
            Int16 _output = -2;
            if (_tbl != null && _tbl.Rows.Count > 0)
                _output = Convert.ToInt16(_tbl.Rows[0]["mi_is_ser1"]);
            return _output;
        }

        public InventoryRequest GetPendingRequest(string _item, int _serial, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPendingRequest(_item, _serial, _docNo);
        }

        public DataTable GetLocationCat3(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationCat3(_company);
        }

        public DataTable GetLocationByCat3(string _cat3, string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationByCat3(_cat3, _company);
        }

        public int SaveTransactionCategory(string _fromcompany, string _fromlocation, string _tocompany, string _tocat3, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            int _I = _inventoryDAL.SaveTransactionCategory(_fromcompany, _fromlocation, _tocompany, _tocat3, 1, _user);
            _inventoryDAL.ConnectionClose();
            return _I;
        }

        public Boolean CancelInventoryDocument(string _doc, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Boolean X = _inventoryDAL.CancelInventoryDocument(_doc, _user);
            _inventoryDAL.ConnectionClose();
            return X;
        }

        public bool CancelMannualDocument(DataTable TemDocTable, string _prof, string _loc, string _user, string _com, string _docType, out string _err)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _FMSinventoryDAL.ConnectionOpen();
                _FMSinventoryDAL.BeginTransaction();
                for (int i = 0; i < TemDocTable.Rows.Count; i++)
                {
                    if (Convert.ToBoolean(TemDocTable.Rows[i][4]))
                    {
                        if (TemDocTable.Rows[i][5].ToString() == "HPRS" || TemDocTable.Rows[i][5].ToString() == "HPRM")
                        {
                            int start = Convert.ToInt32(TemDocTable.Rows[i][2]);
                            int end = Convert.ToInt32(TemDocTable.Rows[i][3]);
                            //save reciept and reciept item for every cancel page no
                            for (; end >= start; start++)
                            {
                                MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                                _receiptAuto.Aut_cate_cd = _prof;
                                _receiptAuto.Aut_cate_tp = "PC";
                                _receiptAuto.Aut_start_char = TemDocTable.Rows[i][5].ToString();
                                _receiptAuto.Aut_direction = 1;
                                _receiptAuto.Aut_modify_dt = null;
                                _receiptAuto.Aut_moduleid = "HP";
                                _receiptAuto.Aut_number = 0;
                                _receiptAuto.Aut_year = null;
                                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, (short)_receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                                string _cusNo = _receiptAuto.Aut_cate_tp + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_receiptAuto);

                                //insert reciept
                                int seqNo = _inventoryDAL.GetSerialID();
                                RecieptHeader recieptHeadder = new RecieptHeader();
                                recieptHeadder.Sar_seq_no = seqNo;
                                recieptHeadder.Sar_prefix = TemDocTable.Rows[i][1].ToString();
                                recieptHeadder.Sar_manual_ref_no = start.ToString();
                                recieptHeadder.Sar_receipt_no = _cusNo;
                                recieptHeadder.Sar_com_cd = _com;
                                recieptHeadder.Sar_receipt_type = TemDocTable.Rows[i][5].ToString();
                                recieptHeadder.Sar_receipt_date = DateTime.Now;
                                recieptHeadder.Sar_profit_center_cd = _prof;
                                recieptHeadder.Sar_debtor_name = "CASH";
                                recieptHeadder.Sar_remarks = "Cancel";
                                recieptHeadder.Sar_act = false;
                                recieptHeadder.Sar_mod_by = _user;
                                recieptHeadder.Sar_mod_when = DateTime.Now;
                                _salesDAL.SaveReceiptHeader(recieptHeadder);

                                //insert reciept item
                                RecieptItem recieptItem = new RecieptItem();
                                recieptItem.Sard_seq_no = seqNo;
                                recieptItem.Sard_line_no = 1;
                                recieptItem.Sard_ref_no = start.ToString();
                                recieptItem.Sard_receipt_no = _cusNo;
                                recieptItem.Sard_pay_tp = "CASH";
                                recieptItem.Sard_settle_amt = 0;
                                _salesDAL.SaveReceiptItem(recieptItem);
                            }
                        }
                        _FMSinventoryDAL.UpdateGntManDocDt(_loc, TemDocTable.Rows[i][5].ToString(), "0", Convert.ToInt32(TemDocTable.Rows[i][3]), TemDocTable.Rows[i][1].ToString(), TemDocTable.Rows[i][0].ToString());
                        _FMSinventoryDAL.UpdateGntManDocPages(TemDocTable.Rows[i][1].ToString(), _loc, _docType, Convert.ToInt32(TemDocTable.Rows[i][2]), Convert.ToInt32(TemDocTable.Rows[i][3]), _user, TemDocTable.Rows[i][6].ToString());
                    }
                    else
                    {
                        if (TemDocTable.Rows[i][5].ToString() == "HPRS" || TemDocTable.Rows[i][5].ToString() == "HPRM")
                        {
                            int start = Convert.ToInt32(TemDocTable.Rows[i][2]);
                            int end = Convert.ToInt32(TemDocTable.Rows[i][3]);
                            //save reciept and reciept item for every cancel page no
                            for (; end >= start; start++)
                            {
                                MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                                _receiptAuto.Aut_cate_cd = _prof;
                                _receiptAuto.Aut_cate_tp = "PC";
                                _receiptAuto.Aut_start_char = TemDocTable.Rows[i][5].ToString();
                                _receiptAuto.Aut_direction = 1;
                                _receiptAuto.Aut_modify_dt = null;
                                _receiptAuto.Aut_moduleid = "HP";
                                _receiptAuto.Aut_number = 0;
                                _receiptAuto.Aut_year = null;
                                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, (short)_receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                                string _cusNo = _receiptAuto.Aut_cate_tp + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_receiptAuto);

                                //get seq no
                                int seqNo = _inventoryDAL.GetSerialID();
                                //insert reciept
                                RecieptHeader recieptHeadder = new RecieptHeader();
                                recieptHeadder.Sar_seq_no = seqNo;//start
                                recieptHeadder.Sar_prefix = TemDocTable.Rows[i][1].ToString();
                                recieptHeadder.Sar_receipt_no = _cusNo;
                                recieptHeadder.Sar_manual_ref_no = start.ToString();
                                recieptHeadder.Sar_com_cd = _com;
                                recieptHeadder.Sar_receipt_type = TemDocTable.Rows[i][5].ToString();
                                recieptHeadder.Sar_receipt_date = DateTime.Now;
                                recieptHeadder.Sar_profit_center_cd = _prof;
                                recieptHeadder.Sar_debtor_name = "CASH";
                                recieptHeadder.Sar_remarks = "Cancel";
                                recieptHeadder.Sar_act = false;
                                recieptHeadder.Sar_mod_by = _user;
                                recieptHeadder.Sar_mod_when = DateTime.Now;
                                _salesDAL.SaveReceiptHeader(recieptHeadder);

                                //insert reciept item
                                RecieptItem recieptItem = new RecieptItem();
                                recieptItem.Sard_seq_no = seqNo;//start
                                recieptItem.Sard_line_no = 1;
                                recieptItem.Sard_ref_no = start.ToString();
                                recieptItem.Sard_receipt_no = _cusNo;
                                recieptItem.Sard_pay_tp = "CASH";
                                recieptItem.Sard_settle_amt = 0;
                                _salesDAL.SaveReceiptItem(recieptItem);
                            }
                        }
                        //update using and used value
                        _FMSinventoryDAL.UpdateGntManDocDt(_loc, TemDocTable.Rows[i][5].ToString(), "1", Convert.ToInt32(TemDocTable.Rows[i][3]), TemDocTable.Rows[i][1].ToString(), TemDocTable.Rows[i][0].ToString());
                        _FMSinventoryDAL.UpdateGntManDocPages(TemDocTable.Rows[i][1].ToString(), _loc, _docType, Convert.ToInt32(TemDocTable.Rows[i][2]), Convert.ToInt32(TemDocTable.Rows[i][3]), _user, TemDocTable.Rows[i][6].ToString());
                    }
                }
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _FMSinventoryDAL.TransactionCommit();
                _err = "";
                return true;
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _FMSinventoryDAL.TransactionRollback();
                return false;
            }
        }

        public int CancelOutwardEntry(string _doc, string _user, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryDAL.CancelInventoryDocument(_doc, _user);
                //Added by Prabhath on 27/12/2013 *********************************** start *************************
                DataTable _tbl = _inventoryDAL.GetAODItem(_doc);
                if (_tbl != null && _tbl.Rows.Count > 0)
                {
                    string _refdoc = _tbl.Rows[0].Field<string>("itb_base_ref_no");
                    string _item = _tbl.Rows[0].Field<string>("itb_itm_cd");
                    string _status = _tbl.Rows[0].Field<string>("itb_itm_stus");
                    decimal _qty = _tbl.Rows[0].Field<decimal>("qty");
                    _inventoryDAL.UpdateAODRequestItem(_refdoc, _item, _status, _qty);
                }
                //Added by Prabhath on 27/12/2013 *********************************** end *************************
                _inventoryDAL.TransactionCommit();
                _err = "DONE";
                return 1;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        public DataTable GetItemTaxData(string _com, string _cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemTaxData(_com, _cd);
        }

        public DataTable GetPOSAccDetFromRepDB(string _com, string _cus, string _cusTp)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetPOSAccDetFromRepDB(_com, _cus, _cusTp);
        }

        public DataTable GetPickHeaderByDocument(string _company, string _document)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetPickHeaderByDocument(_company, _document);
        }
        public DataTable GetPickSerByDocument(string _company, string _document)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetPickSerByDocument(_company, _document);
        }

        public DataTable GetDirectUnFinishedDocument(string _company, string _location, string _documenttype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetDirectUnFinishedDocument(_company, _location, _documenttype);
        }

        public Int32 Account_Upload_Process(string _loc, string _acc, DateTime _dt, out string _err)
        {
            _posSCMUploadDAL = new POSSCMUploadDAL();
            return _posSCMUploadDAL.Account_Upload_Process(_loc, _acc, _dt, out _err);
        }

        public DataTable GetDirectOutType(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDirectOutType(_company);
        }

        public DataTable GetDirectStatus(string _company, string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDirectStatus(_company, _type);
        }

        public DataTable GetSubLocation(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSubLocation(_company, _location);
        }

        public DataTable GetLocationChannel(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationChannel(_company, _location);
        }

        public DataTable GetChannelPermission(string _maincd, string _cd, string _frmchnl, string _tochnl)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetChannelPermission(_maincd, _cd, _frmchnl, _tochnl);
        }

        public DataTable GetAllChannelForInventoryTracker(string _com, List<int> _role)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _dt = new DataTable();
            _dt.TableName = "Result";
            foreach (int r in _role)
            {
                _dt.Merge(_inventoryDAL.GetAllChannelForInventoryTracker(_com, r));
            }
            return _dt;
        }

        public DataTable GetInventoryTrackerChannel(string _com, string _channel, List<int> _role)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _dt = new DataTable();
            _dt.TableName = "res";
            foreach (int i in _role)
            {
                _dt.Merge(_inventoryDAL.GetInventoryTrackerChannel(_com, _channel, i));
            }
            return _dt;
        }

        public DataTable GetItemServiceSchedule(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemServiceSchedule(_item);
        }

        public DataTable Get_Reserved_Serials(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Reserved_Serials(_company, _location);
        }

        public bool Check_Valid_Document(string _company, string _doc, string _docType)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Check_Valid_Document(_company, _doc, _docType);
        }

        public DataTable GetScanDocInfor(string _company, string _location, string _document, int _serid)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetScanDocInfor(_company, _location, _document, _serid);
        }

        public int RemoveReservedSerials(string _company, string _location, int _scanSeq, string _doc, int _serID, string _user, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL.Remove_Reserved_SerID(_company, _location, _doc, _serID);
                _inventoryRepDAL.Remove_Scan_Serials(_scanSeq, _serID);
                _inventoryRepDAL.Remove_Scan_Header(_scanSeq);

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _err = "DONE";
                return 1;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        //Chamal 18-Sep-2013
        public int Check_Cons_Item_has_Quo(string _com, DateTime _date, List<ReptPickSerials> _scanSerialList, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                string _errHdr = "Consignment item(s) has not define quotation;";
                string _errDet = string.Empty;
                int _ref = 0;
                string _supp = "";
                DataTable _dtSup = null;

                foreach (ReptPickSerials p in _scanSerialList)
                {
                    if (p.Tus_itm_stus == "CONS")
                    {
                        if (_com == "AST")      //kapila 17/11/2015
                        {
                            _dtSup = _inventoryDAL.GetSuplierByItem(_com, p.Tus_itm_cd);
                            _supp = _dtSup.Rows[0]["mbii_cd"].ToString();
                        }
                        else
                            _supp = p.Tus_orig_supp;

                        if (_inventoryDAL.Get_Cons_Quo_Price(_com, _supp, _date.Date, p.Tus_itm_cd, p.Tus_qty) < 0)
                        {
                            if (string.IsNullOrEmpty(_errDet))
                            {
                                _errDet = "Item code : " + p.Tus_itm_cd;
                            }
                            else
                            {
                                _errDet = _errDet + "\nItem code : " + p.Tus_itm_cd;
                            }
                        }
                    }
                }
                _inventoryDAL.ConnectionClose();

                if (!string.IsNullOrEmpty(_errDet))
                {
                    _ref = -1;
                    _err = _errHdr + "\n" + _errDet + "\n" + "Please contact inventory department!";
                }
                else
                {
                    _err = string.Empty;
                }

                return _ref;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryDAL.ConnectionClose();
                return -1;
            }
        }

        private string GetRealPhoneNumber(string _phone)
        {
            Regex digitsOnly = new Regex(@"[^\d]");
            return digitsOnly.Replace(_phone, "");
        }

        public DataTable GetPOAlocItems(string _po)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOAlocItems(_po);
        }

        public Int32 SaveExchangeOut(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, List<ReptPickSerials> _doSerial, MasterAutoNumber _masterAutoNumber, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _recieptAuto, out string _docNo, out string _receiptNo, string _oldwarranty, string _newwarranty, DateTime _start, Int32 _Itmwarrperiod, string _warr_type, string _customer, string _name, string _address, string _tel, string _invoice, string _shop, string _shopname, decimal _unitprice, string _status, List<RequestApprovalDetail> _AppDet)
        {
            Int16 effect = 0;
            string RecieptNo = string.Empty;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _salesDAL = new SalesDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _generalDAL = new GeneralDAL();
                _custServiceDAL = new CustServiceDAL();


                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);



                if (_AppDet != null)
                {
                    Int32 _refLine = 0;
                    DataTable _dtlrefLine = _inventoryDAL.GetApprovalLine(_AppDet[0].Grad_ref);
                    foreach (DataRow r1 in _dtlrefLine.Rows)
                    {
                        _refLine = Convert.ToInt32(r1["refLine"]);
                    }
                    foreach (RequestApprovalDetail _itm in _AppDet)
                    {
                        _itm.Grad_line = _refLine + 1;
                        _generalDAL.Save_RequestApprove_Det(_itm);
                        _refLine = _refLine + 1;
                        if (_itm.Grad_anal4 != null)
                        {
                            Int32 _seqno = Convert.ToInt32(_itm.Grad_anal4);
                            _salesDAL.UpdateGeneralDiscount("M", _seqno, 0);
                        }


                    }


                }

                #region Payment
                string _shortcompany = _generalDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_anal5;
                if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                {
                    Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _inventoryDAL.GetSerialID() : -1;

                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_receipt_no = Convert.ToString(RecieptSeqNo);
                    _recieptHeader.Sar_tot_settle_amt = _recieptItem.Sum(x => x.Sard_settle_amt);
                    _salesDAL.SaveReceiptHeader(_recieptHeader);

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_receipt_no = Convert.ToString(RecieptSeqNo);
                                _salesDAL.SaveReceiptItem(_itm);

                                //kapila 4/11/2016
                                if (_itm.Sard_pay_tp == "ADVAN")
                                {
                                    Int32 result = _salesDAL.UpdateRefundDetails4Inv(_recieptHeader.Sar_tot_settle_amt, _recieptHeader.Sar_manual_ref_no, _itm.Sard_ref_no, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                {
                                    _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                    MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_debtor_cd, null, null, "C");
                                    MasterProfitCenter _profit = _salesDAL.GetProfitCenter(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);
                                    if (_entity != null)
                                        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                        {
                                            string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                            OutSMS _out = new OutSMS();
                                            _out.Createtime = DateTime.Now;
                                            _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _entity.Mbe_cd;
                                            //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                            _out.Senderphno = _entity.Mbe_mob;
                                            _out.Refdocno = _itm.Sard_ref_no;
                                            _out.Sender = _recieptHeader.Sar_create_by;
                                            _out.Createtime = DateTime.Now;
                                            _inventoryDAL.SaveSMSOut(_out);
                                        }
                                }

                                if (_itm.Sard_pay_tp.Trim() == "LORE")
                                {
                                    _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _recieptHeader.Sar_debtor_cd, _itm.Sard_anal_4);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "GVO")
                                {
                                    _fmsInventoryDal.UpdateRedeemVoucher(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _recieptHeader.Sar_create_by, _itm.Sard_settle_amt);
                                }
                            }
                        }

                    if (_recieptAuto != null)
                    {
                    nxt2:
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        RecieptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                        {
                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                            goto nxt2;
                        }
                        //_invDAL.UpdateAutoNumber(_recieptAuto);

                        _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                    }
                    _salesDAL.UpdateReceipt(string.Empty, RecieptNo, -100, RecieptSeqNo);
                    _receiptNo = RecieptNo;
                }
                #endregion



                Warr_Replacement_Det _newWarrRepDet = new Warr_Replacement_Det();
                Int32 _warrLine = 0;
                #region UpdateWarrantyReplacement
                // Nadeeka 22-01-2015
                //Service_Replacement_Hstry _warRept = new Service_Replacement_Hstry();
                //_warRept.Rrh_seq = _inventoryMovementHeader.Ith_seq_no;
                //_warRept.Rrh_repl_dt = _inventoryMovementHeader.Ith_doc_date;
                //_warRept.Rrh_sold_itm_cd = _reptPickSerials[0].Tus_itm_cd;
                //_warRept.Rrh_sold_ser1 = _reptPickSerials[0].Tus_ser_1;
                //_warRept.Rrh_sold_ser2 = _reptPickSerials[0].Tus_ser_2;
                //_warRept.Rrh_sold_warr = _newwarranty;
                //_warRept.Rrh_sold_serid = _reptPickSerials[0].Tus_ser_id;
                //_warRept.Rrh_repl_itm_cd = _doSerial[0].Tus_itm_cd;
                //_warRept.Rrh_repl_ser1 = _doSerial[0].Tus_ser_1;
                //_warRept.Rrh_repl_ser2 = _doSerial[0].Tus_ser_2;
                //_warRept.Rrh_repl_warr = _oldwarranty;
                //_warRept.Rrh_repl_serid = _doSerial[0].Tus_ser_id;
                //_warRept.Rrh_job_no = _doSerial[0].Tus_job_no;
                //_warRept.Rrh_job_line = _doSerial[0].Tus_job_line;
                //_warRept.Rrh_cre_by = _inventoryMovementHeader.Ith_cre_by;
                //_warRept.Rrh_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                //_warRept.Rrh_mod_by = _inventoryMovementHeader.Ith_cre_by;
                //_warRept.Rrh_mod_dt = _inventoryMovementHeader.Ith_cre_when;

                //_inventoryDAL.SaveWarrantyReplacement(_warRept); // 13-07-2015 Commented By Nadeeka

                //Insert scv_warr_replace  13-07-2015 Added By Nadeeka

                foreach (ReptPickSerials _pick in _reptPickSerials)
                {
                    if (_doSerial.Count != 0)
                    {
                        _newWarrRepDet.Swr_act = 1;
                        _newWarrRepDet.Swr_cre_by = _inventoryMovementHeader.Ith_cre_by;
                        _newWarrRepDet.Swr_dt = _inventoryMovementHeader.Ith_doc_date;
                        _newWarrRepDet.Swr_job_line = _pick.Tus_job_line;
                        _newWarrRepDet.Swr_jobno = _doSerial[0].Tus_job_no;
                        _newWarrRepDet.Swr_line = _warrLine + 1;
                        _newWarrRepDet.Swr_n_itm_cd = _pick.Tus_itm_cd;
                        _newWarrRepDet.Swr_n_itm_ser = _pick.Tus_ser_1;
                        _newWarrRepDet.Swr_n_warr = _pick.Tus_warr_no;
                        _newWarrRepDet.Swr_o_itm_cd = _doSerial[0].Tus_itm_cd;
                        _newWarrRepDet.Swr_o_itm_ser = _doSerial[0].Tus_ser_1;
                        _newWarrRepDet.Swr_o_warr = _oldwarranty;
                        _newWarrRepDet.Swr_ref = _docNo;
                        _newWarrRepDet.Swr_tp = "C";
                        _newWarrRepDet.Swr_rep_val = _pick.Tus_unit_price;
                        _warrLine = _warrLine + 1;
                        _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                    }

                    #region UpdateWarranty
                    string _document = _docNo;



                    //16-07-2015  Nadeeka
                    int _period = 0;
                    DataTable dt_WarrantyDet = _ScmCommonDAL.GetWarrantySearch(_inventoryMovementHeader.Ith_com, null, null, _oldwarranty, null);
                    if (dt_WarrantyDet == null || dt_WarrantyDet.Rows.Count <= 0)
                        dt_WarrantyDet = _inventoryDAL.GetWarrantySearch(_inventoryMovementHeader.Ith_com, null, null, _oldwarranty, null, null);

                    if (dt_WarrantyDet == null || dt_WarrantyDet.Rows.Count <= 0)  //kapila 18/1/2017
                    {
                        _period = _Itmwarrperiod;
                    }
                    else
                    {
                        foreach (DataRow r1 in dt_WarrantyDet.Rows)
                        {
                            _start = (DateTime)r1["Warra. Start Date"];
                            _customer = (String)r1["Customer Code"];
                            _name = (String)r1["Name"];
                            _invoice = (String)r1["Invoice"];
                            if (_warr_type == "NEWITEM") //Sanjeewa 2016-02-18
                            {
                                _period = _Itmwarrperiod;
                            }
                            else
                            {
                                _period = Convert.ToInt32(r1["Period"]);//03-09-2015 Nadeeka
                            }
                        }
                    }

                    //kapila 21/7/2017
                    DataTable _oldInvWar = _inventoryDAL.get_orig_inv_dt(_inventoryMovementHeader.Ith_com, _invoice);
                    if (_oldInvWar.Rows.Count > 0)
                        _start = Convert.ToDateTime(_oldInvWar.Rows[0]["ith_doc_date"]);


                    //updated 
                    _ScmCommonDAL.UpdateExchangeWarranty(_oldwarranty, _pick.Tus_warr_no, _document, _start.Date, _period, _customer, _name, _address, _tel, _invoice, _shop, _shopname, _unitprice, _status);
                    _inventoryDAL.UpdateExchangeWarranty(_pick.Tus_warr_no, _document, _period, _invoice, _start.Date, _start.Date, _status, _customer, _name, _address, _tel);

                    #endregion
                }




                #endregion

                #region Update ManualNo
                if (_inventoryMovementHeader.Ith_is_manual)
                {
                    MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                    if (_masterComp.MC_IS_SCM2_FMS == 1)
                        _inventoryDAL.UpdateManualDocNo(_inventoryMovementHeader.Ith_loc, "MDOC_INV", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), _docNo);
                    else
                        _fmsInventoryDal.UpdateManualDocNo(_inventoryMovementHeader.Ith_loc, "MDOC_INV", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), _docNo);
                }
                #endregion



                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();

                _custServiceDAL.TransactionCommit();
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
            }
            _receiptNo = RecieptNo;

            return effect;
        }

        //darshana 03-10-2013
        public DataTable Get_InterTrans_Req(string _company, string _user, string _reqTp, string _stus, DateTime _frmDt, DateTime _toDt, string _subTp)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_InterTrans_Req(_company, _user, _reqTp, _stus, _frmDt, _toDt, _subTp);
        }

        //Darshana - 04/10/2013
        public int UpdateInventoryRequestStatusBulk(List<InventoryRequest> _inventoryRequest)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                foreach (InventoryRequest _tmp in _inventoryRequest)
                {
                    result = _inventoryDAL.UpdateInventoryRequestStatusBulk(_tmp);
                }
                //_inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                result = 1;
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }

        public int RCCCancelProcess(string _Outdoc, string _user, string _com, string _loc, string _inDoc, string _rccNo, string _Stus, string _rccLoc, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (!string.IsNullOrEmpty(_Outdoc))
                {
                    _inventoryDAL.CancelInventoryDocument(_Outdoc, _user);
                }

                if (!string.IsNullOrEmpty(_inDoc))
                {
                    _inventoryDAL.CancelInwardInventoryDocument(_com, _loc, _inDoc, _user);
                }
                _inventoryDAL.UpdateRCCCancelStatus(_com, _rccLoc, _rccNo, _Stus, _user);
                _inventoryDAL.TransactionCommit();
                _err = "DONE";
                return 1;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        public InventoryHeader GetRccAodOut(string _com, string _loc, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRccAodOut(_com, _loc, _docNo);
        }

        public InventoryHeader GetRccAodIn(string _com, string _loc, string _Othdoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRccAodIn(_com, _loc, _Othdoc);
        }

        public List<ReptPickSerials> GetInvoiceSerialForExchange(string _company, string _location, string _user, string _session, string _defBin, string _invoice, int _baseRefline)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceSerialForExchange(_company, _location, _user, _session, _defBin, _invoice, _baseRefline);
        }

        public bool IsPendingOrApprovedRequestAvailable(string _company, string _location, string _type, string _document)
        {
            bool _isOk = false;
            _inventoryDAL = new InventoryDAL();
            DataTable _tbl = _inventoryDAL.CheckRequestAvailability(_company, _location, _type, _document);
            if (_tbl != null && _tbl.Rows.Count > 0) _isOk = true; else _isOk = false;
            return _isOk;
        }

        public string GetExchangeInDocument(string _company, string _location, string _request)
        {
            _inventoryDAL = new InventoryDAL();
            string _document = string.Empty;
            DataTable _tbl = _inventoryDAL.GetExchangeInDocument(_company, _location, _request);
            if (_tbl != null && _tbl.Rows.Count > 0)
                _document = _tbl.Rows[0].Field<string>("ith_doc_no");
            return _document;
        }

        public List<ReptPickSerials> GetLocationStockBalance(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationStockBalance(_company, _location);
        }

        public int ProcessPhysicalStockVerification(string _company, string _location, out List<PhysicalStockVerificationItem> _itemList, out List<PhysicalStockVerificationSerial> _serialList, out string _errList, DateTime _date, string _creBy, MasterAutoNumber _auto, string _isCommStatus, out string _jobNo)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                List<PhysicalStockVerificationItem> _tempItem = new List<PhysicalStockVerificationItem>();
                List<PhysicalStockVerificationSerial> _tempSerial = new List<PhysicalStockVerificationSerial>();
                List<ReptPickSerials> _invSerials = _inventoryDAL.GetLocationStockBalance(_company, _location);
                if (_invSerials != null)
                {
                    foreach (ReptPickSerials _ser in _invSerials)
                    {
                        PhysicalStockVerificationSerial _serial = new PhysicalStockVerificationSerial();
                        _serial.Auss_in_doc = _ser.Tus_doc_no;
                        _serial.Auss_in_dt = _ser.Tus_doc_dt;
                        _serial.Auss_item = _ser.Tus_itm_cd;
                        _serial.Auss_itm_stus = _isCommStatus == "Y" ? "GOD" : _ser.Tus_itm_stus;
                        _serial.Auss_warranty = _ser.Tus_warr_no;
                        _serial.Auss_serial = _ser.Tus_ser_1;
                        _serial.Auss_ser_id = _ser.Tus_ser_id;

                        //kapila 2/10/2014 get ith_cre_when in ITH_HDR
                        DataTable _dtIthHdr = _inventoryDAL.getDocDetByDocNo(_company, _location, _ser.Tus_doc_no);
                        if (_dtIthHdr.Rows.Count > 0)
                            _serial.AUSS_ORG_IN_DT = Convert.ToDateTime(_dtIthHdr.Rows[0]["ITH_CRE_WHEN"]);

                        _tempSerial.Add(_serial);
                    }

                    //process item list
                    //get distinct item codes
                    List<string> _disItems = _invSerials.Select(x => x.Tus_itm_cd).Distinct().ToList<string>();

                    if (_disItems != null)
                    {
                        //count db balance for each item
                        foreach (string _tem in _disItems)
                        {
                            List<ReptPickSerials> _temp = (from _itm in _invSerials
                                                           where _itm.Tus_itm_cd == _tem
                                                           select _itm).ToList<ReptPickSerials>();
                            if (_temp != null)
                            {
                                List<string> _stus = _temp.Select(x => x.Tus_itm_stus).Distinct().ToList<string>();
                                foreach (string st in _stus)
                                {
                                    List<ReptPickSerials> _temp1 = (from _itm in _invSerials
                                                                    where _itm.Tus_itm_cd == _tem && _itm.Tus_itm_stus == st
                                                                    select _itm).ToList<ReptPickSerials>();
                                    if (_temp1 != null)
                                    {
                                        MasterItem _mstItm = _inventoryDAL.GetItem(_company, _tem);

                                        PhysicalStockVerificationItem _item = new PhysicalStockVerificationItem();
                                        _item.Ausi_itm = _temp1[0].Tus_itm_cd;
                                        _item.Ausi_db_qty = _temp1.Count;
                                        _item.Ausi_stus = _isCommStatus == "Y" ? "GOD" : _temp1[0].Tus_itm_stus;
                                        if (_mstItm != null)
                                        {
                                            _item.Ausi_desc = _mstItm.Mi_shortdesc;
                                        }
                                        _tempItem.Add(_item);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    DataTable curr_bal = _inventoryDAL.GetStockBalanceCurrent(_creBy, null, null, null, null, null, null, null, null, 1, 0, _company, _location, "N", "N", "N", 0);

                    var stkverify = (from b in curr_bal.AsEnumerable()
                                     group b by new { Itemcode = b["item_code"] } into g
                                     select new
                                     {
                                         Itemcode1 = g.Key.Itemcode,
                                         ItemQty = g.Sum(x => x.Field<Decimal>("qty"))
                                     }).ToList();

                    for (int i = 0; i < stkverify.Count; i++)
                    {
                        MasterItem _mstItm = _inventoryDAL.GetItem(_company, stkverify[i].Itemcode1.ToString());

                        PhysicalStockVerificationItem _item = new PhysicalStockVerificationItem();
                        _item.Ausi_itm = stkverify[i].Itemcode1.ToString();
                        _item.Ausi_db_qty = Convert.ToDecimal(stkverify[i].ItemQty.ToString());
                        _item.Ausi_stus = "GOD";
                        if (_mstItm != null)
                        {
                            _item.Ausi_desc = _mstItm.Mi_shortdesc;
                        }
                        _tempItem.Add(_item);
                    }
                }

                int _seq = _inventoryDAL.GetSerialID();
                MasterAutoNumber _cvAuto = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                _cvAuto.Aut_modify_dt = null;
                _cvAuto.Aut_year = null;
                string _job = _cvAuto.Aut_cate_cd + "-" + _cvAuto.Aut_start_char + "-" + _cvAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_cvAuto);

                PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                _main.Ausm_cre_by = _creBy;
                _main.Ausm_cre_dt = DateTime.Now;
                _main.Ausm_dt = _date;
                _main.Ausm_loc = _location;
                _main.Ausm_stus = true;
                _main.Ausm_seq = _seq;
                _main.Ausm_job = _job;
                _main.Ausm_com = _company;
                _inventoryDAL.SavePhysicalStockVerificationMain(_main);

                foreach (PhysicalStockVerificationItem _itm in _tempItem)
                {
                    _itm.Ausi_seq = _seq;
                    _itm.Ausi_job = _job;
                    _inventoryDAL.SavePhysicalStockVerificationItem(_itm);
                }

                foreach (PhysicalStockVerificationSerial _ser in _tempSerial)
                {
                    _ser.Auss_seq = _seq;
                    _ser.Auss_job = _job;
                    _ser.Auss_type = "S";
                    _inventoryDAL.SavePhysicalStockVerificationSerial(_ser);
                }

                _inventoryDAL.TransactionCommit();
                _errList = "";
                _jobNo = _job;
                _serialList = _tempSerial;
                _itemList = _tempItem;
                return 1;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _errList = ex.Message;
                _jobNo = "";
                _serialList = null;
                _itemList = null;
                return -1;
            }
        }

        public List<AuditStatus> GetAllAuditStstus(string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllAuditStstus(_com);
        }

        public List<AuditReportStatus> GetAllAuditReportStstus(string _com, string _mainCd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllAuditReportStstus(_com, _mainCd);
        }

        public Int16 UpdatePhysicalStockItem(List<PhysicalStockVerificationItem> _itemList, out string _error)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                foreach (PhysicalStockVerificationItem _itm in _itemList)
                {
                    _inventoryDAL.UpdatePhysicalStockItemNoStatus(_itm);
                }

                _error = "";
                _inventoryDAL.TransactionCommit();
                return 1;
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        public int SavePhysicalStockVerification(PhsicalStockVerificationMain _main, List<PhysicalStockVerificationItem> _itemList, DataTable _serialList, out string _error, List<AuditRemarkValue> _rmkList)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryDAL.UpdateAuditStockStus(_itemList[0].Ausi_job, 2);

                //save item
                foreach (PhysicalStockVerificationItem _itm in _itemList)
                {
                    _inventoryDAL.UpdatePhysicalStockItem(_itm);
                }

                //save serials
                if (_serialList.Rows.Count > 0)
                {
                    foreach (DataRow _ser in _serialList.Rows)
                    {
                        PhysicalStockVerificationSerial _serial = new PhysicalStockVerificationSerial();
                        _serial.Auss_cre_by = _ser["Auss_cre_by"].ToString();
                        _serial.Auss_cre_dt = Convert.ToDateTime(_ser["Auss_cre_dt"]);
                        _serial.Auss_in_doc = _ser["Auss_in_doc"].ToString();
                        _serial.Auss_in_dt = Convert.ToDateTime(_ser["Auss_in_dt"]);
                        _serial.Auss_item = _ser["Auss_item"].ToString();
                        _serial.Auss_itm_stus = _ser["Auss_itm_stus"].ToString();
                        _serial.Auss_job = _ser["Auss_job"].ToString();
                        _serial.Auss_ref_stus = _ser["Auss_ref_stus"].ToString();
                        _serial.Auss_rpt_type = _ser["Auss_rpt_type"].ToString();
                        _serial.Auss_seq = Convert.ToInt32(_ser["Auss_seq"]);
                        _serial.Auss_ser_id = Convert.ToInt32(_ser["Auss_ser_id"]);
                        _serial.Auss_serial = _ser["Auss_serial"].ToString();
                        _serial.Auss_type = _ser["Auss_type"].ToString();
                        _serial.Auss_warranty = _ser["Auss_warranty"].ToString();
                        _serial.Auss_rmk = _ser["Auss_rmk"].ToString();
                        _inventoryDAL.SavePhysicalStockVerificationSerial(_serial);
                    }
                }
                //save remark
                //if (_rmkList != null && _rmkList.Count > 0)
                //{
                //    foreach (AuditRemarkValue _rmk in _rmkList)
                //    {



                //        _rmk.Ausv_job_seq = _itemList[0].Ausi_seq;
                //        _rmk.Ausv_job = _itemList[0].Ausi_job;
                //        _inventoryDAL.SavePhysicalStockVerificationRemark(_rmk);
                //    }
                //}

                _error = "";
                _inventoryDAL.TransactionCommit();
                return 1;
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        public List<AuditRemark> GeatAuditRemarks(string _com, string _rptType)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GeatAuditRemarks(_com, _rptType);
        }

        public Int16 SavePhysicalStockVerificationSerial(PhysicalStockVerificationSerial _serial, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryDAL.SavePhysicalStockVerificationSerial(_serial);
                _inventoryDAL.TransactionCommit();
                _err = "";
                return 1;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _err = ex.Message;
                return -1;
            }
        }

        public List<PhysicalStockVerificationSerial> GetPhysicalLedgerSerials(string _com, string _loc, string _job, string _itm, string _stus, string _type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPhysicalLedgerSerials(_com, _loc, _job, _itm, _stus, _type);
        }

        public List<PhysicalStockVerificationItem> GetPhysicalVerificationItems(string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPhysicalVerificationItems(_jobNo);
        }

        public List<PhysicalStockVerificationSerial> GetPhysicalVerificationSerials(string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPhysicalVerificationSerials(_jobNo);
        }

        public DataTable GetWarrantyDetail(string _company, string _serial1, string _serial2, string _warranty, string _invoice, string _acc)
        {
            DataTable _tbl = new DataTable();
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();

            _tbl = _inventoryDAL.GetWarrantySearch(_company, _serial1, _serial2, _warranty, _invoice, _acc);
            if (_tbl == null || _tbl.Rows.Count <= 0)
                _tbl = _ScmCommonDAL.GetWarrantySearch(_company, _serial1, _serial2, _warranty, _invoice);
            return _tbl;
        }

        public DataTable GetWarrantySearchAll(string _company, string _serial1, string _serial2, string _warranty, string _invoice)
        {
            DataTable _tbl = new DataTable();
            _ScmCommonDAL = new SCMCommonDAL();

            _tbl = _ScmCommonDAL.GetWarrantySearchAll(_company, _serial1, _serial2, _warranty, _invoice);
            return _tbl;
        }

        public DataTable GetDelivery(string _company, string _item, string _serial, string _warranty, string _invoice)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDelivery(_company, _item, _serial, _warranty, _invoice);
        }

        public DataTable GetReservationDet(string _company, string _resNo, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetReservationDet(_company, _resNo, _item, _status);
        }

        public DataTable GetSCMCustomer(string _customer)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMCustomer(_customer);
        }

        public DataTable GetSCMInvoiceDetail(string _invoice)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMInvoiceDetail(_invoice);
        }

        public DataTable GetSCMInvoiceDetailWithCom(string _company, string _invoice, string _item)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMInvoiceDetail(_company, _invoice, _item);
        }

        public DataTable GetSCMDeliveryDetail(string _invoice)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMDeliveryDetail(_invoice);
        }

        public DataTable GetSCMDeliveryDetailItem(string _invoice, string _item)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMDeliveryDetailItem(_invoice, _item);
        }

        public DataTable GetUserSearchDataT(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetUserSearchDataT(_company);
        }

        public DataSet GetUserSearchDataS(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetUserSearchDataS(_company);
        }

        public Int32 UpdateUserSearchData(string _company, out string _msg)
        {
            Int32 _effect = -1;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _effect = _inventoryDAL.UpdateUserSearchData(_company);
                _inventoryDAL.TransactionCommit();
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _msg = ex.Message;
            }
            return _effect;
        }

        public List<ReptPickSerials> GetSerialsByDocument(Int32 _seqNo, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialsByDocument(_seqNo, _docNo);
        }

        public DataTable GetServiceRequest(string _company, string _warranty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetServiceRequest(_company, _warranty);
        }

        public int PhysicalstkUpdateItemCount(string _job, string _itm, string _stus, int _type, int _qty)
        {
            int result = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            result = _inventoryDAL.PhysicalStockUpdateItemCount(_job, _itm, _stus, _type, _qty);
            _inventoryDAL.ConnectionClose();
            return result;
        }

        public decimal GetSCMDeliveryItemCost(string _item, string _doc, string _status)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMDeliveryItemCost(_item, _doc, _status);
        }

        public DataTable GetExchangeWara(string _request)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetExchangeWara(_request);
        }

        public Int16 SaveExchangeInward(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, Int32 _isWarRep)
        {
            Int16 effect = 0;
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _salesDAL = new SalesDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _salesDAL.ConnectionOpen();


                #region Check dublicate serial 02-10-2015
                // Nadeeka
                foreach (ReptPickSerials _ser in _reptPickSerials)
                {
                    if (!string.IsNullOrEmpty(_ser.Tus_ser_1))
                    {
                        if (_ser.Tus_ser_1.ToString().ToUpper() != "N/A")
                        {
                            DataTable _seltbl = _inventoryDAL.CheckSerialAvailability("SERIAL1", _ser.Tus_itm_cd, _ser.Tus_ser_1);
                            if (_seltbl.Rows.Count > 0)
                            {
                                _docNo = "This item is not a customer item, Serial already avilable in location :  " + _seltbl.Rows[0]["ins_loc"].ToString() + " document date " + Convert.ToDateTime(_seltbl.Rows[0]["ins_doc_dt"].ToString()).Date + " document # " + _seltbl.Rows[0]["ins_doc_no"].ToString() + " ";
                                effect = -1;
                                _inventoryRepDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _ScmCommonDAL.TransactionRollback();
                                _fmsInventoryDal.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                return effect;
                            }

                            DataTable _seltblscm = null;
                            //   if (_inventoryMovementHeader.Ith_com == "AAL" )
                            //  {
                            _seltblscm = _inventoryDAL.CheckSerialAvailabilityscm(_ser.Tus_itm_cd, _ser.Tus_ser_1);
                            if (_seltblscm.Rows.Count > 0)
                            {

                                _docNo = "This item is not a customer item, Serial already avilable in location :  " + _seltblscm.Rows[0]["location_code"].ToString() + " document date " + Convert.ToDateTime(_seltblscm.Rows[0]["inv_date"].ToString()).Date + " document # " + _seltblscm.Rows[0]["doc_ref_no"].ToString() + " ";
                                effect = -1;
                                _inventoryRepDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _ScmCommonDAL.TransactionRollback();
                                _fmsInventoryDal.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                return effect;
                            }
                            //    }


                        }
                    }
                }
                #endregion


                effect = 0;

                if (_reptPickSerials != null)
                {
                    effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    _inventoryDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);
                }
                else
                {
                    _docNo = "";
                }

                if (_isWarRep == 1)
                {
                    Int32 _eff = _salesDAL.UpdateInvoiceStatus(_inventoryMovementHeader.Ith_entry_no, "D");

                }
                if (_inventoryMovementHeader.Ith_anal_7 != 0)
                {
                    Int32 _eff1 = _salesDAL.UpdateCreditBalnce(_inventoryMovementHeader.Ith_sub_docno, _inventoryMovementHeader.Ith_anal_7);
                }

                #region Update ManualNo
                if (_inventoryMovementHeader.Ith_is_manual)
                {
                    MasterCompany _masterComp = _generalDAL.GetCompByCode(_inventoryMovementHeader.Ith_com);  //kapila 27/4/2016
                    if (_masterComp.MC_IS_SCM2_FMS == 1)
                        _inventoryDAL.UpdateManualDocNo(_inventoryMovementHeader.Ith_loc, "MDOC_SRN", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), _docNo);
                    else
                        _fmsInventoryDal.UpdateManualDocNo(_inventoryMovementHeader.Ith_loc, "MDOC_SRN", Convert.ToInt32(_inventoryMovementHeader.Ith_manual_ref), _docNo);
                }
                #endregion

                #region Update SRN qty add bu tharanga 2018/02/14
                if (_inventoryMovementHeader.Ith_process_name == "EXCHANGE") //add by tharanga update SRN qty 2018/02/07
                {
                    var _tblocainv =
                 from _pickSerials in _reptPickSerials
                 group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_inv_line_no } into itm
                 select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itmline = itm.Key.Tus_inv_line_no, itemqty = itm.Sum(p => p.Tus_qty) };
                    if (_tblocainv != null)//add by tharanga update SRN qty 2018/02/07
                    {
                        foreach (var item in _tblocainv)
                        {
                            _salesDAL.UpdateInvRevQty(_inventoryMovementHeader.Ith_entry_no, item.itemcode, item.itemqty, item.itmline, 0);
                        }
                    }
                    decimal _intBatchQty = 0;
                    decimal _intBatchQtyForIntSer = 0;
                    decimal _inrBatchQty = 0;
                    decimal _intSerQty = 0;
                    decimal _inrSerQty = 0;
                    decimal _tempcount = 0;
                    List<InventorySerialN> _intSerSaved = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventorySerialN> _inrSerSaved = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventoryBatchRefN> _inrBatchSaved = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);

                    _intBatchQty = _intBatchSaved.Sum(c => c.Itb_bal_qty1);
                    _intBatchQtyForIntSer = _intBatchSaved.Where(c => c.Tmp_is_serialized != -1).ToList().Sum(c => c.Itb_bal_qty1);
                    _inrBatchQty = _inrBatchSaved.Sum(c => c.Inb_qty);
                    _intSerQty = _intSerSaved.Count;
                    _inrSerQty = _inrSerSaved.Sum(c => c.Ins_available);
                    _tempcount = _reptPickSerials.Where(c => c.Tus_ser_id != 0).Count();
                    if (_tempcount != _intBatchQty)
                    {
                        _docNo = "Process Terminated ! Pick serial data invalid ! [Pick Qty VS AOD IN Qty]";
                        effect = -1;
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                        _fmsInventoryDal.TransactionCommit();
                        _salesDAL.TransactionCommit();
                        return effect;
                    }

                    if (_intBatchQty != _inrBatchQty)
                    {
                        _docNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        effect = -1;
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                        _fmsInventoryDal.TransactionCommit();
                        _salesDAL.TransactionCommit();
                        return effect;
                    }
                    if (_intBatchQtyForIntSer != _intSerQty)
                    {
                        _docNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        effect = -1;
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                        _fmsInventoryDal.TransactionCommit();
                        _salesDAL.TransactionCommit();
                        return effect;
                    }
                    if (_intBatchQtyForIntSer != _inrSerQty)
                    {
                        _docNo = "Process Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        effect = -1;
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                        _fmsInventoryDal.TransactionCommit();
                        _salesDAL.TransactionCommit();
                        return effect;
                    }

                }
                #endregion
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _salesDAL.TransactionCommit();

                //_inventoryRepDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();

                //_tr.Complete();

                //}
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _salesDAL.TransactionRollback();
            }
            return effect;
        }

        public DataTable GetGRANQtySummary(string _com, string _loc, string _type, string _from, string _to, string _stus, string _cre, string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetGRANQtySummary(_com, _loc, _type, _from, _to, _stus, _cre, _item, _serial);
        }

        public Int32 UpdateAuditStockStus(string _job, int _stus)
        {
            int _result = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _result = _inventoryDAL.UpdateAuditStockStus(_job, _stus);
            _inventoryDAL.ConnectionClose();
            return _result;
        }

        public List<InventoryCostRate> GetInventoryCostRate(string _com, string _type, string _stus, int _pd, string _oriStus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryCostRate(_com, _type, _stus, _pd, _oriStus);
        }

        public bool IsUserEntryExist(string _company, string _item, string _type, string _value)
        {
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();
            bool _isAvailable = false;

            DataTable _scm2 = _inventoryDAL.IsUserEntryExist(_company, _item, _type, _value);
            DataTable _scm1 = _ScmCommonDAL.IsUserEntryExist(_company, _item, _type, _value);

            if ((_scm1 != null || _scm2 != null) && (_scm1.Rows.Count > 0 || _scm2.Rows.Count > 0))
                _isAvailable = true;

            return _isAvailable;
        }

        public Int16 SavePhysicalStockVerificationItem(PhysicalStockVerificationItem _item)
        {
            Int16 result = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            result = _inventoryDAL.SavePhysicalStockVerificationItem(_item);
            _inventoryDAL.ConnectionClose();
            return result;
        }

        public List<ReptPickSerials> GetAdjustmentDetailFromRvtintser(string _company, string _accountno, string _revertno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAdjustmentDetailFromRvtintser(_company, _accountno, _revertno);
        }

        public int SavePhysicalStockVerificationRemark(AuditRemarkValue _rmk)
        {
            int result = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            try
            {
                result = _inventoryDAL.SavePhysicalStockVerificationRemark(_rmk);
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception)
            {
                _inventoryDAL.TransactionRollback();
            }

            _inventoryDAL.ConnectionClose();
            return result;
        }

        public List<AuditRemarkValue> GetPhicalStockRemark(string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPhicalStockRemark(_jobNo);
        }

        public int PhyscilStockRemoveRmk(string _job, int _serialId, int _line, out string _error)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryDAL.PhyscilStockRemoveRmk(_job, _serialId, _line);
                _inventoryDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }
        }




        public Int32 CancelOutwardDoc(string _doc, string _user, string _quo, out string _error)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryDAL.CancelOutwardDoc(_doc, _user);
                _inventoryDAL.CancelQuotationDoc(_quo, _doc, _user);
                _inventoryDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }
        }


        public DataTable GetProcessUser(int _seqno, string _document, string _company)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetProcessUser(_seqno, _document, _company);
        }

        public Int32 UpdateProcessUser(string _user, int _seqno, string _document, string _company, out string msg)
        {
            Int32 _effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryRepDAL.UpdateProcessUser(_user, _seqno, _document, _company);
                _inventoryRepDAL.TransactionCommit();
                msg = string.Empty; _effect = 1;
            }
            catch (Exception ex)
            {
                _inventoryRepDAL.TransactionRollback();
                msg = ex.Message; _effect = -1;
            }
            return _effect;
        }

        public bool CheckCompanyMulti(string _company)
        {
            bool _isok = false;
            _inventoryDAL = new InventoryDAL();
            DataTable _tbl = _inventoryDAL.CheckCompanyMulti(_company);
            if (_tbl != null && _tbl.Rows.Count > 0)
            {
                int _bool = _tbl.Rows[0].Field<Int16>("rfml_tg1");
                if (_bool == 1) _isok = true;
                else _isok = false;
            }
            return _isok;
        }

        public decimal GetLatestCost(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            decimal _out = 0;
            _out = _inventoryDAL.GetLatestCost(_company, _location, _item, _status);
            _inventoryDAL.ConnectionClose();
            return _out;
        }

        public List<InventorySerialRefN> GetSerialByID(string _serId, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialByID(_serId, _loc);
        }

        private ReptPickSerials AssignObject(DataRow _row, string _supplier, DateTime _date, string _dDocument, string _pDocument, string _company, string _location, string _bin, string _user, Int32 _userseqno, int _genSerID)
        {
            MasterItem _item = _inventoryDAL.GetItem(_company, _row.Field<string>("item_code"));
            ReptPickSerials _one = new ReptPickSerials();
            _one.Tus_base_doc_no = _dDocument;
            _one.Tus_base_itm_line = 1;
            _one.Tus_batch_line = 1;
            _one.Tus_bin = _bin;
            _one.Tus_com = _company;
            _one.Tus_cre_by = _user;
            _one.Tus_cre_dt = DateTime.Now.Date;
            _one.Tus_cross_batchline = 0;
            _one.Tus_cross_itemline = 0;
            _one.Tus_cross_seqno = 0;
            _one.Tus_cross_serline = 0;
            _one.Tus_doc_dt = _date.Date;
            _one.Tus_doc_no = _pDocument;
            _one.Tus_exist_grncom = string.Empty;
            _one.Tus_exist_grndt = Convert.ToDateTime("01/Jan/1900").Date;
            _one.Tus_exist_grnno = string.Empty;
            _one.Tus_exist_supp = _supplier;
            _one.Tus_isapp = 0;
            _one.Tus_iscovernote = 0;
            _one.Tus_itm_brand = _item.Mi_brand;
            _one.Tus_itm_cd = _item.Mi_cd;
            _one.Tus_itm_desc = _item.Mi_longdesc;
            _one.Tus_itm_line = Convert.ToInt32(_row.Field<Int64>("item_line_no"));
            _one.Tus_itm_model = _item.Mi_model;
            _one.Tus_itm_stus = _row.Field<string>("item_status");
            _one.Tus_loc = _location;
            _one.Tus_new_remarks = _row.Field<string>("wara_remarks");
            _one.Tus_new_status = string.Empty;
            _one.Tus_orig_grncom = string.Empty;
            _one.Tus_orig_grndt = Convert.ToDateTime("01/Jan/1900").Date;
            _one.Tus_orig_grnno = string.Empty;
            _one.Tus_orig_supp = _supplier;
            _one.Tus_out_date = Convert.ToDateTime("01/Jan/1900").Date;
            _one.Tus_qty = _row.Field<decimal>("qty");
            _one.Tus_resqty = 0;
            _one.Tus_seq_no = 0;
            _one.Tus_ser_1 = _row.Field<string>("serial_no");
            _one.Tus_ser_2 = _row.Field<string>("chassis_no");
            _one.Tus_ser_3 = string.Empty;
            _one.Tus_ser_4 = string.Empty;
            if (_genSerID == 0)
            {
                if (_row.Field<string>("grna_no") == "N/A")
                {
                    _one.Tus_ser_id = _inventoryDAL.GetSerialID();
                }
                else
                {
                    _one.Tus_ser_id = Convert.ToInt32(_row.Field<string>("grna_no"));
                    if (_one.Tus_ser_id == 0) _one.Tus_ser_id = _inventoryDAL.GetSerialID();
                }
            }
            else
            {
                _one.Tus_ser_id = _inventoryDAL.GetSerialID();
            }

            _one.Tus_ser_line = Convert.ToInt32(_row.Field<Int64>("doc_line_no"));
            _one.Tus_serial_id = string.Empty;
            _one.Tus_session_id = string.Empty;
            _one.Tus_unit_cost = _row.Field<decimal>("unit_price");
            _one.Tus_unit_price = _row.Field<decimal>("unit_price");
            _one.Tus_usrseq_no = _userseqno;
            _one.Tus_warr_no = _row.Field<string>("warrenty_no");
            _one.Tus_warr_period = Convert.ToInt32(_row.Field<Int64>("wara_period"));
            return _one;
        }

        public void GetSCMDeliveryOrder(DateTime _date, string _company, string _location, string _bin, string _party, string _dDocument, string _pDocument, string _user, out string _msg)
        {
            try
            {
                List<ReptPickSerials> _result = new List<ReptPickSerials>();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                string _connection = string.Empty;
                int _GenNewSerID = 0;
                int _eff = 0;
                bool _isSCM2DO = false;
                string _scm2Invoice = string.Empty;

                DataTable _tbl0 = _inventoryDAL.GetPartyConnection(_company, _party);
                if (_tbl0 != null && _tbl0.Rows.Count > 0)
                {
                    _connection = _tbl0.Rows[0].Field<string>("cstr_con_str");
                    _GenNewSerID = Convert.ToInt32(_tbl0.Rows[0]["cstr_new_serid"]);
                }

                _msg = string.Empty;
                if (string.IsNullOrEmpty(_connection)) { _msg = "The supplier information not setup. Please contact IT Dept."; return; }

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpenUnknown(_connection);

                //Check DO is SCM2 generated
                _dDocument = _dDocument.ToUpper().ToString();
                _dDocument = _dDocument.Replace("(U)", "");
                _isSCM2DO = _ScmCommonDAL.CheckIsSCM2DO(_dDocument, out _scm2Invoice);

                if (_isSCM2DO == true)
                {
                    //If DO SCM2, check Invoice and PO tally or not
                    #region Check invoice item and po items
                    DataTable _invoice = _ScmCommonDAL.GetSCM2InvoiceDT(_scm2Invoice);
                    //DataTable _po = _inventoryDAL.GetSCM2PoDT(_pDocument);
                    List<PurchaseOrderDetail> _poItemList = new List<PurchaseOrderDetail>();
                    _poItemList = _inventoryDAL.GetPOItemsList(_pDocument);

                    if (_invoice == null) { _msg = "Invoice not found!"; return; }
                    if (_invoice.Rows.Count <= 0) { _msg = "Invoice not found!"; return; }
                    if (_poItemList == null) { _msg = "PO not found!"; return; }
                    if (_poItemList.Count <= 0) { _msg = "PO not found!"; return; }

                    for (int i = 0; i < _invoice.Rows.Count; i++)
                    {
                        bool _poItemMatch = false;
                        //for (int p = 0; p < _po.Rows.Count; p++)
                        foreach (PurchaseOrderDetail _poitm in _poItemList)
                        {
                            string _invcItemStatus = _invoice.Rows[i]["ITEM_STATUS"].ToString();
                            DataTable _dtItemStatus = _inventoryDAL.GetItemStatusMaster(_invoice.Rows[i]["ITEM_STATUS"].ToString(), null);
                            for (int p = 0; p < _dtItemStatus.Rows.Count; p++)
                            {
                                if (_dtItemStatus.Rows[p]["mis_lp_cd"].ToString() == "0") _invcItemStatus = _dtItemStatus.Rows[p]["mis_lp_cd"].ToString();
                            }

                            if (_invoice.Rows[i]["ITEM_CODE"].ToString() == _poitm.Pod_itm_cd.ToString() && _invcItemStatus == _poitm.Pod_itm_stus.ToString() && Convert.ToDecimal(_invoice.Rows[i]["UNIT_RATE"]) == _poitm.Pod_unit_price && Convert.ToDecimal(_invoice.Rows[i]["QTY"]) == _poitm.Pod_qty)
                            {
                                _poitm.Pod_ref_no = _invoice.Rows[i]["LINE_NO"].ToString();
                                _poItemMatch = true;
                            }
                        }
                        if (_poItemMatch == false)
                        {
                            _msg = "Invoice item and PO item not match!\n" +
                                _invoice.Rows[i]["ITEM_CODE"].ToString() + "\n" +
                                _invoice.Rows[i]["ITEM_STATUS"].ToString() + "\n" +
                                Convert.ToDecimal(_invoice.Rows[i]["UNIT_RATE"]) + "\n" +
                                Convert.ToDecimal(_invoice.Rows[i]["QTY"])
                                ; return;
                        }
                    }
                    #endregion

                    int user_seq_num = GET_SEQNUM_FOR_INVOICE("GRN", _company, _pDocument, 1);
                    _inventoryDAL = new InventoryDAL();
                    _inventoryRepDAL = new ReptCommonDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryRepDAL.ConnectionOpen();
                    if (user_seq_num <= 0)
                    {
                        user_seq_num = _inventoryDAL.Generate_new_seq_num(company_: _company, usrID: _user, doc_type: "GRN", direction_: 1);
                        ReptPickHeader RPH = new ReptPickHeader();
                        RPH.Tuh_doc_tp = "GRN";
                        RPH.Tuh_cre_dt = DateTime.Today;
                        RPH.Tuh_ischek_itmstus = true;
                        RPH.Tuh_ischek_reqqty = true;
                        RPH.Tuh_ischek_simitm = true;
                        RPH.Tuh_session_id = string.Empty;
                        RPH.Tuh_usr_com = _company;
                        RPH.Tuh_usr_id = _user;
                        RPH.Tuh_usrseq_no = user_seq_num;
                        RPH.Tuh_direct = true;
                        RPH.Tuh_doc_no = _pDocument;
                        int affected_rows = _inventoryRepDAL.SavePickedHeader(RPH);
                    }

                    DataTable _tbl = _ScmCommonDAL.GetSCMDeliveryOrder(_dDocument, "SCM2");
                    if (_tbl == null) { _msg = "DO details not found!"; return; }
                    if (_tbl.Rows.Count <= 0) { _msg = "DO details not found!"; return; }

                    foreach (PurchaseOrderDetail _poitm in _poItemList)
                    {
                        _tbl.AsEnumerable().ToList().Where(x => x.Field<int>("po_line") == Convert.ToInt32(_poitm.Pod_ref_no.ToString())).ToList().ForEach(x => { x.SetField<decimal>("unit_rate", _poitm.Pod_act_unit_price); x.SetField<int>("invc_line", _poitm.Pod_line_no); x.SetField<string>("invc_no", _pDocument); });
                    }


                    _inventoryDAL.BeginTransaction();
                    _inventoryRepDAL.BeginTransaction();
                    foreach (DataRow _r in _tbl.Rows)
                    {
                        #region Assign serial object
                        MasterItem _item = _inventoryDAL.GetItem(_company, _r["item_code"].ToString());
                        ReptPickSerials _one = new ReptPickSerials();
                        _one.Tus_base_doc_no = _dDocument;
                        _one.Tus_base_itm_line = 1;
                        _one.Tus_batch_line = 1;
                        _one.Tus_bin = _bin;
                        _one.Tus_com = _company;
                        _one.Tus_cre_by = _user;
                        _one.Tus_cre_dt = DateTime.Now.Date;
                        _one.Tus_cross_batchline = 0;
                        _one.Tus_cross_itemline = 0;
                        _one.Tus_cross_seqno = 0;
                        _one.Tus_cross_serline = 0;
                        _one.Tus_doc_dt = _date.Date;
                        _one.Tus_doc_no = _pDocument;
                        _one.Tus_exist_grncom = string.Empty;
                        _one.Tus_exist_grndt = Convert.ToDateTime("01/Jan/1900").Date;
                        _one.Tus_exist_grnno = string.Empty;
                        _one.Tus_exist_supp = _party;
                        _one.Tus_isapp = 0;
                        _one.Tus_iscovernote = 0;
                        _one.Tus_itm_brand = _item.Mi_brand;
                        _one.Tus_itm_cd = _item.Mi_cd;
                        _one.Tus_itm_desc = _item.Mi_longdesc;
                        _one.Tus_itm_line = Convert.ToInt32(_r["invc_line"].ToString());
                        _one.Tus_itm_model = _item.Mi_model;
                        _one.Tus_itm_stus = _r["item_status"].ToString();
                        _one.Tus_loc = _location;
                        _one.Tus_new_remarks = "N/A";
                        _one.Tus_new_status = string.Empty;
                        _one.Tus_orig_grncom = _r["grncom"].ToString();
                        _one.Tus_orig_grndt = Convert.ToDateTime(_r["grn_date"].ToString()).Date;
                        _one.Tus_orig_grnno = _r["grn_no"].ToString();
                        _one.Tus_orig_supp = _r["supp"].ToString();
                        _one.Tus_out_date = Convert.ToDateTime("01/Jan/1900").Date;
                        _one.Tus_qty = 1;
                        _one.Tus_resqty = 0;
                        _one.Tus_seq_no = 0;
                        _one.Tus_ser_1 = _r["ser1"].ToString();
                        _one.Tus_ser_2 = _r["ser2"].ToString();
                        _one.Tus_ser_3 = _r["ser3"].ToString();
                        _one.Tus_ser_4 = _r["ser4"].ToString();
                        if (_GenNewSerID == 0)
                        {
                            _one.Tus_ser_id = Convert.ToInt32(_r["ser_id"].ToString());
                            if (_one.Tus_ser_id == 0) _one.Tus_ser_id = _inventoryDAL.GetSerialID();
                        }
                        else
                        {
                            _one.Tus_ser_id = _inventoryDAL.GetSerialID();
                        }

                        _one.Tus_ser_line = Convert.ToInt32(_r["invc_line"].ToString());
                        _one.Tus_serial_id = string.Empty;
                        _one.Tus_session_id = string.Empty;
                        _one.Tus_unit_cost = Convert.ToDecimal(_r["unit_rate"].ToString());
                        _one.Tus_unit_price = Convert.ToDecimal(_r["unit_rate"].ToString());
                        _one.Tus_usrseq_no = user_seq_num;
                        _one.Tus_warr_no = _r["warr"].ToString();
                        _one.Tus_warr_period = Convert.ToInt32(_r["warr_period"].ToString());
                        #endregion
                        _inventoryRepDAL.SavePickedItemSerials(_one);
                        _ScmCommonDAL.UpdateSGLDeliveryOrder(_dDocument, "0", _one.Tus_ser_id.ToString());
                    }
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    DataTable _tbl = _ScmCommonDAL.GetSCMDeliveryOrder(_dDocument, _party);
                    if (_tbl == null) { _msg = "DO details not found!"; return; }
                    if (_tbl.Rows.Count <= 0) { _msg = "DO details not found!"; return; }
                    DataTable _poLst = _inventoryDAL.GetPOItemsDataTable(_company, _pDocument, 1);

                    int user_seq_num = GET_SEQNUM_FOR_INVOICE("GRN", _company, _pDocument, 1);

                    //is already save delete serials from temp serials
                    //SACHITH ADD 2014/01/10
                    if (user_seq_num > 0) _eff = Delete_rept_Pick_Ser(user_seq_num);

                    //END
                    foreach (DataRow _r in _poLst.Rows)
                    {
                        string _postatus = _r.Field<string>("POD_ITM_STUS");
                        string _poItem = _r.Field<string>("PODI_ITM_CD");
                        int _polineno = _r.Field<Int32>("PODI_LINE_NO");
                        decimal _poPrice = _r.Field<decimal>("UNIT_PRICE");

                        _tbl.AsEnumerable().ToList().Where(x => x.Field<string>("item_code") == _poItem && x.Field<string>("MIS_LP_CD") == _postatus).ToList().ForEach(x => x.SetField<string>("item_status", _postatus));
                        _tbl.AsEnumerable().ToList().Where(x => x.Field<string>("item_code") == _poItem && x.Field<string>("MIS_LP_CD") == _postatus).ToList().ForEach(x => x.SetField<Int32>("item_line_no", _polineno));
                        _tbl.AsEnumerable().ToList().Where(x => x.Field<string>("item_code") == _poItem && x.Field<string>("MIS_LP_CD") == _postatus).ToList().ForEach(x => x.SetField<decimal>("unit_price", _poPrice));
                    }

                    _inventoryDAL = new InventoryDAL();
                    _inventoryRepDAL = new ReptCommonDAL();
                    _inventoryDAL.ConnectionOpen();
                    if (user_seq_num <= 0)
                    {
                        user_seq_num = _inventoryDAL.Generate_new_seq_num(company_: _company, usrID: _user, doc_type: "GRN", direction_: 1);
                        ReptPickHeader RPH = new ReptPickHeader();
                        RPH.Tuh_doc_tp = "GRN";
                        RPH.Tuh_cre_dt = DateTime.Today;
                        RPH.Tuh_ischek_itmstus = true;
                        RPH.Tuh_ischek_reqqty = true;
                        RPH.Tuh_ischek_simitm = true;
                        RPH.Tuh_session_id = string.Empty;
                        RPH.Tuh_usr_com = _company;
                        RPH.Tuh_usr_id = _user;
                        RPH.Tuh_usrseq_no = user_seq_num;
                        RPH.Tuh_direct = true;
                        RPH.Tuh_doc_no = _pDocument;
                        int affected_rows = _inventoryRepDAL.SavePickedHeader(RPH);
                    }

                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _inventoryRepDAL.BeginTransaction();

                    if (_tbl != null && _tbl.Rows.Count > 0) foreach (DataRow _r in _tbl.Rows) _result.Add(AssignObject(_r, _party, _date, _dDocument, _pDocument, _company, _location, _bin, _user, user_seq_num, _GenNewSerID));
                    {
                        //SACHITH COMMENT 1 LINE 2014/01/10
                        //if (!_isAlreadySave)
                        foreach (ReptPickSerials _two in _result)
                        {
                            _inventoryRepDAL.SavePickedItemSerials(_two);
                            _ScmCommonDAL.UpdateSGLDeliveryOrder(_dDocument, _two.Tus_itm_cd, _two.Tus_ser_1);
                        }
                    }

                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _msg = ex.Message;
            }
        }

        public void GetSCMAOD(DateTime _date, string _company, string _location, string _bin, string _party, string _dDocument, string _pDocument, string _user, out string _msg)
        {
            try
            {
                List<ReptPickSerials> _result = new List<ReptPickSerials>();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                string _connection = string.Empty;
                int _GenNewSerID = 0;
                int _eff = 0;
                bool _isSCM2DO = false;
                string _scm2Invoice = string.Empty;

                DataTable _tbl0 = _inventoryDAL.GetPartyConnection(_company, _party);
                if (_tbl0 != null && _tbl0.Rows.Count > 0)
                {
                    _connection = _tbl0.Rows[0].Field<string>("cstr_con_str");
                    _GenNewSerID = Convert.ToInt32(_tbl0.Rows[0]["cstr_new_serid"]);
                }

                _msg = string.Empty;
                if (string.IsNullOrEmpty(_connection)) { _msg = "The supplier information not setup. Please contact IT Dept."; return; }

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpenUnknown(_connection);

                //Check AOD is SCM2 generated
                _dDocument = _dDocument.ToUpper().ToString();
                _dDocument = _dDocument.Replace("(U)", "");
                _isSCM2DO = _ScmCommonDAL.CheckIsSCM2AOD(_dDocument, out _scm2Invoice);

                if (_isSCM2DO == true)
                {


                    int user_seq_num = GET_SEQNUM_FOR_INVOICE("ADJ", _company, _pDocument, 1);
                    _inventoryDAL = new InventoryDAL();
                    _inventoryRepDAL = new ReptCommonDAL();
                    _inventoryDAL.ConnectionOpen();
                    if (user_seq_num <= 0)
                    {
                        user_seq_num = _inventoryDAL.Generate_new_seq_num(company_: _company, usrID: _user, doc_type: "ADJ", direction_: 1);
                        ReptPickHeader RPH = new ReptPickHeader();
                        RPH.Tuh_doc_tp = "ADJ";
                        RPH.Tuh_cre_dt = DateTime.Today;
                        RPH.Tuh_ischek_itmstus = true;
                        RPH.Tuh_ischek_reqqty = true;
                        RPH.Tuh_ischek_simitm = true;
                        RPH.Tuh_session_id = string.Empty;
                        RPH.Tuh_usr_com = _company;
                        RPH.Tuh_usr_id = _user;
                        RPH.Tuh_usrseq_no = user_seq_num;
                        RPH.Tuh_direct = true;
                        RPH.Tuh_doc_no = _pDocument;
                        int affected_rows = _inventoryRepDAL.SavePickedHeader(RPH);
                    }
                    if (_ScmCommonDAL.checkIsConsign(_dDocument, "SCM2") == 0) { _msg = "Not a consignment document number!"; return; }
                    DataTable _tbl = _ScmCommonDAL.GetSCMDeliveryOrder(_dDocument, "SCM2");

                    if (_tbl == null) { _msg = "AOD details not found!"; return; }
                    if (_tbl.Rows.Count <= 0) { _msg = "AOD details not found!"; return; }

                    //foreach (PurchaseOrderDetail _poitm in _poItemList)
                    //{
                    //    _tbl.AsEnumerable().ToList().Where(x => x.Field<int>("po_line") == Convert.ToInt32(_poitm.Pod_ref_no.ToString())).ToList().ForEach(x => { x.SetField<decimal>("unit_rate", _poitm.Pod_act_unit_price); x.SetField<int>("invc_line", _poitm.Pod_line_no); x.SetField<string>("invc_no", _pDocument); });
                    //}

                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _inventoryRepDAL.BeginTransaction();
                    foreach (DataRow _r in _tbl.Rows)
                    {
                        #region Assign serial object
                        MasterItem _item = _inventoryDAL.GetItem(_company, _r["item_code"].ToString());
                        ReptPickSerials _one = new ReptPickSerials();
                        _one.Tus_base_doc_no = _dDocument;
                        _one.Tus_base_itm_line = 1;
                        _one.Tus_batch_line = 1;
                        _one.Tus_bin = _bin;
                        _one.Tus_com = _company;
                        _one.Tus_cre_by = _user;
                        _one.Tus_cre_dt = DateTime.Now.Date;
                        _one.Tus_cross_batchline = 0;
                        _one.Tus_cross_itemline = 0;
                        _one.Tus_cross_seqno = 0;
                        _one.Tus_cross_serline = 0;
                        _one.Tus_doc_dt = _date.Date;
                        _one.Tus_doc_no = _pDocument;
                        _one.Tus_exist_grncom = string.Empty;
                        _one.Tus_exist_grndt = Convert.ToDateTime("01/Jan/1900").Date;
                        _one.Tus_exist_grnno = string.Empty;
                        _one.Tus_exist_supp = _party;
                        _one.Tus_isapp = 0;
                        _one.Tus_iscovernote = 0;
                        _one.Tus_itm_brand = _item.Mi_brand;
                        _one.Tus_itm_cd = _item.Mi_cd;
                        _one.Tus_itm_desc = _item.Mi_longdesc;
                        _one.Tus_itm_line = Convert.ToInt32(_r["invc_line"].ToString());
                        _one.Tus_itm_model = _item.Mi_model;
                        _one.Tus_itm_stus = _r["item_status"].ToString();
                        _one.Tus_loc = _location;
                        _one.Tus_new_remarks = "N/A";
                        _one.Tus_new_status = string.Empty;
                        _one.Tus_orig_grncom = _r["grncom"].ToString();
                        _one.Tus_orig_grndt = Convert.ToDateTime(_r["grn_date"].ToString()).Date;
                        _one.Tus_orig_grnno = _r["grn_no"].ToString();
                        _one.Tus_orig_supp = _r["supp"].ToString();
                        _one.Tus_out_date = Convert.ToDateTime("01/Jan/1900").Date;
                        _one.Tus_qty = 1;
                        _one.Tus_resqty = 0;
                        _one.Tus_seq_no = 0;
                        _one.Tus_ser_1 = _r["ser1"].ToString();
                        _one.Tus_ser_2 = _r["ser2"].ToString();
                        _one.Tus_ser_3 = _r["ser3"].ToString();
                        _one.Tus_ser_4 = _r["ser4"].ToString();
                        if (_GenNewSerID == 0)
                        {
                            _one.Tus_ser_id = Convert.ToInt32(_r["ser_id"].ToString());
                            if (_one.Tus_ser_id == 0) _one.Tus_ser_id = _inventoryDAL.GetSerialID();
                        }
                        else
                        {
                            _one.Tus_ser_id = _inventoryDAL.GetSerialID();
                        }

                        _one.Tus_ser_line = Convert.ToInt32(_r["invc_line"].ToString());
                        _one.Tus_serial_id = string.Empty;
                        _one.Tus_session_id = string.Empty;
                        _one.Tus_unit_cost = Convert.ToDecimal(_r["unit_rate"].ToString());
                        _one.Tus_unit_price = Convert.ToDecimal(_r["unit_rate"].ToString());
                        _one.Tus_usrseq_no = user_seq_num;
                        _one.Tus_warr_no = _r["warr"].ToString();
                        _one.Tus_warr_period = Convert.ToInt32(_r["warr_period"].ToString());
                        #endregion
                        _inventoryRepDAL.SavePickedItemSerials(_one);
                        _ScmCommonDAL.UpdateSGLDeliveryOrder(_dDocument, "0", _one.Tus_ser_id.ToString());
                    }
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    if (_ScmCommonDAL.checkIsConsign(_dDocument, "SCM") == 0) { _msg = "Not a consignment document number!"; return; }
                    DataTable _tbl = _ScmCommonDAL.GetSCMDeliveryOrder(_dDocument, _party);
                    if (_tbl == null) { _msg = "AOD details not found!"; return; }
                    if (_tbl.Rows.Count <= 0) { _msg = "AOD details not found!"; return; }
                    DataTable _poLst = _inventoryDAL.GetPOItemsDataTable(_company, _pDocument, 1);

                    int user_seq_num = GET_SEQNUM_FOR_INVOICE("ADJ", _company, _pDocument, 1);

                    //is already save delete serials from temp serials
                    //SACHITH ADD 2014/01/10
                    if (user_seq_num > 0) _eff = Delete_rept_Pick_Ser(user_seq_num);
                    //END
                    foreach (DataRow _r in _poLst.Rows)
                    {
                        string _postatus = _r.Field<string>("POD_ITM_STUS");
                        string _poItem = _r.Field<string>("PODI_ITM_CD");
                        int _polineno = _r.Field<Int32>("PODI_LINE_NO");
                        decimal _poPrice = _r.Field<decimal>("UNIT_PRICE");

                        _tbl.AsEnumerable().ToList().Where(x => x.Field<string>("item_code") == _poItem).ToList().ForEach(x => x.SetField<string>("item_status", _postatus));
                        _tbl.AsEnumerable().ToList().Where(x => x.Field<string>("item_code") == _poItem && x.Field<string>("MIS_LP_CD") == _postatus).ToList().ForEach(x => x.SetField<Int32>("item_line_no", _polineno));
                        _tbl.AsEnumerable().ToList().Where(x => x.Field<string>("item_code") == _poItem && x.Field<string>("MIS_LP_CD") == _postatus).ToList().ForEach(x => x.SetField<decimal>("unit_price", _poPrice));
                    }
                    //END


                    _inventoryDAL = new InventoryDAL();
                    _inventoryRepDAL = new ReptCommonDAL();
                    _inventoryDAL.ConnectionOpen();
                    if (user_seq_num <= 0)
                    {
                        user_seq_num = _inventoryDAL.Generate_new_seq_num(company_: _company, usrID: _user, doc_type: "ADJ", direction_: 1);
                        ReptPickHeader RPH = new ReptPickHeader();
                        RPH.Tuh_doc_tp = "ADJ";
                        RPH.Tuh_cre_dt = DateTime.Today;
                        RPH.Tuh_ischek_itmstus = true;
                        RPH.Tuh_ischek_reqqty = true;
                        RPH.Tuh_ischek_simitm = true;
                        RPH.Tuh_session_id = string.Empty;
                        RPH.Tuh_usr_com = _company;
                        RPH.Tuh_usr_id = _user;
                        RPH.Tuh_usrseq_no = user_seq_num;
                        RPH.Tuh_direct = true;
                        RPH.Tuh_doc_no = _pDocument;
                        int affected_rows = _inventoryRepDAL.SavePickedHeader(RPH);
                    }

                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _inventoryRepDAL.BeginTransaction();

                    if (_tbl != null && _tbl.Rows.Count > 0) foreach (DataRow _r in _tbl.Rows) _result.Add(AssignObject(_r, _party, _date, _dDocument, _pDocument, _company, _location, _bin, _user, user_seq_num, _GenNewSerID));
                    {
                        //SACHITH COMMENT 1 LINE 2014/01/10
                        //if (!_isAlreadySave)
                        foreach (ReptPickSerials _two in _result)
                        {
                            _inventoryRepDAL.SavePickedItemSerials(_two);
                            _ScmCommonDAL.UpdateSGLDeliveryOrder(_dDocument, _two.Tus_itm_cd, _two.Tus_ser_1);
                        }
                    }

                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _msg = ex.Message;
            }
        }

        private void UpdateRefDocumentSerial(List<ReptPickSerials> _lst, string _outwarddoc)
        {
            if (_lst == null && _lst.Count > 0) return;
            foreach (ReptPickSerials _one in _lst) _inventoryDAL.UpdateAODOUTPickItem(_outwarddoc, _one.Tus_ser_id);
            _inventoryDAL.UpdateAODOUT(_lst[0].Tus_com, _outwarddoc);
        }

        public void UpdateSGLDeliveryOrder(string _company, string _party, List<ReptPickSerials> _lst, string _document)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            string _connection = string.Empty;
            DataTable _tbl0 = _inventoryDAL.GetPartyConnection(_company: _company, _party: _party);
            if (_tbl0 != null && _tbl0.Rows.Count > 0)
            {
                _connection = _tbl0.Rows[0].Field<string>("cstr_con_str");
            }

            //string _connection = GetPartyConnection(_company: _company, _party: _party);
            if (string.IsNullOrEmpty(_connection)) return;
            _ScmCommonDAL = new SCMCommonDAL();
            _ScmCommonDAL.ConnectionOpenUnknown(_connection);
            foreach (ReptPickSerials _one in _lst) _ScmCommonDAL.UpdateSGLDeliveryOrder(_document, _one.Tus_itm_cd, _one.Tus_ser_1);
            _ScmCommonDAL.ConnectionClose();
        }

        #region PRN  *** Darshana 09-01-2014 -- get copy of ADJMinus***
        //Edit by Rukshan add new parameter(IsTemp) after _masterAutoNumber
        public Int16 SavePRN(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, bool IsTemp, out string _docNo)
        {
            Int16 effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _inventoryDAL.TransactionCommit();

                    effect = 1;
                }
                else
                {
                    // //using (TransactionScope _tr = new TransactionScope())
                    ////{
                    // try
                    // {

                    _inventoryRepDAL.BeginTransaction();

                    DataTable _newSeqNosTable = new DataTable();
                    _newSeqNosTable.Columns.Add("DocType", typeof(string));
                    _newSeqNosTable.Columns.Add("SeqNo", typeof(int));

                    PurchaseOrder POHeader = new PurchaseOrder();
                    List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();

                    effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);

                    #region Fill PO Header Object
                    POHeader.Poh_com = _inventoryMovementHeader.Ith_com;
                    POHeader.Poh_contain_kit = false; // ???
                    POHeader.Poh_cre_period = "N/A"; // ??
                    POHeader.Poh_cur_cd = "LKR";
                    POHeader.Poh_dis_amt = 0;
                    POHeader.Poh_dis_rt = 0;
                    POHeader.Poh_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    POHeader.Poh_dt = _inventoryMovementHeader.Ith_doc_date;
                    POHeader.Poh_ex_rt = 1;
                    POHeader.Poh_frm_mon = 0;
                    POHeader.Poh_frm_yer = 0;
                    POHeader.Poh_job_no = "PURCHASE RETURN";
                    POHeader.Poh_ope = _inventoryMovementHeader.Ith_sbu; // ???
                    POHeader.Poh_oth_tot = 0;
                    POHeader.Poh_pay_term = null;
                    POHeader.Poh_port_of_orig = "N/A";
                    POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
                    POHeader.Poh_profit_cd = _inventoryMovementHeader.Ith_pc;
                    POHeader.Poh_ref = "N/A";
                    POHeader.Poh_remarks = "PURCHASE RETURN";
                    POHeader.Poh_reprint = false;
                    POHeader.Poh_sent_add = string.Empty;
                    POHeader.Poh_sent_by = string.Empty;
                    POHeader.Poh_sent_to_vendor = false;
                    POHeader.Poh_sent_via = string.Empty;
                    POHeader.Poh_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    POHeader.Poh_stus = "F";
                    POHeader.Poh_sub_tot = 0;
                    POHeader.Poh_sub_tp = "R"; //Return
                    POHeader.Poh_supp = _inventoryMovementHeader.Ith_bus_entity;
                    POHeader.Poh_tax_chg = false;
                    POHeader.Poh_tax_tot = 0;
                    POHeader.Poh_to_mon = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_to_yer = 0;
                    POHeader.Poh_tot = 0;
                    POHeader.Poh_tp = "L"; //Local Purchase
                    POHeader.Poh_trans_term = string.Empty;
                    POHeader.Poh_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    _newSeqNosTable.Rows.Add("PO", POHeader.Poh_seq_no);
                    #endregion

                    foreach (ReptPickSerials _p in _reptPickSerials)
                    {
                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                        #region Fill PO Items Object
                        POItem.Pod_act_unit_price = _p.Tus_unit_cost;
                        POItem.Pod_dis_amt = 0;
                        POItem.Pod_dis_rt = 0;
                        POItem.Pod_grn_bal = 0;
                        POItem.Pod_item_desc = "N/A";
                        POItem.Pod_itm_cd = _p.Tus_itm_cd;
                        POItem.Pod_itm_stus = _p.Tus_itm_stus;
                        //POItem.Pod_itm_stus = "GOD";
                        POItem.Pod_itm_tp = "M";
                        POItem.Pod_kit_itm_cd = "N/A";
                        POItem.Pod_kit_line_no = 0;
                        POItem.Pod_lc_bal = 0;
                        POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
                        POItem.Pod_line_no = _p.Tus_base_itm_line;
                        POItem.Pod_line_tax = 0;
                        POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
                        POItem.Pod_nbt = 0;
                        POItem.Pod_nbt_before = 0;
                        POItem.Pod_pi_bal = 0;
                        POItem.Pod_qty = _p.Tus_qty;
                        POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                        POItem.Pod_seq_no = POHeader.Poh_seq_no;
                        POItem.Pod_si_bal = 0;
                        POItem.Pod_tot_tax_before = 0;
                        POItem.Pod_unit_price = _p.Tus_unit_cost;
                        POItem.Pod_uom = "NOS";
                        POItem.Pod_vat = 0;
                        POItem.Pod_vat_before = 0;
                        #endregion
                        POItems.Add(POItem);

                        //foreach (ReptPickSerials p in GRNPickSerials)
                        //{
                        //    if (_p.itemcode == p.Tus_itm_cd && _p.unitprice == p.Tus_unit_cost)
                        //    {
                        //        p.Tus_base_itm_line = _poLineNo;
                        //    }
                        //}
                        //_poLineNo += 1;
                        _inventoryDAL.UpdateAODOUTPickItem(_p.Tus_orig_grnno, _p.Tus_ser_id);
                    }
                    _inventoryDAL.SaveNewPO(POHeader);

                    int j = 1;
                    foreach (PurchaseOrderDetail _POItems in POItems)
                    {
                        _POItems.Pod_line_no = j;
                        _inventoryDAL.SaveNewPOItem(_POItems);
                        j++;
                    }


                    MasterAutoNumber _AutoNo = new MasterAutoNumber();
                    int _e = 0;
                    if (_newSeqNosTable.Rows.Count > 0)
                    {
                        for (int i = 0; i < _newSeqNosTable.Rows.Count; i++)
                        {
                            if (_newSeqNosTable.Rows[i]["DocType"].ToString() == "PO")
                            {
                                _AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                _AutoNo.Aut_cate_tp = "COM";
                                _AutoNo.Aut_direction = null;
                                _AutoNo.Aut_modify_dt = null;
                                _AutoNo.Aut_moduleid = "PRT";
                                _AutoNo.Aut_start_char = "PRT";
                                _AutoNo.Aut_year = null;

                                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_newSeqNosTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                            }
                        }
                    }

                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);
                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();

                    //_inventoryRepDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_tr.Complete();

                    //}
                    effect = 1;
                    // }
                    //catch (Exception err)
                    //{
                    //    effect = -1;
                    //    _docNo = "ERROR : " + err.Message.ToString();
                    //    _inventoryRepDAL.TransactionRollback();
                    //    _inventoryDAL.TransactionRollback();
                    //}
                    //return effect;

                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        #endregion

        public Int32 Delete_rept_Pick_Ser(int _seq)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            rcd.ConnectionOpen();
            rcd.BeginTransaction();
            int _i = rcd.DeleteTempPickSerialsBySeq(_seq);
            rcd.TransactionCommit();
            return _i;
        }

        public string SampleExportExcel2007(string _com, string _user, string _itemCode, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                DataTable _dt = _inventoryDAL.Get_Item_Infor(_itemCode);
                _inventoryDAL.ConnectionClose();

                //CreateExcelFile.CreateExcelDocumentDataTable(_dt, _targetFilename, out _err);

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        public Int32 UpdateTokenStus(string _com, string _pc, int _token, DateTime _date)
        {
            int _result = 0;
            ReptCommonDAL rcd = new ReptCommonDAL();
            rcd.ConnectionOpen();
            _result = rcd.UpdateTokenStus(_com, _pc, _token, _date);
            rcd.ConnectionClose();
            return _result;
        }

        public DataTable GetOnlinePayment(string _com, string _status, string _tp, DateTime _from, DateTime _to)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetOnlinePayment(_com, _status, _tp, _from, _to);
        }

        public Int32 UpdateOnlinePayment(string _com, string _pc, string _ref, string _status, string _user, string _recno, out string _msg)
        {
            Int32 _effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryDAL.UpdateOnlinePayment(_com, _pc, _ref, _status, _user, _recno);
                _inventoryDAL.TransactionCommit();
                _msg = string.Empty; _effect = 1;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _msg = ex.Message; _effect = -1;
            }
            return _effect;
        }

        public DataTable GetAOACollection(string _com, string _pc, DateTime _frmDt, DateTime _toDt)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAOACollection(_com, _pc, _frmDt.Date, _toDt.Date);
        }

        public int SaveAccountAcknoledge(DataTable _dt, out string _error)
        {
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                foreach (DataRow _dr in _dt.Rows)
                {
                    _inventoryRepDAL.SaveAccountAcknoledge(_dr);
                }

                _error = "";
                _inventoryRepDAL.TransactionCommit();
                return 1;
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _inventoryRepDAL.TransactionRollback();
                return -1;
            }
        }

        public DataTable GetLocationTransaction(string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationTransaction(_com, _loc);
        }

        public int SaveDirectIssue(List<DirectIssueLocation> _issue, out string _error)
        {
            _error = string.Empty;
            int _I = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                foreach (DirectIssueLocation _d in _issue)
                {
                    _I = _inventoryDAL.SaveTransactionCategory(_d.Sclt_frm_com, _d.Sclt_frm_loc, _d.Sclt_to_com, _d.Sclt_to_cat, _d.Sclt_allow ? 1 : 0, _d.Sclt_cre_by);
                    // _inventoryDAL.InserLogLocaTrans(_d.Sclt_frm_com, _d.Sclt_frm_loc, _d.Sclt_to_com, _d.Sclt_to_cat, _d.Sclt_allow ? 1 : 0, _d.Sclt_cre_by);
                }
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception e)
            {
                _I = -1;
                _error = e.Message;
            }

            return _I;
        }

        public DataTable GetDocument()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDocument();
        }

        public Int32 DeleteAccountAcknoledge(string _user)
        {
            int _result = 0;
            ReptCommonDAL rcd = new ReptCommonDAL();
            rcd.ConnectionOpen();
            _result = rcd.DeleteAccountAcknoledge(_user);
            rcd.ConnectionClose();
            return _result;
        }

        public DataTable GetAccountStatus(string _company, string _profitcenter, string _account)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAccountStatus(_company, _profitcenter, _account);
        }

        #region New Company Transfer

        public int CompanyTransferAutoProcessPriceCheck(string _com, string _user, DateTime _trnsDate)
        {
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _inventoryDAL.ConnectionOpen();

            string _pbSer = string.Empty;
            string _pbLvlSer = string.Empty;

            string _pbNONSer = string.Empty;
            string _pbLvlNONSer = string.Empty;

            if (_com == "ABL")
            {
                _pbSer = "ABRTFR";
                _pbLvlSer = "RTS";
                _pbNONSer = "ABRTFR";
                _pbLvlNONSer = "RTNS";
            }

            if (_com == "SGL")
            {
                _pbSer = "SGTFR";
                _pbLvlSer = "";
                _pbNONSer = "SGTFR";
                _pbLvlNONSer = "";
            }

            int _count = 0;

            DataTable _dtLoc = _inventoryDAL.GetTransferLocs(_com);
            foreach (DataRow _dtrow in _dtLoc.Rows)
            {
                _count += 1;
                string _loc = Convert.ToString(_dtrow["LOC"]);
                string _invoiceNo = string.Empty;

                List<ReptPickSerials> _reptPickSerial = _inventoryDAL.GetTransferSerials(_com, _loc, 0, _user);

                //Check Price
                foreach (ReptPickSerials _rept in _reptPickSerial)
                {
                    List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                    List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();

                    if (_com == "ABL")
                    {
                        if (_rept.Tus_session_id == "1")
                        {
                            _priceSerialRef = _salesDAL.GetAllPriceSerialFromSerial(_pbSer, _pbLvlSer, _rept.Tus_itm_cd, _trnsDate.Date, string.Empty, _rept.Tus_ser_1);
                            if (_priceSerialRef.Count <= 0)
                            {
                                _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, _rept.Tus_ser_1, _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                            }
                        }
                        else
                        {
                            _priceDetailRef = _salesDAL.GetPriceDetail(_pbNONSer, _pbLvlNONSer, _rept.Tus_itm_cd, 1, _trnsDate.Date, string.Empty);
                            if (_priceDetailRef.Count <= 0)
                            {
                                _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, "NON-SER", _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                            }
                        }
                    }

                    if (_com == "SGL")
                    {
                        DataTable _dtPBLVL = _inventoryDAL.GetPriceBookLevel(_com, _pbNONSer, _rept.Tus_itm_stus);
                        if (_dtPBLVL == null)
                        {
                            _pbLvlNONSer = "XXX";
                        }
                        foreach (DataRow _dtrow1 in _dtPBLVL.Rows)
                        {
                            _pbLvlNONSer = Convert.ToString(_dtrow1["SAPL_PB_LVL_CD"]);
                        }
                        _priceDetailRef = _salesDAL.GetPriceDetail(_pbNONSer, _pbLvlNONSer, _rept.Tus_itm_cd, 1, _trnsDate.Date, string.Empty);
                        if (_priceDetailRef.Count <= 0)
                        {
                            _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, "NON-SER", _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                        }
                    }

                    List<MasterItemTax> _mstItmTax = _salesDAL.GetItemTax(_com, _rept.Tus_itm_cd, _rept.Tus_itm_stus, string.Empty, string.Empty);
                    if (_mstItmTax == null)
                    {
                        _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, "TAX_ERROR", _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                    }
                    else
                    {
                        if (_mstItmTax.Count == 0)
                        {
                            _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, "TAX_ERROR", _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                        }
                    }
                }

                //Console.WriteLine(_count + " | " + _dtLoc.Rows.Count + " | " + _loc);
                //Debug.WriteLine(_count + " | " + _dtLoc.Rows.Count + " | " + _loc);
            }

            return 1;
        }

        public int CompanyTransferAutoProcess(string _com, string _user, DateTime _trnsDate)
        {
            string _SuppCode = "";
            string _CustCode = "";
            string _CustName = "";
            string _CustAdd1 = "";
            string _CustAdd2 = "";
            string _intrPC = "";
            string _newCom = "";

            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _inventoryDAL.ConnectionOpen();

            string _pbSer = "";
            string _pbLvlSer = string.Empty;

            string _pbNONSer = "";
            string _pbLvlNONSer = string.Empty;

            string _pb = string.Empty;
            string _pbLvl = string.Empty;

            if (_com == "ABL")
            {
                _pbSer = "ABRTFR";
                _pbLvlSer = "RTS";
                _pbNONSer = "ABRTFR";
                _pbLvlNONSer = "RTNS";
                _newCom = "LRP";
            }

            if (_com == "SGL")
            {
                _pbSer = "SGTFR";
                _pbLvlSer = "";

                _pbNONSer = "SGTFR";
                _pbLvlNONSer = "";
                _newCom = "SGD";
            }

            DataTable _dtLoc = _inventoryDAL.GetTransferLocs(_com);
            foreach (DataRow _dtrow in _dtLoc.Rows)
            {
                string _loc = Convert.ToString(_dtrow["LOC"]);
                string _OPE = Convert.ToString(_dtrow["OPE_ADMIN"]);
                if (_com == "ABL")
                {
                    if (_OPE == "INVENTORY")
                    {
                        _SuppCode = "ABCR3A049";
                        _CustCode = "ABDR1A2016";
                        _CustName = "ABANS RETAIL (PVT) LTD";
                        _CustAdd1 = "498, GALLE ROAD,";
                        _CustAdd2 = "COLOMBO-03";
                        _intrPC = "41";
                    }
                    else if (_OPE == "CC")
                    {
                        _SuppCode = "ABCR3A032";
                        _CustCode = "ABDR1A911";
                        _CustName = "ABANS RETAIL (PVT) LTD";
                        _CustAdd1 = "498, GALLE ROAD,";
                        _CustAdd2 = "COLOMBO-03";
                        _intrPC = "LRP";
                    }
                    else
                    {
                        _SuppCode = "ERROR";
                        break;
                    }
                }
                else if (_com == "SGL")
                {
                    _SuppCode = "SGCR2S001";
                    _CustCode = "SGDR8S001";
                    _CustName = "SINGHAGIRI DIRECT (PVT) LTD";
                    _CustAdd1 = "NO.515, DARLEY ROAD,";
                    _CustAdd2 = "COLOMBO-10";
                    if (_OPE == "INV_SGD") //DEALER
                    {
                        _intrPC = "SGDTR";
                    }
                    else if (_OPE == "SGDINV")//CC
                    {
                        _intrPC = "SDRTR";
                    }
                    else
                    {
                        _SuppCode = "ERROR";
                        break;
                    }
                }

                string _invoiceNo = string.Empty;
                int _invoiceSeq = 1;
                string _gen_receiptNo = "";
                string _gen_DONo = "";
                string _genGRNNo = string.Empty;
                string _genPONo = string.Empty;
                string _error = string.Empty;
                string _buybackadj = string.Empty;
                int _invoiceDO_Err = 1;
                int _po_Err = 1;
                int _grn_Err = 1;
                int i = 0;

                string _newLoc = Convert.ToString(_dtrow["NEW_LOC"]);
                //MasterLocation _mstLocNew = _generalDAL.GetLocationByLocCode(_newCom, _newLoc);
                string _newPC = Convert.ToString(_dtrow["NEW_PC"]);

                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                _inventoryDAL.ConnectionOpen();

                InvoiceHeader _trnsInvcHdr = new InvoiceHeader();
                List<InvoiceItem> _trnsInvcItems = new List<InvoiceItem>();
                List<InvoiceSerial> _trnsInvcSerials = new List<InvoiceSerial>();
                MasterAutoNumber _trnsInvcAuto = new MasterAutoNumber();

                InventoryHeader _trnsDOHdr = new InventoryHeader();
                MasterAutoNumber _trnsDOAuto = new MasterAutoNumber();

                InventoryHeader _trnsGRNHdr = new InventoryHeader();
                MasterAutoNumber _trnsGRNAuto = new MasterAutoNumber();

                PurchaseOrder _trnsPOHdr = new PurchaseOrder();
                List<PurchaseOrderDetail> _trnsPOItems = new List<PurchaseOrderDetail>();

                List<ReptPickSerials> _reptPickSerial = _inventoryDAL.GetTransferSerials(_com, _loc, 0, _user);
                if (_reptPickSerial != null && _reptPickSerial.Count > 0)
                {
                    #region Fill Invoice Header and Invoice Items

                    _invoiceNo = _intrPC + "-0000001";

                    #region Invoice Header Value Assign
                    _trnsInvcHdr.Sah_com = _com;
                    _trnsInvcHdr.Sah_cre_by = _user;
                    _trnsInvcHdr.Sah_cre_when = DateTime.Now;
                    _trnsInvcHdr.Sah_currency = "LKR";
                    _trnsInvcHdr.Sah_cus_add1 = string.Empty;
                    _trnsInvcHdr.Sah_cus_add2 = string.Empty;
                    _trnsInvcHdr.Sah_cus_cd = _CustCode;
                    _trnsInvcHdr.Sah_cus_name = _CustName;
                    _trnsInvcHdr.Sah_d_cust_add1 = string.Empty;
                    _trnsInvcHdr.Sah_d_cust_add2 = string.Empty;
                    _trnsInvcHdr.Sah_d_cust_cd = _CustCode;
                    _trnsInvcHdr.Sah_direct = true;
                    _trnsInvcHdr.Sah_dt = _trnsDate.Date;
                    _trnsInvcHdr.Sah_epf_rt = 0;
                    _trnsInvcHdr.Sah_esd_rt = 0;
                    _trnsInvcHdr.Sah_ex_rt = 1;
                    _trnsInvcHdr.Sah_inv_no = _invoiceNo;
                    _trnsInvcHdr.Sah_inv_sub_tp = "SA"; //(Old Value - CS)Change value as per the Dilanda request ::Chamal De Silva 18-08-2012 16:30
                    _trnsInvcHdr.Sah_inv_tp = "INTR"; //(Old Value - CRED)Change value as per the Dilanda request ::Chamal De Silva 18-08-2012 16:30
                    _trnsInvcHdr.Sah_is_acc_upload = false;
                    _trnsInvcHdr.Sah_man_cd = "N/A";
                    _trnsInvcHdr.Sah_man_ref = string.Empty;
                    _trnsInvcHdr.Sah_manual = false;
                    _trnsInvcHdr.Sah_mod_by = _user;
                    _trnsInvcHdr.Sah_mod_when = DateTime.Now;
                    _trnsInvcHdr.Sah_pc = _intrPC;
                    _trnsInvcHdr.Sah_pdi_req = 0;
                    _trnsInvcHdr.Sah_ref_doc = string.Empty;
                    _trnsInvcHdr.Sah_remarks = string.Empty;
                    _trnsInvcHdr.Sah_sales_chn_cd = string.Empty;
                    _trnsInvcHdr.Sah_sales_chn_man = string.Empty;
                    _trnsInvcHdr.Sah_sales_ex_cd = "N/A";
                    _trnsInvcHdr.Sah_sales_region_cd = string.Empty;
                    _trnsInvcHdr.Sah_sales_region_man = string.Empty;
                    _trnsInvcHdr.Sah_sales_sbu_cd = string.Empty;
                    _trnsInvcHdr.Sah_sales_sbu_man = string.Empty;
                    _trnsInvcHdr.Sah_sales_str_cd = string.Empty;
                    _trnsInvcHdr.Sah_sales_zone_cd = string.Empty;
                    _trnsInvcHdr.Sah_sales_zone_man = string.Empty;
                    _trnsInvcHdr.Sah_seq_no = _invoiceSeq;
                    _trnsInvcHdr.Sah_session_id = "AUTO"; ;
                    _trnsInvcHdr.Sah_structure_seq = string.Empty;
                    _trnsInvcHdr.Sah_stus = "D";
                    _trnsInvcHdr.Sah_town_cd = string.Empty;
                    _trnsInvcHdr.Sah_tp = "INV";
                    _trnsInvcHdr.Sah_wht_rt = 0;
                    #endregion

                    #region Invoice AutoNumber
                    _trnsInvcAuto.Aut_cate_cd = _intrPC;
                    _trnsInvcAuto.Aut_cate_tp = "PRO";
                    _trnsInvcAuto.Aut_direction = 1;
                    _trnsInvcAuto.Aut_modify_dt = null;
                    _trnsInvcAuto.Aut_moduleid = "CRED";
                    _trnsInvcAuto.Aut_start_char = _intrPC + "-CR-";
                    _trnsInvcAuto.Aut_modify_dt = null;
                    _trnsInvcAuto.Aut_year = _trnsDate.Year;
                    #endregion
                    //Check Price
                    foreach (ReptPickSerials _rept in _reptPickSerial)
                    {
                        List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                        List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();

                        decimal _qty = 1;
                        if (_com == "ABL")
                        {
                            if (_rept.Tus_session_id == "1")
                            {
                                _priceSerialRef = _salesDAL.GetAllPriceSerialFromSerial(_pbSer, _pbLvlSer, _rept.Tus_itm_cd, _trnsDate.Date, string.Empty, _rept.Tus_ser_1);
                                if (_priceSerialRef.Count <= 0)
                                {
                                    _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, _rept.Tus_ser_1, _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                                    //break;
                                }
                                _pb = _pbSer;
                                _pbLvl = _pbLvlSer;
                            }
                            else
                            {
                                _priceDetailRef = _salesDAL.GetPriceDetail(_pbNONSer, _pbLvlNONSer, _rept.Tus_itm_cd, _qty, _trnsDate.Date, string.Empty);
                                if (_priceDetailRef.Count <= 0)
                                {
                                    _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, "NON-SER", _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                                    //break;
                                }
                                _pb = _pbNONSer;
                                _pbLvl = _pbLvlNONSer;
                            }
                        }

                        if (_com == "SGL")
                        {
                            DataTable _dtPBLVL = _inventoryDAL.GetPriceBookLevel(_com, _pbNONSer, _rept.Tus_itm_stus);
                            if (_dtPBLVL == null)
                            {
                                _pbLvlNONSer = "XXX";
                            }
                            foreach (DataRow _dtrow1 in _dtPBLVL.Rows)
                            {
                                _pbLvlNONSer = Convert.ToString(_dtrow1["SAPL_PB_LVL_CD"]);
                            }
                            _priceDetailRef = _salesDAL.GetPriceDetail(_pbNONSer, _pbLvlNONSer, _rept.Tus_itm_cd, _qty, _trnsDate.Date, string.Empty);
                            if (_priceDetailRef.Count <= 0)
                            {
                                _inventoryDAL.SaveTransferNoPriceLog(_com, _loc, _rept.Tus_itm_cd, "NON-SER", _rept.Tus_itm_stus, _rept.Tus_unit_cost);
                                //break;
                            }
                            _pb = _pbNONSer;
                            _pbLvl = _pbLvlNONSer;
                        }

                        List<PriceBookLevelRef> _level = _salesDAL.GetPriceLevelList(_com, _pb, _pbLvl);
                        PriceBookLevelRef _priceLevel = new PriceBookLevelRef();
                        if (_level.Count <= 0)
                        {
                            break;
                        }
                        if (_level.Count > 0)
                            foreach (PriceBookLevelRef _lvl in _level)
                            {
                                _priceLevel = _lvl;
                                //_iIsSerialized = _lvl.Sapl_is_serialized;
                                break;
                            }

                        decimal _itemPrice = 0;
                        int _pbSeq = 0;
                        string _WarrRmk = "N/A";
                        decimal _AbsoulteUnitPrice = 0;
                        decimal _taxPortion = 0;
                        if (_priceDetailRef.Count > 0)
                        {
                            foreach (PriceDetailRef _price in _priceDetailRef)
                            {
                                _itemPrice = _price.Sapd_itm_price;
                                _pbSeq = _price.Sapd_pb_seq;
                                _WarrRmk = _price.Sapd_warr_remarks;
                                _AbsoulteUnitPrice = TaxCalculation(_com, _rept.Tus_itm_cd, _rept.Tus_itm_stus, _qty, _priceLevel, _itemPrice, 0, false);
                                _taxPortion = TaxCalculation(_com, _rept.Tus_itm_cd, _rept.Tus_itm_stus, _qty, _priceLevel, _AbsoulteUnitPrice, 0, true);
                                break;
                            }
                        }
                        if (_priceSerialRef.Count > 0)
                        {
                            foreach (PriceSerialRef _price in _priceSerialRef)
                            {
                                _itemPrice = _price.Sars_itm_price;
                                _pbSeq = _price.Sars_pb_seq;
                                _WarrRmk = _price.Sars_warr_remarks;
                                _AbsoulteUnitPrice = TaxCalculation(_com, _rept.Tus_itm_cd, _rept.Tus_itm_stus, _qty, _priceLevel, _itemPrice, 0, false);
                                _taxPortion = TaxCalculation(_com, _rept.Tus_itm_cd, _rept.Tus_itm_stus, _qty, _priceLevel, _AbsoulteUnitPrice, 0, true);
                                break;
                            }
                        }
                        #region Fill Invoice Item Object
                        InvoiceItem _item = new InvoiceItem();
                        _item.Sad_alt_itm_cd = string.Empty;
                        _item.Sad_alt_itm_desc = string.Empty;
                        _item.Sad_comm_amt = 0;
                        _item.Sad_disc_amt = 0;
                        _item.Sad_disc_rt = 0;
                        _item.Sad_do_qty = _qty;
                        _item.Sad_fws_ignore_qty = 0;
                        _item.Sad_inv_no = _invoiceNo;
                        _item.Sad_is_promo = false;
                        _item.Sad_itm_cd = _rept.Tus_itm_cd;
                        _item.Sad_itm_line = _rept.Tus_base_itm_line;
                        _item.Sad_itm_seq = _pbSeq;
                        _item.Sad_itm_stus = _rept.Tus_itm_stus;
                        _item.Sad_itm_tax_amt = _taxPortion;
                        _item.Sad_itm_tp = string.Empty;
                        _item.Sad_pb_lvl = _pbLvl;
                        _item.Sad_pb_price = _AbsoulteUnitPrice;
                        _item.Sad_pbook = _pb;
                        _item.Sad_print_stus = false;
                        _item.Sad_promo_cd = string.Empty;
                        _item.Sad_qty = _qty;
                        _item.Sad_seq = _pbSeq;
                        _item.Sad_seq_no = _invoiceSeq;
                        _item.Sad_srn_qty = 0;
                        _item.Sad_tot_amt = _AbsoulteUnitPrice * _qty + _taxPortion;
                        _item.Sad_unit_amt = _AbsoulteUnitPrice * _qty;
                        _item.Sad_unit_rt = _AbsoulteUnitPrice;
                        _item.Sad_uom = _rept.Tus_new_remarks;
                        _item.Sad_warr_based = false;
                        _item.Sad_warr_period = 0;
                        _item.Sad_warr_remarks = _WarrRmk;
                        #endregion

                        #region Fill Invoice Serial Object
                        InvoiceSerial _itemSer = new InvoiceSerial();
                        _itemSer.Sap_del_loc = _loc;
                        _itemSer.Sap_inv_no = _invoiceNo;
                        _itemSer.Sap_itm_cd = _rept.Tus_itm_cd;
                        _itemSer.Sap_itm_line = _rept.Tus_base_itm_line;
                        _itemSer.Sap_remarks = "AUTO";
                        _itemSer.Sap_seq_no = _invoiceSeq;
                        _itemSer.Sap_ser_1 = _rept.Tus_ser_1;
                        _itemSer.Sap_ser_2 = _rept.Tus_ser_2;
                        _itemSer.Sap_ser_line = 0;
                        _itemSer.Sap_sev_loc = _loc;
                        #endregion
                        _trnsInvcItems.Add(_item);
                        _trnsInvcSerials.Add(_itemSer);

                        #region Fill PO Items Object
                        PurchaseOrderDetail POItem = new PurchaseOrderDetail();

                        if (_com == "ABL")
                        {
                            MasterItemTaxClaim _taxClaim = _salesDAL.GetTaxClaimDet(_newCom, _rept.Tus_itm_cd, "VAT_C");
                            if (_taxClaim == null)
                            {
                                POItem.Pod_act_unit_price = _item.Sad_tot_amt / _qty;
                            }
                            else
                            {
                                POItem.Pod_act_unit_price = _AbsoulteUnitPrice;
                            }
                        }

                        if (_com == "SGL")
                        {
                            POItem.Pod_act_unit_price = _item.Sad_tot_amt / _qty;
                        }

                        _rept.Tus_unit_price = POItem.Pod_act_unit_price;

                        POItem.Pod_dis_amt = 0;
                        POItem.Pod_dis_rt = 0;
                        POItem.Pod_grn_bal = 0;
                        POItem.Pod_itm_cd = _rept.Tus_itm_cd;
                        POItem.Pod_item_desc = _rept.Tus_itm_desc;
                        DataTable _dtStatus = _inventoryDAL.GetItemStatusMaster(_rept.Tus_itm_stus, string.Empty);
                        foreach (DataRow _rw in _dtStatus.Rows)
                        {
                            POItem.Pod_itm_stus = Convert.ToString(_rw["MIS_LP_CD"]);
                        }

                        POItem.Pod_itm_tp = "M";
                        POItem.Pod_kit_itm_cd = _rept.Tus_itm_cd;
                        POItem.Pod_kit_line_no = 0;
                        POItem.Pod_lc_bal = 0;
                        POItem.Pod_line_amt = _AbsoulteUnitPrice * _qty + _taxPortion;
                        POItem.Pod_line_no = _rept.Tus_base_itm_line;
                        POItem.Pod_line_tax = _taxPortion;
                        POItem.Pod_line_val = _AbsoulteUnitPrice * _qty;
                        POItem.Pod_nbt = 0;
                        POItem.Pod_nbt_before = 0;
                        POItem.Pod_pi_bal = 0;
                        POItem.Pod_qty = _qty;
                        POItem.Pod_ref_no = _trnsPOHdr.Poh_seq_no.ToString();
                        POItem.Pod_seq_no = _invoiceSeq;
                        POItem.Pod_si_bal = 0;
                        POItem.Pod_tot_tax_before = 0;
                        POItem.Pod_unit_price = _AbsoulteUnitPrice;
                        POItem.Pod_uom = _rept.Tus_new_remarks;
                        POItem.Pod_vat = 0;
                        POItem.Pod_vat_before = 0;
                        #endregion
                        _trnsPOItems.Add(POItem);
                    }

                    #endregion

                    _inventoryDAL.ConnectionClose();

                    #region Fill DO Header
                    _trnsDOHdr.Ith_loc = _loc;
                    _trnsDOHdr.Ith_com = _com;
                    _trnsDOHdr.Ith_doc_tp = "DO";
                    _trnsDOHdr.Ith_doc_date = _trnsDate.Date;
                    _trnsDOHdr.Ith_doc_year = _trnsDate.Date.Year;
                    _trnsDOHdr.Ith_cate_tp = "CRED";
                    _trnsDOHdr.Ith_sub_tp = "DPS";
                    _trnsDOHdr.Ith_is_manual = false;
                    _trnsDOHdr.Ith_stus = "F";
                    _trnsDOHdr.Ith_cre_by = _user;
                    _trnsDOHdr.Ith_mod_by = _user;
                    _trnsDOHdr.Ith_direct = false;
                    _trnsDOHdr.Ith_session_id = "AUTO";
                    _trnsDOHdr.Ith_manual_ref = "AUTO";
                    _trnsDOHdr.Ith_vehi_no = "-";
                    _trnsDOHdr.Ith_remarks = "AUTO_TRANSFERED";
                    _trnsDOHdr.Ith_anal_1 = "-";
                    _trnsDOHdr.Ith_oth_docno = _invoiceNo;
                    _trnsDOHdr.Ith_entry_no = _invoiceNo;
                    _trnsDOHdr.Ith_bus_entity = _CustCode;
                    _trnsDOHdr.Ith_del_add1 = _CustAdd1;
                    _trnsDOHdr.Ith_del_add2 = _CustAdd2;
                    //_trnsDOHdr.Ith_acc_no = _accNo;
                    _trnsDOHdr.Ith_pc = _intrPC;
                    _trnsDOHdr.Ith_oth_loc = _newLoc;
                    _trnsDOHdr.Ith_oth_com = _newCom;
                    #endregion

                    #region Fill DO Auto Number
                    _trnsDOAuto.Aut_cate_cd = _loc;
                    _trnsDOAuto.Aut_cate_tp = "LOC";
                    _trnsDOAuto.Aut_direction = 0;
                    _trnsDOAuto.Aut_moduleid = "DO";
                    _trnsDOAuto.Aut_start_char = "DO";
                    _trnsDOAuto.Aut_year = _trnsDate.Date.Year;
                    #endregion

                    #region Fill Cust Auto Number
                    MasterBusinessEntity _businessEntity = new MasterBusinessEntity();
                    _businessEntity.Mbe_com = _com;
                    _businessEntity.Mbe_cd = _CustCode;
                    _businessEntity.Mbe_act = true;
                    _businessEntity.Mbe_tp = "C";
                    _businessEntity.Mbe_pc_stus = "GOOD";
                    _businessEntity.Mbe_ho_stus = "GOOD";
                    #endregion

                    _gen_receiptNo = "";
                    _gen_DONo = "";
                    _genGRNNo = string.Empty;
                    _genPONo = string.Empty;
                    _error = string.Empty;
                    _buybackadj = string.Empty;
                    _invoiceDO_Err = 1;
                    _po_Err = 1;
                    _grn_Err = 1;

                    //Save Invoice / DO
                    i = SaveInvoiceDuplicateWithTransaction01(_trnsInvcHdr, _trnsInvcItems, _trnsInvcSerials, null, null, _trnsDOHdr, _reptPickSerial, null, _trnsInvcAuto, null, _trnsDOAuto, true, out _invoiceNo, out _gen_receiptNo, out _gen_DONo, _businessEntity, false, false, out _error, null, null, null, null, out _buybackadj);
                    if (!string.IsNullOrEmpty(_error))
                    {
                        _invoiceNo = _error;
                        _invoiceDO_Err = -1;
                    }

                    #region Fill GRN Header
                    _trnsGRNHdr = new InventoryHeader();
                    _trnsGRNHdr.Ith_com = _newCom;
                    _trnsGRNHdr.Ith_loc = _newLoc;
                    _trnsGRNHdr.Ith_doc_date = _trnsDate.Date;
                    _trnsGRNHdr.Ith_doc_year = _trnsDate.Year;
                    _trnsGRNHdr.Ith_direct = true;
                    _trnsGRNHdr.Ith_doc_tp = "GRN";
                    _trnsGRNHdr.Ith_cate_tp = "NOR";
                    _trnsGRNHdr.Ith_sub_tp = "LOCAL";
                    _trnsGRNHdr.Ith_bus_entity = _SuppCode;
                    _trnsGRNHdr.Ith_is_manual = false;
                    _trnsGRNHdr.Ith_manual_ref = "AUTO";
                    _trnsGRNHdr.Ith_remarks = "AUTO_TRANSFERED";
                    _trnsGRNHdr.Ith_stus = "F";
                    _trnsGRNHdr.Ith_cre_by = _user;
                    _trnsGRNHdr.Ith_cre_when = DateTime.Now;
                    _trnsGRNHdr.Ith_mod_by = _user;
                    _trnsGRNHdr.Ith_mod_when = DateTime.Now;
                    _trnsGRNHdr.Ith_session_id = "AUTO";
                    _trnsGRNHdr.Ith_oth_docno = _invoiceNo;
                    _trnsGRNHdr.Ith_entry_no = _invoiceNo;
                    _trnsGRNHdr.Ith_sub_docno = _gen_DONo;
                    _trnsGRNHdr.Ith_oth_com = _com;
                    _trnsGRNHdr.Ith_oth_loc = _loc;
                    _trnsGRNHdr.Ith_pc = _newPC;

                    _trnsGRNAuto = new MasterAutoNumber();
                    _trnsGRNAuto.Aut_cate_cd = _newLoc;
                    _trnsGRNAuto.Aut_cate_tp = "LOC";
                    _trnsGRNAuto.Aut_direction = null;
                    _trnsGRNAuto.Aut_modify_dt = null;
                    _trnsGRNAuto.Aut_moduleid = "GRN";
                    _trnsGRNAuto.Aut_number = 0;
                    _trnsGRNAuto.Aut_start_char = "GRN";
                    _trnsGRNAuto.Aut_year = _trnsGRNHdr.Ith_doc_date.Year;
                    #endregion

                    #region Fill PO Header
                    _trnsPOHdr.Poh_com = _newCom;
                    _trnsPOHdr.Poh_contain_kit = false;
                    _trnsPOHdr.Poh_cre_period = "N/A";
                    _trnsPOHdr.Poh_cur_cd = "LKR";
                    _trnsPOHdr.Poh_dis_amt = 0;
                    _trnsPOHdr.Poh_dis_rt = 0;
                    _trnsPOHdr.Poh_doc_no = _invoiceNo;
                    _trnsPOHdr.Poh_dt = _trnsDate.Date;
                    _trnsPOHdr.Poh_ex_rt = 1;
                    _trnsPOHdr.Poh_frm_mon = 0;
                    _trnsPOHdr.Poh_frm_yer = 0;
                    _trnsPOHdr.Poh_job_no = "RETAIL_COM_TRANS";
                    _trnsPOHdr.Poh_ope = "N/A";
                    _trnsPOHdr.Poh_oth_tot = 0;
                    _trnsPOHdr.Poh_pay_term = null;
                    _trnsPOHdr.Poh_port_of_orig = "N/A";
                    _trnsPOHdr.Poh_preferd_eta = DateTime.MinValue.Date;
                    _trnsPOHdr.Poh_profit_cd = _newPC;
                    _trnsPOHdr.Poh_ref = _invoiceNo;
                    _trnsPOHdr.Poh_remarks = "AUTO_TRANSFERED";
                    _trnsPOHdr.Poh_reprint = false;
                    _trnsPOHdr.Poh_sent_add = string.Empty;
                    _trnsPOHdr.Poh_sent_by = string.Empty;
                    _trnsPOHdr.Poh_sent_to_vendor = false;
                    _trnsPOHdr.Poh_sent_via = string.Empty;
                    _trnsPOHdr.Poh_seq_no = Generate_new_seq_num(_user, "PO", 1, _newCom);
                    _trnsPOHdr.Poh_stus = "F";
                    _trnsPOHdr.Poh_sub_tot = 0;
                    _trnsPOHdr.Poh_sub_tp = "N";
                    _trnsPOHdr.Poh_supp = _SuppCode;
                    _trnsPOHdr.Poh_tax_chg = false;
                    _trnsPOHdr.Poh_tax_tot = 0;
                    _trnsPOHdr.Poh_to_mon = 0;
                    _trnsPOHdr.Poh_to_yer = 0;
                    _trnsPOHdr.Poh_to_yer = 0;
                    _trnsPOHdr.Poh_tot = 0;
                    _trnsPOHdr.Poh_tp = "L"; //Local Purchase
                    _trnsPOHdr.Poh_trans_term = string.Empty;
                    _trnsPOHdr.Poh_cre_by = _user;
                    #endregion

                    #region Fill PO Auto Number
                    MasterAutoNumber _trnsPOAuto = new MasterAutoNumber();
                    _trnsPOAuto.Aut_cate_cd = _newCom;
                    _trnsPOAuto.Aut_cate_tp = "COM";
                    _trnsPOAuto.Aut_direction = null;
                    _trnsPOAuto.Aut_modify_dt = null;
                    _trnsPOAuto.Aut_start_char = "PUR";
                    _trnsPOAuto.Aut_moduleid = "PUR";
                    _trnsPOAuto.Aut_year = null;
                    #endregion

                    #region Fill PO Items
                    string _newLocBin = _inventoryDAL.GetDefaultBinCode(_newCom, _newLoc);
                    foreach (PurchaseOrderDetail _poItm in _trnsPOItems)
                    {
                        _poItm.Pod_seq_no = _trnsPOHdr.Poh_seq_no;
                    }
                    #endregion

                    //Save PO
                    i = SaveNewPONew(_trnsPOHdr, _trnsPOItems, null, _trnsPOAuto, out _genPONo);
                    if (i == -1)
                    {
                        _error = _genPONo;
                        _po_Err = -1;
                    }
                    _trnsGRNHdr.Ith_oth_docno = _genPONo;

                    #region Fill GRN Items
                    foreach (ReptPickSerials _rept in _reptPickSerial)
                    {
                        _rept.Tus_com = _newCom;
                        _rept.Tus_loc = _newLoc;
                        _rept.Tus_bin = _newLocBin;
                        _rept.Tus_itm_line = _rept.Tus_base_itm_line;
                        _rept.Tus_doc_no = _genPONo;
                        _rept.Tus_exist_grndt = _rept.Tus_orig_grndt;
                        _rept.Tus_exist_grnno = _rept.Tus_orig_grnno;
                        _rept.Tus_exist_supp = _rept.Tus_orig_supp;
                        _rept.Tus_orig_grndt = _trnsDate.Date;
                        _rept.Tus_orig_grnno = _genPONo;
                        _rept.Tus_orig_supp = _SuppCode;

                        DataTable _dtStatus = _inventoryDAL.GetItemStatusMaster(_rept.Tus_itm_stus, string.Empty);
                        foreach (DataRow _rw in _dtStatus.Rows)
                        {
                            _rept.Tus_itm_stus = Convert.ToString(_rw["MIS_LP_CD"]);
                            _rept.Tus_unit_cost = _rept.Tus_unit_price;
                        }
                    }
                    #endregion

                    //Save GRN
                    i = ConsignmentReceipt(_trnsGRNHdr, _reptPickSerial, null, _trnsGRNAuto, null, out _genGRNNo);
                    if (i == -i)
                    {
                        _error = _genGRNNo;
                        _grn_Err = -1;
                    }
                }

                #region Consignment Item Transfer
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                List<ReptPickSerials> _reptConsSerials = _inventoryDAL.GetTransferSerials(_com, _loc, 1, _user);
                _inventoryDAL.ConnectionClose();
                if (_reptConsSerials != null && _reptConsSerials.Count > 0)
                {
                    InventoryHeader _trnsAODOut = new InventoryHeader();
                    MasterAutoNumber _trnsAODOutAuto = new MasterAutoNumber();

                    InventoryHeader _trnsAODIn = new InventoryHeader();
                    MasterAutoNumber _trnsAODInAuto = new MasterAutoNumber();

                    #region AOD Out Header Values Assign
                    _trnsAODOut.Ith_acc_no = string.Empty;
                    _trnsAODOut.Ith_anal_1 = string.Empty;
                    _trnsAODOut.Ith_anal_10 = true;
                    _trnsAODOut.Ith_anal_11 = false;
                    _trnsAODOut.Ith_anal_12 = false;
                    _trnsAODOut.Ith_anal_2 = string.Empty;
                    _trnsAODOut.Ith_anal_3 = string.Empty;
                    _trnsAODOut.Ith_anal_4 = string.Empty;
                    _trnsAODOut.Ith_anal_5 = string.Empty;
                    _trnsAODOut.Ith_anal_6 = 0;
                    _trnsAODOut.Ith_anal_7 = 0;
                    _trnsAODOut.Ith_anal_8 = _trnsDate.Date;
                    _trnsAODOut.Ith_anal_9 = _trnsDate.Date;
                    _trnsAODOut.Ith_bus_entity = string.Empty;
                    _trnsAODOut.Ith_cate_tp = string.Empty;
                    _trnsAODOut.Ith_channel = string.Empty;
                    _trnsAODOut.Ith_com = _com;
                    _trnsAODOut.Ith_com_docno = string.Empty;
                    _trnsAODOut.Ith_cre_by = _user;
                    _trnsAODOut.Ith_cre_when = DateTime.Now.Date;
                    _trnsAODOut.Ith_del_add1 = string.Empty;
                    _trnsAODOut.Ith_del_add2 = string.Empty;
                    _trnsAODOut.Ith_del_code = string.Empty;
                    _trnsAODOut.Ith_del_party = string.Empty;
                    _trnsAODOut.Ith_del_town = string.Empty;
                    _trnsAODOut.Ith_direct = false;
                    _trnsAODOut.Ith_doc_date = _trnsDate.Date;
                    _trnsAODOut.Ith_doc_no = string.Empty;
                    _trnsAODOut.Ith_doc_tp = string.Empty;
                    _trnsAODOut.Ith_doc_year = _trnsDate.Date.Year;
                    _trnsAODOut.Ith_entry_no = string.Empty;
                    _trnsAODOut.Ith_entry_tp = string.Empty;
                    _trnsAODOut.Ith_git_close = false;
                    _trnsAODOut.Ith_git_close_date = _trnsDate.Date;
                    _trnsAODOut.Ith_git_close_doc = string.Empty;
                    _trnsAODOut.Ith_is_manual = false;
                    _trnsAODOut.Ith_isprinted = false;
                    _trnsAODOut.Ith_job_no = string.Empty;
                    _trnsAODOut.Ith_loading_point = string.Empty;
                    _trnsAODOut.Ith_loading_user = string.Empty;
                    _trnsAODOut.Ith_loc = _loc;
                    _trnsAODOut.Ith_manual_ref = "CONSIGNMENT STOCK";
                    _trnsAODOut.Ith_mod_by = _user;
                    _trnsAODOut.Ith_mod_when = DateTime.Now.Date;
                    _trnsAODOut.Ith_noofcopies = 0;
                    _trnsAODOut.Ith_oth_loc = _newLoc;
                    _trnsAODOut.Ith_oth_docno = string.Empty;
                    _trnsAODOut.Ith_remarks = "AUTO_TRANSFERED";
                    _trnsAODOut.Ith_sbu = string.Empty;
                    //_inventoryHeader.Ith_seq_no = 0; removed by Chamal 12-05-2013
                    _trnsAODOut.Ith_session_id = "AUTO";
                    _trnsAODOut.Ith_stus = "F";
                    _trnsAODOut.Ith_sub_tp = string.Empty;
                    _trnsAODOut.Ith_vehi_no = string.Empty;
                    _trnsAODOut.Ith_oth_com = _newCom;
                    _trnsAODOut.Ith_anal_1 = "1";
                    _trnsAODOut.Ith_anal_2 = string.Empty;
                    #endregion

                    #region AOD Out Auto No Values Assign
                    _trnsAODOutAuto.Aut_cate_cd = _loc;
                    _trnsAODOutAuto.Aut_cate_tp = "LOC";
                    _trnsAODOutAuto.Aut_direction = null;
                    _trnsAODOutAuto.Aut_modify_dt = null;
                    _trnsAODOutAuto.Aut_moduleid = string.Empty;
                    _trnsAODOutAuto.Aut_start_char = string.Empty;
                    _trnsAODOutAuto.Aut_modify_dt = null;
                    _trnsAODOutAuto.Aut_year = _trnsDate.Year;
                    #endregion

                    #region AOD Out Items Values Assign
                    foreach (ReptPickSerials _serItems in _reptConsSerials)
                    {
                        _serItems.Tus_new_remarks = "AOD-OUT";
                    }
                    #endregion

                    string _AODOutNo = "";
                    i = SaveCommonOutWardEntry_New(_com, _intrPC, _newCom, "N/A", _trnsAODOut, _trnsAODOutAuto, null, null, _reptConsSerials, null, out _error, out _invoiceNo, out _AODOutNo, false, false);
                    if (!string.IsNullOrEmpty(_error))
                    {
                        _invoiceNo = _error;
                        _invoiceDO_Err = -1;
                    }
                }
                #endregion

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.SaveTransferLocStatusLog(_com, _loc, _invoiceDO_Err, _invoiceDO_Err, _po_Err, _grn_Err);
            }

            return 1;
        }

        public Int16 SaveNewPONew(PurchaseOrder _NewPO, List<PurchaseOrderDetail> _NewPOItems, List<PurchaseOrderDelivery> _NewPODel, MasterAutoNumber _masterAutoNumber, out string docno)
        {
            Int16 _effects = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryDAL.SaveNewPO(_NewPO);

                if (_NewPOItems != null)
                {
                    foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                    {
                        _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                }
                if (_NewPODel != null)
                {
                    foreach (PurchaseOrderDelivery _DelItems in _NewPODel)
                    {
                        _inventoryDAL.SaveNewPODel(_DelItems);
                    }
                }

                bool _isSCMImpPo = false;//Add by Chamal 24/06/2013
                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "IMPORTS" && _NewPO.Poh_job_no == "IMPORTS_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "LOCAL_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "QUO_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_isSCMImpPo == false)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);
                    _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                    _inventoryDAL.UpdatePODocNo(_NewPO.Poh_seq_no, _documentNo);
                    docno = _documentNo;
                }
                else
                {
                    docno = _NewPO.Poh_doc_no;
                }

                _inventoryDAL.TransactionCommit();
                _effects = 1;
            }
            catch (Exception ex)
            {
                docno = ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                _effects = -1;
            }
            return _effects;
        }

        private static class DataBase
        {
            public static string _scm = "(SCM)";
            public static string _ems = "(EMS)";
            public static string _fms = "(FMS)";
            public static string _reportdb = "(REPORTDB)";
        }

        public Int32 SaveInvoiceDuplicateWithTransaction01(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, List<InvoiceVoucher> _voucher, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo)
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _buybackinv = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;
            MasterAutoNumber _auto = null;

            //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            // {
            try
            {
                // try
                //  {
                _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //  }
                //   catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }

                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);

                _db = string.Empty;
                _location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                string _recieptSeq = null;
                string _invoiceSeq = null;
                InventoryHeader _invHdr = null;
                DataTable _dataTable = null;
                CommonSaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable);

                //update invoice discount

                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    if (_itm.Sad_dis_type == "P")
                        _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                }

                //end

                string _cusNo = _invoiceHeader.Sah_cus_cd;
                if (string.IsNullOrEmpty(_error))
                {
                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (!string.IsNullOrEmpty(_businessCompany.Mbe_nic) || !string.IsNullOrEmpty(_businessCompany.Mbe_mob)))
                    {
                        MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                        {
                            //new customer
                            _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "CONT";

                        nxt1:
                            _auto.Aut_year = null;
                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);

                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _cusNo) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _cusNo;
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _cusNo);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _cusNo);
                        }
                    }
                    #endregion

                    #region update auto no

                    if (!_isHold)
                    {
                    nxt1:
                        _invoiceAuto.Aut_year = null;
                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                        _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _invoiceAuto.Aut_year = null;
                        _invoiceAuto.Aut_modify_dt = null;
                        if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invNo) == 1)
                        {
                            _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                            goto nxt1;
                        }

                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

                        #region Buyback Item
                        if (_buybacklist != null) if (_buybacklist.Count > 0)
                            {
                                InventoryBLL _bll = new InventoryBLL();
                                _bll._salesDAL = _salesDAL;
                                _bll._inventoryDAL = _inventoryDAL;
                                _bll._FMSinventoryDAL = _fmsInventoryDal;
                                _bll._inventoryRepDAL = _inventoryRepDAL;
                                _buybackheader.Ith_manual_ref = _invNo;
                                _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                                _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                                _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                            }
                        #endregion
                        #region Save/Update Voucher
                        if (_voucher != null)
                            if (_voucher.Count > 0)
                            {
                                _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                                UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _cusNo, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                            }
                        #endregion

                        _salesDAL.UpdateInvoiceWithTaxCommission(_invNo, string.Empty, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //string RecieptNo = "";
                        if (_recieptAuto != null)
                        {
                        nxt2:
                            _recieptAuto.Aut_year = null;
                            MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                            _receiptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _recieptAuto.Aut_year = null;
                            _recieptAuto.Aut_modify_dt = null;
                            _recNo = _receiptNo;
                            if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", _recNo) == 1)
                            {
                                _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                                goto nxt2;
                            }
                            //_invDAL.UpdateAutoNumber(_recieptAuto);

                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                        }
                        _salesDAL.UpdateReceipt(_invNo, _recNo, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //Update receipt no which allocated by receipt entry as per invoice
                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(_invoiceSeq), _invNo);

                        if (_isDeliveryNow)
                        {
                            // string _doc;
                            _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                            MasterAutoNumber _AutoNo = new MasterAutoNumber();
                            int _e = 0;
                            if (_dataTable.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dataTable.Rows.Count; i++)
                                {
                                    if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "ADJ";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "ADJ";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "GRN";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "GRN";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                    {
                                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                        //_AutoNo.Aut_direction = null;
                                        //_AutoNo.Aut_start_char = "PO";
                                        //_AutoNo.Aut_cate_tp = "COM";
                                        //_AutoNo.Aut_year = null;

                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                        _AutoNo.Aut_cate_tp = "COM";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_modify_dt = null;
                                        _AutoNo.Aut_moduleid = "PUR";
                                        _AutoNo.Aut_start_char = "PUR";
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    }
                                }
                            }

                            //update inv no
                            _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                            _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
                        }
                    }
                    #endregion

                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion
                    _effect = 1;
                }
                else
                    _effect = -1;

                try
                {
                    // _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    if (string.IsNullOrEmpty(_error))
                    {
                        _db = DataBase._ems; _inventoryDAL.TransactionCommit();
                        _db = DataBase._ems; _salesDAL.TransactionCommit();
                        _db = DataBase._fms; _fmsInventoryDal.TransactionCommit();
                        _db = DataBase._reportdb; _inventoryRepDAL.TransactionCommit();
                        _db = DataBase._ems; _generalDAL.TransactionCommit();
                        _inventoryDAL.UpdateInvoiceDOStatus(_invNo);
                        //cus code update
                        if (_auto != null)
                        {
                            _inventoryDAL.UpdateAutoNumber(_auto);
                        }
                    }
                    else
                    {
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                    }
                }
                catch (Exception ex)
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation.\n" + ex.Message; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }

                //  if (_effect == 1) _tr.Complete();
                //}
            }
            catch
            {
                _invoiceNo = string.Empty;
                _receiptNo = string.Empty;
                _deliveryOrder = string.Empty;
                _errorlist = _error;
                BuyBackInvNo = string.Empty;
                _effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            BuyBackInvNo = _buybackinv;
            return _effect;
        }

        public void CommonSaveInvoiceWithDeliveryOrderWithTransaction(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, bool _ishireSale, out string _invSeq, out string _recieptSeq, out InventoryHeader _mov, out DataTable _datatable)
        {
            string _invNo = "";
            string _recNo = "";
            string _doNo = "";

            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
            string _error = string.Empty;

            #region Delivery Now - Reserve Serialized/Non-Serialized Item inline
            if (_isDeliveryNow)
            {
                bool _isOK = true;
                //string _list = string.Empty;
                //_isOK = TakeInventorySerialwithItem(_invoiceHeader.Sah_dt, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _inventoryHeader.Ith_loc, _invoiceItem, _pickSerial, _invDAL, _salDAL, _invRepDAL, out _remakeReptSerialList, out _list);

                //if (_isOK == false)
                //{
                //    _error = "Inventory and invoice qty mismatch found. process aborted!";
                //    _invoiceNo = _invNo;
                //    _receiptNo = _recNo;
                //    _deliveryOrder = _doNo;
                //    _errorlist = _error;
                //    _invSeq = "";
                //    _recieptSeq = "";
                //    _mov = null;
                //    _datatable = null;
                //    return;
                //}

                //_pickSerial = new List<ReptPickSerials>();
                //_pickSerial = _remakeReptSerialList;
            }
            #endregion

            string InvoiceNo = string.Empty;
            string RecieptNo = string.Empty;
            try
            {
                Int32 _invoiceLine = 1;
                DataTable _tbl = _salDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                string _executiveType = string.Empty;
                foreach (DataRow _r in _tbl.Rows)
                {
                    _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                }
                List<SaleCommission> _saveCommission = new List<SaleCommission>();

                #region Delete invoice if its a HOLD status
                if (_isHold || _isHoldInvoiceProcess) _salDAL.DeleteInvoiceDetailForHold(_invoiceHeader.Sah_seq_no);
                #endregion

                //Generate SeqNo
                //If hold, then client should generate the sequence and assign to header,ie; if its recall hold invoice and need to second time hold, could set sequence no
                //as per the recalled sequence no
                Int32 InvoiceSeqNo = _isHoldInvoiceProcess ? _invoiceHeader.Sah_seq_no : _invDAL.GetSerialID();
                //Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _invDAL.GetSerialID() : -1;
                Int32 RecieptSeqNo = -1;
                Int32 InventorySeqNo = 0;
                if (_isDeliveryNow) InventorySeqNo = _invDAL.GetSerialID();

                //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------

                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);

                #region Calculation for total of the payment to infiltrate invoice header

                decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                decimal _totalReceiptAmt = 0;
                if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                //ADDED SACHITH 2013/12/04
                //CREDIT SALES
                //FOR SVAT CUSTOMERS ADD TAX VALUE TO ANAL_8
                if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                {
                    decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                    _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                }

                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        _invoiceSerial.ForEach(X => X.Sap_inv_no = Convert.ToString(InvoiceSeqNo));
                        _invoiceSerial.ForEach(x => x.Sap_seq_no = InvoiceSeqNo);
                    }

                DataTable _tblESDEPFWHF = new DataTable();
                _tblESDEPFWHF = _salDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                _invoiceHeader.Sah_esd_rt = ESD_rt;
                _invoiceHeader.Sah_epf_rt = EPF_rt;
                _invoiceHeader.Sah_wht_rt = WHT_rt;

                //_recieptHeader.Sar_esd_rate = ESD_rt;
                //_recieptHeader.Sar_epf_rate = EPF_rt;
                //_recieptHeader.Sar_wht_rate = WHT_rt;

                #endregion
                //Save Invoice Header
                #region Save Invoice Header
                _salDAL.SaveSalesHeader(_invoiceHeader);
                #endregion

                //Save Invoice Items
                #region Invoice Item Detail
                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    MasterItem _item = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                    _itm.Sad_seq_no = InvoiceSeqNo;
                    _invoiceLine = _itm.Sad_itm_line;
                    _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                    _itm.Sad_uom = _item.Mi_itm_uom;
                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                    if (_invoiceHeader.Sah_tax_exempted)
                    {
                        _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                        _itm.Sad_itm_tax_amt = 0;
                    }

                    //update DO qty
                    if (_isDeliveryNow)
                    {
                        decimal _doQty = 0;
                        List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line).ToList<ReptPickSerials>();
                        if (_temp != null && _temp.Count > 0)
                        {
                            _doQty = _temp.Sum(p => p.Tus_qty);
                        }
                        _itm.Sad_do_qty = _doQty;
                    }
                    _salDAL.SaveSalesItem(_itm);
                    _salDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    _itmTax = _salDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    foreach (MasterItemTax _one in _itmTax)
                    {
                        InvoiceItemTax _tax = new InvoiceItemTax();
                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        _tax.Satx_job_line = 0;
                        _tax.Satx_job_no = "";
                        _tax.Satx_seq_no = InvoiceSeqNo;
                        _salDAL.SaveSalesItemTax(_tax);
                    }
                    //Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                    //_itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _itm.Sad_pbook);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _itm.Sad_pb_lvl);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _itm.Sad_promo_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                    //List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_dt, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
                    //List<SaleCommission> _commission = null;

                    ////commission calculation
                    //if (_CashCommissionDetail != null)
                    //{
                    //    if (_CashCommissionDetail.Count > 0)
                    //    {
                    //        _commission = GetCalculatedCommission(_itm.Sad_itm_cd, _invoiceLine, _itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt, _totalValue, _recieptItem, _CashCommissionDetail[0]);
                    //    }
                    //}

                    //if (_commission != null)
                    //    _saveCommission.AddRange(_commission);

                    //_invoiceLine += 1;
                }

                //Update Discount Definition
                var _discountseq = _invoiceItem.Where(x => x.Sad_dis_type == "M").Select(x => x.Sad_dis_seq).Distinct().ToList();
                if (_discountseq != null && _discountseq.Count > 0)
                {
                    foreach (var _i in _discountseq)
                    {
                        int _seqno = Convert.ToInt32(_i);
                        _salDAL.UpdateGeneralDiscount("M", _seqno, 0);
                    }
                }
                #endregion

                #region Commission Part - Commented :)

                //if (_saveCommission != null)
                //    if (_saveCommission.Count > 0)
                //    {
                //        //Save Commissiom
                //        _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_invoiceHeader.Sah_seq_no));
                //        _saveCommission.ForEach(x => x.Sac_seq_no = _invoiceHeader.Sah_seq_no);
                //        foreach (SaleCommission _com in _saveCommission)
                //        {
                //            _salDAL.SaveSalesCommission(_com);
                //        }
                //    }

                #endregion

                //Save Invoice Serials
                #region Invoice Serial
                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        foreach (InvoiceSerial _itm in _invoiceSerial)
                        {
                            _itm.Sap_seq_no = InvoiceSeqNo;
                            _salDAL.SaveSalesSerial(_itm);
                        }
                    }
                #endregion

                //-------------------------------------------------------------------------- Payment
                #region Payment
                string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                {
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_receipt_no = Convert.ToString(RecieptSeqNo);
                    _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                    _salDAL.SaveReceiptHeader(_recieptHeader);

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_receipt_no = Convert.ToString(RecieptSeqNo);
                                _salDAL.SaveReceiptItem(_itm);

                                if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                {
                                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                    RecieptHeader _rHdr = new RecieptHeader();
                                    _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                    _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                    _rHdr.Sar_act = true;
                                    _rHdr.Sar_direct = true;
                                    _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                    _salDAL.SaveReceiptHeader(_rHdr);
                                }
                                if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                {
                                    _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                    MasterBusinessEntity _entity = _salDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                    MasterProfitCenter _profit = _salDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                    if (_entity != null)
                                        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                        {
                                            string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                            OutSMS _out = new OutSMS();
                                            _out.Createtime = DateTime.Now;
                                            _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _entity.Mbe_cd;
                                            //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                            _out.Senderphno = _entity.Mbe_mob;
                                            _out.Refdocno = _itm.Sard_ref_no;
                                            _out.Sender = _invoiceHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _invDAL.SaveSMSOut(_out);
                                        }
                                }

                                if (_itm.Sard_pay_tp.Trim() == "LORE")
                                {
                                    _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "GVO")
                                {
                                    _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                }
                            }
                        }
                }
                #endregion

                #region Customer Account Maintain
                if (_invoiceHeader.Sah_cus_cd != "CASH")
                {
                    decimal _invoiceTotal = 0;
                    decimal _paidTotal = 0;

                    if (_invoiceItem != null)
                        if (_invoiceItem.Count > 0)
                        {
                            //Updating Account Balance
                            var _grandTotal = (from _total in _invoiceItem
                                               select _total.Sad_tot_amt).Sum();
                            _invoiceTotal = _grandTotal;
                        }

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            var _payTotal = (from _pay in _recieptItem
                                             select _pay.Sard_settle_amt).Sum();
                            _paidTotal = _payTotal;
                        }

                    CustomerAccountRef _account = new CustomerAccountRef();
                    _account.Saca_acc_bal = _invoiceTotal - _paidTotal;
                    _account.Saca_com_cd = _invoiceHeader.Sah_com;
                    _account.Saca_crdt_lmt = 0;
                    _account.Saca_cre_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_cre_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_cust_cd = _invoiceHeader.Sah_cus_cd;
                    _account.Saca_mod_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_mod_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_ord_bal = 0;
                    _account.Saca_session_id = _invoiceHeader.Sah_session_id;

                    //
                    // _salDAL.SaveCustomerAccount(_account);
                }
                #endregion

                if (!string.IsNullOrEmpty(_invoiceHeader.Sah_anal_6))
                {
                    DataTable _loldetail = _salDAL.GetLoyaltyCardDetail(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0) { _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp"); _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec"); }
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceItem, _invoiceSerial, _recieptItem, _salDAL, _invDAL);
                    if (_points > 0)
                    {
                        _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _invoiceHeader.Sah_seq_no;
                        _salDAL.SaveInvoiceLoyalty(_lol);
                    }
                }

                InventoryHeader _invHdr = null;
                DataTable _dataTable = null; ;
                #region Invoice Auto Number/Delivery Order
                if (!_isHold)
                {
                    /*
                nxt1:
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _invDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    if (!_ishireSale)
                        InvoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    else
                        InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    if (_salDAL.CheckSalesNo("sp_getinvno", "p_inv_no", InvoiceNo) == 1)
                    {
                        _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        goto nxt1;
                    }

                    _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _salDAL.UpdateInvoiceWithTaxCommission(InvoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                    if (_recieptAuto != null)
                    {
                    nxt2:
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _invDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        RecieptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        if (_salDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                        {
                            _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                            goto nxt2;
                        }
                        //_invDAL.UpdateAutoNumber(_recieptAuto);

                        _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                    }
                    _salDAL.UpdateReceipt(InvoiceNo, RecieptNo, InvoiceSeqNo, RecieptSeqNo);
                    //Update receipt no which allocated by receipt entry as per invoice
                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(InvoiceSeqNo), InvoiceNo);
                    */

                    //Raise Delivery Order if the invoice going to deliver now!
                    if (_isDeliveryNow)
                    {
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = InvoiceSeqNo.ToString());
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_entry_no = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;
                        InventoryBLL _bll = new InventoryBLL();
                        //_bll.DeliveryOrderInterCompany(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, out  _doNo, _invRepDAL, _invDAL);
                        //Code by Chamal 13-May-2013 edit DeliveryOrder function and new DeliveryOrderEntry

                        _bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _invRepDAL, _invDAL, true, out _invHdr, out _dataTable);
                    }
                }
                else
                {
                    InvoiceNo = Convert.ToString(InvoiceSeqNo);
                }

                _invSeq = InvoiceSeqNo.ToString();
                _recieptSeq = RecieptSeqNo.ToString();
                _mov = _invHdr;
                _datatable = _dataTable;
                #endregion
            }
            catch (Exception ex)
            {
                _invSeq = "";
                _recieptSeq = "";
                _mov = null;
                _datatable = null;
                _error += "Generated error " + ex.Message;
                if (_error.Contains("UK_SAHINVNO") || _error.Contains("ORA-00001"))
                {
                    _error = "Please try again in a few seconds.";
                }
            }

            _invNo = InvoiceNo;
            _recNo = RecieptNo;

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _doNo;
            _errorlist = _error;
        }

        private void UpdateInvoiceGiftVoucher(string _company, string _profitcenter, string _customer, string _name, string _address1, string _address2, string _mobile, DateTime _validfrom, string _invoice, string _user, List<InvoiceVoucher> _voucher, SalesDAL _salDAL, FMS_InventoryDAL _fmsDAL)
        {
            _salDAL.SaveInvoiceVoucher(_voucher);
            foreach (InvoiceVoucher _Voucher in _voucher)
            {
                int _month = 0;
                MasterItemWarrantyPeriod _Warra = _inventoryDAL.GetItemWarrantyDetail(_Voucher.Stvo_gv_itm, "GOD");
                if (_Warra != null) _month = _Warra.Mwp_val;

                GiftVoucherPages _page = new GiftVoucherPages();
                _page.Gvp_com = _company;
                _page.Gvp_pc = _profitcenter;
                _page.Gvp_gv_cd = _Voucher.Stvo_gv_itm;
                _page.Gvp_book = _Voucher.Stvo_bookno;
                _page.Gvp_page = _Voucher.Stvo_pageno;
                _page.Gvp_cus_cd = _customer;
                _page.Gvp_cus_name = _name;
                _page.Gvp_cus_add1 = _address1;
                _page.Gvp_cus_add2 = _address2;
                _page.Gvp_cus_mob = _mobile;
                _page.Gvp_valid_from = _validfrom.Date;
                _page.Gvp_oth_ref = _invoice;
                _page.Gvp_mod_dt = DateTime.Now;
                _page.Gvp_issue_dt = _validfrom.Date;
                _page.Gvp_issue_by = _user;
                _page.Gvp_mod_by = _user;

                _fmsDAL.UpdateGiftVoucherByInvoice(_page, _month);
            }
        }

        private bool TakeInventorySerialwithItem(DateTime _date, string _company, string _profitcenter, string _location, List<InvoiceItem> _invoiceItemList, List<ReptPickSerials> _scanSerialList, InventoryDAL _invDALs, SalesDAL _salDALs, ReptCommonDAL _reptComDALs, out List<ReptPickSerials> _prepareScanSerialList, out string _errorItemList)
        {
            List<ReptPickSerials> _reMakeSerialList = new List<ReptPickSerials>();
            bool availability = true;
            string _errorList = string.Empty;

            foreach (InvoiceItem _itm in _invoiceItemList)
            {
                string _item = _itm.Sad_itm_cd;
                string _status = _itm.Sad_itm_stus;
                Int32 _invline = _itm.Sad_itm_line;
                decimal _qty = _itm.Sad_qty;
                decimal _unitprice = _itm.Sad_unit_rt;
                string _pricelevel = _itm.Sad_pb_lvl;
                string _pricebook = _itm.Sad_pbook;

                MasterItem _mItem = _invDALs.GetItem(_company, _item);
                if (IsGiftVoucher(_mItem.Mi_itm_tp)) continue;

                #region Get Price Level Situation for the status
                bool IsPriceLevelAllowDoAnyStatus = false;
                bool IsAgePriceLevel = false;
                DataTable _categoryDet = null;
                int _ageingDays = 0;

                List<PriceBookLevelRef> _lvls = _salDALs.GetPriceLevelList(_company, _pricebook, _pricelevel);
                List<PriceBookLevelRef> _lvl = _lvls;
                if (_lvl != null && _lvl.Count > 0)
                {
                    var _bool = from _l in _lvl where _l.Sapl_chk_st_tp == true select _l.Sapl_chk_st_tp;
                    if (_bool != null && _bool.Count() > 0) IsPriceLevelAllowDoAnyStatus = false; else IsPriceLevelAllowDoAnyStatus = true;

                    var _alvl = _lvl.Where(x => x.Sapl_isage && x.Sapl_itm_stuts == _status).ToList();
                    if (_alvl != null) if (_alvl.Count() > 0) IsAgePriceLevel = true; else IsAgePriceLevel = false;
                }
                else
                {
                    IsPriceLevelAllowDoAnyStatus = true;
                    IsAgePriceLevel = false;
                }

                if (IsAgePriceLevel) _categoryDet = _generalDAL.GetMainCategoryDetail(_mItem.Mi_cate_1);
                if (_categoryDet != null && IsAgePriceLevel)
                    if (_categoryDet.Rows.Count > 0)
                    {
                        if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                            _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                        else _ageingDays = 0;
                    }
                #endregion

                _date = _date.AddDays(-_ageingDays);

                #region Serialized Item
                var _seriallist = (from i in _scanSerialList where i.Tus_base_itm_line == _invline select i);
                if (_mItem.Mi_is_ser1 == 1)
                {
                    foreach (ReptPickSerials _lst in _seriallist)
                    {
                        string _serialno = _lst.Tus_ser_1;
                        ReptPickSerials _chk = _invDALs.Get_all_details_on_serial(_company, _location, string.Empty, _item, _serialno);
                        if (string.IsNullOrEmpty(_chk.Tus_com)) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item + "/" + _serialno; else _errorList += "," + _item + "/" + _serialno; }
                        else if (IsPriceLevelAllowDoAnyStatus == false)
                            if (_chk.Tus_itm_stus != _status) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item + "/" + _serialno; else _errorList += "," + _item + "/" + _serialno; }

                        if (availability)
                        {
                            _chk.Tus_base_doc_no = _lst.Tus_base_doc_no;
                            _chk.Tus_base_itm_line = _lst.Tus_base_itm_line;
                            _chk.Tus_unit_price = _lst.Tus_unit_price;
                            _reMakeSerialList.Add(_chk);
                        }
                    }
                }
                #endregion

                #region Non-Serialized (Have Serial ID)
                if (_mItem.Mi_is_ser1 == 0)
                {
                    foreach (ReptPickSerials _lst in _seriallist)
                    {
                        List<ReptPickSerials> _chk;
                        if (IsPriceLevelAllowDoAnyStatus == false)
                            _chk = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, _status, _qty, _date.Date);
                        else
                            _chk = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, string.Empty, _qty, _date.Date);

                        if (_chk != null)
                            if (_chk.Count > 0)
                            {
                                if (IsPriceLevelAllowDoAnyStatus == false)
                                {
                                    decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _item && i.Tus_itm_stus == _status select i.Tus_qty).Sum();
                                    if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                                }
                                else
                                    if (_chk.Count() < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                            }
                            else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                        else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }

                        if (availability)
                        {
                            foreach (ReptPickSerials _pick in _chk)
                            {
                                _pick.Tus_base_doc_no = _lst.Tus_base_doc_no;
                                _pick.Tus_base_itm_line = _lst.Tus_base_itm_line;
                                _pick.Tus_unit_price = _lst.Tus_unit_price;
                                _reMakeSerialList.Add(_pick);
                            }
                            break;
                        }
                    }
                }
                #endregion

                #region Non-Serialized (No Serial ID)
                if (_mItem.Mi_is_ser1 == -1)
                {
                    foreach (ReptPickSerials _lst in _seriallist)
                    {
                        List<InventoryLocation> _inventoryLocation = _invDALs.GetItemInventoryBalance(_company, _location, _item, _status);
                        if (_inventoryLocation != null)
                            if (_inventoryLocation.Count > 0)
                            {
                                if (IsPriceLevelAllowDoAnyStatus == false)
                                {
                                    decimal _statuswiseqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item && i.Inl_itm_stus == _status select i.Inl_free_qty).Sum();
                                    if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                                }
                                else
                                {
                                    decimal _withoustusqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item select i.Inl_free_qty).Sum();
                                    if (_withoustusqty < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                                }
                            }
                            else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                        else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }

                        if (availability)
                        {
                            ///List<ReptPickSerials> _pick;
                            // if (IsPriceLevelAllowDoAnyStatus == false)
                            ///      _pick = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, _status, _qty, _date.Date);
                            //  else
                            //    _pick = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, string.Empty, _qty, _date.Date);
                            // foreach (ReptPickSerials _chk in _pick)
                            //  {
                            ReptPickSerials _chk = new ReptPickSerials();
                            _chk = _lst;
                            //_chk.Tus_base_doc_no = _lst.Tus_base_doc_no;
                            //_chk.Tus_base_itm_line = _lst.Tus_base_itm_line;
                            //_chk.Tus_unit_price = _lst.Tus_unit_price;
                            //_chk.Tus_ser_id = 0;
                            //_chk.Tus_qty = _lst.Tus_qty;
                            //_chk.Tus_ser_1 = "N/A";
                            //_chk.Tus_ser_2 = "N/A";
                            //_chk.Tus_ser_3 = "N/A";
                            //_chk.Tus_ser_4 = "N/A";
                            //_chk.Tus_ser_id = 0;
                            //_chk.Tus_serial_id = "0";
                            //_chk.Tus_bin = _lst.Tus_bin;
                            ////_chk.Tus_unit_cost = 0;
                            ////_chk.Tus_unit_price = 0;
                            ////_chk.Tus_unit_price = 0;
                            _reMakeSerialList.Add(_chk);
                            //   }
                            break;
                        }
                    }
                }
                #endregion
            }

            _errorItemList = _errorList;
            _prepareScanSerialList = _reMakeSerialList;
            return availability;
        }

        private bool IsGiftVoucher(string _type)
        {
            bool _yes = false;
            if (!string.IsNullOrEmpty(_type))
                if (_type == "G")
                    _yes = true;
                else
                    _yes = false;
            else
                _yes = false;
            return _yes;
        }

        #region Loyalty Point Calculation

        public List<LoyaltyPointDefinition> GetFesibleLoyaltyPayMode(List<LoyaltyPointDefinition> _foundlist, List<RecieptItem> _receiptdetail)
        {
            List<LoyaltyPointDefinition> _returnlist = null;
            if (_receiptdetail == null || _receiptdetail.Count <= 0)
            {
                var _wopmode = _foundlist.Where(x => string.IsNullOrEmpty(x.Saldf_pmod)).ToList();
                if (_wopmode != null)
                {
                    if (_wopmode.Count > 0)
                    {
                        _returnlist = _wopmode; return _returnlist;
                    }
                    else return _returnlist;
                }
                else return _returnlist;
            }

            foreach (RecieptItem _one in _receiptdetail)
            {
                var _pmode = _foundlist.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();

                if (_one.Sard_pay_tp.ToUpper() == "CRCD")
                {
                    var _bankNtype0 = _pmode.Where(x => x.Saldf_bank == _one.Sard_credit_card_bank && x.Saldf_cd_tp == _one.Sard_cc_tp).ToList();
                    if (_bankNtype0 != null) if (_bankNtype0.Count > 0) { _returnlist = _bankNtype0; return _returnlist; }

                    var _bankNtype1 = _pmode.Where(x => x.Saldf_bank == _one.Sard_credit_card_bank && string.IsNullOrEmpty(x.Saldf_cd_tp)).ToList();
                    if (_bankNtype1 != null) if (_bankNtype1.Count > 0) { _returnlist = _bankNtype1; return _returnlist; }

                    var _bankNtype2 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank) && string.IsNullOrEmpty(x.Saldf_cd_tp)).ToList();
                    if (_bankNtype2 != null) if (_bankNtype2.Count > 0) { _returnlist = _bankNtype2; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "CHEQUE")
                {
                    var _bank0 = _pmode.Where(x => x.Saldf_bank == _one.Sard_chq_bank_cd).ToList();
                    if (_bank0 != null) if (_bank0.Count > 0) { _returnlist = _bank0; return _returnlist; }

                    var _banknull1 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank)).ToList();
                    if (_banknull1 != null) if (_banknull1.Count > 0) { _returnlist = _banknull1; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "DEBIT")
                {
                    var _bank0 = _pmode.Where(x => x.Saldf_bank == _one.Sard_chq_bank_cd).ToList();
                    if (_bank0 != null) if (_bank0.Count > 0) { _returnlist = _bank0; return _returnlist; }

                    var _banknull1 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank)).ToList();
                    if (_banknull1 != null) if (_banknull1.Count > 0) { _returnlist = _banknull1; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "CASH")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "ADVAN")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "CRNOTE")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "GVO")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "GVS")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "LORE")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }

                var _allnull0 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && string.IsNullOrEmpty(x.Saldf_promo) && string.IsNullOrEmpty(x.Saldf_ser)).ToList();
                if (_allnull0 != null) if (_allnull0.Count > 0) { _returnlist = _allnull0; return _returnlist; }

                var _wopmode = _foundlist.Where(x => string.IsNullOrEmpty(x.Saldf_pmod)).ToList();
                if (_wopmode != null) if (_wopmode.Count > 0) { _returnlist = _wopmode; return _returnlist; }
            }

            return _returnlist;
        }

        public List<LoyaltyPointDefinition> GetFesibleLoyaltyDefinition(string _company, string _loyaltytype, string _membership, string _partytype, string _partycode, DateTime _date, InvoiceItem _invoiceitem, List<InvoiceSerial> _seriallist, List<RecieptItem> _receiptdetail, SalesDAL _salDll, InventoryDAL _invDll)
        {
            List<LoyaltyPointDefinition> _returnlist = null;

            Int32 _isDis = 0;
            Int32 _isIns = 0;
            Int32 _pTP = 1000;
            if (_invoiceitem.Sad_disc_amt > 0)
            {
                _isDis = 1;
            }

            //Get price type
            DataTable _pbType = _salDll.GetPTypeByInvSeq(_invoiceitem.Sad_pbook, _invoiceitem.Sad_pb_lvl, _invoiceitem.Sad_itm_seq, _invoiceitem.Sad_seq);

            if (_pbType != null)
            {
                if (_pbType.Rows.Count > 0)
                {
                    foreach (DataRow drow in _pbType.Rows)
                    {
                        _pTP = Convert.ToInt32(drow["sapd_price_type"]);
                    }
                }
            }

            //Check Installment basis
            foreach (RecieptItem _rec in _receiptdetail)
            {
                if (_rec.Sard_cc_period > 0)
                {
                    _isIns = 1;
                }
            }

            List<LoyaltyPointDefinition> _initial = _salDll.GetLoyaltyDefinition(_loyaltytype, _membership, _partytype, _partycode, _invoiceitem.Sad_pbook, _invoiceitem.Sad_pb_lvl, _date.Date, _isDis, _pTP, _isIns);
            if (_initial == null || _initial.Count <= 0)
                return _returnlist;

            if (_receiptdetail == null || _receiptdetail.Count <= 0)
            {
                List<LoyaltyPointDefinition> _intermediate = new List<LoyaltyPointDefinition>();
                _intermediate = GetFesibleLoyaltyPayMode(_initial, null);
                return _intermediate;
            }

            if (_initial != null) if (_initial.Count > 0)
                {
                    List<LoyaltyPointDefinition> _serialitem0 = null;
                    List<LoyaltyPointDefinition> _intermediate = new List<LoyaltyPointDefinition>();
                    MasterItem _itmdet = _invDll.GetItem(_company, _invoiceitem.Sad_itm_cd);
                    Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _invoiceitem.Sad_pbook, _invoiceitem.Sad_pb_lvl).Sapl_is_serialized);

                    //Check for serial/item only
                    if (_isSerialized == 1)
                        if (_seriallist != null) if (_seriallist.Count > 0)
                            {
                                foreach (InvoiceSerial _serial in _seriallist)
                                { _serialitem0 = _initial.Where(x => x.Saldf_ser == _serial.Sap_ser_1 && x.Saldf_itm == _invoiceitem.Sad_itm_cd && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2)).ToList(); if (_serialitem0 != null) if (_serialitem0.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_serialitem0, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; } }
                            }

                    //Check for promotion only
                    if (!string.IsNullOrEmpty(_invoiceitem.Sad_promo_cd))
                    {
                        var _promo1 = _initial.Where(x => x.Saldf_promo == _invoiceitem.Sad_promo_cd && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                        if (_promo1 != null) if (_promo1.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_promo1, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }
                    }

                    //Check for Item
                    var _item2 = _initial.Where(x => x.Saldf_itm == _invoiceitem.Sad_itm_cd && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_item2 != null) if (_item2.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_item2, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check for Brand/Category 1
                    var _brandcate13 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && x.Saldf_brand == _itmdet.Mi_brand && x.Saldf_cat_1 == _itmdet.Mi_cate_1 && string.IsNullOrEmpty(x.Saldf_cat_2) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_brandcate13 != null) if (_brandcate13.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_brandcate13, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check for Brand/Category 2
                    var _brandcate24 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && x.Saldf_brand == _itmdet.Mi_brand && string.IsNullOrEmpty(x.Saldf_cat_1) && x.Saldf_cat_2 == _itmdet.Mi_cate_2 && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_brandcate24 != null) if (_brandcate24.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_brandcate24, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check for Brand
                    var _brand5 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && x.Saldf_brand == _itmdet.Mi_brand && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_brand5 != null) if (_brand5.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_brand5, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //If there is no filter one
                    var _allnull6 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && string.IsNullOrEmpty(x.Saldf_promo) && string.IsNullOrEmpty(x.Saldf_ser) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_allnull6 != null) if (_allnull6.Count > 0) { _returnlist = _allnull6; return _returnlist; }

                }
            return _returnlist;
        }

        public decimal GetLoyaltyPoint(string _loyaltytype, string _membership, string _company, string _profitcenter, DateTime _date, List<InvoiceItem> _invoiceitem, List<InvoiceSerial> _seriallist, List<RecieptItem> _receiptdetail, SalesDAL _salDll, InventoryDAL _invDll)
        {
            decimal _lolpt = 0;
            bool _isfound = false;
            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy == null || _hierarchy.Count <= 0) return 0;
            foreach (MasterSalesPriorityHierarchy _zero in _hierarchy)
            {
                foreach (InvoiceItem _one in _invoiceitem)
                {
                    decimal _itemvalue = _one.Sad_tot_amt;
                    //Filter serial as per item
                    var seriallist = _seriallist.Where(x => x.Sap_itm_cd == _one.Sad_itm_cd && x.Sap_ser_1 != "N/A" && !string.IsNullOrEmpty(x.Sap_ser_1)).ToList();

                    List<LoyaltyPointDefinition> _init = GetFesibleLoyaltyDefinition(_company, _loyaltytype, _membership, _zero.Mpi_cd, _zero.Mpi_val, _date, _one, seriallist, _receiptdetail, _salDll, _invDll);
                    if (_init != null) if (_init.Count > 0)
                        {
                            _init.OrderByDescending(X => X.Saldf_seq).OrderBy(X => X.Saldf_line);

                            if (_init[0].Saldf_is_multi == true)
                            {
                                decimal _tovalue = _init[0].Saldf_value_to;
                                if (_tovalue == 0) _lolpt += 0; else _lolpt += (_itemvalue / _tovalue) * _init[0].Saldf_pt;
                                _isfound = true;
                            }
                            else if (_init[0].Saldf_is_multi == false)
                            {
                                int _seqance = _init[0].Saldf_seq;
                                var _slabs = _init.Where(x => x.Saldf_seq == _seqance).OrderBy(x => x.Saldf_line).ToList();
                                var _result = _slabs.Where(x => x.Saldf_value_frm <= _itemvalue && x.Saldf_value_to >= _itemvalue).ToList();
                                if (_result != null) if (_result.Count > 0)
                                        _lolpt += _result[0].Saldf_pt;
                                _isfound = true;
                            }
                        }
                }
                if (_isfound) return _lolpt;
            }
            return _lolpt;
        }

        #endregion

        public Int32 SaveCommonOutWardEntry_New(string _fromCompany, string _fromProfit, string _toCompany, string _requestNo, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, InvoiceHeader _invoiceHeader, MasterAutoNumber _invoiceAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _genMessage, out string _genSalesDocument, out string _genInventoryDocument, bool _isGRAN, bool _isGRNFromDIN)
        {
            string _salesDocument = string.Empty;
            string _inventoryDocument = string.Empty;

            Int32 _effect = 0;
            string _tempSalesDoc = "";
            string _tempInventoryDoc = "";
            string _genInvDoc = "";
            string _genSalDoc = "";
            string _message = string.Empty;
            string _trlocation = _inventoryHeader.Ith_loc;
            Boolean _isStrucBaseTax = false;

            try
            {
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _generalDAL = new GeneralDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _FMSinventoryDAL = new FMS_InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _FMSinventoryDAL.ConnectionOpen();
                _FMSinventoryDAL.BeginTransaction();

                //kapila 19/7/2017
                MasterCompany _masterComp = null;
                _masterComp = _generalDAL.GetCompByCode(_fromCompany);
                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                var _document = (from _doc in _reptPickSerials
                                 select _doc.Tus_new_remarks).Distinct();
                bool _isInvalidManualDocType = false;
                if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_1))
                    if (_inventoryHeader.Ith_anal_1 == "1")
                        _isInvalidManualDocType = true;
                    else
                        _isInvalidManualDocType = false;
                bool _isManualSelect = _inventoryHeader.Ith_is_manual;
                foreach (string _documentType in _document)
                {
                    //Get All Document Types
                    var _serialList = (from _doc in _reptPickSerials
                                       where _doc.Tus_new_remarks == _documentType
                                       select _doc).ToList();

                    //Get Sequence No and Assign it to inventory header
                    Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                    _inventoryHeader.Ith_seq_no = UserSeqNo;
                    _inventoryHeader.Ith_doc_no = Convert.ToString(UserSeqNo);
                    if (_documentType == "AOD-OUT")
                    {
                        #region AOD Region
                        MasterLocation _loc = _generalDAL.GetLocationByLocCode(_toCompany, _inventoryHeader.Ith_oth_loc);
                        bool _isOtherLocAutoIn = false;
                        //if (_loc.Ml_auto_ain && _loc.Ml_anal1 == "SCM2")
                        _isOtherLocAutoIn = true;
                        string _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);

                        #region GRAN/DIN
                        if (_isGRAN && _isGRNFromDIN == false)
                        {
                            List<ReptPickSerials> _statuschangelist = _serialList.Where(x => x.Tus_itm_stus != x.Tus_new_status).ToList();
                            _serialList.RemoveAll(x => x.Tus_itm_stus != x.Tus_new_status);

                            #region Adj -
                            InventoryHeader _minusHeader = _inventoryHeader;
                            _minusHeader.Ith_cate_tp = "NOR";
                            _minusHeader.Ith_is_manual = false;
                            _minusHeader.Ith_stus = "A";
                            _minusHeader.Ith_direct = false;
                            _minusHeader.Ith_doc_tp = "ADJ";
                            _minusHeader.Ith_sub_tp = "STUS";
                            _minusHeader.Ith_entry_tp = "STUS";
                            _minusHeader.Ith_direct = false;
                            #endregion
                            #region Adj +
                            InventoryHeader _plusHeader = _inventoryHeader;
                            _plusHeader.Ith_cate_tp = "NOR";
                            _plusHeader.Ith_is_manual = false;
                            _plusHeader.Ith_stus = "A";
                            _plusHeader.Ith_direct = true;
                            _plusHeader.Ith_doc_tp = "ADJ";
                            _plusHeader.Ith_sub_tp = "STUS";
                            _plusHeader.Ith_entry_tp = "STUS";
                            _plusHeader.Ith_direct = true;
                            #endregion
                            #region Adj - Auto
                            MasterAutoNumber _minusAuto = new MasterAutoNumber();
                            _minusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _minusAuto.Aut_cate_tp = "LOC";
                            _minusAuto.Aut_direction = null;
                            _minusAuto.Aut_modify_dt = null;
                            _minusAuto.Aut_moduleid = "ADJ";
                            _minusAuto.Aut_number = 0;
                            _minusAuto.Aut_start_char = "ADJ";
                            _minusAuto.Aut_year = null;
                            #endregion
                            #region Adj + Auto
                            MasterAutoNumber _plusAuto = new MasterAutoNumber();
                            _plusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _plusAuto.Aut_cate_tp = "LOC";
                            _plusAuto.Aut_direction = null;
                            _plusAuto.Aut_modify_dt = null;
                            _plusAuto.Aut_moduleid = "ADJ";
                            _plusAuto.Aut_number = 0;
                            _plusAuto.Aut_start_char = "ADJ";
                            _plusAuto.Aut_year = null;
                            #endregion

                            #region Status Change
                            string _minusDoc = string.Empty;
                            string _plusDoc = string.Empty;
                            //InventoryStatusChangeCommon(_minusHeader, _plusHeader, _serialList, _reptPickSerialsSub, _minusAuto, _plusAuto, out _minusDoc, out _plusDoc);
                            if (_statuschangelist != null && _statuschangelist.Count > 0)
                                InventoryStatusChangeCommon(_minusHeader, _plusHeader, _statuschangelist, _reptPickSerialsSub, _minusAuto, _plusAuto, out _minusDoc, out _plusDoc);
                            #endregion
                            if (!string.IsNullOrEmpty(_minusDoc))
                            {
                                _tempInventoryDoc = _minusDoc + "," + _plusDoc;
                                if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                                else _genInvDoc += "," + _tempInventoryDoc;
                            }

                            _tempInventoryDoc = string.Empty;
                            #region Prepare for AOD OUT

                            List<ReptPickSerials> _AdjPlusSerialList = new List<ReptPickSerials>();

                            //foreach (ReptPickSerials _one in _serialList)
                            foreach (ReptPickSerials _one in _statuschangelist)
                            {
                                string _serial = _one.Tus_ser_1;
                                string _item = _one.Tus_itm_cd;
                                Int64 _serialId = _one.Tus_ser_id;

                                MasterItem msitem = new MasterItem();
                                msitem = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _item);
                                if (msitem.Mi_is_ser1 == 1 || msitem.Mi_is_ser1 == 0)
                                {
                                    ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, string.Empty, _item, Convert.ToInt32(_serialId));
                                    _AdjPlusSerialList.Add(_reptPickSerial_);
                                }
                                else
                                {
                                    ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                    _reptPickSerial_.Tus_com = _inventoryHeader.Ith_com;
                                    _reptPickSerial_.Tus_base_doc_no = _inventoryHeader.Ith_oth_docno;
                                    _reptPickSerial_.Tus_base_itm_line = _one.Tus_base_itm_line;
                                    _reptPickSerial_.Tus_bin = _defbin;
                                    _reptPickSerial_.Tus_cre_by = _inventoryHeader.Ith_cre_by;
                                    _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                    _reptPickSerial_.Tus_cross_batchline = 0;
                                    _reptPickSerial_.Tus_cross_itemline = 0;
                                    _reptPickSerial_.Tus_cross_seqno = 0;
                                    _reptPickSerial_.Tus_cross_serline = 0;
                                    _reptPickSerial_.Tus_doc_dt = _inventoryHeader.Ith_doc_date;
                                    _reptPickSerial_.Tus_doc_no = "N/A";
                                    _reptPickSerial_.Tus_exist_grncom = "N/A";
                                    _reptPickSerial_.Tus_isapp = 1;
                                    _reptPickSerial_.Tus_iscovernote = 1;
                                    _reptPickSerial_.Tus_itm_brand = msitem.Mi_brand;
                                    _reptPickSerial_.Tus_itm_cd = _item;
                                    _reptPickSerial_.Tus_itm_desc = msitem.Mi_longdesc;
                                    _reptPickSerial_.Tus_itm_line = 0;
                                    _reptPickSerial_.Tus_itm_model = msitem.Mi_model;
                                    _reptPickSerial_.Tus_itm_stus = _one.Tus_itm_stus;
                                    _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc;
                                    _reptPickSerial_.Tus_new_status = _one.Tus_new_status;
                                    _reptPickSerial_.Tus_qty = _one.Tus_qty;
                                    _reptPickSerial_.Tus_ser_1 = "N/A";
                                    _reptPickSerial_.Tus_ser_2 = "N/A";
                                    _reptPickSerial_.Tus_ser_id = 0;
                                    _reptPickSerial_.Tus_ser_line = 0;
                                    _reptPickSerial_.Tus_session_id = _inventoryHeader.Ith_session_id;
                                    _reptPickSerial_.Tus_unit_cost = 0;
                                    _reptPickSerial_.Tus_unit_price = 0;
                                    _reptPickSerial_.Tus_usrseq_no = 1;
                                    _reptPickSerial_.Tus_warr_no = "N/A";
                                    _reptPickSerial_.Tus_warr_period = 0;
                                    _reptPickSerial_.Tus_new_remarks = "AOD-OUT";
                                    _AdjPlusSerialList.Add(_reptPickSerial_);
                                }
                            }
                            if (_serialList != null) if (_serialList.Count > 0) _AdjPlusSerialList.AddRange(_serialList);

                            _serialList = _AdjPlusSerialList;
                            #endregion
                        }
                        #endregion

                        _inventoryHeader.Ith_doc_tp = "AOD";

                        _inventoryAuto.Aut_moduleid = "AOD";
                        _inventoryAuto.Aut_start_char = "AOD";
                        _inventoryAuto.Aut_direction = 0;

                        if (_isInvalidManualDocType)
                            if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2))
                                if (_inventoryHeader.Ith_anal_2 == "AOD")
                                    _inventoryHeader.Ith_anal_1 = "0";

                        string _aodoutno = string.Empty;

                        #region AOD OUT
                        // AODIssue(_inventoryHeader, _serialList, _reptPickSerialsSub, _inventoryAuto, out _tempInventoryDoc);
                        _inventoryHeader.Ith_direct = false;
                        _inventoryHeader.Ith_seq_no = 0;
                        _inventoryHeader.Ith_is_manual = _isManualSelect;
                        Int16 effect = SaveOutwardScanSerial(_inventoryHeader, _serialList, _reptPickSerialsSub, null, false);
                        effect = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _aodoutno);

                        var _lst = (from n in _reptPickSerials
                                    group n by new { n.Tus_itm_cd, n.Tus_base_doc_no } into r
                                    select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_base_doc_no = r.Key.Tus_base_doc_no, Tus_qty = r.Sum(p => p.Tus_qty) }).ToList();
                        foreach (var s in _lst)
                        {
                            string _item = s.Tus_itm_cd;
                            decimal _qty = s.Tus_qty;
                            string _requestno = s.Tus_base_doc_no;
                            _inventoryDAL.UpdateRequestItem(_requestno, _item, _qty);
                        }
                        #endregion
                        if (!string.IsNullOrEmpty(_aodoutno))
                        {
                            _tempInventoryDoc = _aodoutno;
                            if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                            else _genInvDoc += "," + _tempInventoryDoc;
                        }

                        _tempInventoryDoc = string.Empty;
                        //If other location auto in
                        if (_isOtherLocAutoIn)
                        {
                            string _otherloc = _inventoryHeader.Ith_loc;
                            _inventoryHeader.Ith_com = _toCompany;
                            _inventoryHeader.Ith_loc = _inventoryHeader.Ith_oth_loc;
                            _inventoryHeader.Ith_oth_loc = _otherloc;
                            _inventoryHeader.Ith_oth_com = _fromCompany;
                            _inventoryHeader.Ith_oth_docno = _aodoutno;
                            _inventoryHeader.Ith_direct = true;

                            _defbin = _inventoryDAL.GetDefaultBinCode(_toCompany, _inventoryHeader.Ith_loc);

                            MasterAutoNumber _aodinAuto = new MasterAutoNumber();
                            _aodinAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _aodinAuto.Aut_cate_tp = "LOC";
                            _aodinAuto.Aut_direction = 1;
                            _aodinAuto.Aut_modify_dt = null;
                            _aodinAuto.Aut_year = _inventoryHeader.Ith_doc_date.Date.Year;
                            _aodinAuto.Aut_moduleid = "AOD";
                            _aodinAuto.Aut_start_char = "AOD";

                            //List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_serialList, _inventoryHeader, _defbin);
                            List<ReptPickSerials> _aodinserial = _serialList;
                            foreach (ReptPickSerials _rept in _aodinserial)
                            {
                                _rept.Tus_com = _toCompany;
                                _rept.Tus_loc = _inventoryHeader.Ith_loc;
                                _rept.Tus_bin = _defbin;
                                _rept.Tus_itm_line = _rept.Tus_base_itm_line;
                                _rept.Tus_doc_no = _inventoryHeader.Ith_oth_docno;
                                _rept.Tus_exist_grndt = _rept.Tus_orig_grndt;
                                _rept.Tus_exist_grnno = _rept.Tus_orig_grnno;
                                _rept.Tus_exist_supp = _rept.Tus_orig_supp;
                                _rept.Tus_orig_grndt = _inventoryHeader.Ith_doc_date.Date;
                                _rept.Tus_orig_grnno = _rept.Tus_orig_grnno;
                                _rept.Tus_orig_supp = _rept.Tus_orig_supp;
                            }

                            _inventoryHeader.Ith_seq_no = 0;
                            SaveInwardScanSerial(_inventoryHeader, _aodinserial, _reptPickSerialsSub);
                            string _aodInNo = string.Empty;
                            effect = UpdateInventoryAutoNumber(_inventoryHeader, _aodinAuto, "+", out _aodInNo);

                            if (!string.IsNullOrEmpty(_aodoutno))
                            {
                                _tempInventoryDoc = _aodInNo;
                                if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                                else _genInvDoc += "," + _tempInventoryDoc;
                            }
                            _tempInventoryDoc = string.Empty;
                        }
                        _effect = 1;
                        #endregion
                        _inventoryHeader.Ith_is_manual = _isManualSelect;
                        #region Update Manual Doc
                        if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
                        {
                            _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
                            if (_masterComp.MC_IS_SCM2_FMS == 1)
                                _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                            else
                                _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                        }
                        #endregion
                    }
                    if (_documentType == "DO")
                    {
                        #region Delivery Order/ Invoice Region
                        string _invoiceNo = string.Empty;
                        string _deliveryOrder = string.Empty;
                        string _purchaseOrder = string.Empty;

                        _inventoryHeader.Ith_doc_tp = "DO";

                        _inventoryAuto.Aut_moduleid = "DO";
                        _inventoryAuto.Aut_start_char = "DO";
                        _inventoryAuto.Aut_direction = 0;
                        if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "DO") _inventoryHeader.Ith_anal_1 = "0";
                        List<InvoiceItem> _invoiceItemList = new List<InvoiceItem>();
                        #region New Invoice Process --------------------------------------------------------------------------------------------
                        var _invItem = from _itm in _reptPickSerials group _itm by new { _itm.Tus_itm_cd, _itm.Tus_itm_stus } into _items select new { Tus_itm_cd = _items.Key.Tus_itm_cd, Tus_itm_stus = _items.Key.Tus_itm_stus, Tus_qty = _items.Sum(p => p.Tus_qty) };
                        DataTable _adminT = _inventoryDAL.Get_location_by_code(_fromCompany, _inventoryHeader.Ith_loc);
                        if (_adminT == null || _adminT.Rows.Count <= 0)
                        { _genMessage = "Admin team not define"; _effect = -1; _genSalesDocument = string.Empty; _genInventoryDocument = string.Empty; return _effect; }
                        string _adminTeam = _adminT.Rows[0].Field<string>("ml_ope_cd");
                        if (string.IsNullOrEmpty(_adminTeam))
                        { _genMessage = "Admin team not define"; _effect = -1; _genSalesDocument = string.Empty; _genInventoryDocument = string.Empty; return _effect; }
                        List<InterCompanySalesParameter> _priceParam = _salesDAL.GetInterCompanyParameter(_adminTeam, _fromCompany, string.Empty, _toCompany, string.Empty);
                        string _otherProfitcenter = string.Empty;
                        if (_priceParam != null && _priceParam.Count > 0)
                        { _invoiceHeader.Sah_pc = _priceParam[0].Sritc_frm_prof; _invoiceHeader.Sah_cus_cd = _priceParam[0].Sritc_customer; _invoiceHeader.Sah_d_cust_cd = _priceParam[0].Sritc_customer; _otherProfitcenter = _priceParam[0].Sritc_to_prof; _invoiceHeader.Sah_sales_ex_cd = "N/A"; }
                        PurchaseOrder _PurchaseOrder = new PurchaseOrder();
                        _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_inventoryHeader.Ith_cre_by, "PO", 1, _fromCompany);
                        _PurchaseOrder.Poh_tp = "L";
                        _PurchaseOrder.Poh_sub_tp = "N";
                        _PurchaseOrder.Poh_doc_no = "-1";
                        _PurchaseOrder.Poh_com = _toCompany;
                        _PurchaseOrder.Poh_ope = "INV";
                        _PurchaseOrder.Poh_profit_cd = _otherProfitcenter;
                        _PurchaseOrder.Poh_dt = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Date;
                        _PurchaseOrder.Poh_ref = "N/A";
                        _PurchaseOrder.Poh_job_no = "N/A";
                        _PurchaseOrder.Poh_pay_term = "CREDIT";
                        _PurchaseOrder.Poh_supp = string.Empty;
                        _PurchaseOrder.Poh_cur_cd = "LKR";
                        _PurchaseOrder.Poh_ex_rt = 0;
                        _PurchaseOrder.Poh_trans_term = "";
                        _PurchaseOrder.Poh_port_of_orig = "";
                        _PurchaseOrder.Poh_cre_period = "0";
                        _PurchaseOrder.Poh_frm_yer = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;
                        _PurchaseOrder.Poh_frm_mon = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Month;
                        _PurchaseOrder.Poh_to_yer = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;
                        _PurchaseOrder.Poh_to_mon = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Month;
                        _PurchaseOrder.Poh_preferd_eta = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Date;
                        _PurchaseOrder.Poh_contain_kit = false;
                        _PurchaseOrder.Poh_sent_to_vendor = false;
                        _PurchaseOrder.Poh_sent_by = "";
                        _PurchaseOrder.Poh_sent_via = "";
                        _PurchaseOrder.Poh_sent_add = "";
                        _PurchaseOrder.Poh_stus = "F";
                        _PurchaseOrder.Poh_remarks = string.Empty;
                        _PurchaseOrder.Poh_sub_tot = 0;
                        _PurchaseOrder.Poh_tax_tot = 0;
                        _PurchaseOrder.Poh_dis_rt = 0;
                        _PurchaseOrder.Poh_dis_amt = 0;
                        _PurchaseOrder.Poh_oth_tot = 0;
                        _PurchaseOrder.Poh_tot = 0;
                        _PurchaseOrder.Poh_reprint = false;
                        _PurchaseOrder.Poh_tax_chg = false;
                        _PurchaseOrder.poh_is_conspo = 0;
                        _PurchaseOrder.Poh_cre_by = _inventoryHeader.Ith_cre_by;
                        Int32 _invoiceLine = 0;
                        List<PurchaseOrderDetail> _POItemListSave = new List<PurchaseOrderDetail>();
                        DataTable _lpStatus = _generalDAL.GetItemLPStatus();
                        foreach (var _itm in _invItem)
                        {
                            PurchaseOrderDetail _pItm = new PurchaseOrderDetail();
                            string _iItem = _itm.Tus_itm_cd;
                            string _iStatus = _itm.Tus_itm_stus;
                            decimal _iQty = _itm.Tus_qty;
                            DateTime _iDate = _invoiceHeader.Sah_dt.Date;
                            bool _iIsSerialized = false;

                            string _iPriceBook = "";
                            string _iPriceLevel = "";

                            List<MasterItemTax> _tax = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)       //kapila 19/7/2017
                            {
                                MasterItem _mstItem = _inventoryDAL.GetItem(_fromCompany, _iItem);
                                _tax = _salesDAL.GetItemTax_strucbase(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _tax = _salesDAL.GetItemTax(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty);

                            if (_tax == null || _tax.Count == 0)
                            {
                                _genMessage = "No tax define for the item " + _iItem + ".";
                                _effect = -1;
                                break;
                            }
                            if (_priceParam.Count <= 0) { _genMessage = "No pricing parameters define."; _effect = -1; break; };

                            if (_priceParam.Count > 0)
                                foreach (InterCompanySalesParameter _param in _priceParam)
                                {
                                    _iPriceBook = _param.Sritc_pb;
                                    _iPriceLevel = _param.Sritc_pb_lvl;
                                    _invoiceHeader.Sah_cus_cd = _param.Sritc_customer;
                                }
                            List<PriceBookLevelRef> _level = _salesDAL.GetPriceLevelList(_fromCompany, _iPriceBook, _iPriceLevel);

                            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                            List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();
                            PriceBookLevelRef _priceLevel = new PriceBookLevelRef();

                            if (_level.Count <= 0) { _genMessage = "No price level define."; _effect = -1; break; };
                            if (_level.Count > 0)
                                foreach (PriceBookLevelRef _lvl in _level)
                                {
                                    _priceLevel = _lvl;
                                    _iIsSerialized = _lvl.Sapl_is_serialized; break;
                                }
                            if (_iIsSerialized == false)
                                _priceDetailRef = _salesDAL.GetPriceDetail(_iPriceBook, _iPriceLevel, _iItem, _iQty, _iDate.Date, string.Empty);
                            else
                                _priceSerialRef = _salesDAL.GetAllPriceSerial(_iPriceBook, _iPriceLevel, _iItem, _iDate.Date, string.Empty);

                            if (_priceDetailRef.Count <= 0) { _genMessage = "There is no price define for the item " + _iItem + "."; _effect = -1; break; };

                            _invoiceLine++;
                            if (_priceDetailRef.Count > 0)
                                foreach (PriceDetailRef _price in _priceDetailRef)
                                {
                                    decimal _AbsoulteUnitPrice = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _price.Sapd_itm_price, 0, false);
                                    decimal _taxPortion = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _AbsoulteUnitPrice, 0, true);
                                    MasterItem _im = _inventoryDAL.GetItem(_fromCompany, _iItem);
                                    var _lp = _lpStatus.AsEnumerable().Where(x => x.Field<string>("mis_scm2_imp") == _iStatus).Select(x => x.Field<string>("mis_cd")).ToList();
                                    if (_lp == null || _lp.Count <= 0) { _genMessage = "LP status ot found " + _iItem + " and " + _iStatus + "."; _effect = -1; break; }
                                    string _poLpStatus = Convert.ToString(_lp[0]);
                                    List<MasterItemTax> _tx = _salesDAL.GetItemTax(_toCompany, _iItem, Convert.ToString(_lp[0]), "VAT", string.Empty);
                                    bool _isLpTaxpayable = false;
                                    if (_tx != null && _tx.Count > 0) _isLpTaxpayable = true; else _isLpTaxpayable = false;

                                    InvoiceItem _item = new InvoiceItem();
                                    _item.Sad_alt_itm_cd = string.Empty;
                                    _item.Sad_alt_itm_desc = string.Empty;
                                    _item.Sad_comm_amt = 0;
                                    _item.Sad_disc_amt = 0;
                                    _item.Sad_disc_rt = 0;
                                    _item.Sad_do_qty = _iQty;
                                    _item.Sad_fws_ignore_qty = 0;
                                    _item.Sad_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                                    _item.Sad_is_promo = false;
                                    _item.Sad_itm_cd = _iItem;
                                    _item.Sad_itm_line = _invoiceLine;
                                    _item.Sad_itm_seq = _price.Sapd_seq_no;
                                    _item.Sad_itm_stus = _iStatus;
                                    _item.Sad_itm_tax_amt = _taxPortion;
                                    _item.Sad_itm_tp = _im.Mi_itm_tp;
                                    _item.Sad_pb_lvl = _iPriceLevel;
                                    _item.Sad_pb_price = _AbsoulteUnitPrice;
                                    _item.Sad_pbook = _iPriceBook;
                                    _item.Sad_print_stus = false;
                                    _item.Sad_promo_cd = string.Empty;
                                    _item.Sad_qty = _iQty;
                                    _item.Sad_seq = _price.Sapd_pb_seq;
                                    _item.Sad_seq_no = _invoiceHeader.Sah_seq_no;
                                    _item.Sad_srn_qty = 0;
                                    _item.Sad_tot_amt = _AbsoulteUnitPrice * _iQty + _taxPortion;
                                    _item.Sad_unit_amt = _AbsoulteUnitPrice * _iQty;
                                    _item.Sad_unit_rt = _AbsoulteUnitPrice;
                                    _item.Sad_uom = _im.Mi_itm_uom;
                                    _item.Sad_warr_based = false;
                                    _item.Sad_warr_period = 0;
                                    _item.Sad_warr_remarks = string.Empty;
                                    _invoiceItemList.Add(_item);

                                    _pItm.Pod_act_unit_price = (_AbsoulteUnitPrice * _iQty + _taxPortion) / _iQty;
                                    _pItm.Pod_dis_amt = 0;
                                    _pItm.Pod_dis_rt = 0;
                                    _pItm.Pod_grn_bal = _iQty;
                                    _pItm.Pod_item_desc = _im.Mi_longdesc;
                                    _pItm.Pod_itm_cd = _iItem;
                                    _pItm.Pod_itm_stus = _poLpStatus;
                                    _pItm.Pod_itm_tp = _im.Mi_itm_tp;
                                    _pItm.Pod_line_amt = _AbsoulteUnitPrice * _iQty;
                                    _pItm.Pod_line_no = _invoiceLine;
                                    _pItm.Pod_line_tax = _isLpTaxpayable ? _taxPortion : 0;
                                    _pItm.Pod_line_val = _AbsoulteUnitPrice * _iQty + _taxPortion;
                                    _pItm.Pod_nbt = 0;
                                    _pItm.Pod_nbt_before = 0;
                                    _pItm.Pod_pi_bal = 0;
                                    _pItm.Pod_qty = _iQty;
                                    _pItm.Pod_ref_no = string.Empty;
                                    _pItm.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
                                    _pItm.Pod_si_bal = 0;
                                    _pItm.Pod_tot_tax_before = 0;
                                    _pItm.Pod_unit_price = _AbsoulteUnitPrice;
                                    _pItm.Pod_uom = _im.Mi_itm_uom;
                                    _pItm.Pod_vat = _taxPortion;
                                    _pItm.Pod_vat_before = 0;
                                    _POItemListSave.Add(_pItm);

                                    break;
                                }
                        }

                        MasterAutoNumber masterAuto = new MasterAutoNumber();
                        masterAuto.Aut_cate_cd = _toCompany;
                        masterAuto.Aut_cate_tp = "COM";
                        masterAuto.Aut_direction = null;
                        masterAuto.Aut_modify_dt = null;
                        masterAuto.Aut_moduleid = "PUR";
                        masterAuto.Aut_number = 5;//what is Aut_number
                        masterAuto.Aut_start_char = "PUR";
                        masterAuto.Aut_year = null;

                        _inventoryDAL.SaveNewPO(_PurchaseOrder);
                        foreach (PurchaseOrderDetail _POItems in _POItemListSave) _inventoryDAL.SaveNewPOItem(_POItems);

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                        string _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdateAutoNumber(masterAuto);
                        _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
                        _purchaseOrder = _documentNo;

                        List<ReptPickSerials> _reptPickSerialList = _reptPickSerials;
                        List<ReptPickSerialsSub> _reptPickSerialSubList = new List<ReptPickSerialsSub>();

                        if (_effect != -1)
                        {
                            _invoiceAuto = new MasterAutoNumber();
                            _invoiceAuto.Aut_cate_cd = _invoiceHeader.Sah_pc;
                            _invoiceAuto.Aut_cate_tp = "PRO";
                            _invoiceAuto.Aut_direction = 1;
                            _invoiceAuto.Aut_modify_dt = null;
                            _invoiceAuto.Aut_moduleid = "CRED";
                            _invoiceAuto.Aut_start_char = _invoiceHeader.Sah_pc + "-" + "CR" + "-";
                            _invoiceAuto.Aut_modify_dt = null;
                            _invoiceAuto.Aut_year = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;

                            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();

                            try
                            {
                                _invoiceLine = 1;
                                DataTable _tbl = _salesDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                                string _executiveType = string.Empty;
                                foreach (DataRow _r in _tbl.Rows)
                                {
                                    _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                                }
                                List<SaleCommission> _saveCommission = new List<SaleCommission>();

                                Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                                Int32 RecieptSeqNo = -1;

                                //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------

                                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                                _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);

                                #region Calculation for total of the payment to infiltrate invoice header

                                decimal _totalValue = _invoiceItemList.Sum(x => x.Sad_tot_amt);
                                decimal _totalReceiptAmt = 0;

                                _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                                DataTable _tblESDEPFWHF = new DataTable();
                                _tblESDEPFWHF = _salesDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                                _invoiceHeader.Sah_esd_rt = ESD_rt;
                                _invoiceHeader.Sah_epf_rt = EPF_rt;
                                _invoiceHeader.Sah_wht_rt = WHT_rt;

                                #endregion
                                //Save Invoice Header
                                #region Save Invoice Header
                                _salesDAL.SaveSalesHeader(_invoiceHeader);
                                #endregion

                                //Save Invoice Items
                                foreach (InvoiceItem _itm in _invoiceItemList)
                                {
                                    MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                                    _itm.Sad_seq_no = InvoiceSeqNo;
                                    _invoiceLine = _itm.Sad_itm_line;
                                    _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                                    _itm.Sad_uom = _item.Mi_itm_uom;
                                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                                    if (_invoiceHeader.Sah_tax_exempted)
                                    {
                                        _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                                        _itm.Sad_itm_tax_amt = 0;
                                    }
                                    _salesDAL.SaveSalesItem(_itm);
                                    _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                                    foreach (MasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }

                                #region Invoice Auto Number

                            nxt1:
                                _invoiceAuto.Aut_year = null;
                                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                                _invoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                                _invoiceAuto.Aut_year = null;
                                _invoiceAuto.Aut_modify_dt = null;
                                if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invoiceNo) == 1)
                                {
                                    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                                    goto nxt1;
                                }

                                _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                                _salesDAL.UpdateInvoiceWithTaxCommission(_invoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                                #endregion
                                _inventoryHeader.Ith_oth_com = _toCompany;
                                _inventoryHeader.Ith_oth_docno = _invoiceNo;
                                _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                                _inventoryHeader.Ith_sub_docno = _purchaseOrder;
                                _reptPickSerials.ForEach(x => x.Tus_base_doc_no = _invoiceNo);
                                DeliveryOrderInterCompany(_inventoryHeader, _reptPickSerials, null, _inventoryAuto, out _deliveryOrder, _inventoryRepDAL, _inventoryDAL);
                                _tempInventoryDoc = _deliveryOrder;
                                _tempSalesDoc = _invoiceNo + "," + _purchaseOrder;
                            }
                            catch (Exception ex)
                            {
                                _message += "Generated error " + ex.Message;
                                _effect = -1;
                            }
                        }
                        #endregion

                        if (_effect != -1)
                            _effect = 1;
                        #endregion
                        #region Update Manual Doc
                        if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
                        {
                            _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
                            if (_masterComp.MC_IS_SCM2_FMS == 1)
                                _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                            else
                                _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                        }
                        #endregion
                    }
                    if (_documentType == "PRN")
                    {
                        #region Purchas Return Region
                        _inventoryHeader.Ith_doc_tp = "PRN";

                        _inventoryAuto.Aut_moduleid = "PRN";
                        _inventoryAuto.Aut_start_char = "PRN";
                        _inventoryAuto.Aut_direction = 0;
                        if (_isInvalidManualDocType)
                            if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2))
                                if (_inventoryHeader.Ith_anal_2 == "PRN")
                                    _inventoryHeader.Ith_anal_1 = "0";

                        _effect = PRN(_inventoryHeader, _serialList, _reptPickSerialsSub, _inventoryAuto, out _tempInventoryDoc);
                        if (_effect != -1)
                            _effect = 1;
                        #endregion
                        #region Update Manual Doc
                        if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
                        {
                            _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
                            if (_masterComp.MC_IS_SCM2_FMS == 1)
                                _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_PRN", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                            else
                                _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_PRN", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                        }
                        #endregion
                    }
                    #region Can not Identifiy Region
                    if (_documentType == "NON")
                    {
                        _effect = -1;
                        break;
                    }
                    #endregion
                    if (_effect == -1)
                    {
                        break;
                    }

                    //Collecting Documents
                    if (!string.IsNullOrEmpty(_tempInventoryDoc))
                        if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc;
                        else _genInvDoc += "," + _tempInventoryDoc;

                    if (!string.IsNullOrEmpty(_tempSalesDoc))
                        if (string.IsNullOrEmpty(_genSalDoc)) _genSalDoc = _tempSalesDoc;
                        else _genSalDoc += "," + _tempInventoryDoc;
                }
                if (_effect != -1)
                {
                    #region Update MRN for Close
                    if (!string.IsNullOrEmpty(_inventoryHeader.Ith_oth_docno))
                    {
                        var _byItemStatus = from l in _reptPickSerials
                                            group l by new { l.Tus_itm_cd, l.Tus_itm_stus, l.Tus_base_doc_no } into item
                                            select new { Tus_itm_cd = item.Key.Tus_itm_cd, Tus_itm_stus = item.Key.Tus_itm_stus, Tus_base_doc_no = item.Key.Tus_base_doc_no, Tus_qty = item.Sum(p => p.Tus_qty) };
                        if (_byItemStatus != null)
                            if (_byItemStatus.Count() > 0)
                            {
                                foreach (var p in _byItemStatus)
                                {
                                    //UpdateRequestStatus(string _request, string _company, string _location, string _item, string _itemstatus, decimal _qty, string _docstatus, string _user)
                                    string _requestno = p.Tus_base_doc_no;
                                    string _company = _inventoryHeader.Ith_com;
                                    string _location = _trlocation;
                                    string _itemcode = p.Tus_itm_cd;
                                    string _itemstatus = p.Tus_itm_stus;
                                    decimal _qty = p.Tus_qty;
                                    string _docstatus = "F";
                                    string _user = _inventoryHeader.Ith_cre_by;
                                    _inventoryDAL.UpdateRequestStatus(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user);
                                }
                                var _docs = _byItemStatus.Select(x => x.Tus_base_doc_no).Distinct();
                                if (_docs != null)
                                    if (_docs.Count() > 0)
                                        foreach (string _request in _docs)
                                            _inventoryDAL.UpdateRequestHeader(_request.Trim(), _inventoryHeader.Ith_cre_by);
                            }
                    }

                    #endregion

                    #region Delete Temporary Table

                    foreach (int seqno in _reptPickSerials.Select(x => x.Tus_usrseq_no).Distinct().ToList())
                        _inventoryRepDAL.DeleteTempPickObjs(seqno);

                    #endregion
                }

                if (_effect != -1)
                {
                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    //_ScmCommonDAL.TransactionCommit();
                    _FMSinventoryDAL.TransactionCommit();
                }
                else
                {
                    _genInvDoc = string.Empty;
                    _genSalDoc = string.Empty;
                    _effect = -1;

                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    //_ScmCommonDAL.TransactionRollback();
                    _FMSinventoryDAL.TransactionRollback();
                }
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _genInvDoc = string.Empty;
                _genSalDoc = string.Empty;
                _effect = -1;

                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _FMSinventoryDAL.TransactionRollback();
            }
            _genMessage = _message;
            _genInventoryDocument = _genInvDoc;
            _genSalesDocument = _genSalDoc;
            return _effect;
        }

        #endregion

        public PurchaseOrder GetPurchaseOrderHeaderDetails(string _companyCode, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPurchaseOrderHeaderDetails(_companyCode, _docNo);
        }

        public DataTable CheckSerialBySerial(string _company, string _location, string _item, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckSerialBySerial(_company, _location, _item, _serial);
        }
        public DataTable GetSupplier(string _company, string _supplier)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSupplier(_company, _supplier);
        }

        public DataTable GetPOLine(string _company, string _location, string _doc, Int32 _sid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOLine(_company, _location, _doc, _sid);
        }

        public DataTable GetInvoiceDet(string _company, string _do)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceDet(_company, _do);
        }

        public DataTable GetSCMInvoiceDet(string _company, string _do)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSCMInvoiceDet(_company, _do);
        }

        public void SetOffRefDocumentSerial(List<ReptPickSerials> _lst, string _outwarddoc)
        {
            if (_lst == null && _lst.Count > 0) return;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            foreach (ReptPickSerials _one in _lst) _inventoryDAL.UpdateAODOUTPickItem(_outwarddoc, _one.Tus_ser_id);
            _inventoryDAL.UpdateAODOUT(_lst[0].Tus_com, _outwarddoc);
            _inventoryDAL.TransactionCommit();
        }

        //Written by Prabhath on 03/04/2014
        public Int16 InventoryAssembleToFinishGoodCommon(InventoryHeader _inventoryMovementHeaderMinus, InventoryHeader _inventoryMovementHeaderPlus, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumberMinus, MasterAutoNumber _masterAutoNumberPlus, out string _minusDocNo, out string _plusDocNo)
        {
            Int16 effect = 0;
            Int32 reptSeqNo = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            //Added By Prabhath on 13/09/2012 (Add Chamal 15-11-2012)
            //------------
            _reptPickSerials.Where(y => string.IsNullOrEmpty(y.Tus_base_doc_no)).ToList().ForEach(x => x.Tus_base_doc_no = "N/A");
            _reptPickSerials.Where(y => y.Tus_base_doc_no == "N/A").ToList().ForEach(x => x.Tus_base_itm_line = 0);
            //------------

            PickSerials = _reptPickSerials;

            //Added By Prabhath on 31/10/2012
            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeaderPlus.Ith_com;
            string _documentType = _inventoryMovementHeaderPlus.Ith_doc_tp;
            bool _isAvgType = false;
            string _locType = string.Empty;
            _companycostmethod = _inventoryDAL.GetCompByCode(_inventoryMovementHeaderPlus.Ith_com).Mc_val_method;
            Int32 _docSeqNoMinus = _inventoryDAL.GetSerialID();
            Int32 _docSeqNoPlus = _inventoryDAL.GetSerialID();
            #region Fill Location Information
            DataTable dt_location = Get_location_by_code(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeaderMinus.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeaderMinus.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
                _inventoryMovementHeaderPlus.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeaderPlus.Ith_channel = (string)rw["ML_CATE_2"]; //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
                _locType = (string)rw["ML_LOC_TP"]; //Location Type
            }
            #endregion

            //Added By Prabhath on 31/10/2012
            if (_scm2LocCategory == "DF")
                _scmLocCategory = "DUTY FREE";
            else
                _scmLocCategory = "DUTY PAID";

            #region -ADJ Entry
            // -ADJ Entry *************************************************************************************
            _inventoryMovementHeaderMinus.Ith_seq_no = _docSeqNoMinus;
            _inventoryMovementHeaderMinus.Ith_doc_no = Convert.ToString(_inventoryMovementHeaderMinus.Ith_seq_no);
            _inventoryMovementHeaderMinus.Ith_direct = false;
            if (_inventoryMovementHeaderMinus != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeaderMinus);

            // Select Serialized items and apply serialized inventory method
            var _tbsersMinus =
                  (from _pickSerials in PickSerials
                   where _pickSerials.Tus_ser_id != 0 // This is no need to feauture becoz
                   select _pickSerials).ToList().OrderBy(X => X.Tus_itm_stus).OrderBy(X => X.Tus_itm_cd);//Order by Prabhath on 21/02/2014
            foreach (var sers in _tbsersMinus)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = sers.Tus_bin;
                invItem.Iti_item_code = sers.Tus_itm_cd;
                invItem.Iti_item_status = sers.Tus_itm_stus;
                invItem.Iti_qty = sers.Tus_qty;
                invItem.Iti_bal_qty = sers.Tus_qty;
                invItem.Iti_year = _inventoryMovementHeaderMinus.Ith_doc_year;

                if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                {
                    itmLine += 1;
                    batchLine = 1;
                }

                InventoryBatchN invBatch = new InventoryBatchN();
                invBatch.Inb_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                invBatch.Inb_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                invBatch.Inb_com = _inventoryMovementHeaderMinus.Ith_com;
                invBatch.Inb_loc = _inventoryMovementHeaderMinus.Ith_loc;

                invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                if (invBatch.Inb_itm_line == 0)
                {
                    invBatch.Inb_itm_line = itmLine;
                }

                invBatch.Inb_batch_line = batchLine;
                invBatch.Inb_batch_no = string.Empty;
                invBatch.Inb_bin = sers.Tus_bin;
                invBatch.Inb_itm_cd = sers.Tus_itm_cd;
                invBatch.Inb_itm_stus = sers.Tus_itm_stus;
                invBatch.Inb_qty = sers.Tus_qty;
                invBatch.Inb_unit_cost = sers.Tus_unit_cost;
                invBatch.Itb_bal_qty1 = sers.Tus_qty;
                invBatch.Itb_bal_qty2 = sers.Tus_qty;
                invBatch.Inb_unit_price = sers.Tus_unit_price;
                invBatch.Inb_base_doc_no = sers.Tus_doc_no;                     // Impotant : When the outward entry, this is the inward doc no
                invBatch.Inb_base_ref_no = sers.Tus_base_doc_no;                // Chamal 02/10/2012
                invBatch.Inb_doc_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                invBatch.Inb_base_itmcd = sers.Tus_itm_cd;                      // Impotant : When the outward entry, this is the inward item code
                invBatch.Inb_base_itmline = sers.Tus_itm_line;                  // Impotant : When the outward entry, this is the inward item line
                invBatch.Itb_base_batchline = sers.Tus_batch_line;              // Impotant : When the outward entry, this is the inward batch line
                invBatch.Inb_base_itmstus = sers.Tus_itm_stus;                  // Impotant : When the outward entry, this is the inward item status
                invBatch.Inb_job_no = string.Empty;
                invBatch.Itb_git_ignore = false;
                invBatch.Itb_git_ignore_by = null;
                invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                invBatch.Inb_res_no = null;
                invBatch.Inb_res_lineno = 0;
                invBatch.Inb_base_doc_no1 = null;
                invBatch.Inb_base_doc_no2 = null;
                invBatch.Inb_base_doc_no3 = null;
                invBatch.Inb_cur_cd = null;
                invBatch.Inb_grup_cur_cd = null;
                #region avg cost update by lakshan 12Jul2017
                string _cstMeth = _inventoryDAL.GetCompByCode(_inventoryMovementHeaderMinus.Ith_com).Mc_val_method;
                if (_cstMeth == "AVG")
                {
                    INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeaderMinus.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeaderMinus.Ith_loc);
                    if (_avgCst != null)
                    {
                        invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                        invBatch.Inb_unit_cost = _avgCst.Iac_avg_cost;
                    }
                    else
                    {
                        _inventoryDAL.Check_ava_cost_available(0);
                    }
                }
                #endregion
                if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                {
                    batchLine += 1;
                    serLine = 1;
                }

                InventorySerialN invSerials = new InventorySerialN();
                invSerials.Ins_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                //invSerials.Its_item_line = itmLine;
                invSerials.Ins_itm_line = invBatch.Inb_itm_line;
                invSerials.Ins_batch_line = _inventoryDAL.GetInventoryBatchLine(invBatch);
                if (invSerials.Ins_batch_line == 0)
                {
                    invSerials.Ins_batch_line = batchLine;
                }

                invSerials.Ins_direct = false; // false = Out, Outward
                invSerials.Ins_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString(); // Pls check this object
                invSerials.Ins_doc_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                invSerials.Ins_com = _inventoryMovementHeaderMinus.Ith_com;
                invSerials.Ins_loc = _inventoryMovementHeaderMinus.Ith_loc;
                invSerials.Ins_bin = sers.Tus_bin;
                invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                invSerials.Ins_itm_stus = sers.Tus_itm_stus;
                invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                invSerials.Ins_ser_id = sers.Tus_ser_id;
                invSerials.Ins_ser_1 = sers.Tus_ser_1;
                invSerials.Ins_ser_2 = sers.Tus_ser_2;
                invSerials.Ins_ser_3 = sers.Tus_ser_3;
                invSerials.Ins_ser_4 = sers.Tus_ser_4;
                invSerials.Ins_warr_no = sers.Tus_warr_no;
                invSerials.Ins_warr_period = sers.Tus_warr_period;
                invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                invSerials.Ins_orig_grndt = sers.Tus_orig_grndt.Date;
                invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                invSerials.Ins_exist_grndt = sers.Tus_exist_grndt.Date;
                invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                invSerials.Ins_cross_seqno = sers.Tus_seq_no;
                invSerials.Ins_cross_itmline = sers.Tus_itm_line;
                invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                invSerials.Ins_cross_serline = sers.Tus_ser_line;
                invSerials.Ins_issue_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                serLine = _inventoryDAL.GetInventorySerLine(invSerials);
                if (serLine == 0)
                    serLine = 1;
                else
                    serLine += 1;

                invSerials.Ins_ser_line = serLine;
                #region avg cost update by lakshan 12Jul2017
                if (_cstMeth == "AVG")
                {
                    INR_AVG_COST _avgCst = _inventoryDAL.GET_INR_AVG_COST_FOR_OUT(_inventoryMovementHeaderMinus.Ith_com, sers.Tus_itm_cd, sers.Tus_itm_stus, _inventoryMovementHeaderMinus.Ith_loc);
                    if (_avgCst != null)
                    {
                        //  _invWarraDetail.Irsm_unit_price = _invWarraDetail.Irsm_unit_cost;
                        invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                        // _invWarraDetail.Irsm_unit_cost = _avgCst.Iac_avg_cost;
                        invSerials.Ins_unit_cost = _avgCst.Iac_avg_cost;
                    }
                    else
                    {
                        _inventoryDAL.Check_ava_cost_available(0);
                    }
                }
                #endregion
                _inventoryDAL.SaveInventorySerial(invSerials, 0);
                _inventoryDAL.SaveInventorySerialRef(invSerials, 0);
            }

            // Select None-Serialized items and apply FIFO inventory method
            var _tbnonsers =
                (from _pickSerials in PickSerials
                 where _pickSerials.Tus_ser_id == 0
                 group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_exp_dt } into batch
                 select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, expdate = batch.Key.Tus_exp_dt, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);//Order by Prabhath on 21/02/2014
            foreach (var non_sers in _tbnonsers)
            {
                reptSeqNo = non_sers.scanSeqNo;
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = non_sers.bincode;
                invItem.Iti_item_code = non_sers.itemcode;
                invItem.Iti_item_status = non_sers.itemstatus;
                invItem.Iti_qty = non_sers.itemqty;
                invItem.Iti_bal_qty = non_sers.itemqty;
                invItem.Iti_year = _inventoryMovementHeaderMinus.Ith_doc_year;

                if (1 == _inventoryDAL.UpdateInventoryItem(invItem))
                {
                    itmLine += 1;
                    batchLine = 1;
                }

                decimal _itmQty = invItem.Iti_qty;
                string _jobNo = null;
                int _jobLineNo = 0;
                if (_locType == "SERC")//Chamal 03-Sep-2015
                {
                    _jobNo = non_sers.jobno;
                    _jobLineNo = non_sers.jobline;
                }
                //-----------
                DataTable _dtNonFifo = new DataTable();
                if (non_sers.expdate == null || non_sers.expdate == Convert.ToDateTime("01-Jan-0001").Date)
                {
                    _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 0, non_sers.expdate.Date, non_sers.bincode);
                }
                else
                {
                    _dtNonFifo = _inventoryDAL.Get_Actual_FIFO_NonSerials(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, non_sers.itemstatus, _jobNo, _jobLineNo, 1, non_sers.expdate.Date, non_sers.bincode);
                }
                foreach (DataRow rw in _dtNonFifo.Rows)
                {
                    string _inFifoDocNo = (string)rw["INB_DOC_NO"];
                    string _inFifoBin = (string)rw["INB_BIN"];
                    DateTime _inFifoDocDate = Convert.ToDateTime(rw["INB_DOC_DT"]).Date;
                    int _inFifoItmLine = Convert.ToInt32(rw["INB_ITM_LINE"]);
                    int _inFifoBatLine = Convert.ToInt32(rw["INB_BATCH_LINE"]);
                    int _inFifoUnitCost = Convert.ToInt32(rw["INB_UNIT_COST"]);
                    decimal _itmbalQty = Convert.ToDecimal(rw["INB_QTY"]);

                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeaderMinus.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeaderMinus.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeaderMinus.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeaderMinus.Ith_loc;
                    invBatch.Inb_itm_line = _inventoryDAL.GetInventoryItemLine(invItem);
                    if (invBatch.Inb_itm_line == 0)
                    {
                        invBatch.Inb_itm_line = itmLine;
                    }

                    if (_itmbalQty <= _itmQty)
                    {
                        invBatch.Inb_qty = _itmbalQty;
                        invBatch.Itb_bal_qty1 = _itmbalQty;
                        invBatch.Itb_bal_qty2 = _itmbalQty;
                        _itmQty = _itmQty - _itmbalQty;
                    }
                    else
                    {
                        invBatch.Inb_qty = _itmQty;
                        invBatch.Itb_bal_qty1 = _itmQty;
                        invBatch.Itb_bal_qty2 = _itmQty;
                        _itmQty = 0;
                    }

                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = string.Empty;
                    invBatch.Inb_bin = _inFifoBin;
                    invBatch.Inb_itm_cd = non_sers.itemcode;
                    invBatch.Inb_itm_stus = non_sers.itemstatus;

                    invBatch.Inb_unit_cost = _inFifoUnitCost;
                    invBatch.Inb_unit_price = _inFifoUnitCost;
                    invBatch.Inb_base_doc_no = _inFifoDocNo;                        // Impotant : When the outward entry, this is the inward doc no
                    invBatch.Inb_base_ref_no = non_sers.refdoc;                     // Impotant : When the DO entry, this is the invoice no
                    invBatch.Inb_doc_dt = _inventoryMovementHeaderMinus.Ith_doc_date.Date;
                    invBatch.Inb_base_itmcd = non_sers.itemcode;                    // Impotant : When the outward entry, this is the inward item code
                    invBatch.Inb_base_itmline = _inFifoItmLine;                     // Impotant : When the outward entry, this is the inward item line
                    invBatch.Itb_base_batchline = _inFifoBatLine;                   // Impotant : When the outward entry, this is the inward batch line
                    invBatch.Inb_base_itmstus = non_sers.itemstatus;                // Impotant : When the outward entry, this is the inward item status
                    invBatch.Itb_base_doc_dt = _inFifoDocDate.Date;
                    invBatch.Inb_job_no = string.Empty;
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_base_refline = non_sers.refdocline;                // Impotant : When the DO entry, this is the invoice item line no

                    if (1 == _inventoryDAL.UpdateInventoryBatch(invBatch))
                    {
                        batchLine += 1;
                        serLine = 1;
                    }

                    if (_itmQty <= 0) break;
                }
            }
            // ************************************************************************************* -ADJ Entry
            #endregion

            #region Update location inventory -ADJ
            // Update location inventory -ADJ *********************************************************************************
            var _tblocainvMinus =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { scanseqno = itm.Key.Tus_usrseq_no, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainvMinus)
            {
                reptSeqNo = locaitems.scanseqno;

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeaderMinus.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeaderMinus.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;
                _inventoryDAL.UpdateInventoryLocation(invLocation, 0);
            }

            // Update location inventory -ADJ *********************************************************************************
            #endregion

            foreach (ReptPickSerials s in _reptPickSerials)
            {
                s.Tus_itm_cd = s.Tus_new_status;
                s.Tus_new_status = null;
                s.Tus_unit_price = s.Tus_unit_cost;
                s.Tus_new_status = s.Tus_itm_stus;
                //s.Tus_unit_cost = Convert.ToDecimal(s.Tus_serial_id); //Wrong
                s.Tus_unit_cost = s.Tus_unit_cost + Convert.ToDecimal(s.Tus_serial_id); //Corrected by Chamal 24/04/2014
            }

            #region +ADJ Entry
            // +ADJ Entry *********************************************************************************
            itmLine = 1;
            batchLine = 1;
            serLine = 1;
            //Added By Prabhath on 1/11/2012 --------------------AVG COST--------------------------------------------------
            #region Avarage Cost Calculation

            //switch (_documentType)
            //{
            //    case "GRN":
            //        _isAvgType = true;
            //        break;

            //    case "AOD":
            //        if (_scm2LocCategory == "DFS")
            //            _isAvgType = true;
            //        else
            //            _isAvgType = false;
            //        break;

            //    case "ADJ":
            //        _isAvgType = true;
            //        break;

            //    case "SRN":
            //        _isAvgType = true;
            //        break;

            //    default:
            //        _isAvgType = false;
            //        break;
            //}

            //if (!string.IsNullOrEmpty(_companycostmethod))
            //    if (_companycostmethod == "AVG" && _isAvgType)
            //    {
            //        var _ItemAvg = (from i in PickSerials
            //                        group i by new { i.Tus_itm_cd, i.Tus_itm_stus } into batch
            //                        select new { Tus_itm_cd = batch.Key.Tus_itm_cd, Tus_itm_stus = batch.Key.Tus_itm_stus, Tus_cost = batch.Sum(p => p.Tus_qty * p.Tus_unit_cost) }).ToList();

            //        foreach (var _itm in _ItemAvg)
            //        {
            //            string _itmCode = _itm.Tus_itm_cd;

            //            decimal _scm2TotBalanceCost = 0;
            //            decimal _scm2BalQty = 0;
            //            decimal _scmTotBalanceCost = 0;
            //            decimal _scmBalQty = 0;

            //            decimal _scm2TotCurrentCost = 0;
            //            decimal _scm2CurrentQty = 0;

            //            string _scm2Status = _itm.Tus_itm_stus; ;
            //            string _scmStatus = string.Empty;
            //            DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(_scm2Status, string.Empty);
            //            if (_tblStus != null)
            //                if (_tblStus.Rows.Count > 0)
            //                {
            //                    foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
            //                }

            //            //Get SCM2 Balance Cost

            //            DataTable _scm2baltbl = _inventoryDAL.GetItemBalanceAvg(_company, _scm2LocCategory, _itmCode, _scm2Status);
            //            if (_scm2baltbl != null)
            //                if (_scm2baltbl.Rows.Count > 0)
            //                {
            //                    _scm2TotBalanceCost = 0;
            //                    foreach (DataRow _r in _scm2baltbl.Rows)
            //                    {
            //                        _scm2TotBalanceCost += Convert.ToDecimal(_r["inl_qty"]) * Convert.ToDecimal(_r["inl_avg_cost"]);
            //                        _scm2BalQty += Convert.ToDecimal(_r["inl_qty"]);
            //                    }
            //                }

            //            //Get SCM Balance Cost
            //            DataTable _scmbaltbl = _ScmCommonDAL.GetItemBalanceAvg(_company, _scmLocCategory, _itmCode, _scmStatus);
            //            if (_scmbaltbl != null)
            //                if (_scmbaltbl.Rows.Count > 0)
            //                {
            //                    _scmTotBalanceCost = 0;
            //                    foreach (DataRow _r in _scmbaltbl.Rows)
            //                    {
            //                        _scmTotBalanceCost += Convert.ToDecimal(_r["qty_in_hand"]) * Convert.ToDecimal(_r["avg_cost"]);
            //                        _scmBalQty += Convert.ToDecimal(_r["qty_in_hand"]);
            //                    }
            //                }

            //            //Get SCM2 Current Entry
            //            _scm2TotCurrentCost = _itm.Tus_cost;
            //            _scm2CurrentQty = PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).Sum(y => y.Tus_qty);

            //            // Calculation
            //            //------------
            //            // Avg Cost = [(Balance Weighted Cost) + (Currecnt Weighted Cost)] / (Total Qty)
            //            // In simplify;
            //            // Avg Cost = [(SCM2 Balance + SCM Balance) + (SCM2 Current Entry)]/(SCM2 Balance Qty + SCM Balance Qty + SCM2 Current Entry Qty)

            //            decimal _newAvgCost = (_scm2TotBalanceCost + _scmTotBalanceCost + _scm2TotCurrentCost) / (_scm2BalQty + _scmBalQty + _scm2CurrentQty);

            //            //Update Entry List
            //            PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).ToList().ForEach(y => y.Tus_base_doc_no = Convert.ToString(Math.Round(_newAvgCost, 4)));
            //        }
            //    }
            #endregion

            #region Avarage Cost Calculation add by Lakshan 03Jul2017
            List<INR_AVG_COST> _inrCstList = new List<INR_AVG_COST>();
            if (!_inventoryMovementHeaderPlus.Tmp_avg_cost_calc)
            {
                switch (_documentType)
                {
                    case "GRN":
                        _isAvgType = true;
                        break;
                    case "AOD":
                        {
                            string _locCat = "";
                            DataTable _dtTmpLoc = _inventoryDAL.Get_location_by_code(_inventoryMovementHeaderPlus.Ith_oth_com, _inventoryMovementHeaderPlus.Ith_oth_loc, 1);
                            foreach (DataRow rw in _dtTmpLoc.Rows)
                            {
                                _locCat = (string)rw["ML_CATE_1"];//Location Categry Code
                            }
                            if (_locCat == "DFS")
                            {
                                _isAvgType = true;
                            }
                            else
                            {
                                _isAvgType = false;
                            }
                            //if (_scm2LocCategory == "DFS")
                            //    _isAvgType = true;
                            //else
                            //    _isAvgType = false;

                            break;
                        }
                    case "ADJ":
                        _isAvgType = true;
                        break;
                    case "SRN":
                        _isAvgType = true;
                        break;
                    default:
                        _isAvgType = false;
                        break;
                }
                if (!string.IsNullOrEmpty(_companycostmethod))
                {
                    if (_companycostmethod == "AVG" && _isAvgType)
                    {
                        #region save avg cost summery to inr_avg_cst_mth add by lakshan 07Jul2017
                        DateTime _docDt = _inventoryMovementHeaderPlus.Ith_doc_date;
                        //DateTime _prevMthEnd = new DateTime(_docDt.Year,_docDt.Month,01).AddMonths(1).AddDays(-1);
                        decimal _lastMonthDataAva = _inventoryDAL.GetInrAvgCostMthDataAva(_docDt);
                        if (_lastMonthDataAva == 0)
                        {
                            _inventoryDAL.UpdateInrMnthlyCostData(_inventoryMovementHeaderPlus.Ith_cre_by);
                        }
                        #endregion
                        decimal _avgCst = 0;
                        decimal _noOfUnit = 0;
                        INR_AVG_COST _tmpInrAvgCst = new INR_AVG_COST();
                        INR_AVG_COST_GIT _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                        INR_AVG_COST _saveAvgCst = new INR_AVG_COST();
                        INR_AVG_COST _inrAvgCstAva = new INR_AVG_COST();
                        INR_AVG_COST_GIT _inrAvgCstAvaGit = new INR_AVG_COST_GIT();
                        MasterLocation _mstLocIn = _inventoryDAL.GetLocationByLocCode(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_loc);
                        List<INR_AVG_COST> _listAvgData = new List<INR_AVG_COST>();
                        INR_AVG_COST _avgData = new INR_AVG_COST();
                        foreach (var _pSer in _reptPickSerials)
                        {
                            _avgData = new INR_AVG_COST();
                            _avgData.Iac_itm_cd = _pSer.Tus_itm_cd;
                            _avgData.Iac_itm_stus = _pSer.Tus_itm_stus;
                            _avgData.Iac_avg_qty = _pSer.Tus_qty;
                            _avgData.Iac_avg_cost = _pSer.Tus_unit_cost;
                            _avgData.Tmp_mult_cost = _pSer.Tus_qty * _pSer.Tus_unit_cost;
                            _listAvgData.Add(_avgData);
                        }

                        var _itmList = _listAvgData.GroupBy(x => new { x.Iac_itm_cd, x.Iac_itm_stus }).Select(group =>
                            new { Peo = group.Key, docQty = group.Sum(o => o.Iac_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                        foreach (var item in _itmList)
                        {
                            _tmpInrAvgCst = new INR_AVG_COST();
                            _tmpInrAvgCst.Iac_com = _inventoryMovementHeaderPlus.Ith_com;
                            _tmpInrAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAva = _inventoryDAL.GET_INR_AVG_COST_DATA(_tmpInrAvgCst);
                            _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                            _tmpInrAvgCstGit.Iacg_com = _inventoryMovementHeaderPlus.Ith_com;
                            _tmpInrAvgCstGit.Iacg_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCstGit.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCstGit.Iacg_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAvaGit = _inventoryDAL.GET_INR_AVG_GIT_BY_LOC_TP(_tmpInrAvgCstGit);
                            decimal _gitBal = 0;
                            if (_inrAvgCstAvaGit != null)
                            {
                                _gitBal = _inrAvgCstAvaGit.Iacg_avg_qty;
                            }
                            decimal _invBal = _inventoryDAL.GetInrBalanceForAvgCost(_inventoryMovementHeaderPlus.Ith_com, item.Peo.Iac_itm_cd, item.Peo.Iac_itm_stus, _mstLocIn.Ml_cate_1);
                            _invBal = _invBal + _gitBal;
                            if (_documentType == "SRN")
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (_inrAvgCstAva.Iac_avg_cost * item.docQty)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            else
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (item.docCst)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            _saveAvgCst = new INR_AVG_COST();
                            _saveAvgCst.Iac_com = _inventoryMovementHeaderPlus.Ith_com;
                            _saveAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _saveAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _saveAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _saveAvgCst.Iac_avg_dt = DateTime.Now;
                            _saveAvgCst.Iac_avg_cost = Math.Round(_avgCst, 4);
                            _saveAvgCst.Iac_avg_qty = _noOfUnit;
                            _saveAvgCst.Iac_cre_by = _inventoryMovementHeaderPlus.Ith_cre_by;
                            _saveAvgCst.Iac_cre_dt = _inventoryMovementHeaderPlus.Ith_cre_when;
                            _saveAvgCst.Iac_mod_by = _inventoryMovementHeaderPlus.Ith_mod_by;
                            _saveAvgCst.Iac_mod_dt = _inventoryMovementHeaderPlus.Ith_mod_when;
                            //_saveAvgCst.Iac_anal_1 = "";
                            //_saveAvgCst.Iac_anal_2 = "";
                            //_saveAvgCst.Iac_anal_3 = "";
                            //_saveAvgCst.Iac_anal_4 = "";
                            //_saveAvgCst.Iac_anal_5 = "";
                            //_saveAvgCst.Iac_costofsale = "";
                            //_saveAvgCst.Iac_tot_inv_rate = "";
                            //_saveAvgCst.Iac_sold_qty = "";
                            //_saveAvgCst.Iac_sold_qty_intr_com = "";
                            //_saveAvgCst.Iac_avg_inv_days = "";
                            _inrCstList.Add(_saveAvgCst);
                            _inventoryDAL.UpdateInrCostData(_saveAvgCst);
                        }
                    }
                }
            }
            #endregion
            //End of AVG COST ---------------------------------------------------------------------------------------------
            //_docSeqNo = _inventoryDAL.GetSerialID();
            _inventoryMovementHeaderPlus.Ith_seq_no = _docSeqNoPlus;
            _inventoryMovementHeaderPlus.Ith_doc_no = Convert.ToString(_inventoryMovementHeaderPlus.Ith_seq_no);
            _inventoryMovementHeaderPlus.Ith_direct = true;
            #region De-valuating /Written by Sachith, Apply - Prabhath on 13/02/2013
            foreach (ReptPickSerials _ser in _reptPickSerials)
            {
                InventoryHeader _inventoryHdr = _inventoryDAL.Get_Int_Hdr(_ser.Tus_doc_no);
                List<InventoryCostRate> _costList = _inventoryDAL.GetInventoryCostRate(_inventoryMovementHeaderPlus.Ith_com, "STUSCHG", _ser.Tus_new_status, (((_inventoryMovementHeaderPlus.Ith_doc_date.Year - _ser.Tus_doc_dt.Year) * 12) + _inventoryMovementHeaderPlus.Ith_doc_date.Month - _ser.Tus_doc_dt.Month), _ser.Tus_itm_stus);
                if (_costList != null && _costList.Count > 0)
                {
                    if (_costList[0].Rcr_rt == 0)
                    {
                        _ser.Tus_unit_cost = _ser.Tus_unit_cost - _costList[0].Rcr_val;
                        _ser.Tus_unit_cost = Math.Round(_ser.Tus_unit_cost, 4);
                    }
                    else
                    {
                        _ser.Tus_unit_cost = _ser.Tus_unit_cost - ((_ser.Tus_unit_cost * _costList[0].Rcr_rt) / 100);
                        _ser.Tus_unit_cost = Math.Round(_ser.Tus_unit_cost, 4);
                    }
                }
            }
            #endregion
            if (_inventoryMovementHeaderPlus != null) _inventoryDAL.SaveInvnetoryHeader(_inventoryMovementHeaderPlus);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_new_status } into itm
                select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_new_status, itemqty = itm.Sum(p => p.Tus_qty) };

            //If line no issue please consider below LINQ statement. (Prabhath on 21/02/2014)
            //var _tbitems =
            //    (from _pickSerials in _reptPickSerials
            //     group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //     select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);

            foreach (var items in _tbitems)
            {
                InventoryItem invItem = new InventoryItem();
                invItem.Iti_seq_no = _inventoryMovementHeaderPlus.Ith_seq_no;
                invItem.Iti_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString();
                invItem.Iti_item_line = itmLine;
                invItem.Iti_bin_code = items.bincode;
                invItem.Iti_item_code = items.itemcode;
                invItem.Iti_item_status = items.itemstatus;
                invItem.Iti_qty = items.itemqty;
                invItem.Iti_bal_qty = items.itemqty;
                invItem.Iti_year = _inventoryMovementHeaderPlus.Ith_doc_year;

                _inventoryDAL.UpdateInventoryItem(invItem);
                //Added By Prabhath on 1/11/2012
                decimal _particulerAvgCost = 0;
                if (_companycostmethod == "AVG" && _isAvgType)
                {
                    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_base_doc_no).Distinct();
                    foreach (string _h in _avgcost)
                        _particulerAvgCost = Convert.ToDecimal(_h);
                }
                //Added By Prabhath on 1/11/2012
                batchLine = 1;

                var _tbbatchs =
                    from _pickSerials in PickSerials
                    where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_new_status == items.itemstatus
                    group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_new_status, _pickSerials.Tus_unit_cost } into batch
                    select new { bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_new_status, unitcost = batch.Key.Tus_unit_cost, itemqty = batch.Sum(p => p.Tus_qty) };
                foreach (var batchs in _tbbatchs)
                {
                    InventoryBatchN invBatch = new InventoryBatchN();
                    invBatch.Inb_seq_no = _inventoryMovementHeaderPlus.Ith_seq_no;
                    invBatch.Inb_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString();
                    invBatch.Inb_com = _inventoryMovementHeaderPlus.Ith_com;
                    invBatch.Inb_loc = _inventoryMovementHeaderPlus.Ith_loc;
                    invBatch.Inb_itm_line = itmLine;
                    invBatch.Inb_batch_line = batchLine;
                    invBatch.Inb_batch_no = string.Empty;
                    invBatch.Inb_bin = batchs.bincode;
                    invBatch.Inb_itm_cd = batchs.itemcode;
                    invBatch.Inb_itm_stus = batchs.itemstatus;
                    invBatch.Inb_qty = batchs.itemqty;
                    invBatch.Inb_unit_cost = batchs.unitcost;
                    invBatch.Itb_bal_qty1 = batchs.itemqty;
                    invBatch.Itb_bal_qty2 = batchs.itemqty;
                    invBatch.Inb_unit_price = decimal.Zero;
                    invBatch.Inb_base_doc_no = string.Empty;
                    invBatch.Inb_base_ref_no = string.Empty;
                    invBatch.Inb_doc_dt = _inventoryMovementHeaderPlus.Ith_doc_date;
                    invBatch.Inb_base_itmcd = string.Empty;
                    invBatch.Inb_base_itmline = 0;
                    invBatch.Inb_base_itmstus = string.Empty;
                    invBatch.Inb_job_no = string.Empty;
                    invBatch.Itb_git_ignore = false;
                    invBatch.Itb_git_ignore_by = null;
                    invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                    invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                    invBatch.Inb_res_no = null;
                    invBatch.Inb_res_lineno = 0;
                    invBatch.Inb_base_doc_no1 = null;
                    invBatch.Inb_base_doc_no2 = null;
                    invBatch.Inb_base_doc_no3 = null;
                    invBatch.Inb_cur_cd = null;
                    invBatch.Inb_grup_cur_cd = null;
                    invBatch.Inb_free_qty = batchs.itemqty;

                    _inventoryDAL.UpdateInventoryBatch(invBatch);
                    //Added By Prabhath on 1/11/2012
                    //if (_companycostmethod == "AVG" && _isAvgType) { invBatch.Inb_unit_cost = _particulerAvgCost; }
                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation add by Lakshan 06Jul2017
                    if (!string.IsNullOrEmpty(_companycostmethod))
                    {
                        if (_companycostmethod == "AVG" && _isAvgType)
                        {
                            var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
                            if (v != null)
                            {
                                invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                invBatch.Inb_unit_cost = v.Iac_avg_cost;
                            }
                        }
                    }
                    #endregion Avarage Cost Calculation
                    _inventoryDAL.UpdateInventoryBatchRef(invBatch, 1);

                    serLine = 1;
                    var _tbsersPlus =
                        from _pickSerials in PickSerials
                        where _pickSerials.Tus_bin == batchs.bincode && _pickSerials.Tus_itm_cd == batchs.itemcode && _pickSerials.Tus_new_status == batchs.itemstatus && _pickSerials.Tus_unit_cost == batchs.unitcost
                        select _pickSerials;
                    foreach (var sers in _tbsersPlus)
                    {
                        InventorySerialN invSerials = new InventorySerialN();
                        invSerials.Ins_seq_no = _inventoryMovementHeaderPlus.Ith_seq_no;
                        invSerials.Ins_itm_line = itmLine;
                        invSerials.Ins_batch_line = batchLine;
                        invSerials.Ins_ser_line = serLine;
                        invSerials.Ins_direct = true;
                        invSerials.Ins_doc_no = _inventoryMovementHeaderPlus.Ith_seq_no.ToString(); // Pls check this object
                        invSerials.Ins_doc_dt = _inventoryMovementHeaderPlus.Ith_doc_date;
                        invSerials.Ins_com = _inventoryMovementHeaderPlus.Ith_com;
                        invSerials.Ins_loc = _inventoryMovementHeaderPlus.Ith_loc;
                        invSerials.Ins_bin = sers.Tus_bin;
                        invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                        invSerials.Ins_itm_stus = sers.Tus_new_status;
                        invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                        invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _inventoryDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                        invSerials.Ins_ser_1 = sers.Tus_ser_1;
                        invSerials.Ins_ser_2 = sers.Tus_ser_2;
                        invSerials.Ins_ser_3 = sers.Tus_ser_3;
                        invSerials.Ins_ser_4 = sers.Tus_ser_4;
                        invSerials.Ins_warr_no = sers.Tus_warr_no;
                        invSerials.Ins_warr_period = sers.Tus_warr_period;
                        invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                        invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                        invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                        invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                        invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                        invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                        invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                        invSerials.Ins_exist_supp = sers.Tus_exist_supp;
                        //invSerials.Ins_cross_seqno = sers.Tus_cross_seqno;
                        //invSerials.Ins_cross_itmline = sers.Tus_cross_itemline;
                        //invSerials.Ins_cross_batchline = sers.Tus_cross_batchline;
                        //invSerials.Ins_cross_serline = sers.Tus_cross_serline;
                        //invSerials.Ins_issue_dt = sers.Tus_out_date;
                        invSerials.Ins_available = 1;

                        //Add Prabhath on 19/04/2012
                        InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                        _invWarraDetail.Irsm_acc_no = null;
                        _invWarraDetail.Irsm_anal_1 = null;
                        _invWarraDetail.Irsm_anal_2 = null;
                        _invWarraDetail.Irsm_anal_3 = null;
                        _invWarraDetail.Irsm_anal_4 = null;
                        _invWarraDetail.Irsm_anal_5 = null;
                        _invWarraDetail.Irsm_channel = null;
                        _invWarraDetail.Irsm_com = _inventoryMovementHeaderPlus.Ith_com;
                        _invWarraDetail.Irsm_cre_by = null;
                        _invWarraDetail.Irsm_cre_when = DateTime.Now;
                        _invWarraDetail.Irsm_cust_addr = null;
                        _invWarraDetail.Irsm_cust_cd = null;
                        _invWarraDetail.Irsm_cust_del_addr = null;
                        _invWarraDetail.Irsm_cust_email = null;
                        _invWarraDetail.Irsm_cust_fax = null;
                        _invWarraDetail.Irsm_cust_mobile = null;
                        _invWarraDetail.Irsm_cust_name = null;
                        _invWarraDetail.Irsm_cust_prefix = null;
                        _invWarraDetail.Irsm_cust_tel = null;
                        _invWarraDetail.Irsm_cust_town = null;
                        _invWarraDetail.Irsm_cust_vat_no = null;
                        _invWarraDetail.Irsm_direct = _inventoryMovementHeaderPlus.Ith_direct.ToString();
                        _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeaderPlus.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_doc_no = _inventoryMovementHeaderPlus.Ith_doc_no;
                        _invWarraDetail.Irsm_doc_year = _inventoryMovementHeaderPlus.Ith_doc_date;
                        _invWarraDetail.Irsm_exist_grn_com = null;
                        _invWarraDetail.Irsm_exist_grn_dt = _inventoryMovementHeaderPlus.Ith_doc_date.Date;
                        _invWarraDetail.Irsm_exist_grn_no = null;
                        _invWarraDetail.Irsm_exist_supp = null;
                        _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_invoice_no = null;
                        _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                        _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                        _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                        _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                        _invWarraDetail.Irsm_itm_stus = sers.Tus_new_status;
                        _invWarraDetail.Irsm_loc = _inventoryMovementHeaderPlus.Ith_loc;
                        _invWarraDetail.Irsm_loc_desc = null;
                        _invWarraDetail.Irsm_mfc = null;
                        _invWarraDetail.Irsm_mod_by = null;
                        _invWarraDetail.Irsm_mod_when = DateTime.Now;
                        _invWarraDetail.Irsm_orig_grn_com = null;
                        _invWarraDetail.Irsm_orig_grn_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_orig_grn_no = null;
                        _invWarraDetail.Irsm_orig_supp = null;
                        _invWarraDetail.Irsm_sbu = _inventoryMovementHeaderPlus.Ith_sbu;
                        _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                        _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                        _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                        _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                        _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                        _invWarraDetail.Irsm_session_id = _inventoryMovementHeaderPlus.Ith_session_id;
                        _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                        _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                        _invWarraDetail.Irsm_warr_no = sers.Tus_warr_no;
                        _invWarraDetail.Irsm_warr_period = 0;//TODO : Changed need
                        _invWarraDetail.Irsm_warr_rem = null;
                        _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                        _invWarraDetail.Irsm_warr_stus = null;

                        // decimal allow none-serialized items are not saved in serial related tables
                        if (sers.Tus_ser_id != 0)
                        {
                            _inventoryDAL.SaveWarrantyDetail(_invWarraDetail);
                            _inventoryDAL.SaveInventorySerial(invSerials, 1);
                            //Added By Prabhath on 1/11/2012
                            //if (_companycostmethod == "AVG" && _isAvgType) { invSerials.Ins_unit_cost = _particulerAvgCost; }
                            //Added By Prabhath on 1/11/2012
                            #region Avarage Cost Calculation add by Lakshan 06Jul2017
                            if (!string.IsNullOrEmpty(_companycostmethod))
                            {
                                if (_companycostmethod == "AVG" && _isAvgType)
                                {
                                    var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
                                    if (v != null)
                                    {
                                        invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                        invSerials.Ins_unit_cost = v.Iac_avg_cost;
                                    }
                                }
                            }
                            #endregion Avarage Cost Calculation
                            _inventoryDAL.SaveInventorySerialRef(invSerials, 1);
                            serLine += 1;
                        }
                    }
                    batchLine += 1;
                }
                itmLine += 1;
            }

            // ********************************************************************************* +ADJ Entry
            #endregion

            #region Update location inventory +ADJ
            // Update location inventory +ADJ *********************************************************************************
            var _tblocainvPlus =
              from _pickSerials in PickSerials
              where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no && _pickSerials.Tus_com == _pickSerials.Tus_com && _pickSerials.Tus_loc == _pickSerials.Tus_loc
              group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_new_status } into itm
              select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_new_status, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainvPlus)
            {
                //Added By Prabhath on 1/11/2012
                string _scmStatus = string.Empty;
                DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(locaitems.itemstatus, string.Empty);
                if (_tblStus != null)
                    if (_tblStus.Rows.Count > 0)
                    {
                        foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
                    }

                decimal _particulerAvgCost = 0;
                if (_companycostmethod == "AVG" && _isAvgType)
                {
                    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == locaitems.itemcode && y.Tus_itm_stus == locaitems.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    foreach (string _h in _avgcost)
                        _particulerAvgCost = Convert.ToDecimal(_h);
                    _inventoryDAL.UpdateAvgCost(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_loc, _scm2LocCategory, locaitems.itemcode, locaitems.itemstatus, _inventoryMovementHeaderPlus.Ith_cre_by, _particulerAvgCost);
                    _ScmCommonDAL.UpdateAvgCost(_inventoryMovementHeaderPlus.Ith_com, _inventoryMovementHeaderPlus.Ith_loc, _scm2LocCategory, locaitems.itemcode, _scmStatus, _inventoryMovementHeaderPlus.Ith_cre_by, _particulerAvgCost);
                }
                //Added By Prabhath on 1/11/2012

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeaderPlus.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeaderPlus.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;
                _inventoryDAL.UpdateInventoryLocation(invLocation, 1);
            }
            // Update location inventory +ADJ *********************************************************************************
            #endregion

            #region Delete Temporary Sacn Tables
            _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            #endregion

            #region Generate ADJ Document No
            // Generate / Update -ADJ Document No *********************************************************************************
            Int32 _autoNoMinus = _inventoryDAL.GetAutoNumber(_masterAutoNumberMinus.Aut_moduleid, _masterAutoNumberMinus.Aut_direction, _masterAutoNumberMinus.Aut_start_char, _masterAutoNumberMinus.Aut_cate_tp, _masterAutoNumberMinus.Aut_cate_cd, _masterAutoNumberMinus.Aut_modify_dt, _masterAutoNumberMinus.Aut_year).Aut_number;
            string _documentNoMinus = _inventoryMovementHeaderMinus.Ith_loc + "-" + _inventoryMovementHeaderMinus.Ith_doc_tp + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoMinus.ToString("00000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateAutoNumber(_masterAutoNumberMinus);
            _inventoryDAL.UpdateMovementDocNo(_docSeqNoMinus, _documentNoMinus);

            // Generate / Update +ADJ Document No *********************************************************************************
            Int32 _autoNoPuls = _inventoryDAL.GetAutoNumber(_masterAutoNumberPlus.Aut_moduleid, _masterAutoNumberPlus.Aut_direction, _masterAutoNumberPlus.Aut_start_char, _masterAutoNumberPlus.Aut_cate_tp, _masterAutoNumberPlus.Aut_cate_cd, _masterAutoNumberPlus.Aut_modify_dt, _masterAutoNumberPlus.Aut_year).Aut_number;
            string _documentNoPuls = _inventoryMovementHeaderPlus.Ith_loc + "+" + _inventoryMovementHeaderPlus.Ith_doc_tp + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNoPuls.ToString("00000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateMovementDocNo(_docSeqNoPlus, _documentNoPuls);
            _inventoryDAL.UpdateAutoNumber(_masterAutoNumberPlus);
            #endregion

            #region Update ADJ Document No
            //Update +ADJ other document no is -ADJ and -ADJ other document no is +ADJ
            _inventoryDAL.UpdateOtherDocuments(_documentNoPuls, _documentNoMinus);
            #endregion

            //Return system generate documents displaying to user
            _minusDocNo = _documentNoMinus;
            _plusDocNo = _documentNoPuls;
            return effect;
        }

        public DataTable GetItemStatusMaster(string _scm2status, string _scmstatus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemStatusMaster(_scm2status, _scmstatus);
        }

        //Checking for the serial/serial id duplicate
        public int CheckDuplicateSerialFound(string _company, string _location, List<ReptPickSerials> _reptPickSerials, out string _error)
        {
            _inventoryDAL = new InventoryDAL();
            string _item = string.Empty;
            string _serial = string.Empty;
            string _loc = string.Empty;
            Int64 _id = 0;
            StringBuilder _build = new StringBuilder();
            foreach (ReptPickSerials _srl in _reptPickSerials)
            {
                if (_srl.Tus_ser_id != -1)
                {


                    _item = _srl.Tus_itm_cd; _serial = _srl.Tus_ser_1; _id = _srl.Tus_ser_id;
                    DataTable _byid = _inventoryDAL.CheckSerialByID(_company, _location, _id);
                    DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_company, _location, _item, _serial);

                    foreach (DataRow r in _byserial.Rows)
                    {
                        _loc = r["ins_loc"].ToString();
                    }

                    if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null)
                            _build.Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                        else
                            _build.AppendLine().Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                }
            }
            if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
            {

                _error = "Please check the below item(s). These serial(s) are already available in location - " + _loc + ".\n " + _build.ToString();
                return -1;
            }
            else
            {
                _error = string.Empty;
                return 1;
            }
        }

        public int ChangeScanSerialDocDate(string _fromCom, string _toCom, string _docType, string _scanDoc, DateTime _docDate, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            bool _isChangeGRNDate = _inventoryDAL.IsChangeGRNDate(_fromCom, _toCom);
            if (_docType != "GRN") _isChangeGRNDate = false;

            int _result = _inventoryRepDAL.UpdateScanSerialDocDate(_toCom, _user, _scanDoc, _docDate.Date, _isChangeGRNDate);

            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();
            return _result;

        }

        public bool Is_Serial_Can_Remove(string _company, string _doc, string _docType, string _item, string _serial1)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            bool _isTrue = _inventoryDAL.Is_Serial_Can_Remove(_company, _doc, _docType, _item, _serial1);
            _inventoryRepDAL.ConnectionClose();
            return _isTrue;
        }

        public int RCCCancelProcessForBackDate(string _Outdoc, string _user, string _com, string _loc, string _inDoc, string _rccNo, string _Stus, string _rccLoc, DateTime _date, string _sessionID, out string _err)
        {
            try
            {
                int effect = 0;

                _date = DateTime.Now;

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryDAL.UpdateRCCCancelStatus(_com, _rccLoc, _rccNo, _Stus, _user);

                string _aod_Out_Sr_no = _Outdoc;
                string _aod_In_Sev_no = string.Empty;
                string _aod_Out_Sev_no = string.Empty;
                string _aod_In_Sr_no = string.Empty;

                bool _Is_Service_SCM = false;
                string _service_loc_bin = string.Empty;
                string _showroom_bin = string.Empty;

                if (!string.IsNullOrEmpty(_Outdoc))
                {
                    InventoryHeader _aodoutHdr = _inventoryDAL.Get_Int_Hdr(_Outdoc);
                    List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
                    PickSerials = _inventoryDAL.Get_Int_Ser(_Outdoc);

                    ReptPickSerials onePickSerial = new ReptPickSerials();
                    if (PickSerials.Count > 1)
                    {
                        _inventoryDAL.TransactionRollback();
                        _err = "More that one item(s) found!";
                        return -99;
                    }
                    else if (PickSerials.Count == 1)
                    {
                        onePickSerial = PickSerials[0];
                    }
                    else
                    {
                        _inventoryDAL.TransactionRollback();
                        _err = "Item(s) can't find!";
                        return -99;
                    }

                    _service_loc_bin = _inventoryDAL.GetDefaultBinCode(_aodoutHdr.Ith_com, _aodoutHdr.Ith_oth_loc);
                    _showroom_bin = _inventoryDAL.GetDefaultBinCode(_aodoutHdr.Ith_com, _aodoutHdr.Ith_loc);
                    DataTable _outLoc = _inventoryDAL.Get_location_by_code(_aodoutHdr.Ith_com, _aodoutHdr.Ith_oth_loc);
                    if (_outLoc == null)
                    {
                        _inventoryDAL.TransactionRollback();
                        _err = "Can't find service location!";
                        return -99;
                    }
                    else
                    {
                        foreach (DataRow r in _outLoc.Rows)
                        {
                            if (r["ML_ANAL1"].ToString() == "SCM") { _Is_Service_SCM = true; }
                            else if (r["ML_ANAL1"].ToString() == "SCM2") { _Is_Service_SCM = false; }
                            else
                            {
                                _inventoryDAL.TransactionRollback();
                                _err = "Service location not in operation in system!";
                                return -99;
                            }
                        }
                    }

                    ScmMovHeader _scmMov_In_Hdr_Sev = new ScmMovHeader();
                    ScmMovItem _scmMov_In_Itm_Sev = new ScmMovItem();
                    ScmMovCost _scmMov_In_Cost_Sev = new ScmMovCost();
                    ScmMovSerial _scmMov_In_Ser_Sev = new ScmMovSerial();

                    ScmMovHeader _scmMov_Out_Hdr_Sev = new ScmMovHeader();
                    ScmMovItem _scmMov_Out_Itm_Sev = new ScmMovItem();
                    ScmMovCost _scmMov_Out_Cost_Sev = new ScmMovCost();
                    ScmMovSerial _scmMov_Out_Ser_Sev = new ScmMovSerial();

                    InventoryHeader _scm2_In_Hdr_Sev = new InventoryHeader();
                    List<ReptPickSerials> _scm2_In_Ser_Sev = new List<ReptPickSerials>();
                    MasterAutoNumber _scm2_In_AutoNum_Sev = new MasterAutoNumber();

                    InventoryHeader _scm2_Out_Hdr_Sev = new InventoryHeader();
                    List<ReptPickSerials> _scm2_Out_Ser_Sev = new List<ReptPickSerials>();
                    MasterAutoNumber _scm2_Out_AutoNum_Sev = new MasterAutoNumber();

                    InventoryHeader _scm2_In_Hdr_showroom = new InventoryHeader();
                    List<ReptPickSerials> _scm2_In_Ser_showroom = new List<ReptPickSerials>();
                    MasterAutoNumber _scm2_In_AutoNum_showroom = new MasterAutoNumber();

                    List<ReptPickSerialsSub> _subSerial = new List<ReptPickSerialsSub>();

                    #region Generate AOD Inward to Showroom
                    _scm2_In_Hdr_showroom.Ith_loc = _aodoutHdr.Ith_loc;
                    _scm2_In_Hdr_showroom.Ith_com = _aodoutHdr.Ith_com;
                    _scm2_In_Hdr_showroom.Ith_oth_docno = _aod_Out_Sev_no; //Service Location AOD Out No
                    _scm2_In_Hdr_showroom.Ith_doc_date = _date.Date;
                    _scm2_In_Hdr_showroom.Ith_doc_year = _date.Date.Year;
                    _scm2_In_Hdr_showroom.Ith_doc_tp = "AOD";
                    _scm2_In_Hdr_showroom.Ith_cate_tp = "NOR";
                    _scm2_In_Hdr_showroom.Ith_sub_tp = "SERVICE";
                    _scm2_In_Hdr_showroom.Ith_is_manual = false;
                    _scm2_In_Hdr_showroom.Ith_stus = "A";
                    _scm2_In_Hdr_showroom.Ith_cre_by = _user;
                    _scm2_In_Hdr_showroom.Ith_mod_by = _user;
                    _scm2_In_Hdr_showroom.Ith_direct = true;
                    _scm2_In_Hdr_showroom.Ith_session_id = _sessionID;//Need fill later
                    _scm2_In_Hdr_showroom.Ith_manual_ref = _rccNo;
                    _scm2_In_Hdr_showroom.Ith_remarks = "RCC CANCELATION";
                    _scm2_In_Hdr_showroom.Ith_vehi_no = "N/A";
                    _scm2_In_Hdr_showroom.Ith_bus_entity = string.Empty;
                    _scm2_In_Hdr_showroom.Ith_oth_com = _aodoutHdr.Ith_com; ;
                    _scm2_In_Hdr_showroom.Ith_oth_loc = _aodoutHdr.Ith_oth_loc;
                    _scm2_In_Hdr_showroom.Ith_pc = _aodoutHdr.Ith_pc;
                    _scm2_In_Hdr_showroom.Ith_sub_docno = _rccNo;

                    _scm2_In_Ser_showroom = PickSerials;
                    _scm2_In_Ser_showroom.ForEach(x => x.Tus_loc = _scm2_In_Hdr_showroom.Ith_loc);
                    _scm2_In_Ser_showroom.ForEach(x => x.Tus_bin = _showroom_bin);
                    _scm2_In_Ser_showroom.ForEach(x => x.Tus_doc_dt = _date.Date);
                    _scm2_In_Ser_showroom.ForEach(x => x.Tus_base_doc_no = _rccNo);
                    _scm2_In_Ser_showroom.ForEach(x => x.Tus_base_itm_line = 0);
                    _scm2_In_Ser_showroom.ForEach(x => x.Tus_batch_line = 0);

                    _scm2_In_AutoNum_showroom.Aut_cate_cd = _scm2_In_Hdr_showroom.Ith_loc;
                    _scm2_In_AutoNum_showroom.Aut_cate_tp = "LOC";
                    _scm2_In_AutoNum_showroom.Aut_direction = 1;
                    _scm2_In_AutoNum_showroom.Aut_modify_dt = null;
                    _scm2_In_AutoNum_showroom.Aut_year = _date.Date.Year;
                    _scm2_In_AutoNum_showroom.Aut_moduleid = "AOD";
                    _scm2_In_AutoNum_showroom.Aut_start_char = "AOD";

                    //#region Check receving serials are duplicating :: Chamal 08-May-2014
                    //string _err = string.Empty;
                    //if (CHNLSVC.Inventory.CheckDuplicateSerialFound(invHdr.Ith_com, invHdr.Ith_loc, PickSerialsList, out _err) <= 0)
                    //{
                    //    MessageBox.Show(_err.ToString(), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //    return;
                    //}
                    //#endregion

                    //result = CHNLSVC.Inventory.AODReceipt(invHdr, PickSerialsList, reptPickSerials_SubList, masterAutoNum, out documntNo); }

                    #endregion

                    if (_Is_Service_SCM == true)
                    {
                        int _updateNumber = 0;
                        _aod_In_Sev_no = _inventoryDAL.Get_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-IN-L", _date.Date, out _updateNumber);
                        if (_updateNumber > 0)
                        {
                            effect = _inventoryDAL.Update_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-IN-L", _updateNumber);
                        }
                        else
                        {
                            effect = _inventoryDAL.Update_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-IN-L", -99);
                            if (effect > 0)
                            {
                                _aod_In_Sev_no = _inventoryDAL.Get_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-IN-L", _date.Date, out _updateNumber);
                            }
                            else
                            {
                                _inventoryDAL.TransactionRollback();
                                _err = _aodoutHdr.Ith_oth_loc + " AOD-IN auto number not setup!";
                                return -99;
                            }
                        }

                        _aod_Out_Sev_no = _inventoryDAL.Get_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-OUT-L", _date.Date, out _updateNumber);
                        if (_updateNumber > 0)
                        {
                            effect = _inventoryDAL.Update_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-OUT-L", _updateNumber);
                        }
                        else
                        {

                            effect = _inventoryDAL.Update_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-OUT-L", -99);
                            if (effect > 0)
                            {
                                _aod_Out_Sev_no = _inventoryDAL.Get_SCM_LocAutoNo(_aodoutHdr.Ith_oth_loc, "AOD-OUT-L", _date.Date, out _updateNumber);
                            }
                            else
                            {
                                _inventoryDAL.TransactionRollback();
                                _err = _aodoutHdr.Ith_oth_loc + " AOD-OUT auto number not setup!";
                                return -99;
                            }
                        }

                        #region Auto Generate AOD Inward to Service Location

                        _scmMov_In_Hdr_Sev.App_by_1 = _user;
                        _scmMov_In_Hdr_Sev.App_by_2 = "N/A";
                        _scmMov_In_Hdr_Sev.App_by_3 = "N/A";
                        _scmMov_In_Hdr_Sev.Channel_code = "N/A";
                        _scmMov_In_Hdr_Sev.Company = _aodoutHdr.Ith_com;
                        _scmMov_In_Hdr_Sev.Cost_profit_code = "N/A";
                        _scmMov_In_Hdr_Sev.Currency_code = "LKR";
                        _scmMov_In_Hdr_Sev.Del_add1 = "N/A";
                        _scmMov_In_Hdr_Sev.Del_add2 = "N/A";
                        _scmMov_In_Hdr_Sev.Doc_date = _date.Date.Date;
                        _scmMov_In_Hdr_Sev.Doc_no = _aod_In_Sev_no;
                        _scmMov_In_Hdr_Sev.Doc_status = "APPROVED_CLOSE";
                        _scmMov_In_Hdr_Sev.Doc_sub_type = "RCC";
                        _scmMov_In_Hdr_Sev.Doc_type = "AOD-IN-LOCAL";
                        _scmMov_In_Hdr_Sev.Entry_no = _rccNo;
                        _scmMov_In_Hdr_Sev.Entry_type = "SERVICE";
                        _scmMov_In_Hdr_Sev.Exchange_rate = 1;
                        _scmMov_In_Hdr_Sev.Inv_direction = "IN";
                        _scmMov_In_Hdr_Sev.Loca = _aodoutHdr.Ith_oth_loc;
                        _scmMov_In_Hdr_Sev.Manual_ref_no = _rccNo;
                        _scmMov_In_Hdr_Sev.Other_doc_no = "(U)" + _aod_Out_Sr_no; //Showroom AOD Out No
                        _scmMov_In_Hdr_Sev.Other_loca = _aodoutHdr.Ith_loc;
                        _scmMov_In_Hdr_Sev.Remarks = "RCC CANCELATION";
                        _scmMov_In_Hdr_Sev.Supplier_code = "N/A";
                        _scmMov_In_Hdr_Sev.User = _user;
                        _scmMov_In_Hdr_Sev.Vehicle_no = "N/A";
                        _scmMov_In_Hdr_Sev.Year = _date.Date.Year;
                        _scmMov_In_Hdr_Sev.Year_seq_no = "RCC1" + _aodoutHdr.Ith_seq_no;

                        _scmMov_In_Itm_Sev.Brand = onePickSerial.Tus_itm_brand;
                        _scmMov_In_Itm_Sev.Cate1 = "N/A";
                        _scmMov_In_Itm_Sev.Cate2 = "N/A";
                        _scmMov_In_Itm_Sev.Cate3 = "N/A";
                        _scmMov_In_Itm_Sev.Doc_no = _scmMov_In_Hdr_Sev.Doc_no;
                        _scmMov_In_Itm_Sev.Item_code = onePickSerial.Tus_itm_cd;
                        _scmMov_In_Itm_Sev.Item_status = onePickSerial.Tus_itm_stus;
                        _scmMov_In_Itm_Sev.Line = 1;
                        _scmMov_In_Itm_Sev.Loca = _scmMov_In_Hdr_Sev.Loca;
                        _scmMov_In_Itm_Sev.Model = onePickSerial.Tus_itm_model;
                        _scmMov_In_Itm_Sev.Qty = 1;
                        _scmMov_In_Itm_Sev.Unit_price = 0;
                        _scmMov_In_Itm_Sev.Uom = "NOS";
                        _scmMov_In_Itm_Sev.User = _user;
                        _scmMov_In_Itm_Sev.Year_seq_no = _scmMov_In_Hdr_Sev.Year_seq_no;

                        _scmMov_In_Cost_Sev.Brand = onePickSerial.Tus_itm_brand;
                        _scmMov_In_Cost_Sev.Cate1 = "N/A";
                        _scmMov_In_Cost_Sev.Cate2 = "N/A";
                        _scmMov_In_Cost_Sev.Cate3 = "N/A";
                        _scmMov_In_Cost_Sev.Company = _scmMov_In_Hdr_Sev.Company;
                        _scmMov_In_Cost_Sev.Doc_no = _scmMov_In_Hdr_Sev.Doc_no;
                        _scmMov_In_Cost_Sev.Docbatchline = 1;
                        _scmMov_In_Cost_Sev.Docindate = _date.Date;
                        _scmMov_In_Cost_Sev.Docitemline = 1;
                        _scmMov_In_Cost_Sev.Entryno = _rccNo;
                        _scmMov_In_Cost_Sev.Inbatchline = 1;
                        _scmMov_In_Cost_Sev.Initmline = 1;
                        _scmMov_In_Cost_Sev.Item_code = onePickSerial.Tus_itm_cd;
                        _scmMov_In_Cost_Sev.Item_status = onePickSerial.Tus_itm_stus;
                        _scmMov_In_Cost_Sev.Itemcodeorig = onePickSerial.Tus_itm_cd;
                        _scmMov_In_Cost_Sev.Line = 1;
                        _scmMov_In_Cost_Sev.Loca = _scmMov_In_Hdr_Sev.Loca;
                        _scmMov_In_Cost_Sev.Model = onePickSerial.Tus_itm_model;
                        _scmMov_In_Cost_Sev.Qty = 1;
                        _scmMov_In_Cost_Sev.Scmdocinno = "N/A";
                        _scmMov_In_Cost_Sev.Scminlineno = 0;
                        _scmMov_In_Cost_Sev.Tobonditemcode = onePickSerial.Tus_itm_cd;
                        _scmMov_In_Cost_Sev.Unit_cost = onePickSerial.Tus_unit_cost;
                        _scmMov_In_Cost_Sev.Uom = "NOS";
                        _scmMov_In_Cost_Sev.User = _user;
                        _scmMov_In_Cost_Sev.Year_seq_no = _scmMov_In_Hdr_Sev.Year_seq_no;

                        _scmMov_In_Ser_Sev.Bin = _service_loc_bin;
                        _scmMov_In_Ser_Sev.Chassisno = onePickSerial.Tus_ser_2;
                        _scmMov_In_Ser_Sev.Comindate = onePickSerial.Tus_orig_grndt.Date;
                        _scmMov_In_Ser_Sev.Cominno = onePickSerial.Tus_orig_grnno;
                        _scmMov_In_Ser_Sev.Doc_no = _scmMov_In_Hdr_Sev.Doc_no;
                        _scmMov_In_Ser_Sev.Docdate = _scmMov_In_Hdr_Sev.Doc_date.Date;
                        _scmMov_In_Ser_Sev.Doclineno = 1;
                        _scmMov_In_Ser_Sev.Docrefno = _rccNo;
                        _scmMov_In_Ser_Sev.Grna = onePickSerial.Tus_ser_id.ToString();
                        _scmMov_In_Ser_Sev.Item_code = onePickSerial.Tus_itm_cd;
                        _scmMov_In_Ser_Sev.Item_status = onePickSerial.Tus_itm_stus;
                        _scmMov_In_Ser_Sev.Loca = _scmMov_In_Hdr_Sev.Loca;
                        _scmMov_In_Ser_Sev.Mcostlineno = 1;
                        _scmMov_In_Ser_Sev.Mfc = "N/A";
                        _scmMov_In_Ser_Sev.Qty = 1;
                        _scmMov_In_Ser_Sev.Serialseqno = onePickSerial.Tus_ser_id;
                        _scmMov_In_Ser_Sev.Serno = onePickSerial.Tus_ser_1;
                        _scmMov_In_Ser_Sev.Unit_price = 0;
                        _scmMov_In_Ser_Sev.Unitcost = onePickSerial.Tus_unit_cost;
                        _scmMov_In_Ser_Sev.Uom = "NOS";
                        _scmMov_In_Ser_Sev.Updatelineno = 1;
                        _scmMov_In_Ser_Sev.User = _user;
                        _scmMov_In_Ser_Sev.Warrno = onePickSerial.Tus_warr_no;
                        _scmMov_In_Ser_Sev.Year_seq_no = _scmMov_In_Hdr_Sev.Year_seq_no;

                        #endregion

                        #region Auto Generate AOD Outward to Showroom Location

                        _scmMov_Out_Hdr_Sev.App_by_1 = _user;
                        _scmMov_Out_Hdr_Sev.App_by_2 = "N/A";
                        _scmMov_Out_Hdr_Sev.App_by_3 = "N/A";
                        _scmMov_Out_Hdr_Sev.Channel_code = "N/A";
                        _scmMov_Out_Hdr_Sev.Company = _aodoutHdr.Ith_com;
                        _scmMov_Out_Hdr_Sev.Cost_profit_code = "N/A";
                        _scmMov_Out_Hdr_Sev.Currency_code = "LKR";
                        _scmMov_Out_Hdr_Sev.Del_add1 = "N/A";
                        _scmMov_Out_Hdr_Sev.Del_add2 = "N/A";
                        _scmMov_Out_Hdr_Sev.Doc_date = _date.Date.Date;
                        _scmMov_Out_Hdr_Sev.Doc_no = _aod_Out_Sev_no;
                        _scmMov_Out_Hdr_Sev.Doc_status = "APPROVED_CLOSE";
                        _scmMov_Out_Hdr_Sev.Doc_sub_type = "RCC";
                        _scmMov_Out_Hdr_Sev.Doc_type = "AOD-OUT-LOCAL";
                        _scmMov_Out_Hdr_Sev.Entry_no = _rccNo;
                        _scmMov_Out_Hdr_Sev.Entry_type = "SERVICE";
                        _scmMov_Out_Hdr_Sev.Exchange_rate = 1;
                        _scmMov_Out_Hdr_Sev.Inv_direction = "OUT";
                        _scmMov_Out_Hdr_Sev.Loca = _aodoutHdr.Ith_oth_loc;
                        _scmMov_Out_Hdr_Sev.Manual_ref_no = _rccNo;
                        _scmMov_Out_Hdr_Sev.Other_doc_no = _rccNo;
                        _scmMov_Out_Hdr_Sev.Other_loca = _aodoutHdr.Ith_loc;
                        _scmMov_Out_Hdr_Sev.Remarks = "RCC CANCELATION";
                        _scmMov_Out_Hdr_Sev.Supplier_code = "N/A";
                        _scmMov_Out_Hdr_Sev.User = _user;
                        _scmMov_Out_Hdr_Sev.Vehicle_no = "N/A";
                        _scmMov_Out_Hdr_Sev.Year = _date.Date.Year;
                        _scmMov_Out_Hdr_Sev.Year_seq_no = "RCC2" + _aodoutHdr.Ith_seq_no;

                        _scmMov_Out_Itm_Sev.Brand = onePickSerial.Tus_itm_brand;
                        _scmMov_Out_Itm_Sev.Cate1 = "N/A";
                        _scmMov_Out_Itm_Sev.Cate2 = "N/A";
                        _scmMov_Out_Itm_Sev.Cate3 = "N/A";
                        _scmMov_Out_Itm_Sev.Doc_no = _scmMov_Out_Hdr_Sev.Doc_no;
                        _scmMov_Out_Itm_Sev.Item_code = onePickSerial.Tus_itm_cd;
                        _scmMov_Out_Itm_Sev.Item_status = onePickSerial.Tus_itm_stus;
                        _scmMov_Out_Itm_Sev.Line = 1;
                        _scmMov_Out_Itm_Sev.Loca = _scmMov_Out_Hdr_Sev.Loca;
                        _scmMov_Out_Itm_Sev.Model = onePickSerial.Tus_itm_model;
                        _scmMov_Out_Itm_Sev.Qty = 1;
                        _scmMov_Out_Itm_Sev.Unit_price = 0;
                        _scmMov_Out_Itm_Sev.Uom = "NOS";
                        _scmMov_Out_Itm_Sev.User = _user;
                        _scmMov_Out_Itm_Sev.Year_seq_no = _scmMov_Out_Hdr_Sev.Year_seq_no;

                        _scmMov_Out_Cost_Sev.Brand = onePickSerial.Tus_itm_brand;
                        _scmMov_Out_Cost_Sev.Cate1 = "N/A";
                        _scmMov_Out_Cost_Sev.Cate2 = "N/A";
                        _scmMov_Out_Cost_Sev.Cate3 = "N/A";
                        _scmMov_Out_Cost_Sev.Company = _scmMov_Out_Hdr_Sev.Company;
                        _scmMov_Out_Cost_Sev.Doc_no = _scmMov_Out_Hdr_Sev.Doc_no;
                        _scmMov_Out_Cost_Sev.Docbatchline = 1;
                        _scmMov_Out_Cost_Sev.Docindate = _date.Date;
                        _scmMov_Out_Cost_Sev.Docitemline = 1;
                        _scmMov_Out_Cost_Sev.Entryno = _rccNo;
                        _scmMov_Out_Cost_Sev.Inbatchline = 1;
                        _scmMov_Out_Cost_Sev.Initmline = 1;
                        _scmMov_Out_Cost_Sev.Item_code = onePickSerial.Tus_itm_cd;
                        _scmMov_Out_Cost_Sev.Item_status = onePickSerial.Tus_itm_stus;
                        _scmMov_Out_Cost_Sev.Itemcodeorig = onePickSerial.Tus_itm_cd;
                        _scmMov_Out_Cost_Sev.Line = 1;
                        _scmMov_Out_Cost_Sev.Loca = _scmMov_Out_Hdr_Sev.Loca;
                        _scmMov_Out_Cost_Sev.Model = onePickSerial.Tus_itm_model;
                        _scmMov_Out_Cost_Sev.Qty = 1;
                        _scmMov_Out_Cost_Sev.Scmdocinno = _aod_In_Sev_no;
                        _scmMov_Out_Cost_Sev.Scminlineno = 1;
                        _scmMov_Out_Cost_Sev.Tobonditemcode = onePickSerial.Tus_itm_cd;
                        _scmMov_Out_Cost_Sev.Unit_cost = onePickSerial.Tus_unit_cost;
                        _scmMov_Out_Cost_Sev.Uom = "NOS";
                        _scmMov_Out_Cost_Sev.User = _user;
                        _scmMov_Out_Cost_Sev.Year_seq_no = _scmMov_Out_Hdr_Sev.Year_seq_no;

                        _scmMov_Out_Ser_Sev.Bin = _service_loc_bin;
                        _scmMov_Out_Ser_Sev.Chassisno = onePickSerial.Tus_ser_2;
                        _scmMov_Out_Ser_Sev.Comindate = onePickSerial.Tus_orig_grndt.Date;
                        _scmMov_Out_Ser_Sev.Cominno = onePickSerial.Tus_orig_grnno;
                        _scmMov_Out_Ser_Sev.Doc_no = _scmMov_Out_Hdr_Sev.Doc_no;
                        _scmMov_Out_Ser_Sev.Docdate = _scmMov_Out_Hdr_Sev.Doc_date.Date;
                        _scmMov_Out_Ser_Sev.Doclineno = 1;
                        _scmMov_Out_Ser_Sev.Docrefno = _aod_In_Sev_no;
                        _scmMov_Out_Ser_Sev.Grna = onePickSerial.Tus_ser_id.ToString();
                        _scmMov_Out_Ser_Sev.Item_code = onePickSerial.Tus_itm_cd;
                        _scmMov_Out_Ser_Sev.Item_status = onePickSerial.Tus_itm_stus;
                        _scmMov_Out_Ser_Sev.Loca = _scmMov_Out_Hdr_Sev.Loca;
                        _scmMov_Out_Ser_Sev.Mcostlineno = 1;
                        _scmMov_Out_Ser_Sev.Mfc = "N/A";
                        _scmMov_Out_Ser_Sev.Qty = 1;
                        _scmMov_Out_Ser_Sev.Serialseqno = onePickSerial.Tus_ser_id;
                        _scmMov_Out_Ser_Sev.Serno = onePickSerial.Tus_ser_1;
                        _scmMov_Out_Ser_Sev.Unit_price = 0;
                        _scmMov_Out_Ser_Sev.Unitcost = onePickSerial.Tus_unit_cost;
                        _scmMov_Out_Ser_Sev.Uom = "NOS";
                        _scmMov_Out_Ser_Sev.Updatelineno = 1;
                        _scmMov_Out_Ser_Sev.User = _user;
                        _scmMov_Out_Ser_Sev.Warrno = onePickSerial.Tus_warr_no;
                        _scmMov_Out_Ser_Sev.Year_seq_no = _scmMov_Out_Hdr_Sev.Year_seq_no;

                        #endregion

                        //In Service
                        effect = _inventoryDAL.Save_Mov_Hdr(_scmMov_In_Hdr_Sev);
                        effect = _inventoryDAL.Save_Mov_Itm(_scmMov_In_Itm_Sev);
                        effect = _inventoryDAL.Save_Mov_Cost(_scmMov_In_Cost_Sev);
                        effect = _inventoryDAL.Save_Mov_Ser(_scmMov_In_Ser_Sev);

                        //Out Service
                        effect = _inventoryDAL.Save_Mov_Hdr(_scmMov_Out_Hdr_Sev);
                        effect = _inventoryDAL.Save_Mov_Itm(_scmMov_Out_Itm_Sev);
                        effect = _inventoryDAL.Save_Mov_Cost(_scmMov_Out_Cost_Sev);
                        effect = _inventoryDAL.Save_Mov_Ser(_scmMov_Out_Ser_Sev);

                        //In Again Showroom
                        _scm2_In_Hdr_showroom.Ith_oth_docno = _aod_Out_Sev_no;
                        effect = SaveInwardScanSerial(_scm2_In_Hdr_showroom, _scm2_In_Ser_showroom, _subSerial);
                        effect = UpdateInventoryAutoNumber(_scm2_In_Hdr_showroom, _scm2_In_AutoNum_showroom, "+", out _aod_In_Sr_no);
                    }
                    else
                    {
                        #region Auto Generate AOD Inward to Service Location
                        _scm2_In_Hdr_Sev.Ith_loc = _aodoutHdr.Ith_oth_loc;
                        _scm2_In_Hdr_Sev.Ith_com = _aodoutHdr.Ith_com;
                        _scm2_In_Hdr_Sev.Ith_oth_docno = _aod_Out_Sr_no;
                        _scm2_In_Hdr_Sev.Ith_doc_date = _date.Date;
                        _scm2_In_Hdr_Sev.Ith_doc_year = _date.Date.Year;
                        _scm2_In_Hdr_Sev.Ith_doc_tp = "AOD";
                        _scm2_In_Hdr_Sev.Ith_cate_tp = "NOR";
                        _scm2_In_Hdr_Sev.Ith_sub_tp = "SERVICE";
                        _scm2_In_Hdr_Sev.Ith_is_manual = false;
                        _scm2_In_Hdr_Sev.Ith_stus = "A";
                        _scm2_In_Hdr_Sev.Ith_cre_by = _user;
                        _scm2_In_Hdr_Sev.Ith_mod_by = _user;
                        _scm2_In_Hdr_Sev.Ith_direct = true;
                        _scm2_In_Hdr_Sev.Ith_session_id = _sessionID;//Need fill later
                        _scm2_In_Hdr_Sev.Ith_manual_ref = _rccNo;
                        _scm2_In_Hdr_Sev.Ith_remarks = "RCC CANCELATION";
                        _scm2_In_Hdr_Sev.Ith_vehi_no = "N/A";
                        _scm2_In_Hdr_Sev.Ith_bus_entity = string.Empty;
                        _scm2_In_Hdr_Sev.Ith_oth_com = _aodoutHdr.Ith_com; ;
                        _scm2_In_Hdr_Sev.Ith_oth_loc = _aodoutHdr.Ith_loc;
                        //_scm2_In_Hdr.Ith_pc = _aodoutHdr.Ith_pc;
                        _scm2_In_Hdr_Sev.Ith_sub_docno = _rccNo;

                        _scm2_In_Ser_Sev = PickSerials;
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_loc = _scm2_In_Hdr_Sev.Ith_loc);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_bin = _service_loc_bin);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_doc_dt = _date.Date);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_base_doc_no = _rccNo);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_seq_no = _scm2_Out_Hdr_Sev.Ith_seq_no);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_base_itm_line = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_batch_line = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_ser_line = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_itm_line = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_cross_batchline = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_cross_itemline = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_cross_serline = 1);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_out_date = _date.Date);
                        _scm2_In_Ser_Sev.ForEach(x => x.Tus_cross_seqno = _scm2_Out_Hdr_Sev.Ith_seq_no);

                        _scm2_In_AutoNum_Sev.Aut_cate_cd = _scm2_In_Hdr_Sev.Ith_loc;
                        _scm2_In_AutoNum_Sev.Aut_cate_tp = "LOC";
                        _scm2_In_AutoNum_Sev.Aut_direction = 1;
                        _scm2_In_AutoNum_Sev.Aut_modify_dt = null;
                        _scm2_In_AutoNum_Sev.Aut_year = _date.Date.Year;
                        _scm2_In_AutoNum_Sev.Aut_moduleid = "AOD";
                        _scm2_In_AutoNum_Sev.Aut_start_char = "AOD";

                        #endregion

                        #region Auto Generate AOD Outward from Service Location
                        _scm2_Out_Hdr_Sev.Ith_loc = _aodoutHdr.Ith_oth_loc;
                        _scm2_Out_Hdr_Sev.Ith_com = _aodoutHdr.Ith_com;
                        _scm2_Out_Hdr_Sev.Ith_oth_docno = _rccNo;
                        _scm2_Out_Hdr_Sev.Ith_doc_date = _date.Date;
                        _scm2_Out_Hdr_Sev.Ith_doc_year = _date.Date.Year;
                        _scm2_Out_Hdr_Sev.Ith_doc_tp = "AOD";
                        _scm2_Out_Hdr_Sev.Ith_cate_tp = "NOR";
                        _scm2_Out_Hdr_Sev.Ith_sub_tp = "SERVICE";
                        _scm2_Out_Hdr_Sev.Ith_is_manual = false;
                        _scm2_Out_Hdr_Sev.Ith_stus = "A";
                        _scm2_Out_Hdr_Sev.Ith_cre_by = _user;
                        _scm2_Out_Hdr_Sev.Ith_mod_by = _user;
                        _scm2_Out_Hdr_Sev.Ith_direct = false;
                        _scm2_Out_Hdr_Sev.Ith_session_id = _sessionID;//string.Empty;//Need fill later
                        _scm2_Out_Hdr_Sev.Ith_manual_ref = _rccNo;
                        _scm2_Out_Hdr_Sev.Ith_remarks = "RCC CANCELATION";
                        _scm2_Out_Hdr_Sev.Ith_vehi_no = "N/A";
                        _scm2_Out_Hdr_Sev.Ith_bus_entity = string.Empty;
                        _scm2_Out_Hdr_Sev.Ith_oth_com = _aodoutHdr.Ith_com; ;
                        _scm2_Out_Hdr_Sev.Ith_oth_loc = _aodoutHdr.Ith_loc;
                        //_scm2_Out_Hdr.Ith_pc = _aodoutHdr.Ith_pc;
                        _scm2_Out_Hdr_Sev.Ith_sub_docno = _rccNo;

                        _scm2_Out_Ser_Sev = PickSerials;

                        _scm2_Out_AutoNum_Sev.Aut_cate_cd = _scm2_Out_Hdr_Sev.Ith_loc;
                        _scm2_Out_AutoNum_Sev.Aut_cate_tp = "LOC";
                        _scm2_Out_AutoNum_Sev.Aut_direction = 0;
                        _scm2_Out_AutoNum_Sev.Aut_modify_dt = null;
                        _scm2_Out_AutoNum_Sev.Aut_year = _date.Date.Year;
                        _scm2_Out_AutoNum_Sev.Aut_moduleid = "AOD";
                        _scm2_Out_AutoNum_Sev.Aut_start_char = "AOD";

                        #endregion

                        //In Service
                        effect = SaveInwardScanSerial(_scm2_In_Hdr_Sev, _scm2_In_Ser_Sev, _subSerial);
                        effect = UpdateInventoryAutoNumber(_scm2_In_Hdr_Sev, _scm2_In_AutoNum_Sev, "+", out _aod_In_Sev_no);

                        //Out Service
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_loc = _scm2_Out_Hdr_Sev.Ith_loc);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_bin = _service_loc_bin);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_doc_no = _aod_In_Sev_no);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_doc_dt = _date.Date);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_base_doc_no = _rccNo);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_seq_no = _scm2_In_Hdr_Sev.Ith_seq_no);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_base_itm_line = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_batch_line = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_ser_line = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_itm_line = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_cross_batchline = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_cross_itemline = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_cross_serline = 1);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_out_date = _date.Date);
                        _scm2_Out_Ser_Sev.ForEach(x => x.Tus_cross_seqno = _scm2_In_Hdr_Sev.Ith_seq_no);
                        effect = SaveOutwardScanSerial(_scm2_Out_Hdr_Sev, _scm2_Out_Ser_Sev, _subSerial, null, false);
                        effect = UpdateInventoryAutoNumber(_scm2_Out_Hdr_Sev, _scm2_Out_AutoNum_Sev, "-", out _aod_Out_Sev_no);

                        //In Again Showroom
                        _scm2_In_Hdr_showroom.Ith_oth_docno = _aod_Out_Sev_no;
                        _scm2_In_Ser_showroom.ForEach(x => x.Tus_loc = _scm2_In_Hdr_showroom.Ith_loc);
                        _scm2_In_Ser_showroom.ForEach(x => x.Tus_bin = _showroom_bin);
                        _scm2_In_Ser_showroom.ForEach(x => x.Tus_doc_dt = _date.Date);
                        _scm2_In_Ser_showroom.ForEach(x => x.Tus_base_doc_no = _rccNo);                   
                        //_scm2_In_Ser_showroom.ForEach(x => x.Tus_base_itm_line = 0); //REMOVE BY WIMAL @ 31/052018
                        //_scm2_In_Ser_showroom.ForEach(x => x.Tus_batch_line = 0); //REMOVE BY WIMAL @ 31/052018
                        _scm2_In_Ser_showroom.ForEach(x => x.Tus_base_itm_line = 1); //ADDED BY WIMAL @ 31/052018
                        _scm2_In_Ser_showroom.ForEach(x => x.Tus_batch_line = 1); //ADDED BY WIMAL @ 31/052018
                        effect = SaveInwardScanSerial(_scm2_In_Hdr_showroom, _scm2_In_Ser_showroom, _subSerial);
                        effect = UpdateInventoryAutoNumber(_scm2_In_Hdr_showroom, _scm2_In_AutoNum_showroom, "+", out _aod_In_Sr_no);
                    }

                    _inventoryDAL.Update_RCC_Cancel_BackDate(_com, _Outdoc, _rccNo, "");

                    _err = "RCC No : " + _rccNo + " Canceled Successfully!\nAuto generated aod documents are ;\n" + _aod_In_Sev_no + "\n" + _aod_Out_Sev_no + "\n" + _aod_In_Sr_no;
                }
                else
                {
                    _err = "RCC No : " + _rccNo + " Canceled Successfully!";
                }
                _inventoryDAL.TransactionCommit();
                return 1;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                return -99;
            }
        }

        #region BOC project DO modification

        public DataTable GetBOCScanSummary(string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBOCScanSummary(_com, _loc);
        }

        public int GetBOCSerials(string _com, string _loc, string _pc, string _invcNo, List<string> _batchList, string _user, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                int _errFound = 0;
                string _errString = string.Empty;

                int _userSeqNo = 0;
                List<InvoiceItem> _invcItems = new List<InvoiceItem>();
                List<ReptPickSerials> _scanSerials = new List<ReptPickSerials>();
                _invcItems = _salesDAL.GetAllSaleDocumentItemList(_com, _pc, "INV", _invcNo, "A");
                _userSeqNo = GET_SEQNUM_FOR_INVOICE("DO", _com, _invcNo, 0);
                _scanSerials = _inventoryDAL.GetBOCScanSerials(_com, _loc, _batchList, _user, _userSeqNo, _invcNo);

                var _listSerials = from list1 in _scanSerials
                                   join list2 in _invcItems
                                   on list1.Tus_itm_cd equals list2.Sad_itm_cd
                                   where list1.Tus_itm_cd == list2.Sad_itm_cd &&
                                   list1.Tus_itm_stus == list2.Sad_itm_stus
                                   select list1;
                _scanSerials = _listSerials.ToList();

                if (_scanSerials.Count <= 0)
                {
                    _errFound = -99;
                    _err = "Scanning serials not found!";
                    return _errFound;
                }

                var iItems = from p in _invcItems
                             group p by new { p.Sad_itm_cd, p.Sad_itm_stus } into q
                             select new { itemcode = q.Key.Sad_itm_cd, itemstatus = q.Key.Sad_itm_stus, qty = q.Sum(p => p.Sad_qty) - q.Sum(p => p.Sad_do_qty) };
                foreach (var _p in iItems)
                {
                    var _serial = from a in _scanSerials
                                  group a by new { a.Tus_itm_cd, a.Tus_itm_stus } into b
                                  select new { itemcode = b.Key.Tus_itm_cd, itemstatus = b.Key.Tus_itm_stus, qty = b.Sum(p => p.Tus_qty) };
                    foreach (var _a in _serial)
                    {
                        if (_a.qty > _p.qty)
                        {
                            _errFound = -99;
                            _err = "Scanning qty more than the invoice qty for the item code - " + _p.itemcode + " | item status - " + _p.itemstatus + ". (Scan qty - " + _a.qty + ")";
                            return _errFound;
                        }
                    }
                }

                var iItems1 = from p in _invcItems
                              group p by new { p.Sad_itm_line, p.Sad_itm_cd, p.Sad_itm_stus } into q
                              select new { itemline = q.Key.Sad_itm_line, itemcode = q.Key.Sad_itm_cd, itemstatus = q.Key.Sad_itm_stus, qty = q.Sum(p => p.Sad_qty) - q.Sum(p => p.Sad_do_qty) };
                foreach (var _p in iItems1)
                {
                    _scanSerials.Where(y => y.Tus_itm_cd == _p.itemcode && y.Tus_itm_stus == _p.itemstatus).ToList().ForEach(x => x.Tus_base_itm_line = _p.itemline);
                }

                foreach (ReptPickSerials _s in _scanSerials)
                {
                    SaveAllScanSerials(_s, null);
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.UpdateBOCSerialPick(_com, _loc, _s.Tus_new_remarks, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_ser_1, _user, -1);
                }

                _err = _errString;
                return 1;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                return -99;
            }
        }


        public int GetExcelSerials(string _com, string _loc, string _pc, string _invcNo, List<ReptPickItems> _batchList, string _user, out string _err)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                int _errFound = 0;
                string _errString = string.Empty;

                int _userSeqNo = 0;
                List<InvoiceItem> _invcItems = new List<InvoiceItem>();
                List<ReptPickSerials> _scanSerials = new List<ReptPickSerials>();
                _invcItems = _salesDAL.GetAllSaleDocumentItemList(_com, _pc, "INV", _invcNo, "A");
                _userSeqNo = GET_SEQNUM_FOR_INVOICE("DO", _com, _invcNo, 0);
                _scanSerials = _inventoryDAL.GetLocationStockBalance(_com, _loc, 1);

                foreach (ReptPickSerials item in _scanSerials)
                {
                    if (item.Tus_itm_cd == null || string.IsNullOrEmpty(item.Tus_itm_cd))
                    {
                        _scanSerials.Remove(item);
                    }
                }

                var _listexcelSerials = from list01 in _scanSerials
                                        join list02 in _batchList
                                        on list01.Tus_ser_1 equals list02.Tui_pic_itm_cd
                                        where list01.Tus_ser_1 == list02.Tui_pic_itm_cd && list01.Tus_itm_cd == list02.Tui_req_itm_cd
                                        select list01;

                _scanSerials = new List<ReptPickSerials>();
                _scanSerials = _listexcelSerials.ToList();

                var _listSerials = from list1 in _scanSerials
                                   join list2 in _invcItems
                                   on list1.Tus_itm_cd equals list2.Sad_itm_cd
                                   where list1.Tus_itm_cd == list2.Sad_itm_cd &&
                                   list1.Tus_itm_stus == list2.Sad_itm_stus
                                   select list1;
                _scanSerials = _listSerials.ToList();

                if (_scanSerials.Count <= 0)
                {
                    _errFound = -99;
                    _err = "Serial(s) not found!";
                    return _errFound;
                }

                string _errMoreScan = "";
                var iItems = from p in _invcItems
                             group p by new { p.Sad_itm_cd, p.Sad_itm_stus } into q
                             select new { itemcode = q.Key.Sad_itm_cd, itemstatus = q.Key.Sad_itm_stus, qty = q.Sum(p => p.Sad_qty) - q.Sum(p => p.Sad_do_qty) };
                foreach (var _p in iItems)
                {

                    var _result = _scanSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(g => new { g.Key.Tus_itm_cd, g.Key.Tus_itm_stus, qty = g.Sum(p => p.Tus_qty) }).Where(a => a.Tus_itm_cd == _p.itemcode.ToString() && a.Tus_itm_stus == _p.itemstatus.ToString() && a.qty > _p.qty);
                    foreach (var prodCount in _result)
                    {
                        _errFound = -99;
                        _errMoreScan = _errMoreScan + "item code - " + _p.itemcode + " | item status - " + _p.itemstatus + ". (Invoice qty - " + _p.qty + "; Scan qty - " + prodCount.qty + ")\n";
                    }

                }

                if (_errFound == -99)
                {
                    _err = "Scanning qty more than the invoice qty for the, \n" + _errMoreScan;
                    return _errFound;
                }

                var iItems1 = from p in _invcItems
                              group p by new { p.Sad_itm_line, p.Sad_itm_cd, p.Sad_itm_stus } into q
                              select new { itemline = q.Key.Sad_itm_line, itemcode = q.Key.Sad_itm_cd, itemstatus = q.Key.Sad_itm_stus, qty = q.Sum(p => p.Sad_qty) - q.Sum(p => p.Sad_do_qty) };
                foreach (var _p in iItems1)
                {
                    _scanSerials.Where(y => y.Tus_itm_cd == _p.itemcode && y.Tus_itm_stus == _p.itemstatus).ToList().ForEach(x => x.Tus_base_itm_line = _p.itemline);
                }

                foreach (ReptPickSerials _s in _scanSerials)
                {
                    _s.Tus_cre_by = _user;
                    _s.Tus_usrseq_no = _userSeqNo;
                    _s.Tus_base_doc_no = _invcNo;
                    SaveAllScanSerials(_s, null);
                    //_inventoryDAL.ConnectionOpen();
                    //_inventoryDAL.UpdateBOCSerialPick(_com, _loc, _s.Tus_new_remarks, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_ser_1, _user, -1);
                }

                _err = _errString;
                return 1;
            }
            catch (Exception ex)
            {
                _err = "ERROR : " + ex.Message.ToString();
                //_inventoryDAL.TransactionRollback();
                return -99;
            }
        }

        #endregion

        //Tharaka 2014-08-19
        public List<InventoryAdhocHeader> Get_fixedAssetTransfer_approval(string user, string com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_fixedAssetTransfer_approval(user, com);
        }

        //tharaka 2014-08-19
        public List<InventoryAdhocDetail> GetAdhocdet_List(string _ref, string com, string location)
        {
            // chnged | Fixed asset transfer approval | Show serial num
            _inventoryDAL = new InventoryDAL();
            List<InventoryAdhocDetail> oInventoryAdhocDetails = new List<InventoryAdhocDetail>();
            oInventoryAdhocDetails = _inventoryDAL.GetAdhocdet_List(_ref);

            for (int i = 0; i < oInventoryAdhocDetails.Count; i++)
            {
                ReptPickSerials o = new ReptPickSerials();
                o = _inventoryDAL.Get_all_details_on_serialID(com, location, null, oInventoryAdhocDetails[i].Iadd_claim_itm, oInventoryAdhocDetails[i].Iadd_anal4);
                oInventoryAdhocDetails[i].Iadd_anal5 = o.Tus_ser_1;
                oInventoryAdhocDetails[i].Iadd_coll_ser2 = o.Tus_ser_2;
            }
            return oInventoryAdhocDetails;
        }

        //Tharaka 2014-08-20
        public int FiexdAssettransferApprovalSave(List<InventoryAdhocDetail> odetails, string comapany, string userID, InventoryAdhocHeader Header, int status)
        {
            try
            {
                int effect = 0;
                int lineNum = 0;

                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();

                List<InventoryAdhocDetail> OInventoryAdhocDetailS = new List<InventoryAdhocDetail>();
                OInventoryAdhocDetailS = _inventoryDAL.GetAdhocdet_List(Header.Iadh_ref_no);
                lineNum = OInventoryAdhocDetailS.Max(x => x.Iadd_line);
                for (int i = 0; i < odetails.Count; i++)
                {
                    MasterItem oMasterItem = _inventoryDAL.GetAllItems(comapany, odetails[i].Iadd_claim_itm)[0];

                    if (oMasterItem.Mi_is_ser1 == 0)
                    {
                        odetails[i].Iadd_anal4 = Convert.ToInt32(_inventoryDAL.GetNextSerialNum(comapany, Header.Iadh_loc, odetails[i].Iadd_claim_itm, oMasterItem.Mi_itm_stus));
                    }
                    odetails[i].Iadd_anal2 = oMasterItem.Mi_model;
                    odetails[i].Iadd_anal3 = oMasterItem.Mi_shortdesc;
                    odetails[i].Iadd_line = lineNum + 1;
                    odetails[i].Iadd_stus = status;

                    _inventoryDAL.ConnectionOpen();
                    effect += _inventoryDAL.Save_AdhocDetail(odetails[i]);
                }
                _inventoryDAL.Update_Adhoc_Header(odetails[0].Iadd_seq, status, userID, DateTime.Now, string.Empty, DateTime.Now, Header.Iadh_adj_no);
                _inventoryDAL.TransactionCommit();

                return effect;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        //Tharaka 2014-08-22
        public bool IsApprovedRequestAvailable(string _company, string _location, string _type, string _document)
        {
            bool _isOk = false;
            _inventoryDAL = new InventoryDAL();
            DataTable _tbl = _inventoryDAL.CheckRequestAvailability(_company, _location, _type, _document);
            if (_tbl != null && _tbl.Rows.Count > 0)
            {
                DataRow[] drs = _tbl.Select("grah_app_stus = 'A'");
                if (drs.Length > 0)
                {
                    _isOk = true;
                }
            }
            return _isOk;
        }

        //Tharaka 2014-11-21
        public Int16 ADJMinus_Service(InventoryDAL inventoryDAL, ReptCommonDAL inventoryRepDAL, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            Int16 effect = 0;
            //try
            //{
            _inventoryRepDAL = inventoryRepDAL;
            _inventoryDAL = inventoryDAL;

            effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

            effect = 1;
            //}
            //catch (Exception err)
            //{
            //    effect = -1;
            //    _docNo = "ERROR : " + err.Message.ToString();
            //    _inventoryRepDAL.TransactionRollback();
            //    _inventoryDAL.TransactionRollback();
            //}
            return effect;
        }
        //kapila 21/8/2015
        public Int32 SaveAODOut_Service(InventoryDAL _invDAL, ReptCommonDAL _invRepDAL, GeneralDAL _genDAL, string _toCompany, string _requestNo, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, bool _isGRAN, bool _isGRNFromDIN)
        {
            string _salesDocument = string.Empty;
            string _inventoryDocument = string.Empty;
            Int32 _effect = 0;
            string _tempSalesDoc = "";
            string _tempInventoryDoc = "";
            string _genInvDoc = "";
            string _genSalDoc = "";
            string _message = string.Empty;

            string _trlocation = _inventoryHeader.Ith_loc;
            try
            {
                _inventoryDAL = _invDAL;
                //   _salesDAL = new SalesDAL();
                _inventoryRepDAL = _invRepDAL;
                _generalDAL = _genDAL;
                //_ScmCommonDAL = new SCMCommonDAL();
                //   _FMSinventoryDAL = _fmsInvDAL;

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                //_salesDAL.ConnectionOpen();
                //_salesDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //_FMSinventoryDAL.ConnectionOpen();
                //_FMSinventoryDAL.BeginTransaction();
                var _document = (from _doc in _reptPickSerials select _doc.Tus_new_remarks).Distinct();
                bool _isInvalidManualDocType = false;
                if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_1)) if (_inventoryHeader.Ith_anal_1 == "1") _isInvalidManualDocType = true; else _isInvalidManualDocType = false;
                bool _isManualSelect = _inventoryHeader.Ith_is_manual;
                foreach (string _documentType in _document)
                {
                    var _serialList = (from _doc in _reptPickSerials where _doc.Tus_new_remarks == _documentType select _doc).ToList();
                    Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                    _inventoryHeader.Ith_seq_no = UserSeqNo;
                    _inventoryHeader.Ith_doc_no = Convert.ToString(UserSeqNo);
                    if (_documentType == "AOD-OUT")
                    {
                        MasterLocation _loc = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc);
                        bool _isOtherLocAutoIn = false;
                        if (_loc.Ml_auto_ain && _loc.Ml_anal1 == "SCM2") _isOtherLocAutoIn = true;
                        string _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
                        if (_isGRAN && _isGRNFromDIN == false)
                        {
                            List<ReptPickSerials> _statuschangelist = _serialList.Where(x => x.Tus_itm_stus != x.Tus_new_status).ToList();
                            _serialList.RemoveAll(x => x.Tus_itm_stus != x.Tus_new_status);
                            InventoryHeader _minusHeader = _inventoryHeader;

                            _minusHeader.Ith_cate_tp = "NOR"; _minusHeader.Ith_is_manual = false;
                            _minusHeader.Ith_stus = "A"; _minusHeader.Ith_direct = false;
                            _minusHeader.Ith_doc_tp = "ADJ"; _minusHeader.Ith_sub_tp = "STUS";
                            _minusHeader.Ith_entry_tp = "STUS"; _minusHeader.Ith_direct = false;
                            InventoryHeader _plusHeader = _inventoryHeader;
                            _plusHeader.Ith_cate_tp = "NOR"; _plusHeader.Ith_is_manual = false;
                            _plusHeader.Ith_stus = "A"; _plusHeader.Ith_direct = true;
                            _plusHeader.Ith_doc_tp = "ADJ"; _plusHeader.Ith_sub_tp = "STUS";
                            _plusHeader.Ith_entry_tp = "STUS"; _plusHeader.Ith_direct = true;
                            MasterAutoNumber _minusAuto = new MasterAutoNumber();
                            _minusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _minusAuto.Aut_cate_tp = "LOC"; _minusAuto.Aut_direction = null;
                            _minusAuto.Aut_modify_dt = null; _minusAuto.Aut_moduleid = "ADJ";
                            _minusAuto.Aut_number = 0; _minusAuto.Aut_start_char = "ADJ";
                            _minusAuto.Aut_year = null; MasterAutoNumber _plusAuto = new MasterAutoNumber();
                            _plusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _plusAuto.Aut_cate_tp = "LOC"; _plusAuto.Aut_direction = null;
                            _plusAuto.Aut_modify_dt = null; _plusAuto.Aut_moduleid = "ADJ";
                            _plusAuto.Aut_number = 0; _plusAuto.Aut_start_char = "ADJ";
                            _plusAuto.Aut_year = null; string _minusDoc = string.Empty;
                            string _plusDoc = string.Empty;
                            if (_statuschangelist != null && _statuschangelist.Count > 0) InventoryStatusChangeCommon(_minusHeader, _plusHeader, _statuschangelist, _reptPickSerialsSub, _minusAuto, _plusAuto, out _minusDoc, out _plusDoc);
                            if (!string.IsNullOrEmpty(_minusDoc))
                            { _tempInventoryDoc = _minusDoc + "," + _plusDoc; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
                            _tempInventoryDoc = string.Empty;
                            List<ReptPickSerials> _AdjPlusSerialList = new List<ReptPickSerials>();
                            foreach (ReptPickSerials _one in _statuschangelist)
                            {
                                string _serial = _one.Tus_ser_1; string _item = _one.Tus_itm_cd;
                                Int64 _serialId = _one.Tus_ser_id; MasterItem msitem = new MasterItem();
                                msitem = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _item);
                                if (msitem.Mi_is_ser1 == 1 || msitem.Mi_is_ser1 == 0)
                                { ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, string.Empty, _item, Convert.ToInt32(_serialId)); _AdjPlusSerialList.Add(_reptPickSerial_); }
                                else
                                {
                                    ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                    _reptPickSerial_.Tus_com = _inventoryHeader.Ith_com; _reptPickSerial_.Tus_base_doc_no = _inventoryHeader.Ith_oth_docno;
                                    _reptPickSerial_.Tus_base_itm_line = _one.Tus_base_itm_line;
                                    _reptPickSerial_.Tus_bin = _defbin; _reptPickSerial_.Tus_cre_by = _inventoryHeader.Ith_cre_by;
                                    _reptPickSerial_.Tus_cre_dt = DateTime.Now; _reptPickSerial_.Tus_cross_batchline = 0; _reptPickSerial_.Tus_cross_itemline = 0;
                                    _reptPickSerial_.Tus_cross_seqno = 0; _reptPickSerial_.Tus_cross_serline = 0; _reptPickSerial_.Tus_doc_dt = _inventoryHeader.Ith_doc_date;
                                    _reptPickSerial_.Tus_doc_no = "N/A"; _reptPickSerial_.Tus_exist_grncom = "N/A"; _reptPickSerial_.Tus_isapp = 1;
                                    _reptPickSerial_.Tus_iscovernote = 1; _reptPickSerial_.Tus_itm_brand = msitem.Mi_brand; _reptPickSerial_.Tus_itm_cd = _item;
                                    _reptPickSerial_.Tus_itm_desc = msitem.Mi_longdesc; _reptPickSerial_.Tus_itm_line = 0; _reptPickSerial_.Tus_itm_model = msitem.Mi_model;
                                    _reptPickSerial_.Tus_itm_stus = _one.Tus_itm_stus; _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc; _reptPickSerial_.Tus_new_status = _one.Tus_new_status;
                                    _reptPickSerial_.Tus_qty = _one.Tus_qty; _reptPickSerial_.Tus_ser_1 = "N/A"; _reptPickSerial_.Tus_ser_2 = "N/A";
                                    _reptPickSerial_.Tus_ser_id = 0; _reptPickSerial_.Tus_ser_line = 0; _reptPickSerial_.Tus_session_id = _inventoryHeader.Ith_session_id;
                                    _reptPickSerial_.Tus_unit_cost = 0; _reptPickSerial_.Tus_unit_price = 0; _reptPickSerial_.Tus_usrseq_no = 1;
                                    _reptPickSerial_.Tus_warr_no = "N/A"; _reptPickSerial_.Tus_warr_period = 0; _reptPickSerial_.Tus_new_remarks = "AOD-OUT";
                                    _AdjPlusSerialList.Add(_reptPickSerial_);
                                }
                            }
                            if (_serialList != null) if (_serialList.Count > 0) _AdjPlusSerialList.AddRange(_serialList);
                            _serialList = _AdjPlusSerialList;
                        }
                        _inventoryHeader.Ith_doc_tp = "AOD"; _inventoryAuto.Aut_moduleid = "AOD"; _inventoryAuto.Aut_start_char = "AOD";
                        _inventoryAuto.Aut_direction = 0;
                        if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "AOD") _inventoryHeader.Ith_anal_1 = "0";
                        string _aodoutno = string.Empty;
                        _inventoryHeader.Ith_direct = false;
                        _inventoryHeader.Ith_seq_no = 0;
                        _inventoryHeader.Ith_is_manual = _isManualSelect;
                        Int16 effect = SaveOutwardScanSerial(_inventoryHeader, _serialList, _reptPickSerialsSub, null, false);
                        effect = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _aodoutno);
                        var _lst = (from n in _reptPickSerials group n by new { n.Tus_itm_cd, n.Tus_base_doc_no } into r select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_base_doc_no = r.Key.Tus_base_doc_no, Tus_qty = r.Sum(p => p.Tus_qty) }).ToList();
                        foreach (var s in _lst)
                        { string _item = s.Tus_itm_cd; decimal _qty = s.Tus_qty; string _requestno = s.Tus_base_doc_no; _inventoryDAL.UpdateRequestItem(_requestno, _item, _qty); }
                        if (!string.IsNullOrEmpty(_aodoutno))
                        { _tempInventoryDoc = _aodoutno; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
                        _tempInventoryDoc = string.Empty;
                        if (_isOtherLocAutoIn)
                        {
                            string _otherloc = _inventoryHeader.Ith_loc;
                            _inventoryHeader.Ith_loc = _inventoryHeader.Ith_oth_loc; _inventoryHeader.Ith_oth_loc = _otherloc;
                            _inventoryHeader.Ith_oth_docno = _aodoutno; _inventoryHeader.Ith_direct = true;
                            _defbin = _inventoryDAL.GetDefaultBinCode(_toCompany, _inventoryHeader.Ith_loc);
                            MasterAutoNumber _aodinAuto = new MasterAutoNumber(); _aodinAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _aodinAuto.Aut_cate_tp = "LOC"; _aodinAuto.Aut_direction = 1;
                            _aodinAuto.Aut_modify_dt = null; _aodinAuto.Aut_year = _inventoryHeader.Ith_doc_date.Date.Year; _aodinAuto.Aut_moduleid = "AOD";
                            _aodinAuto.Aut_start_char = "AOD"; List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_serialList, _inventoryHeader, _defbin);
                            _inventoryHeader.Ith_seq_no = 0; SaveInwardScanSerial(_inventoryHeader, _aodinserial, _reptPickSerialsSub);
                            string _aodInNo = string.Empty; effect = UpdateInventoryAutoNumber(_inventoryHeader, _aodinAuto, "+", out _aodInNo);
                            if (!string.IsNullOrEmpty(_aodoutno))
                            { _tempInventoryDoc = _aodInNo; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
                            _tempInventoryDoc = string.Empty;
                        }
                        _effect = 1;
                        _inventoryHeader.Ith_is_manual = _isManualSelect;
                        ////if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true) _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                    }

                    if (_documentType == "NON")
                    { _effect = -1; break; }
                    if (_effect == -1)
                    { break; }
                    if (!string.IsNullOrEmpty(_tempInventoryDoc)) if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc;
                    if (!string.IsNullOrEmpty(_tempSalesDoc)) if (string.IsNullOrEmpty(_genSalDoc)) _genSalDoc = _tempSalesDoc; else _genSalDoc += "," + _tempInventoryDoc;
                }
                if (_effect != -1)
                {
                    if (!string.IsNullOrEmpty(_inventoryHeader.Ith_oth_docno))
                    {
                        var _byItemStatus = from l in _reptPickSerials group l by new { l.Tus_itm_cd, l.Tus_itm_stus, l.Tus_base_doc_no } into item select new { Tus_itm_cd = item.Key.Tus_itm_cd, Tus_itm_stus = item.Key.Tus_itm_stus, Tus_base_doc_no = item.Key.Tus_base_doc_no, Tus_qty = item.Sum(p => p.Tus_qty) };
                        if (_byItemStatus != null)
                            if (_byItemStatus.Count() > 0)
                            {
                                foreach (var p in _byItemStatus)
                                {
                                    string _requestno = p.Tus_base_doc_no;
                                    string _company = _inventoryHeader.Ith_com;
                                    string _location = _trlocation;
                                    string _itemcode = p.Tus_itm_cd;
                                    string _itemstatus = p.Tus_itm_stus;
                                    decimal _qty = p.Tus_qty;
                                    string _docstatus = "F";
                                    string _user = _inventoryHeader.Ith_cre_by;
                                    _inventoryDAL.UpdateRequestStatus(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user);
                                }
                                var _docs = _byItemStatus.Select(x => x.Tus_base_doc_no).Distinct();
                                if (_docs != null) if (_docs.Count() > 0) foreach (string _request in _docs) _inventoryDAL.UpdateRequestHeader(_request.Trim(), _inventoryHeader.Ith_cre_by);
                            }
                    }
                    foreach (int seqno in _reptPickSerials.Select(x => x.Tus_usrseq_no).Distinct().ToList()) _inventoryRepDAL.DeleteTempPickObjs(seqno);
                }
                _effect = 1;
                if (_effect != -1)
                {
                    _inventoryDAL.TransactionCommit();
                    //    _salesDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    //    _FMSinventoryDAL.TransactionCommit();
                }
                else
                {
                    //    _genInvDoc = string.Empty;
                    //    _genSalDoc = string.Empty;
                    //    _effect = -1;
                    _inventoryDAL.TransactionRollback();
                    //    _salesDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    //    _FMSinventoryDAL.TransactionRollback();
                }
            }
            catch (Exception ex)
            {
                //    _message = ex.Message;
                //    _genInvDoc = string.Empty;
                //    _genSalDoc = string.Empty;
                //    _effect = -1;
                _inventoryDAL.TransactionRollback();
                //    _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                //    _FMSinventoryDAL.TransactionRollback();
            }
            //_genMessage = string.IsNullOrEmpty(_message) ? _genMessage : _message;
            //_genInventoryDocument = _genInvDoc;
            //_genSalesDocument = _genSalDoc;
            return _effect;
        }

        //Tharaka 2014-11-21
        public Int16 ADJPluss_Service(InventoryDAL inventoryDAL, ReptCommonDAL inventoryRepDAL, SCMCommonDAL ScmCommonDAL, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            Int16 effect = 0;
            //try
            {
                _inventoryRepDAL = inventoryRepDAL;
                _inventoryDAL = inventoryDAL;
                _ScmCommonDAL = ScmCommonDAL;
                List<ReptPickSerials> _unAssembaleLst = null;
                // ADDED bY Nadeeka 07-05-2015
                //#region Validation check duplicate serial(s)
                //_inventoryDAL.ConnectionOpen();
                //_generalDAL.ConnectionOpen();

                //MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                //bool _isCheckLocAge = false;
                //DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
                //if (_dtloctp.Rows.Count > 0)
                //{
                //    if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;
                //}

                //StringBuilder _build = new StringBuilder();
                //foreach (ReptPickSerials _srl in _reptPickSerials)
                //{
                //    DataTable _byid = _inventoryDAL.CheckSerialByID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_ser_id);
                //    DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                //    if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));

                //    MasterItem _mIt = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, _srl.Tus_itm_cd);
                //    if (_mIt.Mi_itm_stus.Contains("R"))
                //    {
                //        if (_unAssembaleLst == null) _unAssembaleLst = new List<ReptPickSerials>();
                //        _srl.Tus_new_status = _mIt.Mi_fgitm_cd;
                //        DataTable _fcost = _inventoryDAL.GetFinishGoodCost(_mIt.Mi_fgitm_cd);
                //        decimal _cost = 0;
                //        if (_fcost != null && _fcost.Rows.Count > 0) _cost = _fcost.Rows[0].Field<decimal>("ASM_COST");
                //        _srl.Tus_serial_id = Convert.ToString(_cost);
                //        _unAssembaleLst.Add(_srl);
                //    }

                //    if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                //    {
                //        if (_isCheckLocAge == true)
                //        {
                //            if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                //            {
                //                _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                //                _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                //                _srl.Tus_isownmrn = 0;
                //            }
                //            //Check MRN
                //            //DataTable _dtLastAOD = _inventoryDAL.GetPerviousAODInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_ser_id);
                //            //if (_dtLastAOD.Rows.Count > 0)
                //            //{
                //            //    _srl.Tus_isownmrn = Convert.ToInt32(_dtLastAOD.Rows[0]["ITS_ISOWNMRN"].ToString());
                //            //    break;
                //            //}
                //            //else
                //            //{
                //            //    _srl.Tus_isownmrn = 0;
                //            //}

                //        }
                //        else
                //        {
                //            if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                //            {
                //                if (_srl.Tus_ageloc != _inventoryMovementHeader.Ith_loc)
                //                {
                //                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                //                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                //                    //Check MRN
                //                    if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                //                    { _srl.Tus_isownmrn = 1; }
                //                    else
                //                    { _srl.Tus_isownmrn = 0; }
                //                }
                //            }
                //            else
                //            {
                //                _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                //                _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                //                //Check MRN
                //                if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                //                { _srl.Tus_isownmrn = 1; }
                //                else
                //                { _srl.Tus_isownmrn = 0; }
                //            }
                //        }
                //    }
                //    else
                //    {
                //        _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                //        _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                //        _srl.Tus_isownmrn = 0;
                //    }
                //}
                //if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                //{
                //    _docNo = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString(); effect = -1;
                //    _inventoryDAL.ConnectionClose();
                //    return effect;
                //}

                //_inventoryDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //#endregion

                effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                if (effect== -2)
                {

                    throw new System.ArgumentException("DUPLICATE_SERIALS_FOUND", "please Check Again");
                    

                }
                effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                //if (!(_inventoryMovementHeader.Ith_entry_tp.Equals("CANB") || _inventoryMovementHeader.Ith_entry_tp.Equals("SPLT")))
                if (!(_inventoryMovementHeader.Ith_entry_tp == "CANB" || _inventoryMovementHeader.Ith_entry_tp == "SPLT")) //Sanjeewa 2016-10-17
                {
                    _inventoryDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);
                }


                effect = 1;
            }
            //catch (Exception err)
            //{
            //    effect = -1;
            //    _docNo = "ERROR : " + err.Message.ToString();
            //    _inventoryRepDAL.TransactionRollback();
            //    _inventoryDAL.TransactionRollback();
            //    _ScmCommonDAL.TransactionRollback();
            //}
            return effect;
        }
        public DataTable GetAllPendingServicePurchaseOrderDataTable(PurchaseOrder _paramPurchaseOrder)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPendingServicePurchaseOrderDataTable(_paramPurchaseOrder);
        }
        public DataTable GetSerPOItemsDataTable(string _comCode, string _poNo, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerPOItemsDataTable(_comCode, _poNo, _loc);
        }
        public DataTable GetGVAlwCom(string _comCode, string _itm, Int32 _act)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetGVAlwCom(_comCode, _itm, _act);
        }

        //Tharaka 2015-05-29
        public Int16 AODReceiptWithOutTR(ReptCommonDAL _inventoryRepDALo, InventoryDAL _inventoryDALo, SCMCommonDAL _ScmCommonDALo, GeneralDAL _generalDALo, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            Int16 effect = -1;

            List<ReptPickSerials> _unAssembaleLst = null;

            //_inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();
            // ReptCommonDAL _inventoryRepDAL,InventoryDAL _inventoryDAL,SCMCommonDAL _ScmCommonDAL,GeneralDAL _generalDAL,

            _inventoryRepDAL = _inventoryRepDALo;
            _inventoryDAL = _inventoryDALo;
            _ScmCommonDAL = _ScmCommonDALo;
            _generalDAL = _generalDALo;

            #region Validation check duplicate serial(s)

            MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            bool _isCheckLocAge = false;
            DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
            if (_dtloctp.Rows.Count > 0)
            {
                if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;
            }

            StringBuilder _build = new StringBuilder();
            foreach (ReptPickSerials _srl in _reptPickSerials)
            {
                DataTable _byid = _inventoryDAL.CheckSerialByID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_ser_id);
                DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));

                MasterItem _mIt = _inventoryDAL.GetItem(_inventoryMovementHeader.Ith_com, _srl.Tus_itm_cd);
                if (_mIt.Mi_itm_stus.Contains("R"))
                {
                    if (_mIt.Mi_fgitm_cd != "N/A")
                    {
                        if (_unAssembaleLst == null) _unAssembaleLst = new List<ReptPickSerials>();
                        _srl.Tus_new_status = _mIt.Mi_fgitm_cd;
                        DataTable _fcost = _inventoryDAL.GetFinishGoodCost(_mIt.Mi_fgitm_cd);
                        decimal _cost = 0;
                        if (_fcost != null && _fcost.Rows.Count > 0) _cost = _fcost.Rows[0].Field<decimal>("ASM_COST");
                        _srl.Tus_serial_id = Convert.ToString(_cost);
                        _unAssembaleLst.Add(_srl);
                    }
                }

                if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                {
                    if (_isCheckLocAge == true)
                    {
                        if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            _srl.Tus_isownmrn = 0;
                        }
                        //Check MRN
                        //DataTable _dtLastAOD = _inventoryDAL.GetPerviousAODInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1, _srl.Tus_ser_id);
                        //if (_dtLastAOD.Rows.Count > 0)
                        //{
                        //    _srl.Tus_isownmrn = Convert.ToInt32(_dtLastAOD.Rows[0]["ITS_ISOWNMRN"].ToString());
                        //    break;
                        //}
                        //else
                        //{
                        //    _srl.Tus_isownmrn = 0;
                        //}

                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                        {
                            if (_srl.Tus_ageloc != _inventoryMovementHeader.Ith_loc)
                            {
                                _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                //Check MRN
                                if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                { _srl.Tus_isownmrn = 1; }
                                else
                                { _srl.Tus_isownmrn = 0; }
                            }
                        }
                        else
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            //Check MRN
                            if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                            { _srl.Tus_isownmrn = 1; }
                            else
                            { _srl.Tus_isownmrn = 0; }
                        }
                    }
                }
                else
                {
                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                    _srl.Tus_isownmrn = 0;
                }
            }
            if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
            {
                _docNo = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString();
                effect = -1;
                return effect;
            }
            #endregion

            //_inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();
            //_inventoryRepDAL.ConnectionOpen();
            //_inventoryRepDAL.BeginTransaction();
            //_inventoryDAL.ConnectionOpen();
            //_inventoryDAL.BeginTransaction();
            //_ScmCommonDAL.ConnectionOpen();
            //_ScmCommonDAL.BeginTransaction();

            effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
            effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
            UpdateRefDocumentSerial(_reptPickSerials, _inventoryMovementHeader.Ith_oth_docno);
            if (_unAssembaleLst != null)
            {
                MasterAutoNumber _autonoMinus = new MasterAutoNumber();
                _autonoMinus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                _autonoMinus.Aut_cate_tp = "LOC"; _autonoMinus.Aut_direction = null; _autonoMinus.Aut_modify_dt = null; _autonoMinus.Aut_moduleid = "ADJ"; _autonoMinus.Aut_number = 5; _autonoMinus.Aut_start_char = "ADJ"; _autonoMinus.Aut_year = null;
                MasterAutoNumber _autonoPlus = new MasterAutoNumber();
                _autonoPlus.Aut_cate_cd = _inventoryMovementHeader.Ith_loc;
                _autonoPlus.Aut_cate_tp = "LOC"; _autonoPlus.Aut_direction = null; _autonoPlus.Aut_modify_dt = null; _autonoPlus.Aut_moduleid = "ADJ"; _autonoPlus.Aut_number = 5; _autonoPlus.Aut_start_char = "ADJ"; _autonoPlus.Aut_year = null;
                InventoryHeader _hdrMinus = new InventoryHeader();
                _hdrMinus = _inventoryMovementHeader;
                _hdrMinus.Ith_acc_no = string.Empty;
                _hdrMinus.Ith_anal_1 = string.Empty;
                _hdrMinus.Ith_anal_2 = string.Empty;
                _hdrMinus.Ith_anal_3 = string.Empty;
                _hdrMinus.Ith_anal_4 = string.Empty;
                _hdrMinus.Ith_anal_5 = string.Empty;
                _hdrMinus.Ith_anal_6 = _inventoryMovementHeader.Ith_seq_no;
                _hdrMinus.Ith_anal_7 = 0;
                _hdrMinus.Ith_anal_8 = DateTime.MinValue;
                _hdrMinus.Ith_anal_9 = DateTime.MinValue;
                _hdrMinus.Ith_anal_10 = false;
                _hdrMinus.Ith_anal_11 = false;
                _hdrMinus.Ith_anal_12 = false;
                _hdrMinus.Ith_bus_entity = string.Empty;
                _hdrMinus.Ith_cate_tp = "STUS";
                _hdrMinus.Ith_com = _inventoryMovementHeader.Ith_com;
                _hdrMinus.Ith_com_docno = string.Empty;
                _hdrMinus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                _hdrMinus.Ith_cre_when = DateTime.Now;
                _hdrMinus.Ith_del_add1 = string.Empty;
                _hdrMinus.Ith_del_add2 = string.Empty;
                _hdrMinus.Ith_del_code = string.Empty;
                _hdrMinus.Ith_del_party = string.Empty;
                _hdrMinus.Ith_del_town = string.Empty;
                _hdrMinus.Ith_direct = false;
                _hdrMinus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                _hdrMinus.Ith_doc_no = string.Empty;
                _hdrMinus.Ith_doc_tp = "ADJ";
                _hdrMinus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                _hdrMinus.Ith_entry_no = string.Empty;
                _hdrMinus.Ith_entry_tp = "STTUS";
                _hdrMinus.Ith_git_close = true;
                _hdrMinus.Ith_git_close_date = DateTime.MinValue;
                _hdrMinus.Ith_git_close_doc = string.Empty;
                _hdrMinus.Ith_isprinted = false;
                _hdrMinus.Ith_is_manual = false;
                _hdrMinus.Ith_job_no = string.Empty;
                _hdrMinus.Ith_loading_point = string.Empty;
                _hdrMinus.Ith_loading_user = string.Empty;
                _hdrMinus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                _hdrMinus.Ith_manual_ref = string.Empty;
                _hdrMinus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                _hdrMinus.Ith_mod_when = DateTime.Now;
                _hdrMinus.Ith_noofcopies = 0;
                _hdrMinus.Ith_oth_loc = string.Empty;
                _hdrMinus.Ith_oth_docno = "N/A";
                _hdrMinus.Ith_remarks = string.Empty;
                _hdrMinus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                _hdrMinus.Ith_stus = "A";
                _hdrMinus.Ith_sub_tp = "SYS";
                _hdrMinus.Ith_vehi_no = string.Empty;
                _hdrMinus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                InventoryHeader _hdrPlus = new InventoryHeader();
                _hdrPlus.Ith_channel = _hdrMinus.Ith_channel;
                _hdrPlus.Ith_sbu = _hdrMinus.Ith_sbu;
                _hdrPlus.Ith_acc_no = string.Empty;
                _hdrPlus.Ith_anal_1 = string.Empty;
                _hdrPlus.Ith_anal_2 = string.Empty;
                _hdrPlus.Ith_anal_3 = string.Empty;
                _hdrPlus.Ith_anal_4 = string.Empty;
                _hdrPlus.Ith_anal_5 = string.Empty;
                _hdrPlus.Ith_anal_6 = 0;
                _hdrPlus.Ith_anal_7 = 0;
                _hdrPlus.Ith_anal_8 = DateTime.MinValue;
                _hdrPlus.Ith_anal_9 = DateTime.MinValue;
                _hdrPlus.Ith_anal_10 = false;
                _hdrPlus.Ith_anal_11 = false;
                _hdrPlus.Ith_anal_12 = false;
                _hdrPlus.Ith_bus_entity = string.Empty;
                _hdrPlus.Ith_cate_tp = "STTUS";
                _hdrPlus.Ith_com = _inventoryMovementHeader.Ith_com;
                _hdrPlus.Ith_com_docno = string.Empty;
                _hdrPlus.Ith_cre_by = _inventoryMovementHeader.Ith_cre_by;
                _hdrPlus.Ith_cre_when = DateTime.Now;
                _hdrPlus.Ith_del_add1 = string.Empty;
                _hdrPlus.Ith_del_add2 = string.Empty;
                _hdrPlus.Ith_del_code = string.Empty;
                _hdrPlus.Ith_del_party = string.Empty;
                _hdrPlus.Ith_del_town = string.Empty;
                _hdrPlus.Ith_direct = true;
                _hdrPlus.Ith_doc_date = _inventoryMovementHeader.Ith_doc_date;
                _hdrPlus.Ith_doc_no = string.Empty;
                _hdrPlus.Ith_doc_tp = "ADJ";
                _hdrPlus.Ith_doc_year = _inventoryMovementHeader.Ith_doc_date.Year;
                _hdrPlus.Ith_entry_no = string.Empty;
                _hdrPlus.Ith_entry_tp = "STTUS";
                _hdrPlus.Ith_git_close = true;
                _hdrPlus.Ith_git_close_date = DateTime.MinValue;
                _hdrPlus.Ith_git_close_doc = string.Empty;
                _hdrPlus.Ith_isprinted = false;
                _hdrPlus.Ith_is_manual = false;
                _hdrPlus.Ith_job_no = string.Empty;
                _hdrPlus.Ith_loading_point = string.Empty;
                _hdrPlus.Ith_loading_user = string.Empty;
                _hdrPlus.Ith_loc = _inventoryMovementHeader.Ith_loc;
                _hdrPlus.Ith_manual_ref = string.Empty;
                _hdrPlus.Ith_mod_by = _inventoryMovementHeader.Ith_cre_by;
                _hdrPlus.Ith_mod_when = DateTime.Now;
                _hdrPlus.Ith_noofcopies = 0;
                _hdrPlus.Ith_oth_loc = string.Empty;
                _hdrPlus.Ith_oth_docno = "N/A";
                _hdrPlus.Ith_remarks = string.Empty;
                _hdrPlus.Ith_session_id = _inventoryMovementHeader.Ith_session_id;
                _hdrPlus.Ith_stus = "A";
                _hdrPlus.Ith_sub_tp = "STTUS";
                _hdrPlus.Ith_vehi_no = string.Empty;
                _hdrPlus.Ith_sub_docno = _inventoryMovementHeader.Ith_oth_docno;
                string _adjm = string.Empty;
                string _adjp = string.Empty;
                List<ReptPickSerials> _UnAssLst = new List<ReptPickSerials>();
                foreach (ReptPickSerials _one in _unAssembaleLst)
                {
                    ReptPickSerials _two = _inventoryDAL.Get_all_details_on_serialID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _one.Tus_bin, _one.Tus_itm_cd, _one.Tus_ser_id);
                    if (_two != null && !string.IsNullOrEmpty(_two.Tus_com))
                    {
                        _two.Tus_new_status = _one.Tus_new_status;
                        _two.Tus_serial_id = _one.Tus_serial_id;
                        _UnAssLst.Add(_two);
                    }
                }

                InventoryAssembleToFinishGoodCommon(_hdrMinus, _hdrPlus, _UnAssLst, null, _autonoMinus, _autonoPlus, out _adjm, out _adjp);

                _docNo += "," + _adjm + "," + _adjp;
            }
            //_inventoryRepDAL.TransactionCommit();
            //_inventoryDAL.TransactionCommit();
            //_ScmCommonDAL.TransactionCommit();

            return effect;
        }

        //Rukshan 18/07/2015
        public DataTable GetRequestItems(string _Com, string _ReqType, string _ProCenter, string _Supplier, DateTime _FromDate, DateTime _ToDate, string _status, string _QType, string _QSubType, string _dateSelector)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRequestItems(_Com, _ReqType, _ProCenter, _Supplier, _FromDate, _ToDate, _status, _QType, _QSubType, _dateSelector);
        }
        //Rukshan 18/07/2015
        public DataTable GetItemsQuotation(string _Com, string _ReqType, string _SubType, string _Supplier, string _Item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemsQuotation(_Com, _ReqType, _SubType, _Supplier, _Item, _status);
        }
        //Rukshan 18/07/2015
        public DataTable GetSupplierData(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSupplierData(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Rukshan 18/07/2015
        public DataTable GetOrderStatus(string _Type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetOrderStatus(_Type);
        }
        //Rukshan 18/07/2015
        public DataTable GetOrderQutation(string _Cus, string _Type, string _Suppier)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetOrderQutation(_Cus, _Type, _Suppier);
        }
        //Rukshan 18/07/2015
        public DataTable GetSuppierItem(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSuppierItem(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Rukshan 18/07/2015
        public DataTable GetBarcodeItemByDoc(string _docNo, string _com, string _Item, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBarcodeItemByDoc(_docNo, _com, _Item, _loc);
        }

        //Tharaka 2015-08-12
        public DataTable GET_ITMSTATUS_BY_LOC_ITM(string _com, string _loc, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_ITMSTATUS_BY_LOC_ITM(_com, _loc, _item);
        }

        //Tharaka 2015-08-12
        public Int32 UPDATE_ITM_STUS(string _invoiceNo, int _lineNo, string _itemCode, string _newStatus, out string _msg)
        {
            Int32 _effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _effect = _inventoryDAL.UPDATE_ITM_STUS(_invoiceNo, _lineNo, _itemCode, _newStatus);

                _inventoryDAL.TransactionCommit();
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _msg = ex.Message;
                _effect = -1;
            }
            return _effect;
        }

        //Rukshan 2015-08-13
        public DataTable GetPurDocNo(string _initialSearchParams, DateTime _from, DateTime _To, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPurDocNo(_initialSearchParams, _from, _To, _searchCatergory, _searchText);
        }
        //Rukshan 2015-08-13
        public DataTable GetGRNDocNo(string _initialSearchParams, DateTime _from, DateTime _To, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetGRNDocNo(_initialSearchParams, _from, _To, _searchCatergory, _searchText);
        }
        //Rukshan 2015-08-13
        public DataTable GetPOItem(string _docNo, string _item, string _model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOItem(_docNo, _item, _model);
        }
        //Rukshan 2015-08-13
        public DataTable GetGRNItem(string _docNo, string _item, string _model, string _Order)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetGRNItem(_docNo, _item, _model, _Order);
        }
        //Rukshan 2015-08-13
        public Int32 SaveStockAllocate(List<MasterItemAllocate> _MasterItemAllocate, DataTable _ItemAllocate)
        {
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            if (_ItemAllocate != null)
            {


                foreach (DataRow dr in _ItemAllocate.Rows)
                {
                    MasterItemAllocate _list = new MasterItemAllocate();
                    _list.Isa_seq = Convert.ToInt32(dr[0].ToString());
                    _list.Isa_act = Convert.ToBoolean(dr[1].ToString());
                    _list.Isa_cnl_by = dr[2].ToString();
                    _list.Isa_cnl_dt = Convert.ToDateTime(dr[3].ToString());
                    _list.Isa_cnl_session_id = dr[4].ToString();

                    _effect = _inventoryDAL.DeleteStockAllocate(_list);
                }

            }
            if (_MasterItemAllocate != null)
            {
                foreach (MasterItemAllocate _Item in _MasterItemAllocate)
                {
                    _effect = _inventoryDAL.SaveStockAllocate(_Item);
                }
            }




            _inventoryDAL.TransactionCommit();
            return _effect;
        }
        //Rukshan 2015-08-13
        public List<MasterItemAllocate> GetStockAllocate(string _Doc, string _ICode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetStockAllocate(_Doc, _ICode);
        }
        //Rukshan 2015-08-18
        public DataTable getDocDetByDocNo(string _company, string _location, string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getDocDetByDocNo(_company, _location, _docno);
        }
        //Rukshan 2015-08-13
        public Int32 DeleteStockAllocate(List<MasterItemAllocate> _MasterItemAllocate)
        {
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            foreach (MasterItemAllocate _Item in _MasterItemAllocate)
            {
                _effect = _inventoryDAL.DeleteStockAllocate(_Item);
            }
            _inventoryDAL.TransactionCommit();
            return _effect;
        }

        //Tharaka 2015-05-24
        public Int32 SavePurchaseOrderNew(PurchaseOrder _NewPO, List<PurchaseOrderDetail> _NewPOItems, List<PurchaseOrderDelivery> _NewPODel, MasterAutoNumber _masterAutoNumber, out string docno, out string err)
        {
            Int32 _effect = 0;
            docno = string.Empty;
            err = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _effect = _inventoryDAL.SaveNewPO(_NewPO);

                if (_NewPOItems != null)
                {
                    foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                    {
                        _effect = _inventoryDAL.SaveNewPOItem(_POItems);
                    }
                }

                if (_NewPODel != null)
                {
                    foreach (PurchaseOrderDelivery _DelItems in _NewPODel)
                    {
                        _effect = _inventoryDAL.SaveNewPODel(_DelItems);
                    }
                }

                bool _isSCMImpPo = false;//Add by Chamal 24/06/2013
                if (_NewPO.Poh_tp == "I" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "IMPORTS" && _NewPO.Poh_job_no == "IMPORTS_PO")
                {
                    _isSCMImpPo = true;
                }
                //Add by Rukshan 20/05/2016
                if (_NewPO.Poh_tp == "I" && _NewPO.Poh_sub_tp == "T" && _NewPO.Poh_ope == "IMPORTS" && _NewPO.Poh_job_no == "IMPORTS_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "LOCAL_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "QUO_PO")
                {
                    _isSCMImpPo = true;
                }

                if (_isSCMImpPo == false)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);
                    _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                    _inventoryDAL.UpdatePODocNo(_NewPO.Poh_seq_no, _documentNo);
                    docno = _documentNo;
                }
                else
                {
                    docno = _NewPO.Poh_doc_no;
                }

                _inventoryDAL.TransactionCommit();
                err = string.Empty;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                err = ex.Message;
                _effect = -1;
            }
            return _effect;
        }

        #region PDA Sahan

        //Sahan 25/Aug/2015
        public DataTable GetTempPickDocTypes(Int32 p_tdt_direct)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTempPickDocTypes(p_tdt_direct);
        }

        //Sahan 25/Aug/2015
        public DataTable LoadBinCode(string p_ibn_com_cd, string p_ibn_loc_cd, string itemcode = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadBinCode(p_ibn_com_cd, p_ibn_loc_cd, itemcode);
        }

        //Sahan 25/Aug/2015
        public DataTable GetItemData(string p_mi_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemData(p_mi_cd);
        }

        //Sahan 25/Aug/2015
        public DataTable GetItemSerialAvailability(string p_ins_itm_cd, string p_ins_ser_1)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemSerialAvailability(p_ins_itm_cd, p_ins_ser_1);
        }

        //Sahan 25/Aug/2015
        public DataTable IsItemUOMDecimalAllow(string p_msu_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsItemUOMDecimalAllow(p_msu_cd);
        }

        //Sahan 26/Aug/2015
        public DataTable IsDocAvailable(string p_tuh_usr_com, string p_tuh_doc_no, string p_tuh_usr_loc, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsDocAvailable(p_tuh_usr_com, p_tuh_doc_no, p_tuh_usr_loc, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }

        //Sahan 26/Aug/2015
        public Int32 SavePickedItemSerialsPDA(ReptPickSerials _scanserNew)
        {
            Int32 _eff = 0;
            _inventoryDAL = new InventoryDAL();

            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _eff = _inventoryDAL.SavePickedItemSerialsPDA(_scanserNew);

            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();

            return _eff;
        }

        //Sahan 26/Aug/2015
        public DataTable IsSavedSerialAvailable(string p_tus_itm_cd, string p_tus_ser_1, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay, string userid = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsSavedSerialAvailable(p_tus_itm_cd, p_tus_ser_1, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay, userid, doctp);
        }

        //Sahan 26/Aug/2015
        public DataTable LoadSavedSerials(string p_tus_doc_no, string p_tus_com, string p_tus_loc, string p_tus_itm_cd, string p_tus_bin, string p_tus_itm_stus, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadSavedSerials(p_tus_doc_no, p_tus_com, p_tus_loc, p_tus_itm_cd, p_tus_bin, p_tus_itm_stus, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }

        //Randima 30/11/2016
        public List<ReptPickSerials> LoadSavedSerialsList(string p_tus_doc_no, string p_tus_com, string p_tus_loc, string p_tus_itm_cd, string p_tus_bin, string p_tus_itm_stus, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadSavedSerialsList(p_tus_doc_no, p_tus_com, p_tus_loc, p_tus_itm_cd, p_tus_bin, p_tus_itm_stus, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }

        //Sahan 27/Aug/2015
        public Int32 DeleteItemsWIthSerials(ReptPickSerials _serials)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.DeleteItemsWIthSerials(_serials);
        }

        //Sahan 27/Aug/2015
        public Int32 UpdatePickItem(ReptPickItems _items)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            int effect = _inventoryDAL.UpdatePickItem(_items);
            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();
            return effect;


        }
        //Sahan 23/Aug/2016
        public Int32 UpdatePickItemStockInOut(ReptPickItems _items)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdatePickItemStockInOut(_items);
        }
        //Sahan 27/Aug/2015
        public DataTable LoadCurrentRowNumber(Int32 p_tui_usrseq_no, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadCurrentRowNumber(p_tui_usrseq_no, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }

        //Sahan 28/Aug/2015
        public Int32 UpdatePickItemLine(ReptPickItems _itemsLines)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            int effect = _inventoryDAL.UpdatePickItemLine(_itemsLines);
            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();
            return effect;
        }

        //Sahan 28/Aug/2015
        public DataTable GetItemQty(Int32 p_tui_usrseq_no, string p_tus_doc_no, string p_tus_itm_cd, string p_tus_itm_stus, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay, string userid = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemQty(p_tui_usrseq_no, p_tus_doc_no, p_tus_itm_cd, p_tus_itm_stus, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay, userid, doctp);
        }

        //Sahan 28/Aug/2015
        public Int32 UpdateQty(ReptPickItems _itemsqty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateQty(_itemsqty);
        }

        //Sahan 31/Aug/2015
        public DataTable GetItemTotalQty(Int32 p_tui_usrseq_no, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemTotalQty(p_tui_usrseq_no, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }

        //Sahan 01/Sep/2015
        public Int32 UpdateSerializedItemsQty(ReptPickSerials _serialsQty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateSerializedItemsQty(_serialsQty);
        }

        //Sahan 02/Sep/2015
        public DataTable LoadCurrentJobs(string p_tuh_usr_com, string p_tuh_usr_loc, string p_tuh_usr_id, string p_tuh_doc_tp, Int32 p_tuh_direct, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadCurrentJobs(p_tuh_usr_com, p_tuh_usr_loc, p_tuh_usr_id, p_tuh_doc_tp, p_tuh_direct, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }

        //Sahan 03/Sep/2015
        public DataTable CheckCurrentStockBalance(string p_inl_com, string p_inl_loc, string p_inl_itm_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckCurrentStockBalance(p_inl_com, p_inl_loc, p_inl_itm_cd);
        }

        //Sahan 04/Sep/2015
        public DataTable LoadDistinctBins(string _company, string _location, string _itemcode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadDistinctBins(_company, _location, _itemcode);
        }

        //Sahan 04/Sep/2015
        public DataTable LoadItemStatusOfBins(string _company, string _location, string _itemcode, string _bin, string docno = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemStatusOfBins(_company, _location, _itemcode, _bin, docno, doctp);
        }

        //Sahan 04/Sep/2015
        public DataTable LoadItemQtyOfBins(string _company, string _location, string _itemcode, string _bin, string _itemstatus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemQtyOfBins(_company, _location, _itemcode, _bin, _itemstatus);
        }

        //Sahan 04/Sep/2015
        public DataTable CheckItemHasExpiryDate(string _itemcode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckItemHasExpiryDate(_itemcode);
        }

        //Sahan 04/Sep/2015
        public DataTable LoadItemExpDate(string _company, string _location, string _itemcode, string _bin)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemExpDate(_company, _location, _itemcode, _bin);
        }

        //Sahan 04/Sep/2015
        public DataTable LoadAllSerials(string _company, string _location, string _bin, string _Itemcode, string _itemstatus, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadAllSerials(_company, _location, _bin, _Itemcode, _itemstatus, _serial);
        }

        //Sahan 07/Sep/2015
        public DataTable CalculateScannedQty(string _itemcode, string _itemstatus, string _company, string _location, string _bin, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay, string docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CalculateScannedQty(_itemcode, _itemstatus, _company, _location, _bin, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay, docno);
        }

        #endregion

        //Rukshan 25/Aug/2015
        public DataTable GetAllPendingPOrder(PurchaseOrder _paramPurchaseOrder)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPendingPOrder(_paramPurchaseOrder);
        }
        public DataTable GetAllPendingPOrderBank(PurchaseOrder _paramPurchaseOrder)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllPendingPOrderBank(_paramPurchaseOrder);
        }
        //Rukshan 25/Aug/2015
        public DataTable GetPurchaseOrdersByType(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPurchaseOrdersByType(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Rukshan 25/Aug/2015
        public DataTable Get_Item_Infor(string _Item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Item_Infor(_Item);

        }
        //Rukshan 31/Aug/2015
        public DataTable getSubitemComponent(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getSubitemComponent(_item);
        }
        //Rukshan 01/Sep/2015
        public Int32 UpdateAllScanSubSerials(List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerialsSub != null) _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            _inventoryRepDAL.TransactionCommit();
            return effect;
        }
        //Rukshan 01/Sep/2015
        public DataTable GetSubSerials(string _ICode, int _Useq, string _MSerial)
        {
            DataTable _result;
            _inventoryRepDAL = new ReptCommonDAL();
            _result = _inventoryRepDAL.GetSubSerials(_ICode, _Useq, _MSerial);
            return _result;
        }
        //Rukshan 01/Sep/2015
        public DataTable CheckitemPreFix(string _ICode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckitemPreFix(_ICode);
        }
        //Rukshan 01/Sep/2015
        public DataTable GetitemPreFix(string _item, string _Com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetitemPreFix(_item, _Com);
        }
        //Rukshan 02/Sep/2015
        public string Get_defaultBinCDWeb(string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_defaultBinCDWeb(company, location);
        }
        //Rukshan 09/sep/2015
        public DataTable GetSupplierSerial(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSupplierSerial(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Pemil 11/Sep/2015
        public DataTable GET_INR_SER(string com, string loc, string bin, string itm_cd, string itm_stus, string ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_SER(com, loc, bin, itm_cd, itm_stus, ser);
        }
        //Code By Rukshan on 12/Sep/2015
        public List<ReptPickSerials> Get_Int_Ser_Temp(string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Ser_Temp(_docNo);
        }
        //Code By Rukshan on 12/Sep/2015
        public InventoryHeader Get_Int_Hdr_Temp(string DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Hdr_Temp(DocNo);
        }

        //Sahan 18/Sep/2015
        public DataTable GetAllPendingInventoryOutwardsWeb(InventoryHeader _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            DataTable _table1 = _inventoryDAL.GetAllPendingInventoryOutwardsWeb(_inventoryRequest);
            DataTable _table2 = _inventoryDAL.GetAllPendingInventoryOutwardsSCMWeb(_inventoryRequest);
            MasterLocation _mstLoc = new MasterLocation();
            _mstLoc = _generalDAL.GetLocationInfor(_inventoryRequest.Ith_oth_com, _inventoryRequest.Ith_oth_loc);
            if (_mstLoc.Ml_loc_tp != "WH")
            {
                if (_table1.Rows.Count > 0)
                {
                    foreach (DataRow dr in _table1.Rows)
                    {
                        if (dr["ITH_SUB_TP"].ToString() == "SERVICE")
                            dr.Delete(); dr.AcceptChanges();
                    }
                }
            }
            _table1.Merge(_table2);
            return _table1;
        }

        //Sahan 19/Sep/2015
        public Int32 UpdateStockInStatus(InventoryHeader InvHdr)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateStockInStatus(InvHdr);
        }

        //Sahan 22 Sep 2015
        public DataTable GetTempDocHeaderData(string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTempDocHeaderData(_docNo);
        }

        //Sahan 22 Sep 2015
        public DataTable GetDocHeaderData(string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDocHeaderData(_docNo);
        }
        //Darshana 22 sep 2015
        public DataTable Get_Sup_Forcons(string _com, string _item, string _itemstatus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Sup_Forcons(_com, _item, _itemstatus);
        }

        //Rukshan 30 sep 2015
        public List<PurchaseReq> GetPoReqLogDetails(int _PO)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPoReqLogDetails(_PO);
        }
        //Rukshan 30 sep 2015
        public int Update_PORequestBalanceQty(List<InventoryRequestItem> _Request)
        {
            Int32 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            if (_Request != null)
            {
                foreach (InventoryRequestItem _req in _Request)
                {
                    effect = _inventoryDAL.Update_PORequestBalanceQty(_req);
                }
            }


            _inventoryDAL.TransactionCommit();
            return effect;
        }
        //Rukshan 30 sep 2015
        public DataTable GetPurchaseOrders(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _fromDate, DateTime _toDate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPurchaseOrdersByDate(_initialSearchParams, _searchCatergory, _searchText, _fromDate, _toDate);
        }
        //Rukshan 2 Oct 2015
        public List<InventoryBatchN> Get_Int_Batch_Temp(string _seqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Batch_Temp(_seqNo);
        }
        //Rukshan 2 Oct 2015
        public DataTable GetPoQty(string _PONo, int _lineNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPoQty(_PONo, _lineNo);
        }
        //Rukshan 5 Oct 2015
        public DataTable CheckItemTo_PRN(string _Com, string _Loc, string _Item, string _status, string _Doc, string _Supplier)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckItemTo_PRN(_Com, _Loc, _Item, _status, _Doc, _Supplier);
        }

        //Sahan 05/Oct/2015
        public DataTable CheckReqUseInPO(string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckReqUseInPO(_docNo);
        }
        //Rukshan 5 Oct 2015
        public DataTable Get_A_F_PoReq(string _Com, string _Loc, string _Reqno, DateTime _From, DateTime _To)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_A_F_PoReq(_Com, _Loc, _Reqno, _From, _To);
        }
        //Rukshan 08 Oct 2015
        public int UpdatePoRequest_Iss(string _Com, string _Rno, int _ItemLine, string _icode, decimal _qty)
        {
            Int32 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            effect = _inventoryDAL.UpdatePoRequest_Iss(_Com, _Rno, _ItemLine, _icode, _qty);
            _inventoryDAL.TransactionCommit();
            return effect;
        }

        //Tharaka 2015-10-13
        public List<ComboBoxObject> GET_REQ_TYPES(Int32 option, Int32 value)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REQ_TYPES(option, value);
        }

        //Tharaka 2015-10-13
        public List<InventoryRequest> GET_REQUEST_FOR_DISPATCH(String Com, String Route, String MainCate, String Item, String ReqType, String Loc, String SubCate, String Model, DateTime Date, DateTime ToDate, int type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REQUEST_FOR_DISPATCH(Com, Route, MainCate, Item, ReqType, Loc, SubCate, Model, Date, ToDate, type);
        }
        public List<InventoryRequest> GET_REQUEST_FOR_DISPATCHNEW(String Com, String Route, String MainCate, String Item, String ReqType, String Loc, String SubCate, String Model, DateTime Date, DateTime ToDate, int type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REQUEST_FOR_DISPATCHNEW(Com, Route, MainCate, Item, ReqType, Loc, SubCate, Model, Date, ToDate, type);
        }
        //Tharaka 2015-10-13
        public List<InventoryRequestItem> GET_INT_REQ_ITM_BY_SEQ(Int32 seq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQ_ITM_BY_SEQ(seq);
        }

        //Tharaka 2015-10-13
        public List<InventoryLocation> GET_LOC_ITEMS_FOR_DISPATCH(String Com, String UserID, String Item, String Stus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_LOC_ITEMS_FOR_DISPATCH(Com, UserID, Item, Stus);
        }
        //Written By Rukshan on 15 Oct 2015
        public List<InventoryBatchN> Get_Int_Batch(string _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Int_Batch(_doc);

        }

        public string GetInvDocType(string _DocNo)
        {
            string X = "";
            _inventoryDAL = new InventoryDAL();
            DataTable dt_doctp = _inventoryDAL.GetInvDocType(_DocNo);
            if (dt_doctp.Rows.Count > 0)
            {
                foreach (DataRow drow in dt_doctp.Rows)
                {
                    X = drow["ith_doc_tp"].ToString();
                }
            }

            return X;
        }

        //Sahan 16/Oct/2015
        public Int32 UpdatePRNQty(InventoryRequestItem _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdatePRNQty(_item);
        }

        //Tharaka 2015-10-16
        public Int32 SaveDispatchPlan(List<InventoryRequest> oHeaders, List<InventoryRequestItem> oRequesItems, String SelectedDocumnt, bool isBatchApprove, bool isPatialApprove, bool PDA, string warehousecom, string warehouseloc, string loadingbay, out string docNums, out string err, string isresno, bool isappall)
        {
            Int32 result = 0;
            err = string.Empty;
            docNums = string.Empty;
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();

                //Check Balance == INR_LOC free Qty / If Res , Res Qty
                //Update INR_LOC balance Qtys / Res Qty
                //If all taken set based header F
                string _errro = "";
                bool _resUpdateErr = false;

                foreach (InventoryRequest oHeader in oHeaders)
                {
                    if (oHeader.InventoryRequestItemList != null)
                    {
                        if (oHeader.InventoryRequestItemList.Count == 0)
                        {
                            continue;
                        }
                    }
                    MasterAutoNumber _mastAutoNo = oHeader._mastAutoNo;

                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = oHeader.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    result = _inventoryDAL.UpdateAutoNumber(_mastAutoNo);

                    Int32 SeqNumber = 0;
                    oHeader.Itr_req_no = _documentNo;
                    docNums = string.IsNullOrEmpty(docNums) ? _documentNo : docNums + ", " + _documentNo;
                    SeqNumber = _inventoryDAL.SaveInventoryRequestDispachPlan(oHeader);
                    List<InventoryRequestItem> _invReqItmList = new List<InventoryRequestItem>();
                    _invReqItmList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(SelectedDocumnt);
                    decimal _qtyBeforSave = 0;
                    foreach (InventoryRequestItem _inventoryRequestItem in oHeader.InventoryRequestItemList)
                    {
                        #region Save data
                        List<InventoryLocation> oLocItems = _inventoryDAL.GET_LOC_ITEMS_FOR_DISPATCH(oHeader.Itr_com, oHeader.Itr_cre_by, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_itm_stus);
                        if (oLocItems != null && oLocItems.Count > 0 && oLocItems.FindAll(x => x.Inl_loc == _inventoryRequestItem.Itri_loc).Count > 0)
                        {
                            InventoryLocation oLocItem = oLocItems.Find(x => x.Inl_loc == _inventoryRequestItem.Itri_loc);
                            if (oLocItem != null)
                            {
                                if (_inventoryRequestItem.Itri_res_no != null && !string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no) && _inventoryRequestItem.Itri_res_no != "N/A")
                                {
                                    //Reserved   
                                    if (_inventoryRequestItem.Itri_app_qty > oLocItem.Inl_res_qty)
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _custServiceDAL.TransactionRollback();
                                        err = "Inventory mismatch. Location : " + _inventoryRequestItem.Itri_loc + " Item : " + _inventoryRequestItem.Itri_itm_cd;
                                        return result;
                                    }
                                }
                                else
                                {
                                    //Not Reserved
                                    if (_inventoryRequestItem.Itri_app_qty > oLocItem.Inl_free_qty)
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _custServiceDAL.TransactionRollback();
                                        err = "Inventory mismatch. Location : " + _inventoryRequestItem.Itri_loc + " Item : " + _inventoryRequestItem.Itri_itm_cd;
                                        return result;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result = -1;
                            err = "Inventory mismatch. Location : " + _inventoryRequestItem.Itri_loc;
                            _inventoryDAL.TransactionRollback();
                            _custServiceDAL.TransactionRollback();
                            return result;
                        }
                        //Update balance
                        //if (isresno == "TRUE")
                        //Modify by Lakshan issue fix all item not reserved in request 28 Oct 2016
                        bool _isAllReadyReserve = true;
                        if (string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                        {
                            _isAllReadyReserve = false;
                        }
                        if (_inventoryRequestItem.Itri_res_no == "N/A")
                        {
                            _isAllReadyReserve = false;
                        }
                        if (_isAllReadyReserve)
                        {
                            result = _inventoryDAL.UpdateRequestItem2(_inventoryRequestItem.Itr_req_no, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_app_qty, _inventoryRequestItem.Itri_base_req_line);
                            if (oHeader.TMP_IS_RES_UPDATE)
                            {
                                if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                {
                                    if (_inventoryRequestItem.Itri_res_no != "N/A")
                                    {
                                        #region update reservation data 08 Nov 2016
                                        _inrReqDataTmp = _inventoryDAL.GET_INT_REQ_DATA(new InventoryRequest() { Itr_req_no = oHeader.Itr_ref }).FirstOrDefault();
                                        int _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                        {
                                            IRL_CURT_COM = oHeader.Itr_com,
                                            IRL_CURT_LOC = oHeader.Itr_loc,
                                            IRL_ORIG_DOC_TP = _inrReqDataTmp.Itr_tp,
                                            IRL_ORIG_DOC_NO = oHeader.Itr_ref,
                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                            IRL_CURT_DOC_TP = oHeader.Itr_tp,
                                            IRL_CURT_DOC_NO = _documentNo,
                                            IRL_CURT_DOC_DT = oHeader.Itr_dt,
                                            IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                            IRL_MOD_BY_NEW = oHeader.Itr_cre_by,
                                            IRL_MOD_SESSION = oHeader.Itr_session_id,
                                            IRL_MOD_DT = DateTime.Now,
                                            IRL_CRE_BY = oHeader.Itr_cre_by,
                                            IRL_CRE_DT = DateTime.Now,
                                            IRL_CRE_SESSION = oHeader.Itr_session_id,
                                            IRL_RES_QTY = _inventoryRequestItem.Itri_qty,
                                            IRL_RES_WP = 1
                                        }, 0, _inventoryDAL, out _errro);
                                        if (_res <= 0)
                                        {
                                            _resUpdateErr = true;
                                        }
                                        #endregion
                                    }
                                }
                            }
                        }
                        else
                        {
                            result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _inventoryRequestItem.Itri_loc, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_itm_stus, oHeader.Itr_cre_by, _inventoryRequestItem.Itri_app_qty);
                            if (result > 0)
                            {
                                result = _inventoryDAL.UpdateRequestItem2(_inventoryRequestItem.Itr_req_no, _inventoryRequestItem.Itri_app_qty, _inventoryRequestItem.Itri_base_req_line);
                                if (result < 0)
                                {
                                    _inventoryDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    result = -1;
                                    err = "Can't Continue Process ";
                                }
                            }
                            else
                            {
                                _inventoryDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                result = -1;
                                err = "Free QTY Not Updated Document Details : " + _inventoryRequestItem.Itri_loc + "---" + _inventoryRequestItem.Itri_itm_cd + "---" + _inventoryRequestItem.Itri_itm_stus + "----" + _inventoryRequestItem.Itri_app_qty;
                                return result;
                            }

                        }

                        //Check and update balance for the request
                        decimal balanace = oRequesItems.Sum(x => x.Itri_bqty);
                        if (balanace == 0)
                        {
                            result = _custServiceDAL.Update_ReqHeaderStatus("F", oHeader.Itr_cre_by, oHeader.Itr_com, SelectedDocumnt);
                        }

                        MasterItem _is = _inventoryDAL.GetItem(oHeader.Itr_com, _inventoryRequestItem.Itri_itm_cd);
                        _inventoryRequestItem.MasterItem = _is;
                        _inventoryRequestItem.Itri_seq_no = SeqNumber;
                        result = _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        #endregion
                    }
                    #region PDA
                    if (PDA == true)
                    {
                        Int32 user_seq_num = GET_SEQNUM_FOR_INVOICE(oHeader.Itr_tp, oHeader.Itr_com, _documentNo, 1);
                        if (user_seq_num == -1)
                        {

                            user_seq_num = Generate_new_seq_num(oHeader.Itr_cre_by, "MRNA", 1, oHeader.Itr_com);
                            ReptPickHeader _inputReptPickHeader = new ReptPickHeader();

                            _inputReptPickHeader.Tuh_usrseq_no = Convert.ToInt32(user_seq_num);
                            _inputReptPickHeader.Tuh_usr_id = oHeader.Itr_cre_by;
                            _inputReptPickHeader.Tuh_usr_com = oHeader.Itr_com;
                            _inputReptPickHeader.Tuh_session_id = oHeader.Itr_session_id;
                            _inputReptPickHeader.Tuh_doc_tp = oHeader.Itr_tp;
                            _inputReptPickHeader.Tuh_direct = false;
                            _inputReptPickHeader.Tuh_ischek_itmstus = false;
                            _inputReptPickHeader.Tuh_ischek_simitm = false;
                            _inputReptPickHeader.Tuh_ischek_reqqty = false;
                            _inputReptPickHeader.Tuh_doc_no = _documentNo;
                            _inputReptPickHeader.Tuh_usr_loc = oHeader.Itr_loc;
                            _inputReptPickHeader.Tuh_wh_com = warehousecom;
                            _inputReptPickHeader.Tuh_wh_loc = warehouseloc;
                            _inputReptPickHeader.Tuh_load_bay = loadingbay;

                            result = SavePickedHeader(_inputReptPickHeader);

                            if (result == -1)
                            {
                                err = "PDA error";
                                _inventoryDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                return result;
                            }
                        }
                        else
                        {
                            ReptPickHeader _inputReptPickHeader = new ReptPickHeader();

                            _inputReptPickHeader.Tuh_doc_no = _documentNo;
                            _inputReptPickHeader.Tuh_doc_tp = oHeader.Itr_tp;
                            _inputReptPickHeader.Tuh_direct = false;
                            _inputReptPickHeader.Tuh_usr_com = oHeader.Itr_com;
                            _inputReptPickHeader.Tuh_usr_loc = oHeader.Itr_loc;
                            _inputReptPickHeader.Tuh_wh_com = warehousecom;
                            _inputReptPickHeader.Tuh_wh_loc = warehouseloc;
                            _inputReptPickHeader.Tuh_load_bay = loadingbay;
                            _inputReptPickHeader.Tuh_usrseq_no = Convert.ToInt32(user_seq_num);
                            result = UpdatePickHeader(_inputReptPickHeader);

                            if (result == -1)
                            {
                                err = "PDA error";
                                _inventoryDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                return result;
                            }
                        }
                        DataTable dtchkitm = CheckItemsScannedStatus(user_seq_num);

                        if (dtchkitm.Rows.Count > 0)
                        {
                            err = "Document has already sent to PDA or has alread processed";
                            _inventoryDAL.TransactionRollback();
                            _custServiceDAL.TransactionRollback();
                            return result;
                        }
                        List<InventoryRequestItem> _inventoryRequestItemPDA = new List<InventoryRequestItem>();
                        _inventoryRequestItemPDA = _inventoryDAL.GET_INT_REQ_ITM_BY_SEQ(oHeader.Itr_seq_no);
                        List<ReptPickItems> _saveonly = new List<ReptPickItems>();
                        foreach (InventoryRequestItem _row in oHeader.InventoryRequestItemList)
                        {

                            //AddItem(_item, _cost, null, null, user_seq_num.ToString(), null);

                            ReptPickItems _reptitm = new ReptPickItems();
                            _reptitm.Tui_usrseq_no = Convert.ToInt32(user_seq_num);
                            _reptitm.Tui_req_itm_qty = _row.Itri_bqty;
                            _reptitm.Tui_req_itm_cd = _row.Itri_itm_cd;
                            // _reptitm.Tui_req_itm_stus = _addedItem.Itri_itm_stus;
                            // _reptitm.Tui_pic_itm_cd = Convert.ToString(_addedItem.Itri_line_no);
                            // _reptitm.Tui_pic_itm_stus = Convert.ToString(_addedItem.Itri_unit_price);
                            _reptitm.Tui_pic_itm_qty = _row.Itri_bqty;
                            _saveonly.Add(_reptitm);

                            result = SavePickedItems(_saveonly);
                            if (result == -1)
                            {
                                err = "PDA Item error";
                                _inventoryDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                return result;
                            }
                        }


                    }
                    #endregion
                    #region add by lakshan finished the document if balance not available 27 Oct 2016
                    if (isappall == false)
                    {
                        _invReqItmList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(SelectedDocumnt);
                    }
                    else
                    {
                        _invReqItmList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(oHeader.Itr_ref);
                    }

                    decimal _ReqBal = _invReqItmList.Sum(x => x.Itri_bqty);
                    if (_ReqBal == 0)
                    {
                        if (isappall == false)
                        {
                            result = _custServiceDAL.Update_ReqHeaderStatus("F", oHeader.Itr_cre_by, oHeader.Itr_com, SelectedDocumnt);
                        }
                        else
                        {
                            result = _custServiceDAL.Update_ReqHeaderStatus("F", oHeader.Itr_cre_by, oHeader.Itr_com, oHeader.Itr_ref);
                        }

                    }
                    // decimal _netUpdateBalance = _qtyBeforSave - _ReqBal;
                    #endregion
                }
                #region validate items not available in reference 07 Dec 2016
                InventoryRequest _invReq = new InventoryRequest();
                List<InventoryRequestItem> _invReqItmRef = new List<InventoryRequestItem>();
                List<InventoryRequestItem> _invReqItmReq = new List<InventoryRequestItem>();
                foreach (InventoryRequest oHeader in oHeaders)
                {
                    if (oHeader.TMP_Val_Itms)
                    {
                        _invReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = oHeader.Itr_req_no }).FirstOrDefault();
                        _invReqItmReq = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(oHeader.Itr_req_no);
                        _invReqItmRef = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_invReq.Itr_ref);
                        foreach (var _invReqItm in _invReqItmReq)
                        {
                            _invReqItm.Tmp_itm_err_ava = true;
                            var _refData = _invReqItmRef.Where(c => c.Itri_itm_cd == _invReqItm.Itri_itm_cd &&
                                //c.Itri_itm_stus == _invReqItm.Itri_itm_stus && 
                                c.Itri_line_no == _invReqItm.Itri_base_req_line
                                //&& c.Itri_bqty >= _invReqItm.Itri_bqty
                                ).ToList();
                            if (_refData != null)
                            {
                                if (_refData.Count == 1)
                                {
                                    _invReqItm.Tmp_itm_err_ava = false;
                                }
                            }
                        }
                        var _errroAva = _invReqItmReq.Where(c => c.Tmp_itm_err_ava == true).ToList();
                        if (_errroAva != null)
                        {
                            if (_errroAva.Count > 0)
                            {
                                oHeader.TMP_ERR_AVA = true;
                            }
                        }
                    }
                }
                var _hdrErrAva = oHeaders.Where(c => c.TMP_ERR_AVA == true).ToList();
                if (_hdrErrAva != null)
                {
                    if (_hdrErrAva.Count > 0)
                    {
                        _inventoryDAL.TransactionRollback();
                        _custServiceDAL.TransactionRollback();
                        result = -1;
                        err = "Invalid item found in reference data.. ";
                        return result;
                    }
                }
                #endregion
                if (_resUpdateErr)
                {
                    _inventoryDAL.TransactionRollback();
                    _custServiceDAL.TransactionRollback();
                    result = -1;
                    err = _errro;
                    return result;
                }
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                result = -1;
                err = ex.Message;
            }

            //Added By Udaya 04.10.2017
            bool _isSend = false;
            HpSystemParameters _getSystemParameter = new HpSystemParameters();
            _getSystemParameter = _salesDAL.GetSystemParameter("COM", "AAL", "EMAILDP", DateTime.Now);
            if (_getSystemParameter != null)
            {
                if (_getSystemParameter.Hsy_val == 1)
                {
                    _isSend = true;
                }
            }
            if (_isSend)
            {
                InventoryRequest _invReq = new InventoryRequest();
                DataTable _tbl = new DataTable();
                foreach (InventoryRequest oHeaderEmail in oHeaders)
                {
                    if (oHeaderEmail.Itr_tp == "SOA")
                    {
                        List<MsgInformation> _mail = _generalDAL.GetMsgInformation(oHeaderEmail.Itr_com, "", "DPPLAN_AP");
                        if (_mail != null)
                        {
                            if (_mail.Count > 0)
                            {
                                foreach (MsgInformation _info in _mail)
                                {
                                    SmtpClient smtpClient = new SmtpClient();
                                    MailMessage message = new MailMessage();

                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message.From = fromAddress;

                                    string _email = "";

                                    _email = " Dear Sir/Madam, \n\n" + _email;
                                    _email += " SO # : " + oHeaderEmail.Itr_ref + " \n";
                                    _invReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = oHeaderEmail.Itr_ref, Itr_tp = "SO" }).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(_invReq.Itr_bus_code))
                                    {
                                        _tbl = _salesDAL.SearchCustomer2(oHeaderEmail.Itr_com, _invReq.Itr_bus_code);
                                        if (_tbl.Rows.Count > 0)
                                        {
                                            _email += "\n Customer Code : " + _invReq.Itr_bus_code + ", " + "Customer name : " + _tbl.Rows[0].Field<string>("mbe_name") + " \n";
                                        }
                                    }
                                    _email += "\n Dispatch plan approve for the location : " + oHeaderEmail.Itr_loc + " \n";
                                    _email += "\n SOA # : " + oHeaderEmail.Itr_req_no + ", " + " SOA Date : " + oHeaderEmail.Itr_dt.ToShortDateString() + "\n";

                                    //_email += _generalDAL.GetMailFooterMsg();
                                    _email += " \n Thank You, \n ** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** \n ** IT Department **";
                                    message.To.Add(_info.Mmi_email);
                                    message.Subject = "Dispatch Plan Approval";
                                    message.IsBodyHtml = false;
                                    message.Body = _email;
                                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                    smtpClient.Send(message);
                                }
                            }
                        }
                    }
                    else
                    {
                        string _userMail = string.Empty;
                        DataTable _creUsr = _salesDAL.GetinvUser(oHeaderEmail.Itr_cre_by);
                        _invReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = oHeaderEmail.Itr_ref }).FirstOrDefault();
                        if (_creUsr.Rows.Count > 0)
                        {
                            _userMail = _creUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_EMAIL");
                        }
                        if (_userMail != null && _userMail != string.Empty)
                        {
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            string _email = "";

                            _email = " Dear Sir/Madam, \n\n" + _email;
                            _email += " MRN # : " + _invReq.Itr_ref + " \n";

                            if (!string.IsNullOrEmpty(_invReq.Itr_bus_code))
                            {
                                _tbl = _salesDAL.SearchCustomer2(oHeaderEmail.Itr_com, _invReq.Itr_bus_code);
                                if (_tbl.Rows.Count > 0)
                                {
                                    _email += "\n Customer Code : " + _invReq.Itr_bus_code + ", " + "Customer name : " + _tbl.Rows[0].Field<string>("mbe_name") + " \n";
                                }
                            }

                            _email += "\n Dispatch plan approve for the location : " + oHeaderEmail.Itr_loc + " \n";
                            _email += "\n MRNA # : " + oHeaderEmail.Itr_req_no + ", " + " MRNA Date : " + oHeaderEmail.Itr_dt.ToShortDateString() + "\n";

                            //_email += _generalDAL.GetMailFooterMsg();
                            _email += " \n Thank You, \n ** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** \n ** IT Department **";
                            message.To.Add(_userMail);
                            message.Subject = "Dispatch Plan Approval";
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                            smtpClient.Send(message);
                        }
                    }
                }
            }
            return result;
        }

        //Written By Rukshan on 16 Oct 2015
        public List<InventoryRequest> GetMRN_Req(string _IssuesFrom, string _reTo, DateTime _Fdate, DateTime _Todate, string _type, string _searchpara, string _com, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            List<InventoryRequest> _listrequest = new List<InventoryRequest>();
            string loc = string.Empty;
            if (_searchpara == "R")
            {
                if (_reTo != "")
                {
                    DataTable _Loc = _inventoryDAL.Get_Root_Loc(_com, _reTo, null);

                    if (_Loc != null)
                    {
                        if (_Loc.Rows.Count > 0)
                        {
                            foreach (DataRow _row in _Loc.Rows)
                            {
                                //string _locreturn = _row[0].ToString();
                                //loc = _locreturn + "," + loc;
                                _inventoryRepDAL.Save_TEMP_PC_LOC(_user, _com, _IssuesFrom, _row[0].ToString());
                            }
                        }
                        else
                        {
                            return _listrequest;
                        }
                    }
                    loc = _reTo;
                    // _reTo = "";
                }

            }
            else if (_searchpara == "C")
            {
                if (_reTo != "")
                {
                    List<MasterLocation> _Loc = _inventoryDAL.GetLoactionBychannel(_reTo);

                    if (_Loc != null)
                    {
                        if (_Loc.Count > 0)
                        {

                            foreach (MasterLocation _row in _Loc)
                            {

                                _inventoryRepDAL.Save_TEMP_PC_LOC(_user, _com, _IssuesFrom, _row.Ml_loc_cd);
                                // string _locreturn = _row.Ml_loc_cd;
                                // _reTo = _locreturn + "," + _reTo;
                            }

                        }
                        else
                        {
                            return _listrequest;
                        }
                    }
                    loc = _reTo;
                    // _reTo = "";
                }
            }
            else
            {
                loc = _reTo;
                _inventoryRepDAL.Save_TEMP_PC_LOC(_user, _com, _IssuesFrom, _reTo);
            }
            _listrequest = _inventoryDAL.GetMRN_ReqWEB(_IssuesFrom, loc, _Fdate, _Todate, _type, _com, _user);
            _inventoryRepDAL.Delete_TEMP_PC_LOC(_user, _com, _IssuesFrom, "");
            _inventoryRepDAL.ConnectionClose();
            return _listrequest;
        }
        public List<InventoryRequestItem> GetMRN_Req_item(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMRN_Req_item(_reqNo);
        }

        public List<ReptPickSerials> GetTempSaveDet(string _com, string _loc, string _doc, string _user, string _outwardType, string _session, Int32 _usrSeq)
        {

            string _itemlist = string.Empty;

            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();


                List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                MasterItem _itmlist = new MasterItem();

                //Get Serialized Items
                DataTable _dt0 = new DataTable();

                _dt0 = _inventoryDAL.GetIntSerTempDetails(_doc);

                if (_dt0.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt0.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        _itmlist = _inventoryDAL.GetItem(_com, (String)_dr["ITS_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _doc;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                            _pick.Tus_bin = (String)_dr["ITS_BIN"];
                            _pick.Tus_com = _com;
                            _pick.Tus_cre_by = _user;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                            _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                            _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            _pick.Tus_doc_no = _doc;

                            if (_outwardType == "AOD")
                            {
                                _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                                _pick.Tus_ageloc = _dr["ITS_AGELOC"] == DBNull.Value ? string.Empty : (String)_dr["ITS_AGELOC"];
                                _pick.Tus_ageloc_dt = _dr["ITS_AGELOC_DT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_AGELOC_DT"];
                                if (string.IsNullOrEmpty(_dr["ITS_ISOWNMRN"].ToString()))
                                { _pick.Tus_isownmrn = 0; }
                                else
                                { _pick.Tus_isownmrn = Convert.ToInt32(_dr["ITS_ISOWNMRN"]); }

                            }
                            else
                            {
                                _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                            _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                            _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                            _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = 1;
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                            _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                            _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                            _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                            _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                            _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                            _pick.Tus_serial_id = String.Empty;
                            //_pick.Tus_session_id = _scanheaderNew.Tuh_session_id;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);

                            _pick.Tus_usrseq_no = Convert.ToInt32(_usrSeq);
                            _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                            _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);

                            _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                            _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015
                            _picklist.Add(_pick);
                            // _inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITS_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITS_ITM_CD"];
                    }
                }

                //Get None-Serialized Items
                DataTable _dt1 = new DataTable();
                DataTable _dt11 = new DataTable();
                _dt1 = _inventoryDAL.GetIntBatchTempDetailsDecimal(_doc);

                if (_dt1.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt1.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        _itmlist = _inventoryDAL.GetItem(_com, (String)_dr["ITB_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _doc;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                            _pick.Tus_bin = (String)_dr["ITB_BIN"];
                            _pick.Tus_com = _com;
                            _pick.Tus_cre_by = _user;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = 0;
                            _pick.Tus_cross_itemline = 0;
                            _pick.Tus_cross_seqno = 0;
                            _pick.Tus_cross_serline = 0;
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            _pick.Tus_doc_no = _doc;

                            if (_outwardType == "AOD-")
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;
                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }
                            else
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;

                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITB_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = 0;
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = string.Empty;
                            _pick.Tus_orig_grndt = DateTime.MinValue;
                            _pick.Tus_orig_grnno = string.Empty;
                            _pick.Tus_orig_supp = string.Empty;

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = "N/A";
                            _pick.Tus_ser_2 = string.Empty;
                            _pick.Tus_ser_3 = string.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            _pick.Tus_ser_id = 0;
                            _pick.Tus_ser_line = 0;
                            _pick.Tus_serial_id = String.Empty;
                            _pick.Tus_session_id = _session;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITB_UNIT_COST"]);

                            _pick.Tus_usrseq_no = Convert.ToInt32(_usrSeq);
                            _pick.Tus_warr_no = string.Empty;
                            _pick.Tus_warr_period = 0;
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015

                            _picklist.Add(_pick);
                            //   _inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITB_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITB_ITM_CD"];
                    }
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _tr.Complete();
                return _picklist;
            }
        }

        //darshana 20-10-2015
        public List<ReptPickSerials> GetSaveSerDet(string _com, string _loc, string _doc, string _user, string _outwardType, string _session, Int32 _usrSeq)
        {

            string _itemlist = string.Empty;

            using (TransactionScope _tr = new TransactionScope())
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();


                List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                MasterItem _itmlist = new MasterItem();

                //Get Serialized Items
                DataTable _dt0 = new DataTable();

                _dt0 = _inventoryDAL.GetIntSerDetails(_doc);

                if (_dt0.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt0.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        _itmlist = _inventoryDAL.GetItem(_com, (String)_dr["ITS_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _doc;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                            _pick.Tus_bin = (String)_dr["ITS_BIN"];
                            _pick.Tus_com = _com;
                            _pick.Tus_cre_by = _user;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                            _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                            _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            _pick.Tus_doc_no = _doc;

                            if (_outwardType == "AOD")
                            {
                                _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                                _pick.Tus_ageloc = _dr["ITS_AGELOC"] == DBNull.Value ? string.Empty : (String)_dr["ITS_AGELOC"];
                                _pick.Tus_ageloc_dt = _dr["ITS_AGELOC_DT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_AGELOC_DT"];
                                if (string.IsNullOrEmpty(_dr["ITS_ISOWNMRN"].ToString()))
                                { _pick.Tus_isownmrn = 0; }
                                else
                                { _pick.Tus_isownmrn = Convert.ToInt32(_dr["ITS_ISOWNMRN"]); }

                            }
                            else
                            {
                                _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                            _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                            _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                            _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = 1;
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                            _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                            _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                            _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                            _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                            _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                            _pick.Tus_serial_id = String.Empty;
                            //_pick.Tus_session_id = _scanheaderNew.Tuh_session_id;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);

                            _pick.Tus_usrseq_no = Convert.ToInt32(_usrSeq);
                            _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                            _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);

                            _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                            _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015
                            _picklist.Add(_pick);
                            // _inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITS_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITS_ITM_CD"];
                    }
                }

                //Get None-Serialized Items
                DataTable _dt1 = new DataTable();
                DataTable _dt11 = new DataTable();
                _dt1 = _inventoryDAL.GetIntBatchDetailsDecimal(_doc);

                if (_dt1.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt1.Rows)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        _itmlist = _inventoryDAL.GetItem(_com, (String)_dr["ITB_ITM_CD"]);
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _doc;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                            _pick.Tus_bin = (String)_dr["ITB_BIN"];
                            _pick.Tus_com = _com;
                            _pick.Tus_cre_by = _user;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = 0;
                            _pick.Tus_cross_itemline = 0;
                            _pick.Tus_cross_seqno = 0;
                            _pick.Tus_cross_serline = 0;
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            _pick.Tus_doc_no = _doc;

                            if (_outwardType == "AOD-")
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;
                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }
                            else
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;

                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITB_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = 0;
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = string.Empty;
                            _pick.Tus_orig_grndt = DateTime.MinValue;
                            _pick.Tus_orig_grnno = string.Empty;
                            _pick.Tus_orig_supp = string.Empty;

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = "N/A";
                            _pick.Tus_ser_2 = string.Empty;
                            _pick.Tus_ser_3 = string.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            _pick.Tus_ser_id = 0;
                            _pick.Tus_ser_line = 0;
                            _pick.Tus_serial_id = String.Empty;
                            _pick.Tus_session_id = _session;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITB_UNIT_COST"]);

                            _pick.Tus_usrseq_no = Convert.ToInt32(_usrSeq);
                            _pick.Tus_warr_no = string.Empty;
                            _pick.Tus_warr_period = 0;
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015

                            _picklist.Add(_pick);
                            //   _inventoryRepDAL.SavePickedItemSerials(_pick);
                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITB_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITB_ITM_CD"];
                    }
                }

                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _tr.Complete();
                return _picklist;
            }
        }

        //Sahan 05/Oct/2015
        public DataTable CheckINBIssueQty(string _company, string _loc, string _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckINBIssueQty(_company, _loc, _doc);
        }

        //Sahan 05/Oct/2015
        public Int32 UpdateCRNStatus(InventoryHeader header)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateCRNStatus(header);
        }

        //Rukshan 21/oct/2015
        public int SaveMRNRequestApprove(InventoryRequest _inventoryRequest, MasterAutoNumber _mastAutoNo, List<InventoryRequestItem> _updateRequest, DataTable _multipleshowroom, List<InventorySerialN> _serial, bool _cont,
            out string _docNo, out int _Insvalue, out string _docIntr, out string _printAppNo)
        {
            _printAppNo = "";
            int result = 0;
            _docNo = "";
            _Insvalue = 0;
            _docIntr = "";
            bool _resUpdateErr = false;
            string _errro = "";
            string _documentNo = string.Empty;
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                if (_inventoryRequest != null)
                {
                    int _res = 0;
                    int seqno = 0;
                    bool _ins = false;
                    if (_multipleshowroom != null)
                    {

                        var _showroom = _inventoryRequest.InventoryRequestItemList.GroupBy(x => new { x.Showroom }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                        foreach (var shor in _showroom)
                        {
                            var _SelectItemByshowroom = _inventoryRequest.InventoryRequestItemList.Where(x => x.Showroom == shor.Peo.Showroom).ToList();

                            _inventoryRequest.Itr_loc = shor.Peo.Showroom;
                            //if (_cont == true)
                            //{
                            //    _ins = true;
                            //}
                            //else
                            //{
                            //    _ins = Check_MRN_Item_exceed_Ins(_SelectItemByshowroom, _inventoryRequest.Itr_com, shor.Peo.Showroom, DateTime.Now.Date);
                            //}
                            //if (_ins == false)
                            //{
                            //    _docNo = "Location insurance value exceeding-" + shor.Peo.Showroom;
                            //    _Insvalue = 1;
                            //    result = -1;
                            //    _inventoryDAL.TransactionRollback();
                            //    return result;
                            //}
                            //else
                            // {
                            // foreach (DataRow _row in _multipleshowroom.Rows)
                            //  {

                            #region save

                            // foreach (InventoryRequestItem _ReqItembushw in _SelectItemByshowroom)
                            // {
                            var _scanItems = _SelectItemByshowroom.GroupBy(x => new { x.Itri_loc, x.Itri_com, x.PoType }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                            foreach (var itm in _scanItems)
                            {
                                if (itm.Peo.PoType == "Consignment")
                                {
                                    _inventoryRequest.Itr_tp = "CONSD";
                                    _mastAutoNo.Aut_moduleid = "CONSD";
                                    _mastAutoNo.Aut_start_char = "CONSD";
                                }
                                else
                                {
                                    if (itm.Peo.PoType == "Purchase")
                                    {
                                        _inventoryRequest.Itr_sub_tp = "PRQ";
                                    }
                                    else
                                    {
                                        _inventoryRequest.Itr_sub_tp = "NOR";
                                    }
                                    _inventoryRequest.Itr_tp = "REQD";
                                    _mastAutoNo.Aut_moduleid = "REQD";
                                    _mastAutoNo.Aut_start_char = "REQD";
                                    _mastAutoNo.Aut_cate_cd = shor.Peo.Showroom;
                                }

                                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                                _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                                _inventoryRequest.Itr_req_no = _documentNo;
                                _inventoryRequest.Itr_issue_from = itm.Peo.Itri_loc;
                                _inventoryRequest.Itr_issue_com = itm.Peo.Itri_com;
                                _inventoryRequest.Itr_rec_to = shor.Peo.Showroom.ToUpper().Trim();
                                result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                                seqno = 0;
                                var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_loc == itm.Peo.Itri_loc && x.Showroom == shor.Peo.Showroom && x.Itri_com == itm.Peo.Itri_com && x.PoType == itm.Peo.PoType).ToList();
                                int i = 1;
                                foreach (InventoryRequestItem _ReqItem in _SelectItem)
                                {
                                    seqno = _ReqItem.Itri_seq_no;
                                    _ReqItem.Itri_seq_no = result;
                                    _ReqItem.Itri_line_no = i;
                                    _ReqItem.Itri_app_qty = _ReqItem.Itri_bqty;
                                    _inventoryDAL.SaveInventoryRequestItem(_ReqItem);
                                    i++;
                                    if (_inventoryRequest.Temp_itr_chnl_allocation)
                                    {
                                        UpdateItemAllocationDataFIFO(_inventoryDAL, _ReqItem, _inventoryRequest);
                                    }
                                    if (_inventoryRequest.TMP_IS_RES_UPDATE)
                                    {
                                        if (!string.IsNullOrEmpty(_ReqItem.Itri_res_no))
                                        {
                                            if (_ReqItem.Itri_res_no != "N/A")
                                            {
                                                int _result = 0;
                                                #region update reservation data 08 Nov 2016
                                                if (_inventoryRequest.Itr_ref == "AD-HOC")
                                                {
                                                    INR_RES_LOG _tmpResLog = new INR_RES_LOG();
                                                    _tmpResLog.IRL_CURT_COM = _inventoryRequest.Itr_issue_com;
                                                    _tmpResLog.IRL_CURT_LOC = _inventoryRequest.Itr_issue_from;
                                                    _tmpResLog.IRL_ORIG_DOC_TP = "INV";
                                                    _tmpResLog.IRL_ORIG_DOC_NO = _ReqItem.Itri_res_no;
                                                    _tmpResLog.IRL_ORIG_DOC_DT = DateTime.Now;
                                                    _tmpResLog.IRL_CURT_DOC_TP = _inventoryRequest.Itr_tp;
                                                    _tmpResLog.IRL_CURT_DOC_NO = _documentNo;
                                                    _tmpResLog.IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt;
                                                    _tmpResLog.IRL_RES_NO = _ReqItem.Itri_res_no;
                                                    _tmpResLog.IRL_ITM_CD = _ReqItem.Itri_itm_cd;
                                                    _tmpResLog.IRL_ITM_STUS = _ReqItem.Itri_itm_stus;
                                                    _tmpResLog.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                                    _tmpResLog.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                                    _tmpResLog.IRL_MOD_DT = DateTime.Now;
                                                    _tmpResLog.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                                    _tmpResLog.IRL_CRE_DT = DateTime.Now;
                                                    _tmpResLog.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                                    _tmpResLog.IRL_RES_QTY = _ReqItem.Itri_qty;
                                                    _result = ReservationLogDataUpdateCancel(_tmpResLog, 0, _inventoryDAL, out _errro);
                                                }
                                                else
                                                {
                                                    _inrReqDataTmp = _inventoryDAL.GET_INT_REQ_DATA(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_ref }).FirstOrDefault();
                                                    _result = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                {
                                                    IRL_CURT_COM = _inventoryRequest.Itr_issue_com,
                                                    IRL_CURT_LOC = _inventoryRequest.Itr_issue_from,
                                                    IRL_ORIG_DOC_TP = _inventoryRequest.Itr_sub_tp,
                                                    IRL_ORIG_DOC_NO = _inrReqDataTmp.Itr_req_no,
                                                    IRL_ORIG_DOC_DT = DateTime.Now,

                                                    IRL_CURT_DOC_TP = _inventoryRequest.Itr_sub_tp,
                                                    IRL_CURT_DOC_NO = _documentNo,
                                                    IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                    IRL_RES_NO = _ReqItem.Itri_res_no,
                                                    IRL_ITM_CD = _ReqItem.Itri_itm_cd,
                                                    IRL_ITM_STUS = _ReqItem.Itri_itm_stus,
                                                    IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by,
                                                    IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                    IRL_MOD_DT = DateTime.Now,
                                                    IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                    IRL_CRE_DT = DateTime.Now,
                                                    IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                    IRL_RES_QTY = _ReqItem.Itri_qty
                                                }, 0, _inventoryDAL, out _errro);
                                                }
                                                if (_result <= 0)
                                                {
                                                    _resUpdateErr = true;
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                }
                                //foreach (InventoryRequestItem _ReqItem1 in _SelectItem)
                                //{
                                //    _inventoryDAL.Update_MRN_Bqty(seqno, _ReqItem1.Itri_itm_cd, _ReqItem1.Itri_line_no, _ReqItem1.Itri_app_qty);
                                //}
                                _docNo = itm.Peo.PoType + ":" + _documentNo + "|" + _docNo;
                                _printAppNo = string.IsNullOrEmpty(_printAppNo) ? _documentNo : _printAppNo + "|" + _documentNo;
                                //var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(y=>y.)

                                // }
                            }
                            #endregion
                            //}
                            // }

                        }
                    }
                    else
                    {

                        #region save
                        var _scanItems = _inventoryRequest.InventoryRequestItemList.GroupBy(x => new { x.Itri_loc, x.Itri_com, x.PoType, x.Temp_is_allocation_err }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                        foreach (var itm in _scanItems)
                        {
                            if (itm.Peo.Temp_is_allocation_err == 0)
                            {
                                if (itm.Peo.PoType == "Consignment")
                                {
                                    _inventoryRequest.Itr_tp = "CONSD";
                                    _mastAutoNo.Aut_moduleid = "CONSD";
                                    _mastAutoNo.Aut_start_char = "CONSD";
                                }
                                else
                                {
                                    if (itm.Peo.PoType == "Purchase")
                                    {
                                        _inventoryRequest.Itr_sub_tp = "PRQ";
                                    }
                                    else
                                    {
                                        if (_inventoryRequest.Itr_sub_tp != "PRO")
                                        {
                                            if (string.IsNullOrEmpty(_inventoryRequest.Itr_sub_tp))
                                            {
                                                _inventoryRequest.Itr_sub_tp = "NOR";
                                            }
                                        }
                                    }
                                    _inventoryRequest.Itr_tp = "REQD";
                                    _mastAutoNo.Aut_moduleid = "REQD";
                                    _mastAutoNo.Aut_start_char = "REQD";
                                }
                                if (_inventoryRequest.Itr_sub_tp == "PRO")
                                {
                                    InventoryRequest _tmpReqData = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_ref }).FirstOrDefault();
                                    if (_tmpReqData != null)
                                    {
                                        _inventoryRequest.Itr_job_no = _tmpReqData.Itr_job_no;
                                    }
                                }
                                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                                _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                                _inventoryRequest.Itr_req_no = _documentNo;
                                _inventoryRequest.Itr_issue_from = itm.Peo.Itri_loc.ToUpper();
                                _inventoryRequest.Itr_issue_com = itm.Peo.Itri_com.ToUpper();
                                result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                                seqno = 0;
                                var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_loc == itm.Peo.Itri_loc && x.Itri_com == itm.Peo.Itri_com && x.PoType == itm.Peo.PoType).ToList();
                                int i = 1;

                                foreach (InventoryRequestItem _ReqItem in _SelectItem)
                                {
                                    if (_ReqItem.Itri_mitm_cd == "")
                                    {
                                        _ReqItem.Itri_mitm_cd = _ReqItem.Itri_itm_cd;
                                    }
                                    if (_ReqItem.Itri_mitm_stus == "")
                                    {
                                        if (_ReqItem.Itri_itm_stus == "") _ReqItem.Itri_itm_stus = "GOD";
                                        _ReqItem.Itri_mitm_stus = _ReqItem.Itri_itm_stus;
                                    }
                                    seqno = _ReqItem.Itri_seq_no;
                                    _ReqItem.Itri_seq_no = result;
                                    _ReqItem.Itri_line_no = i;
                                    _ReqItem.Itri_app_qty = _ReqItem.Itri_bqty;
                                    _inventoryDAL.SaveInventoryRequestItem(_ReqItem);
                                    i++;
                                    if (_inventoryRequest.Temp_itr_chnl_allocation)
                                    {
                                        UpdateItemAllocationDataFIFO(_inventoryDAL, _ReqItem, _inventoryRequest);
                                    }
                                    if (_inventoryRequest.TMP_IS_RES_UPDATE)
                                    {
                                        if (!string.IsNullOrEmpty(_ReqItem.Itri_res_no))
                                        {
                                            if (_ReqItem.Itri_res_no != "N/A")
                                            {
                                                #region update reservation data 08 Nov 2016
                                                _inrReqDataTmp = _inventoryDAL.GET_INT_REQ_DATA(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_ref }).FirstOrDefault();
                                                int _result = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                                {
                                                    IRL_CURT_COM = _inventoryRequest.Itr_issue_com,
                                                    IRL_CURT_LOC = _inventoryRequest.Itr_issue_from,
                                                    IRL_ORIG_DOC_TP = _inrReqDataTmp.Itr_tp,
                                                    IRL_ORIG_DOC_NO = _inventoryRequest.Itr_ref,
                                                    IRL_ORIG_DOC_DT = DateTime.Now,

                                                    IRL_CURT_DOC_TP = _inventoryRequest.Itr_tp,
                                                    IRL_CURT_DOC_NO = _documentNo,
                                                    IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                    IRL_RES_NO = _ReqItem.Itri_res_no,
                                                    IRL_ITM_CD = _ReqItem.Itri_itm_cd,
                                                    IRL_ITM_STUS = _ReqItem.Itri_itm_stus,
                                                    IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                                    IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                    IRL_MOD_DT = DateTime.Now,
                                                    IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                    IRL_CRE_DT = DateTime.Now,
                                                    IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                    IRL_RES_QTY = _ReqItem.Itri_qty
                                                }, 0, _inventoryDAL, out _errro);
                                                if (_res <= 0)
                                                {
                                                    _resUpdateErr = true;
                                                }
                                                if (_result==-1)
                                                {
                                                    result = -1;
                                                    _docNo = "Reservation Log Not Updated!";
                                                    _inventoryDAL.TransactionRollback();
                                                    return -1;
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                }
                                //foreach (InventoryRequestItem _ReqItem1 in _SelectItem)
                                //{
                                //    _inventoryDAL.Update_MRN_Bqty(seqno, _ReqItem1.Itri_itm_cd, _ReqItem1.Itri_line_no, _ReqItem1.Itri_app_qty);
                                //}
                                _docNo = itm.Peo.PoType + ":" + _documentNo + "|" + _docNo;
                                _printAppNo = string.IsNullOrEmpty(_printAppNo) ? _documentNo : _printAppNo + "|" + _documentNo;
                                //var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(y=>y.)
                            }
                        }
                        #endregion

                        #region update serial and Intertransfer not
                        if (_serial != null)
                        {
                            if (_serial.Count > 0)
                            {
                                var _preloc = _serial.GroupBy(x => new { x.Ins_loc, x.TmpIsDamgnot }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                                foreach (var shor in _preloc)
                                {
                                    //TmpIsDamgnot =1-DIN doc,0 no doc generat,2-INTR doc
                                    if ((shor.Peo.TmpIsDamgnot == 2) || (shor.Peo.TmpIsDamgnot == 1))
                                    {
                                        MasterAutoNumber masterAuto = new MasterAutoNumber();
                                        masterAuto.Aut_cate_tp = "LOC";
                                        //masterAuto.Aut_cate_cd = shor.Peo.Ins_loc;
                                        masterAuto.Aut_direction = null;
                                        masterAuto.Aut_modify_dt = null;
                                        masterAuto.Aut_number = 0;
                                        masterAuto.Aut_year = null;
                                        if (shor.Peo.TmpIsDamgnot == 2)
                                        {
                                            masterAuto.Aut_cate_cd = _inventoryRequest.Itr_loc;
                                            masterAuto.Aut_moduleid = "INTR";
                                            masterAuto.Aut_start_char = "INTR";
                                            _inventoryRequest.Itr_tp = "INTR";
                                        }
                                        else if (shor.Peo.TmpIsDamgnot == 1)
                                        {
                                            masterAuto.Aut_cate_cd = shor.Peo.Ins_loc;
                                            masterAuto.Aut_moduleid = "DIN";
                                            masterAuto.Aut_start_char = "DIN";
                                            _inventoryRequest.Itr_tp = "DIN";
                                        }

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                                        _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _inventoryDAL.UpdateAutoNumber(masterAuto);
                                        _inventoryRequest.Itr_req_no = _documentNo;
                                        _inventoryRequest.Itr_issue_from = shor.Peo.Ins_loc.ToUpper();

                                        result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                                        seqno = 0;
                                        var _SelectIntItem = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_loc == shor.Peo.Ins_loc).ToList();
                                        int i = 1;
                                        foreach (InventoryRequestItem Interitm in _SelectIntItem)
                                        {
                                            seqno = Interitm.Itri_seq_no;
                                            Interitm.Itri_seq_no = result;
                                            Interitm.Itri_line_no = i;
                                            _inventoryDAL.SaveInventoryRequestItem(Interitm);



                                            var _SelectIntseri = _serial.Where(x => x.Ins_loc == shor.Peo.Ins_loc && x.Ins_itm_cd == Interitm.Itri_itm_cd && x.TmpIsDamgnot == shor.Peo.TmpIsDamgnot).ToList();
                                            int j = 1;
                                            foreach (InventorySerialN Interseri in _SelectIntseri)
                                            {
                                                InventoryRequestSerials _reqseri = new InventoryRequestSerials();
                                                seqno = Interseri.Ins_seq_no;
                                                _reqseri.Itrs_seq_no = result;
                                                _reqseri.Itrs_ser_line = j;
                                                _reqseri.Itrs_line_no = i;
                                                _reqseri.Itrs_itm_cd = Interseri.Ins_itm_cd;
                                                _reqseri.Itrs_itm_stus = Interseri.Ins_itm_stus;
                                                _reqseri.Itrs_ser_1 = Interseri.Ins_ser_1;
                                                _reqseri.Itrs_ser_2 = Interseri.Ins_ser_2;
                                                _reqseri.Itrs_ser_3 = Interseri.Ins_ser_3;
                                                _reqseri.Itrs_ser_id = Interseri.Ins_ser_id;
                                                _reqseri.Itrs_qty = 1;

                                                _inventoryDAL.SaveInventoryRequestSerials(_reqseri);
                                                if (shor.Peo.TmpIsDamgnot == 2)
                                                {
                                                    Interseri.Ins_available = -1;
                                                }
                                                _inventoryDAL.UpdateInvseri(Interseri);

                                                if ((shor.Peo.TmpIsDamgnot == 2))
                                                {
                                                    Boolean update_inr_ser = _inventoryDAL.Update_serialID_INS_AVAILABLE(_inventoryRequest.Itr_com, _inventoryRequest.Itr_loc, _reqseri.Itrs_itm_cd, Convert.ToInt32(_reqseri.Itrs_ser_id), -1);

                                                }
                                                j++;
                                            }
                                            i++;
                                        }
                                        _docIntr = _documentNo + "|" + _docIntr;
                                    }
                                    if ((shor.Peo.TmpIsDamgnot == 0))
                                    {
                                        var _SelectIntseri = _serial.Where(x => x.Ins_loc == shor.Peo.Ins_loc && x.TmpIsDamgnot == shor.Peo.TmpIsDamgnot).ToList();
                                        foreach (InventorySerialN Interseri in _SelectIntseri)
                                        {
                                            InventoryRequestSerials _reqseri = new InventoryRequestSerials();
                                            seqno = Interseri.Ins_seq_no;
                                            _reqseri.Itrs_seq_no = result;
                                            _reqseri.Itrs_itm_cd = Interseri.Ins_itm_cd;
                                            _reqseri.Itrs_itm_stus = Interseri.Ins_itm_stus;
                                            _reqseri.Itrs_ser_1 = Interseri.Ins_ser_1;
                                            _reqseri.Itrs_ser_2 = Interseri.Ins_ser_2;
                                            _reqseri.Itrs_ser_3 = Interseri.Ins_ser_3;
                                            _reqseri.Itrs_ser_id = Interseri.Ins_ser_id;

                                            _inventoryDAL.UpdateInvseri(Interseri);

                                        }
                                    }

                                }
                            }
                        }
                        #endregion
                        if (_updateRequest != null)
                        {
                            if (_updateRequest.Count > 0)
                            {
                                foreach (InventoryRequestItem _updateitem in _updateRequest)
                                {
                                    if (_updateitem.Approv_status == "Cancel")
                                    {
                                        // if (_updateitem.Itri_app_qty == 0)
                                        // {
                                        _inventoryDAL.Update_MRN_Bqty(_updateitem.Itri_seq_no, _updateitem.Itri_itm_cd, _updateitem.Itri_line_no, _updateitem.Itri_bqty, "C");
                                        // }
                                        // else
                                        // {
                                        //     _inventoryDAL.Update_MRN_Bqty(_updateitem.Itri_seq_no, _updateitem.Itri_itm_cd, _updateitem.Itri_line_no, _updateitem.Itri_app_qty, "C");
                                        // }
                                    }
                                    else if (_updateitem.Approv_status == "Approved")
                                    {

                                        _inventoryDAL.Update_MRN_Bqty(_updateitem.Itri_seq_no, _updateitem.Itri_itm_cd, _updateitem.Itri_line_no, _updateitem.Itri_app_qty, "A");

                                    }
                                }

                            }
                            else
                            {

                                foreach (InventoryRequestItem _ReqItem in _inventoryRequest.InventoryRequestItemList)
                                {
                                    _inventoryDAL.Update_MRN_Bqty(seqno, _ReqItem.Itri_itm_cd, _ReqItem.Itri_line_no, _ReqItem.Itri_app_qty, "A");

                                }
                            }

                        }
                        if (_inventoryRequest.Itr_com != "ABE")
                        {
                            _res = _inventoryDAL.Change_MRNReq_status(_inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                        }
                        else
                        {
                            #region change the Reference header update according to the Company as per the Dharshana by Lakshan 27 Apr 2017
                            List<InventoryRequestItem> _reqDataABE = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_inventoryRequest.Itr_ref);
                            if (_reqDataABE != null)
                            {
                                decimal _reqBalCount = _reqDataABE.Sum(c => c.Itri_bqty);
                                if (_reqBalCount == 0)
                                {
                                    _res = _inventoryDAL.Change_MRNReq_status(_inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                                }
                                else
                                {
                                    _res = 1;
                                }
                            }
                            else
                            {
                                _res = 1;
                            }
                            #endregion
                        }
                    }

                    //result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest); 
                    if (_inventoryRequest.Itr_ref == "AD-HOC")
                    {
                        if (!_resUpdateErr)
                        {
                            _inventoryDAL.TransactionCommit();
                            result = 1;
                        }
                        else
                        {
                            result = -1;
                            _inventoryDAL.TransactionRollback();
                            _docNo = _errro;
                        }
                    }
                    else
                    {
                        if (_res > 0)
                        {
                            _inventoryDAL.TransactionCommit();

                            result = 1;
                        }
                        else
                        {
                            result = -1;
                            _inventoryDAL.TransactionRollback();
                        }
                    }



                }

            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _docNo = ex.Message;
            }

            if (_multipleshowroom == null)
            {
                if (result == 1)
                {
                    try
                    {
                        #region Email
                        _generalDAL = new GeneralDAL();
                        _generalDAL.ConnectionOpen();
                        if (_inventoryRequest.TMP_SEND_MAIL)
                        {
                            StringBuilder html = new StringBuilder();
                            string htmlBody = string.Empty;
                            if (_inventoryRequest.InventoryRequestItemList != null)
                            {
                                if (_inventoryRequest.InventoryRequestItemList.Count > 0)
                                {
                                    DataTable dt = new DataTable();
                                    //Building an HTML string.
                                    DataRow dr = null;
                                    dt.Columns.Add(new DataColumn("Item", typeof(string)));
                                    dt.Columns.Add(new DataColumn("Req. Qty", typeof(decimal)));
                                    dt.Columns.Add(new DataColumn("App. Qty", typeof(decimal)));
                                    //Table start.
                                    html.Append("<!DOCTYPE html>");
                                    html.Append("<html>");
                                    html.Append("<body>");
                                    html.Append("<table style=' background-repeat:no-repeat; width:450px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                                    //Building the Header row.
                                    html.Append("<tr>");
                                    foreach (DataColumn column in dt.Columns)
                                    {
                                        html.Append("<th style=' background-color:#B5E3F0; width:100px; margin:0;' >");
                                        html.Append(column.ColumnName);
                                        html.Append("</th>");
                                    }
                                    html.Append("</tr>");
                                    foreach (InventoryRequestItem _updateitem in _inventoryRequest.InventoryRequestItemList)
                                    {
                                        string _itmDes = _generalDAL.GetItemMaster(_updateitem.Itri_itm_cd).Mi_shortdesc;
                                        html.Append("<tr>");
                                        html.Append("<th align='left'>");
                                        html.Append(_updateitem.Itri_itm_cd + " - " + _itmDes);
                                        html.Append("</th>");
                                        html.Append("<th>");
                                        html.Append(_updateitem.Itri_qty);
                                        html.Append("</th>");
                                        html.Append("<th>");
                                        html.Append(_updateitem.Itri_app_qty);
                                        html.Append("</th>");
                                        html.Append("</tr>");

                                    }
                                    html.Append("</table>");
                                }
                            }

                            string locDes = string.Empty;
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();
                            MasterLocation _mstLoc = new MasterLocation();
                            List<MsgInformation> _mail = new List<MsgInformation>();
                            List<MsgInformation> _mailFrmLoc = new List<MsgInformation>();
                            DataTable loctbl = _salesDAL.getLocDesc(_inventoryRequest.Itr_com, "", _inventoryRequest.Itr_rec_to);
                            if (loctbl.Rows.Count > 0)
                            {
                                locDes = loctbl.AsEnumerable().FirstOrDefault().Field<string>("descp");
                            }
                            _mstLoc = _generalDAL.GetLocationInfor(_inventoryRequest.Itr_com, _inventoryRequest.Itr_rec_to);
                            _mail = _generalDAL.GetMsgInformation(_inventoryRequest.Itr_com, "", "MRN_APP");
                            _mailFrmLoc = new List<MsgInformation>() { new MsgInformation() { Mmi_email = _mstLoc.Ml_email } };
                            if (_mail != null)
                            {
                                _mailFrmLoc.AddRange(_mail);
                            }

                            if (_mstLoc != null)
                            {
                                if (_mailFrmLoc != null)
                                {
                                    if (_mailFrmLoc.Count > 0)
                                    {
                                        foreach (MsgInformation _info in _mailFrmLoc)
                                        {
                                            message = new MailMessage();
                                            if (!string.IsNullOrEmpty(_info.Mmi_email) && (_info.Mmi_email != "N/A"))
                                            {
                                                string _preparedU = string.Empty;
                                                string _approvedU = string.Empty;
                                                DataTable _creUsr = _salesDAL.GetinvUser(_inventoryRequest.Itr_cre_by);
                                                if (_creUsr.Rows.Count > 0)
                                                {
                                                    _preparedU = _creUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_USR_NAME");
                                                }
                                                DataTable _appUsr = _salesDAL.GetinvUser(_inventoryRequest.Itr_gran_app_by);
                                                if (_appUsr.Rows.Count > 0)
                                                {
                                                    _approvedU = _appUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_USR_NAME");
                                                }
                                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                                smtpClient.Host = _generalDAL.GetMailHost();
                                                smtpClient.Port = 25;
                                                message.From = fromAddress;
                                                string FOOTER = _generalDAL.GetMailFooterMsg();
                                                string _email = "";
                                                _docNo = _docNo.Replace("Normal:", "");
                                                _email = "Dear Sir/Madam, <br><br>" + "Your MRN Request (" + _inventoryRequest.Itr_ref + ") Approved by Distribution Department <br>";
                                                _email = _email + "Prepared User : " + _preparedU + " <br>";
                                                _email = _email + "Approved User : " + _approvedU + " <br>";
                                                _email = _email + "Approved # : " + _docNo + " <br>";
                                                _email = _email + "Approved Date : " + _inventoryRequest.Itr_mod_dt + " <P>";
                                                _email = _email + "<br>" + html + "<br>";// +FOOTER;
                                                _email = _email + "Thank You, <br>";
                                                _email = _email + "** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** <br>";
                                                _email = _email + "** IT Department ** <br>";
                                                message.To.Add(_info.Mmi_email);
                                                message.Subject = "MRN Approval - " + locDes;
                                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                                //message.Bcc.Add(new MailAddress(""));
                                                message.IsBodyHtml = false;
                                                message.Body = _email;
                                                message.IsBodyHtml = true;
                                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                                // Send SMTP mail
                                                smtpClient.Send(message);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                result = 1;
                                _generalDAL.ConnectionClose();
                            }
                        }
                        #endregion
                    }
                    catch (Exception ex)
                    {
                        result = 1;
                        _generalDAL.ConnectionClose();

                    }
                }
            }

            return result;
        }

        //Rukshan 22/oct/2015
        public DataTable GetMRNApprov_doc(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _fromdate, DateTime _todate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMRNApprov_doc(_initialSearchParams, _searchCatergory, _searchText, _fromdate, _todate);
        }

        //Sahan 26/Oct/2015
        public DataTable SearchCRNDoc(string _company, string _loc, string _doc, DateTime _fromdate, DateTime _todate, string _suppler)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchCRNDoc(_company, _loc, _doc, _fromdate, _todate, _suppler);
        }
        //Rukshan 28/oct/2015
        public DataTable GetBufferQty(string _company, string _showroom, string _Item, DateTime _date)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBufferQty(_company, _showroom, _Item, _date);
        }
        //Rukshan 28/oct/2015
        public DataTable GetShopQty(string _company, string _showroom, string _Item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetShopQty(_company, _showroom, _Item);
        }
        //Rukshan 28/oct/2015
        public DataTable GetSimilarItem(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSimilarItem(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Rukshan 28/oct/2015
        public DataTable GetReplaceItem(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetReplaceItem(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Tharaka 2015-10-29
        public Int32 SavePurchaseOrderWithoutCommit(PurchaseOrder _NewPO, List<PurchaseOrderDetail> _NewPOItems, List<PurchaseOrderDelivery> _NewPODel, MasterAutoNumber _masterAutoNumber, out string docno, out string err)
        {
            Int32 _effect = 0;
            docno = string.Empty;
            err = string.Empty;

            _effect = _inventoryDAL.SaveNewPO(_NewPO);

            if (_NewPOItems != null)
            {
                foreach (PurchaseOrderDetail _POItems in _NewPOItems)
                {
                    _effect = _inventoryDAL.SaveNewPOItem(_POItems);
                }
            }

            if (_NewPODel != null)
            {
                foreach (PurchaseOrderDelivery _DelItems in _NewPODel)
                {
                    _effect = _inventoryDAL.SaveNewPODel(_DelItems);
                }
            }

            bool _isSCMImpPo = false;//Add by Chamal 24/06/2013
            if (_NewPO.Poh_tp == "I" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "IMPORTS" && _NewPO.Poh_job_no == "IMPORTS_PO")
            {
                _isSCMImpPo = true;
            }

            if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "LOCAL_PO")
            {
                _isSCMImpPo = true;
            }

            if (_NewPO.Poh_tp == "L" && _NewPO.Poh_sub_tp == "N" && _NewPO.Poh_ope == "LOCAL" && _NewPO.Poh_job_no == "QUO_PO")
            {
                _isSCMImpPo = true;
            }

            if (_isSCMImpPo == false)
            {
                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:000000}", _autoNo);
                _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                _inventoryDAL.UpdatePODocNo(_NewPO.Poh_seq_no, _documentNo);
                docno = _documentNo;
            }
            else
            {
                docno = _NewPO.Poh_doc_no;
            }

            err = string.Empty;

            return _effect;
        }

        //Rukshan 29/ Oct/2015
        public decimal GetForwardsale(string _showroom, string _Item, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetForwardsale(_showroom, _Item, _com);
        }
        //Darshana 02-11-2015
        public List<GiftVoucherPages> GetVoucherBySearch(Int32 _book, Int32 _page, string _ref)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetVoucherBySearch(_book, _page, _ref);
        }

        //Tharaka 2015-11-03
        public WarehouseBin GET_BIN_BY_CODE(string com, string loc, string binCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_BIN_BY_CODE(com, loc, binCode);
        }
        //Rukshan 04/Nov/2015
        public int SaveCusdecEntry(InventoryRequest _inventoryRequest, MasterAutoNumber _mastAutoNo, List<ImportsBLItems> _ImportsBLItems, out string _docNo)
        {
            int result = 0;
            _docNo = "";
            string _documentNo = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _custServiceDAL = new CustServiceDAL();
                _financialDAL = new FinancialDAL();
                _generalDAL = new GeneralDAL();
                FinancialBLL _finbll = new FinancialBLL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_inventoryRequest != null)
                {
                    if (_inventoryRequest.Itr_tp == "CUSR")
                    {
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                        _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                        _inventoryRequest.Itr_req_no = _documentNo;



                        result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                        int _lineNo = 1;
                        foreach (InventoryRequestItem _ReqItem in _inventoryRequest.InventoryRequestItemList)
                        {

                            _ReqItem.Itri_line_no = _lineNo;
                            _ReqItem.Itri_seq_no = result;
                            _inventoryDAL.SaveInventoryRequestItem(_ReqItem);
                            _lineNo++;
                        }
                        _docNo = _documentNo;
                        int upresult2 = _inventoryDAL.Update_ResHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                    }
                    else if (_inventoryRequest.Itr_tp == "CUSA")
                    {


                        var _scanItems = _inventoryRequest.InventoryRequestItemList.GroupBy(x => new { x.ITRI_ITM_COND, x.Itri_com, x.Itri_job_no }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                        int i = 1;
                        foreach (var itm in _scanItems)
                        {

                            // if (i == 1)
                            // {
                            if ((itm.Peo.Itri_job_no == "0") || (itm.Peo.Itri_job_no == "N/A") || (itm.Peo.Itri_job_no == ""))
                            {
                                _docNo = "Job Number Cannot 0";
                                return -1;
                            }
                            else
                            {
                                _inventoryRequest.Itr_job_no = itm.Peo.Itri_job_no;

                                // check valid bond no
                                DataTable _tblbond = _inventoryDAL.CHECKBONDNO(_inventoryRequest.Itr_com, _inventoryRequest.Itr_job_no);
                                if (_tblbond != null)
                                {
                                    if (_tblbond.Rows.Count > 0)
                                    {
                                        string _SINO = _tblbond.Rows[0][0].ToString();
                                        if (_inventoryRequest.Itr_anal2 != _SINO)
                                        {
                                            _inventoryRequest.Itr_anal2 = _SINO;
                                        }

                                    }
                                }

                            }


                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                            //_documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _documentNo = _inventoryRequest.Itr_com + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _mastAutoNo.Aut_moduleid + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                            _inventoryRequest.Itr_req_no = _documentNo;

                            //GRN LOCATION
                            DataTable _tblBalance = _inventoryDAL.CHECK_TOBOND_GRN(_inventoryRequest.Itr_com, _inventoryRequest.Itr_job_no, null);
                            if (_tblBalance.Rows.Count > 0)
                            {
                                string loc = _tblBalance.Rows[0]["Location"].ToString();
                                _inventoryRequest.Itr_loc = loc;
                                _inventoryRequest.Itr_issue_from = loc;
                            }

                            result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);

                            // }
                            // i++;

                            int upresult = _custServiceDAL.Update_ReqHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                            //Check Reserve QTY balance
                            string finish = "";
                            int resqty = 0;
                            int totreqqty = 0;
                            int k = 0;
                            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                            if (_ImportsBLItems != null)
                            {
                                foreach (var _BlItem in _inventoryRequest.InventoryRequestItemList)
                                {
                                    DataTable resitms = _inventoryDAL.GetResavationQty(_inventoryRequest.Itr_ref, _BlItem.Itri_itm_cd);
                                    if (resitms.Rows.Count > 0)
                                    {
                                        resqty = resqty + Convert.ToInt32(resitms.Rows[0]["ird_res_bqty"].ToString());
                                    }

                                    totreqqty = totreqqty + Convert.ToInt32(_BlItem.Itri_qty);
                                    //Update Reserve QTY
                                    int _res = 0;
                                    _res = _inventoryDAL.UPDATE_RES_BQTYNew(_inventoryRequest.Itr_ref, _BlItem.Itri_line_no, _BlItem.Itri_qty);
                                    #region
                                    if (_inventoryRequest.UpdateResLog)
                                    {
                                        _resLogAvaData = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(
                                        new INR_RES_LOG()
                                        {
                                            IRL_RES_NO = _inventoryRequest.Itr_ref,
                                            IRL_ITM_CD = _BlItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _BlItem.Itri_itm_stus,
                                            IRL_ACT = 1
                                            // IRL_CURT_LOC = "DFS08",
                                        });
                                        if (_resLogAvaData.Count > 0)
                                        {
                                            _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                            {
                                                IRL_CURT_COM = _inventoryRequest.Itr_com,
                                                IRL_CURT_LOC = _resLogAvaData[0].IRL_ORIG_LOC,
                                                IRL_ORIG_DOC_TP = "INV",
                                                IRL_ORIG_DOC_NO = _inventoryRequest.Itr_ref,
                                                IRL_ORIG_DOC_DT = DateTime.Now,
                                                IRL_ORIG_LOC = _resLogAvaData[0].IRL_ORIG_LOC,
                                                IRL_CURT_DOC_TP = "CUSA",
                                                IRL_CURT_DOC_NO = _documentNo,
                                                IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                IRL_RES_NO = _inventoryRequest.Itr_ref,
                                                IRL_ITM_CD = _BlItem.Itri_itm_cd,
                                                IRL_ITM_STUS = _BlItem.Itri_itm_stus,
                                                IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                                IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                IRL_MOD_DT = DateTime.Now,
                                                IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                IRL_CRE_DT = DateTime.Now,
                                                IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                IRL_RES_QTY = _BlItem.Itri_qty,
                                                IRL_RES_WP = 1
                                            }, 0, _inventoryDAL, out _docNo);
                                        }
                                        if (_res < 1)
                                        {
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            _custServiceDAL.TransactionRollback();
                                            _docNo = "Process Terminate - reseravation log update fail";
                                            return result;
                                        }
                                    }
                                    #endregion

                                    k++;

                                }

                            }

                            if (resqty == totreqqty) finish = "F";




                            //Update Res HDR if res qty balance==0
                            int upresult2 = 0;
                            if (finish == "F")
                                upresult2 = _inventoryDAL.Update_ResHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                            int _lineNo = 1;
                            var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_job_no == itm.Peo.Itri_job_no && x.Itri_com == itm.Peo.Itri_com).ToList();
                            foreach (InventoryRequestItem _ReqItem in _SelectItem)
                            {

                                //TOBOND QTY
                                if (_inventoryRequest.balancechek)
                                {
                                    decimal totalrqy = _inventoryDAL.GetTotalreqQty(_ReqItem.Itri_job_no, _inventoryRequest.Itr_com, _ReqItem.Itri_itm_cd, _ReqItem.Itri_job_line);
                                    List<TobondItemQty> Tobondqty = new List<TobondItemQty>();
                                    Tobondqty = _financialDAL.GetTobondQty(_ReqItem.Itri_job_no, _ReqItem.Itri_job_line);
                                    decimal tobontqty = Tobondqty.Sum(a => a.Tobond_Qty);
                                    //TOBOND BASE ALL ENTRY SUM
                                    if (tobontqty > 0)
                                    {
                                        List<TobondItemQty> EntryQty = new List<TobondItemQty>();
                                        EntryQty = _financialDAL.GetEntryQty(_ReqItem.Itri_job_no, _ReqItem.Itri_job_line, _inventoryRequest.Itr_com);
                                        decimal entryqty = EntryQty.Sum(a => a.Entry_Qty);
                                        if (tobontqty < entryqty + _ReqItem.Itri_qty + totalrqy)
                                        {
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            _custServiceDAL.TransactionRollback();
                                            _financialDAL.TransactionRollback();
                                            _docNo = "Process Terminate - balance exceed";
                                            return result;
                                        }
                                    }

                                }

                                _inventoryDAL.Update_Cusdec_Bqty(_inventoryRequest.Itr_ref, _ReqItem.Itri_itm_cd, _ReqItem.Itri_line_no, _ReqItem.Itri_qty);
                                _ReqItem.Itri_line_no = _lineNo;
                                _ReqItem.Itri_seq_no = result;

                                if (_ReqItem.Itri_job_line == 0)
                                {
                                    result = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _docNo = "Process Terminate - Item not save";
                                    return result;
                                }
                                if (_inventoryRequest._checkLineno)
                                {
                                    var _checkItemline = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_job_no == itm.Peo.Itri_job_no && x.Itri_com == itm.Peo.Itri_com
                                        && x.Itri_job_line == _ReqItem.Itri_job_line).ToList();

                                    if (_checkItemline.Count > 1)
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _custServiceDAL.TransactionRollback();
                                        _financialDAL.TransactionRollback();
                                        _docNo = "Process Terminate - item line duplicate";
                                        return result;
                                    }
                                }
                                _inventoryDAL.SaveInventoryRequestItem(_ReqItem);

                                _lineNo++;

                                //Update reservation header again subodana 2017-05-30
                                if (_ReqItem.Itri_res_no != null)
                                {
                                    if (_ReqItem.Itri_res_no.Trim() != "" && _ReqItem.Itri_res_no.Trim() != "N/A")
                                    {
                                        INR_RES_LOG ob = new INR_RES_LOG();
                                        ob.IRL_RES_NO = _ReqItem.Itri_res_no.Trim();
                                        List<INR_RES_LOG> rList = _inventoryDAL.GET_INR_RES_LOG_DATA(ob);
                                        rList = rList.Where(a => a.IRL_CURT_DOC_TP == "INV").ToList();
                                        decimal restotbqty = rList.Sum(a => a.IRL_RES_BQTY);
                                        if (restotbqty > 0)
                                        {
                                            upresult2 = _inventoryDAL.Update_ResHeaderStatus("A", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _ReqItem.Itri_res_no.Trim());
                                        }
                                        else
                                        {
                                            upresult2 = _inventoryDAL.Update_ResHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _ReqItem.Itri_res_no.Trim());
                                        }
                                    }
                                }




                                //ImportsBLItems _blitm = _inventoryDAL.GET_BL_ITMBYITMLINE(_inventoryRequest.Itr_anal2, _inventoryRequest.Itr_job_line);
                                //if (_blitm != null)
                                //{
                                //    if (totalrqy < _blitm.Ibi_bal_qty)
                                //    {


                                //    }
                                //    else
                                //    {
                                //        result = -1;
                                //        _inventoryDAL.TransactionRollback();
                                //        _custServiceDAL.TransactionRollback();
                                //        _financialDAL.TransactionRollback();
                                //        _docNo = "Process Terminate - balance exceed";
                                //        return result;
                                //    }
                                //}


                                //check bl balance : by subodana
                                ImportsBLItems blitems = _inventoryDAL.GET_BL_ITMBYITMLINE(_inventoryRequest.Itr_anal2, _ReqItem.Itri_job_line);
                                if (blitems != null)
                                {
                                    if (blitems.Ibi_itm_cd == _ReqItem.Itri_itm_cd)
                                    {
                                        int currentqty = Convert.ToInt32(_ReqItem.Itri_qty);
                                        int balblqty = Convert.ToInt32(blitems.Ibi_bal_qty);
                                        if (currentqty > balblqty)
                                        {
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            _custServiceDAL.TransactionRollback();
                                            _financialDAL.TransactionRollback();
                                            _docNo = "Cant Process,  Please Check " + _ReqItem.Itri_itm_cd + " BL Balance";
                                            return result;
                                        }
                                    }
                                    else
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _custServiceDAL.TransactionRollback();
                                        _financialDAL.TransactionRollback();
                                        _docNo = "Cant Found  Item : " + _ReqItem.Itri_itm_cd + " in BL";
                                        return result;
                                    }
                                }
                                else
                                {
                                    result = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _docNo = "Can't Found BL Items For : Line " + _ReqItem.Itri_job_line + " SI :" + _inventoryRequest.Itr_anal2;
                                    return result;
                                }

                            }
                            _docNo = _documentNo + "|" + _docNo;
                            //var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(y=>y.)
                        }
                        if (_ImportsBLItems != null)
                        {
                            foreach (ImportsBLItems _BlItem in _ImportsBLItems)
                            {
                                bool _updatebl = true;
                                if (!string.IsNullOrEmpty(_inventoryRequest.Itr_ref))
                                {
                                    INR_RES _REDOBJ = new INR_RES();
                                    _REDOBJ.IRS_RES_NO = _inventoryRequest.Itr_ref;
                                    _REDOBJ.IRS_COM = _inventoryRequest.Itr_com;
                                    _REDOBJ.IRS_STUS = "F";
                                    List<INR_RES> _RES = _inventoryDAL.GET_INR_RES_DATA(_REDOBJ);
                                    if (_RES.Count > 0)
                                    {
                                        _updatebl = false;
                                    }
                                }
                                if (_updatebl)
                                {
                                    result = _inventoryDAL.Update_BI_Rqty(_BlItem.Ibi_seq_no, _BlItem.Ibi_itm_cd, _BlItem.Ibi_line, _BlItem.Ibi_req_qty, 1);

                                    if (result == 0)
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _custServiceDAL.TransactionRollback();
                                        _financialDAL.TransactionRollback();
                                        _docNo = "Process Terminate - Bl item update fail";
                                        return result;
                                    }
                                }
                            }

                        }
                    }
                    // _inventoryDAL.Change_MRNReq_status(_inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                    _inventoryDAL.TransactionCommit();
                    _custServiceDAL.TransactionCommit();

                    _financialDAL.TransactionCommit();
                    result = 1;

                }

            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _docNo = ex.Message;
            }
            return result;
        }

        //Written By Rukshan on 05 Nov 2015
        public List<InventoryRequest> GetCusdecEntryRequest(string _profit, string _Customer, DateTime _From, DateTime _To, string _type, string _status, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCusdecEntryRequest(_profit, _Customer, _From, _To, _type, _status, _loc);
        }
        //Written By Rukshan on 07 Nov 2015
        public DataTable GET_GetTobond_BL(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GetTobond_BL(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Written By Rukshan on 09 Nov 2015
        public List<ImportsBLItems> GET_GetTobond_BL_Itm(string _tobond, string _bl, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GetTobond_BL_Itm(_tobond, _bl, _item);
        }
        public List<ImportsBLItems> GET_GetTobond_BL_Itm_new(string _tobond, string _bl, string _item, Int32 _line)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GetTobond_BL_Itm_new(_tobond, _bl, _item, _line);
        }
        public List<ImportsBLItems> GET_GetTobond_BL_Itm_latest(string _tobond, string _bl, Int32 _itemline)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GetTobond_BL_Itm_latest(_tobond, _bl, _itemline);
        }
        //Written By Rukshan on 09 Nov 2015
        public Int32 Update_BI_Rqty(Int32 _number, string _ItemCode, int _ItemLine, decimal _qty, string _Reno, int _status, string COM, string sino, out string _error2)
        {
            Int32 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            effect = _inventoryDAL.Update_BI_Rqty(_number, _ItemCode, _ItemLine, _qty, _status);
            _inventoryDAL.Change_CusdecReq_status(_Reno);
            _error2 = "";
            //RESERVATION 
            List<InventoryRequestItem> list = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(_Reno);
            InventoryRequest ob = new InventoryRequest();
            ob.Itr_com = COM;
            ob.Itr_req_no = _Reno;
            List<InventoryRequest> hdrlist = _inventoryDAL.GET_INT_REQ_DATA_NEW(ob);
            string _errro = "";

            if (list != null && hdrlist != null)
            {
                foreach (var item in list)
                {
                    if (item.Itri_res_no != "" && item.Itri_res_no != "N/A")
                    {
                        INR_RES_DET ob1 = new INR_RES_DET();
                        ob1.IRD_RES_NO = item.Itri_res_no;
                        ob1.IRD_REQ_BQTY = _qty;
                        ob1.IRD_SI_NO = sino;
                        ob1.IRD_SI_LINE = _ItemLine;

                        effect = _inventoryDAL.UPDATE_INR_RES_DET_WITHSI(ob1);

                        int _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                        {
                            IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                            IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                            IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp,
                            IRL_ORIG_DOC_NO = _Reno,
                            IRL_ORIG_DOC_DT = DateTime.Now,

                            IRL_CURT_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                            IRL_CURT_DOC_NO = _Reno,
                            IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                            IRL_RES_NO = item.Itri_res_no,
                            IRL_ITM_CD = item.Itri_itm_cd,
                            IRL_ITM_STUS = item.Itri_itm_stus,
                            IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                            IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                            IRL_MOD_DT = DateTime.Now,
                            IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                            IRL_CRE_DT = DateTime.Now,
                            IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                            IRL_RES_QTY = item.Itri_qty,
                            IRL_RES_WP = 1
                        }, 0, _inventoryDAL, out _errro);
                        if (_res > 0)
                        {
                            _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                            {
                                IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                IRL_ORIG_DOC_NO = _Reno,
                                IRL_ORIG_DOC_DT = DateTime.Now,
                                IRL_CURT_DOC_TP = "INV",
                                IRL_CURT_DOC_NO = hdrlist.FirstOrDefault().Itr_ref,
                                IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                IRL_RES_NO = item.Itri_res_no,
                                IRL_ITM_CD = item.Itri_itm_cd,
                                IRL_ITM_STUS = item.Itri_itm_stus,
                                IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_MOD_DT = DateTime.Now,
                                IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_CRE_DT = DateTime.Now,
                                IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_RES_QTY = item.Itri_qty,
                                IRL_RES_WP = 1
                            }, 0, _inventoryDAL, out _errro);
                            if (_res < 1)
                            {
                                effect = -1;
                                _error2 = _errro;
                                _error2 = "Didn't Update Reservation Log!!";
                            }
                        }
                        INR_RES_DET _obj = new INR_RES_DET();
                        _obj.IRD_RES_NO = item.Itri_res_no;
                        _obj.IRD_REQ_BQTY = item.Itri_qty;
                        _obj.IRD_ITM_CD = item.Itri_itm_cd;
                        _obj.IRD_ITM_STUS = item.Itri_itm_stus;
                        effect = _inventoryDAL.UPDATE_INR_RES_DET_BAL(_obj);
                    }

                }
            }



            _inventoryDAL.TransactionCommit();
            return effect;
        }

        public Int32 Update_BI_RqtyNew(List<ImportsBLItems> _bllist, string com, out string _error2)
        {
            Int32 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            _error2 = "";
            string _errro = "";
            try
            {
                foreach (var _blitm in _bllist)
                {

                    _inventoryDAL.Change_CusdecReq_status(_blitm._spc_req_no);
                    //RESERVATION 
                    List<InventoryRequestItem> list = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(_blitm._spc_req_no);
                    if (list != null && list.Count > 0)
                    {
                        if (_blitm._spc_tobond == "")
                        {
                            list = list.Where(a => a.Itri_job_no == _blitm.Ibi_doc_no && a.Itri_job_line == _blitm._spc_line).ToList();
                        }
                        else
                        {
                            list = list.Where(a => a.Itri_job_no == _blitm._spc_tobond && a.Itri_job_line == _blitm._spc_line).ToList();
                        }

                        if (list == null)
                        {
                            list = new List<InventoryRequestItem>();
                        }

                    }
                    InventoryRequest ob = new InventoryRequest();
                    ob.Itr_com = com;
                    ob.Itr_req_no = _blitm._spc_req_no;
                    List<InventoryRequest> hdrlist = _inventoryDAL.GET_INT_REQ_DATA_NEW(ob);

                    if (list != null && hdrlist != null)
                    {
                        foreach (var item in list)
                        {
                            if (item.Itri_res_no != "" && item.Itri_res_no != "N/A")
                            {
                                INR_RES_DET ob1 = new INR_RES_DET();
                                ob1.IRD_RES_NO = item.Itri_res_no;
                                ob1.IRD_RES_BQTY = _blitm._spc_cancel_qty;
                                ob1.IRD_SI_NO = _blitm.Ibi_doc_no;
                                ob1.IRD_SI_LINE = _blitm._spc_line;

                                effect = _inventoryDAL.UPDATE_INR_RES_DET_WITHSI(ob1);

                                int _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                {
                                    IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                    IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                    IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp,
                                    IRL_ORIG_DOC_NO = _blitm._spc_req_no,
                                    IRL_ORIG_DOC_DT = DateTime.Now,

                                    IRL_CURT_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                    IRL_CURT_DOC_NO = _blitm._spc_req_no,
                                    IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                    IRL_RES_NO = item.Itri_res_no,
                                    IRL_ITM_CD = item.Itri_itm_cd,
                                    IRL_ITM_STUS = item.Itri_itm_stus,
                                    IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_MOD_DT = DateTime.Now,
                                    IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_CRE_DT = DateTime.Now,
                                    IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_RES_QTY = item.Itri_qty,
                                    IRL_RES_WP = 1
                                }, 0, _inventoryDAL, out _errro);
                                if (_res > 0)
                                {
                                    _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                    {
                                        IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                        IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                        IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                        IRL_ORIG_DOC_NO = _blitm._spc_req_no,
                                        IRL_ORIG_DOC_DT = DateTime.Now,
                                        IRL_CURT_DOC_TP = "INV",
                                        IRL_CURT_DOC_NO = hdrlist.FirstOrDefault().Itr_ref,
                                        IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                        IRL_RES_NO = item.Itri_res_no,
                                        IRL_ITM_CD = item.Itri_itm_cd,
                                        IRL_ITM_STUS = item.Itri_itm_stus,
                                        IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                        IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                        IRL_MOD_DT = DateTime.Now,
                                        IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                        IRL_CRE_DT = DateTime.Now,
                                        IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                        IRL_RES_QTY = item.Itri_qty,
                                        IRL_RES_WP = 0
                                    }, 0, _inventoryDAL, out _errro);
                                    if (_res < 1)
                                    {
                                        effect = -1;
                                        _error2 = _errro;
                                        _error2 = "Didn't Update Reservation Log!!";
                                    }
                                }
                                INR_RES_DET _obj = new INR_RES_DET();
                                _obj.IRD_RES_NO = item.Itri_res_no;
                                _obj.IRD_REQ_BQTY = item.Itri_qty;
                                _obj.IRD_ITM_CD = item.Itri_itm_cd;
                                _obj.IRD_ITM_STUS = item.Itri_itm_stus;
                                effect = _inventoryDAL.UPDATE_INR_RES_DET_BAL(_obj);
                            }
                            else
                            {
                                effect = _inventoryDAL.Update_BI_Rqty(_blitm.Ibi_seq_no, _blitm._spc_itm, _blitm._spc_line, _blitm._spc_update_qty, 0);
                            }

                        }
                    }


                }

                _inventoryDAL.TransactionCommit();
                return effect;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                effect = -1;
                _error2 = ex.Message;
                return effect;
            }
        }

        //Sahan 10/Nov/2015
        public DataTable CheckWareHouseAvailability(string _company, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckWareHouseAvailability(_company, _loc);
        }

        //Sahan 10/Nov/2015
        public DataTable LoadLoadingBays(string _company, string _loc, string resourse)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadLoadingBays(_company, _loc, resourse);
        }

        //Sahan 11/Nov/2015
        public DataTable LoadUserLoadingBays(string _user, string _company, string _loc, string _warehcom, string _warehloccode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadUserLoadingBays(_user, _company, _loc, _warehcom, _warehloccode);
        }

        //Rukshan 11/Nov/2015
        public DataTable GetSearchRequest(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _fromDate, DateTime _toDate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSearchRequest(_initialSearchParams, _searchCatergory, _searchText, _fromDate, _toDate);
        }


        //Sahan 13/Nov/2015
        public DataTable IsDocNoAvailable(string p_tuh_doc_no, string p_tuh_doc_tp, Int32 p_tuh_direct, string p_tuh_usr_com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsDocNoAvailable(p_tuh_doc_no, p_tuh_doc_tp, p_tuh_direct, p_tuh_usr_com);
        }

        public DataTable GetEntryDtl(string _entryno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetEntryDtl(_entryno);
        }
        //Sahan 13/Nov/2015
        public Int32 UpdatePickHeader(ReptPickHeader header)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdatePickHeader(header);
        }

        //Sahan 13/Nov/2015
        public DataTable CheckItemsScannedStatus(Int32 p_tui_usrseq_no)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckItemsScannedStatus(p_tui_usrseq_no);
        }

        //Sahan 17 Nov/2015
        public DataTable GetSearchInterTransferRequestWeb(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSearchInterTransferRequestWeb(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 18/Nov/2015
        public DataTable LoadProductConditionUpdateDocs()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadProductConditionUpdateDocs();
        }

        //Sahan 18/Nov/2015
        public DataTable LoadHeaderPCUpdateDocWareHouseUser(string type, DateTime fromdate, DateTime todate, string company, string cat1, string cat2, string cat3)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadHeaderPCUpdateDocWareHouseUser(type, fromdate, todate, company, cat1, cat2, cat3);
        }

        //Sahan 18/Nov/2015
        public DataTable LoadHeaderPCUpdateDocHeadOfficeUser(string type, DateTime fromdate, DateTime todate, string company, string cat1, string cat2, string cat3)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadHeaderPCUpdateDocHeadOfficeUser(type, fromdate, todate, company, cat1, cat2, cat3);
        }

        //Sahan 18 Nov/2015
        public DataTable LoadProductConditionPopUp(string _initialSearchParams, string _searchCatergory, string _searchText, string filter)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadProductConditionPopUp(_initialSearchParams, _searchCatergory, _searchText, filter);
        }
        public DataTable LoadProductConditionNew(string _initialSearchParams, string _searchCatergory, string _searchText, string filter)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadProductConditionNew(_initialSearchParams, _searchCatergory, _searchText, filter);
        }

        //Sahan 19/Nov/2015
        public DataTable LoadDocumnetItems(string docno, Int32 is_serial, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadDocumnetItems(docno, is_serial, serial);
        }

        //Sahan 20/Nov/2015
        public DataTable LoadItemConditions(string serial, string cate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemConditions(serial, cate);
        }

        //Sahan 20/Nov/2015
        public DataTable LoadConditionsForCategory(string company, string cate, string itemcate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadConditionsForCategory(company, cate, itemcate);
        }

        //Sahan 20/Nov/2015
        public DataTable LoadConditionsForAllCategory(string company, string cate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadConditionsForAllCategory(company, cate);
        }

        //Sahan 20 Nov 2015
        public Int32 SaveItemConditions(ItemConditionSetup _itemconditions, Int32 its_pick, string docno, string com, string loc, string item, Int32 serial)
        {
            Int32 _eff = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _eff = _inventoryDAL.SaveItemConditions(_itemconditions);
                _eff = _inventoryDAL.UpdateItsPick(its_pick, docno, com, loc, item, serial);

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception)
            {
                _inventoryDAL.TransactionRollback();
                _eff = -1;
            }
            return _eff;
        }

        //Sahan 23/Nov/2015
        public DataTable LoadDocSerials(string p_doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadDocSerials(p_doc);
        }

        //Sahan 23/Nov/2015
        public DataTable LoadItemConditionsPerItem(Int32 serial, string cat)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemConditionsPerItem(serial, cat);
        }

        //Sahan 23 Nov 2015
        public Int32 UpdateAnal4(InventoryHeader header)
        {
            Int32 _eff = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _eff = _inventoryDAL.UpdateAnal4(header);

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception)
            {
                _inventoryDAL.TransactionRollback();
                _eff = -1;
            }
            return _eff;
        }

        //Tharaka 2015-11-24
        public Int32 Save_Disposal_Job(DisposalHeader oDisposalHeader, List<DisposalLocation> oDisposalLocations, MasterAutoNumber mastAutoNo, out string err, out string DocuNumber)
        {
            Int32 result = 0;
            err = string.Empty;
            DocuNumber = string.Empty;

            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (oDisposalHeader.Dh_seq == 0)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = oDisposalHeader.Dh_com + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    oDisposalHeader.Dh_doc_no = _documentNo;
                    DocuNumber = _documentNo;
                    result = _inventoryDAL.UpdateAutoNumber(mastAutoNo);
                }

                result = _inventoryDAL.UPDATE_DISPOSAL_LOC_STATUS(oDisposalHeader.Dh_seq, null);

                Int32 newSeqNum = 0;
                result = _inventoryDAL.Save_Disposal_Header(oDisposalHeader, out newSeqNum);

                foreach (DisposalLocation item in oDisposalLocations)
                {
                    if (oDisposalHeader.Dh_seq == 0)
                    {
                        item.Dl_seq = newSeqNum;
                        item.Dl_doc_no = oDisposalHeader.Dh_doc_no;
                    }
                    else
                    {
                        item.Dl_seq = oDisposalHeader.Dh_seq;
                    }
                    result = _inventoryDAL.Save_Disposal_Locations(item);
                }

                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
                err = ex.Message;
            }

            return result;
        }

        //Tharaka 2015-11-24
        public DisposalHeader GET_DISPOSAL_JOB_HEADER(string COM, string PC, string DocNum, string status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_JOB_HEADER(COM, PC, DocNum, status);
        }

        //Randima 2016-10-31
        public List<DispCurrentLocation> GET_DISPOSAL_CURR_LOC_LIST(int _seqNo, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_CURR_LOC_LIST(_seqNo, _docNo);
        }

        //Randima 2016-10-31
        public List<DisposalCurrStatus> GET_DISPOSAL_CURR_STUS_LIST(int _seqNo, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_CURR_STUS_LIST(_seqNo, _docNo);
        }

        //Randima 2016-10-31
        public List<DisposalLocation> GET_DISPOSAL_LOC_LIST(int _seqNo, string _docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_LOC_LIST(_seqNo, _docNo);
        }

        //Randima 2016-11-03
        public Int32 Save_Disposal_Items(List<DisposalItem> dispItm, bool isupdate)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            int effect = 0;
            foreach (DisposalItem item in dispItm)
            {
                effect = _inventoryDAL.Save_Disposal_Items(item, isupdate);
            }
            _inventoryDAL.TransactionCommit();
            return effect;
        }

        //Randima 2016-11-09
        public Int32 Save_Disposal_Hdr(DisposalHeader dispHdr)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            int effect = 0;
            Int32 newSeqNum = 0;

            effect = _inventoryDAL.Save_Disposal_Header(dispHdr, out newSeqNum);

            _inventoryDAL.TransactionCommit();
            return newSeqNum;
        }

        //Randima 2016-11-03
        public List<DisposalItem> GET_DISPOSAL_ITM_LIST(int _seqNo, string _docNo, bool istextchange)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_ITM_LIST(_seqNo, _docNo, istextchange);
        }

        //Randima 2016-11-04
        public int GET_DISPOSALITM_LINE(int _seqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSALITM_LINE(_seqNo);
        }

        //Tharaka 2015-11-24
        public List<DisposalLocation> GET_DISPOSAL_LOCATIONS(Int32 Seq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_LOCATIONS(Seq);
        }

        //Tharaka 2015-11-24
        public List<DisposalHeader> GET_DISPOSAL_JOBS(DisposalHeader oFilter)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_JOBS(oFilter);
        }

        //Tharaka 2015-11-26
        public Int32 DisposalAdjustmentWithJobSave(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, DisposalHeader oDisposalHeader, List<DisposalLocation> oDisposalLocations, MasterAutoNumber mastAutoNo, out string err, out string jobNumber, bool IsTemp = false)
        {
            Int32 result = 0;

            err = string.Empty;
            jobNumber = string.Empty;
            _docNo = string.Empty;

            try
            {

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();


                if (oDisposalHeader.Dh_seq == 0)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = oDisposalHeader.Dh_com + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    oDisposalHeader.Dh_doc_no = _documentNo;
                    jobNumber = _documentNo;
                    result = _inventoryDAL.UpdateAutoNumber(mastAutoNo);

                    //Update TempPick Doc Numbers
                    result = _inventoryRepDAL.UpdateCashConvertionDocNo(oDisposalHeader.Dh_anal_5, _documentNo);
                    oDisposalHeader.Dh_anal_5 = string.Empty;
                }
                else
                {
                    jobNumber = oDisposalHeader.Dh_doc_no;
                }
                //if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                //{
                //    oDisposalHeader.Dh_stus = "A";
                //}

                result = _inventoryDAL.UPDATE_DISPOSAL_LOC_STATUS(oDisposalHeader.Dh_seq, null);

                Int32 newSeqNum = 0;
                result = _inventoryDAL.Save_Disposal_Header(oDisposalHeader, out newSeqNum);

                foreach (DisposalLocation item in oDisposalLocations)
                {
                    if (oDisposalHeader.Dh_seq == 0)
                    {
                        item.Dl_seq = newSeqNum;
                        item.Dl_doc_no = oDisposalHeader.Dh_doc_no;
                    }
                    else
                    {
                        item.Dl_seq = oDisposalHeader.Dh_seq;
                    }
                    result = _inventoryDAL.Save_Disposal_Locations(item);
                }

                if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                {
                    _inventoryMovementHeader.Ith_job_no = jobNumber;
                    _inventoryMovementHeader.Ith_oth_docno = jobNumber;

                    //result = _salesDAL.UpdateDisposalReceiptNumber(jobNumber, _inventoryMovementHeader.Ith_com, "A", null);

                    //DataTable dt = DataTableExtensions.ToDataTable(_reptPickSerials);

                    result = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                    result = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //Rukshan 10/oct/2015
                    if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                    {
                        foreach (ReptPickSerials _serial in _reptPickSerials)
                        {
                            decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                            _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                        }
                    }

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }

                    //Check Maximum value
                    DataTable dtTemp = _inventoryDAL.GET_INTBATCH_BY_DOC(_docNo);
                    List<InventoryBatchN> oBatch = DataTableExtensions.ToGenericList<InventoryBatchN>(dtTemp, InventoryBatchN.Converter);

                    decimal MaxValue = oDisposalHeader.Dh_max_val;
                    decimal BatchValue = oBatch.Sum(x => x.Inb_qty * x.Inb_unit_cost);
                    if (oDisposalHeader.Dh_chk_max_val == 1)
                    {
                        if (BatchValue > MaxValue)
                        {
                            result = -1;
                            _docNo = "Total item value can not exceed the maximum value";
                            jobNumber = string.Empty;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            return result;
                        }
                    }
                }

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();

                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _docNo = "ERROR : " + ex.Message.ToString();
                jobNumber = string.Empty;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
            }
            return result;
        }

        //Randima 2016-10-31
        public Int32 DisposalAdjustmentWithJobSaveNew(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, DisposalHeader oDisposalHeader, List<DisposalLocation> oDisposalLocations, List<DispCurrentLocation> oStockAtLocations, List<DisposalCurrStatus> oStockStatus, List<DisposalItem> oDispItems, MasterAutoNumber mastAutoNo, out string err, out string jobNumber, bool IsTemp = false)
        {
            Int32 result = 0;

            err = string.Empty;
            jobNumber = string.Empty;
            _docNo = string.Empty;

            try
            {

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();


                if (oDisposalHeader.Dh_seq == 0)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = oDisposalHeader.Dh_com + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    oDisposalHeader.Dh_doc_no = _documentNo;
                    jobNumber = _documentNo;
                    result = _inventoryDAL.UpdateAutoNumber(mastAutoNo);

                    //Update TempPick Doc Numbers
                    result = _inventoryRepDAL.UpdateCashConvertionDocNo(oDisposalHeader.Dh_anal_5, _documentNo);
                    oDisposalHeader.Dh_anal_5 = string.Empty;
                }
                else
                {
                    jobNumber = oDisposalHeader.Dh_doc_no;
                }
                //if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                //{
                //    oDisposalHeader.Dh_stus = "A";
                //}

                result = _inventoryDAL.UPDATE_DISPOSAL_LOC_STATUS(oDisposalHeader.Dh_seq, null);

                Int32 newSeqNum = 0;
                result = _inventoryDAL.Save_Disposal_Header(oDisposalHeader, out newSeqNum);

                if (oDisposalLocations != null)
                {
                    foreach (DisposalLocation item in oDisposalLocations)
                    {
                        if (oDisposalHeader.Dh_seq == 0)
                        {
                            item.Dl_seq = newSeqNum;
                            item.Dl_doc_no = oDisposalHeader.Dh_doc_no;
                        }
                        else
                        {
                            item.Dl_seq = oDisposalHeader.Dh_seq;
                        }
                        result = _inventoryDAL.Save_Disposal_Locations(item);
                    }
                }

                if (oStockAtLocations != null)
                {
                    foreach (DispCurrentLocation dispCurLoc in oStockAtLocations)
                    {
                        if (oDisposalHeader.Dh_seq == 0)
                        {
                            dispCurLoc.Idc_seq = newSeqNum;
                            dispCurLoc.Idc_doc_no = oDisposalHeader.Dh_doc_no;
                        }
                        else
                        {
                            dispCurLoc.Idc_seq = oDisposalHeader.Dh_seq;
                        }
                        result = _inventoryDAL.Save_Disposal_Curr_Locations(dispCurLoc);
                    }
                }

                if (oStockStatus != null)
                {

                    foreach (DisposalCurrStatus dispCurStus in oStockStatus)
                    {
                        if (oDisposalHeader.Dh_seq == 0)
                        {
                            dispCurStus.Ids_seq = newSeqNum;
                            dispCurStus.Ids_doc_no = oDisposalHeader.Dh_doc_no;
                        }
                        else
                        {
                            dispCurStus.Ids_seq = oDisposalHeader.Dh_seq;
                        }
                        result = _inventoryDAL.Save_Disposal_Curr_Stus(dispCurStus);
                    }
                }
                if (oDispItems != null)
                {
                    if (oDispItems.Count > 0)
                    {
                        foreach (DisposalItem dispItem in oDispItems)
                        {
                            if (oDisposalHeader.Dh_seq == 0)
                            {
                                dispItem.Idd_seq = newSeqNum;
                                dispItem.Idd_job_no = oDisposalHeader.Dh_doc_no;
                            }
                            else
                            {
                                dispItem.Idd_seq = oDisposalHeader.Dh_seq;
                            }
                            result = _inventoryDAL.Save_Disposal_Items(dispItem, false);
                        }
                    }
                    else
                    {
                        List<DisposalItem> existItm = _inventoryDAL.GET_DISPOSAL_ITM_LIST(oDisposalHeader.Dh_seq, oDisposalHeader.Dh_doc_no, false);
                        if (existItm != null && existItm.Count > 0)
                        {
                            foreach (DisposalItem dispItem in existItm)
                            {
                                dispItem.Idd_act = 0;
                                result = _inventoryDAL.Save_Disposal_Items(dispItem, false);
                            }
                        }
                    }
                }

                if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                {
                    _inventoryMovementHeader.Ith_job_no = jobNumber;
                    _inventoryMovementHeader.Ith_oth_docno = jobNumber;

                    //result = _salesDAL.UpdateDisposalReceiptNumber(jobNumber, _inventoryMovementHeader.Ith_com, "A", null);

                    //DataTable dt = DataTableExtensions.ToDataTable(_reptPickSerials);

                    result = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                    result = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //Rukshan 10/oct/2015
                    if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                    {
                        foreach (ReptPickSerials _serial in _reptPickSerials)
                        {
                            decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                            _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                        }
                    }

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }

                    //Check Maximum value
                    DataTable dtTemp = _inventoryDAL.GET_INTBATCH_BY_DOC(_docNo);
                    List<InventoryBatchN> oBatch = DataTableExtensions.ToGenericList<InventoryBatchN>(dtTemp, InventoryBatchN.Converter);

                    decimal MaxValue = oDisposalHeader.Dh_max_val;
                    decimal BatchValue = oBatch.Sum(x => x.Inb_qty * x.Inb_unit_cost);
                    if (oDisposalHeader.Dh_chk_max_val == 1)
                    {
                        if (BatchValue > MaxValue)
                        {
                            result = -1;
                            _docNo = "Total item value can not exceed the maximum value";
                            jobNumber = string.Empty;
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _inventoryRepDAL.ConnectionClose();
                            _inventoryDAL.ConnectionClose();
                            _salesDAL.ConnectionClose();
                            return result;
                        }
                    }
                }

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _docNo = "ERROR : " + ex.Message.ToString();
                jobNumber = string.Empty;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
            }
            return result;
        }

        //Randima 2016-11-09
        public Int32 DisposalAdjustmentSave(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, DisposalHeader oDisposalHeader, List<DisposalItem> outDispItm, out string _docNo, out string err, bool IsTemp = false, bool check = true)
        {
            Int32 result = 0;
            string jobNumber = oDisposalHeader.Dh_doc_no;
            err = string.Empty;
            _docNo = string.Empty;

            try
            {

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();




                if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                {

                    _inventoryMovementHeader.Ith_job_no = jobNumber;
                    _inventoryMovementHeader.Ith_oth_docno = jobNumber;

                    result = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _inventoryDAL, false);
                    result = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //Rukshan 10/oct/2015
                    if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                    {
                        foreach (ReptPickSerials _serial in _reptPickSerials)
                        {
                            decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                            _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                        }
                    }

                    if (_inventoryMovementHeader.Ith_anal_10 == true)
                    {
                        _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                    }

                    //Check Maximum value
                    /*  DataTable dtTemp = _inventoryDAL.GET_INTBATCH_BY_DOC(_docNo);
                      List<InventoryBatchN> oBatch = DataTableExtensions.ToGenericList<InventoryBatchN>(dtTemp, InventoryBatchN.Converter);

                      decimal MaxValue = oDisposalHeader.Dh_max_val;
                      decimal BatchValue = oBatch.Sum(x => x.Inb_qty * x.Inb_unit_cost);
                      if (oDisposalHeader.Dh_chk_max_val == 1)
                      {
                          if (BatchValue > MaxValue)
                          {
                              result = -1;
                              _docNo = "Total item value can not exceed the maximum value";
                              jobNumber = string.Empty;
                              _inventoryRepDAL.TransactionRollback();
                              _inventoryDAL.TransactionRollback();
                              _salesDAL.TransactionRollback();
                              return result;
                          }
                      }
                      */




                    //List<DisposalItem> existingDispItm = _inventoryDAL.GET_DISPOSAL_ITM_LIST(oDisposalHeader.Dh_seq, oDisposalHeader.Dh_doc_no);
                    if (outDispItm != null)
                    {
                        if (outDispItm.Count > 0)
                        {
                            foreach (DisposalItem itm in outDispItm)
                            {
                                MasterItem mstItm = _inventoryDAL.GetItem(oDisposalHeader.Dh_com, itm.Idd_itm_cd);
                                if (mstItm.Mi_is_ser1 == 1)
                                {
                                    itm.Idd_act = 0;
                                }
                                else
                                {
                                    //decimal totalQty = existingDispItm.Where(x => x.Idd_itm_cd == itm.Idd_itm_cd && x.Idd_cur_loc == itm.Idd_cur_loc).FirstOrDefault().Idd_qty;

                                    if (itm.Idd_qty == itm.Idd_scan_qty)
                                    {
                                        itm.Idd_act = 0;
                                    }
                                    else if (itm.Idd_qty > itm.Idd_scan_qty && itm.Idd_scan_qty != 0)
                                    {
                                        List<ReptPickSerials> _tempSer = _inventoryDAL.Search_serials_for_itemCD(oDisposalHeader.Dh_com, itm.Idd_cur_loc, itm.Idd_itm_cd, string.Empty, string.Empty, "", false);
                                        List<ReptPickSerials> _tempSer1 = _tempSer.Where(x => x.Tus_ser_id != itm.Idd_ser_id).ToList();

                                        itm.Idd_ser_id = _tempSer1.FirstOrDefault().Tus_ser_id;
                                        itm.Idd_scan_stus = 0;
                                        itm.Idd_qty -= itm.Idd_scan_qty;
                                        //NON SERI INACTIVE
                                        // itm.Idd_act = 0;
                                    }
                                    else if (itm.Idd_scan_qty == 0)
                                    {
                                        itm.Idd_act = 0;
                                    }
                                }
                                _inventoryDAL.Save_Disposal_Items(itm, false);
                            }

                        }

                    }
                    if (oDisposalHeader.Dh_stus == "F")
                    {
                        int outSeqNo = 0;
                        _inventoryDAL.Save_Disposal_Header(oDisposalHeader, out outSeqNo);
                    }

                }

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();

                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _docNo = "ERROR : " + ex.Message.ToString();
                jobNumber = string.Empty;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
            }
            return result;
        }


        //Lakshan 24/11/2015
        public DataTable GetContainerBlDetails(string p_container, string p_bl, string p_date_range, string p_from, string p_to, string p_agent,
           string p_container_tp, string p_compmany, string _option)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetContainerBlDetails(p_container, p_bl, p_date_range, p_from, p_to, p_agent,
            p_container_tp, p_compmany, _option);
        }

        //Lakshan 24/11/2015
        public DataTable GetContainerDetails(string p_container, string p_bl, string p_date_range, string p_from, string p_to, string p_agent,
          string p_container_tp, string p_compmany)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetContainerDetails(p_container, p_bl, p_date_range, p_from, p_to, p_agent,
            p_container_tp, p_compmany);
        }
        //Lakshan 24/11/2015
        public DataTable GetContainerSummary(string p_container, string p_bl, string p_date_range, string p_from, string p_to, string p_agent,
         string p_container_tp, string p_compmany)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetContainerSummary(p_container, p_bl, p_date_range, p_from, p_to, p_agent,
            p_container_tp, p_compmany);
        }

        //Lakshan 24/11/2015
        public DataTable GetContainerBlList(string p_container, string p_bl, string p_date_range, string p_from, string p_to, string p_agent, string p_container_tp, string p_compmany)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetContainerBlList(p_container, p_bl, p_date_range, p_from, p_to, p_agent, p_container_tp, p_compmany);
        }

        //Sahan 28 Nov/2015
        public DataTable GetSearchMRNWeb(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSearchMRNWeb(_initialSearchParams, _searchCatergory, _searchText);
        }

        //fazan  03 dec 2015
        public DataTable GetCompany(string company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCompany(company);
        }

        //fazan 2015-12-05
        public DataTable GetLocationDetails(string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLocationDetails(company, location);
        }

        //fazan 2015-12-07
        public DataTable LoacationType()
        {
            _inventoryDAL = new InventoryDAL();

            return _inventoryDAL.LoacationType();
        }

        //fazan 2015-12-07
        public DataTable GetCategeryType()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCategeryType();
        }

        //fazan 2015 dec 07
        public DataTable Get_Grade_types()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Grade_types();
        }

        //fazan 2015-12-07
        public Int32 UpdateLocationDetails(string company, string location, string opearation, string channel, string subchanel, string reference, string address1, string address2, string tel, string mobile, string fax, string contactperson, string country, string province, string district,
            string Email, string location_N, string town, string web, string categery, string p_grade, int sublocation, string mainLocationcd, int online, string managercd,
            int forwardQty, int suspended, int act, string createdby, DateTime createdate, string modifyby, DateTime modifydate, string sessionId, string anal1, string anal2, decimal ana13, decimal anal4, string anal5, DateTime anal6, string locationtype, int allowbin, string defpc, string sev_chnl, string p_auto_ain, string p_fx_loc, DateTime p_scm2_st, int p_chk_man, DateTime p_commencedon, decimal p_approvedstockvalue, int p_bankGrantvalue, string p_wh_com, string p_wh_cd, int p_serial, int pda)
        {
            Int32 effect;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            effect = _inventoryDAL.UpdateLocationDetails(company, location, opearation, channel, subchanel, reference, address1, address2, tel, mobile, fax, contactperson, country, province, district, Email, location_N, town,
                web, categery, p_grade, sublocation, mainLocationcd, online, managercd, forwardQty, suspended, act, createdby, createdate, modifyby, modifydate, sessionId, anal1, anal2, ana13, anal4, anal5, anal6, locationtype, allowbin,
                defpc, sev_chnl, p_auto_ain, p_fx_loc, p_scm2_st, p_chk_man, p_commencedon, p_approvedstockvalue, p_bankGrantvalue, p_wh_com, p_wh_cd, p_serial, pda);
            _inventoryDAL.ConnectionClose();

            return effect;
        }


        //fazan 2015-12-09
        public Int32 UpdateLog_Details(string company, string location, string opearation, string channel, string subchanel, string reference, string address1, string address2, string tel, string mobile, string fax, string contactperson, string country, string province, string district,
    string Email, string location_N, string town, string web, string categery, string p_grade, int sublocation, string mainLocationcd, int online, string managercd,
    int forwardQty, int suspended, int act, string createdby, DateTime createdate, string modifyby, DateTime modifydate, string sessionId, string anal1, string anal2, decimal ana13, decimal anal4, string anal5, DateTime anal6, string locationtype, int allowbin, string defpc, string sev_chnl, string p_auto_ain, string p_fx_loc, DateTime p_scm2_st, int p_chk_man, DateTime p_commencedon, decimal p_approvedstockvalue, int p_bankGrantvalue, string p_wh_com, string p_wh_cd, int p_serial, string logby, DateTime logdate, string logsession)
        {
            Int32 effect;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            effect = _inventoryDAL.UpdateLog_Details(company, location, opearation, channel, subchanel, reference, address1, address2, tel, mobile, fax, contactperson, country, province, district, Email, location_N, town,
                web, categery, p_grade, sublocation, mainLocationcd, online, managercd, forwardQty, suspended, act, createdby, createdate, modifyby, modifydate, sessionId, anal1, anal2, ana13, anal4, anal5, anal6, locationtype, allowbin,
                defpc, sev_chnl, p_auto_ain, p_fx_loc, p_scm2_st, p_chk_man, p_commencedon, p_approvedstockvalue, p_bankGrantvalue, p_wh_com, p_wh_cd, p_serial, logby, logdate, logsession);
            _inventoryDAL.ConnectionClose();

            return effect;

        }

        //fazan 2015-12-09
        public DataTable getDistrictDetails(string p_code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getDistrictDetails(p_code);
        }
        //fazan 2015-12-09
        public DataTable getTownDetails(string country, string province, string district)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getTownDetails(country, province, district);

        }

        //Tharaka 2015-12-10
        public List<ReptPickSerials> GetOutwarditemsNew(string _loc, string _defbin, ReptPickHeader _scanheaderNew, out string _unavailableitemlist, out string err)
        {
            _unavailableitemlist = string.Empty;
            err = string.Empty;
            List<ReptPickSerials> _picklist = new List<ReptPickSerials>();

            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                //Control @ Client by Prabhath on 04/12/2013 --> Same AOD Outward IN (Cause of Delete Statement.)
                DataTable _headerchk = _inventoryRepDAL.GetPickHeaderByDocument(_scanheaderNew.Tuh_usr_com, _scanheaderNew.Tuh_doc_no);
                Int32 resu = _inventoryRepDAL.DeleteTempPickObjs(_scanheaderNew.Tuh_usrseq_no);
                string _itemlist = string.Empty;

                String _outwardType = _scanheaderNew.Tuh_doc_tp; //Need for Implement AOD, DO, PRN

                Int16 _docDirection = 0;
                if (_scanheaderNew.Tuh_direct == true)
                { _docDirection = 1; }

                MasterItem _itmlist = new MasterItem();

                if (_scanheaderNew.Tuh_usrseq_no == 0)
                {
                    _scanheaderNew.Tuh_usrseq_no = _inventoryDAL.Generate_new_seq_num(_scanheaderNew.Tuh_usr_id, _scanheaderNew.Tuh_doc_tp, _docDirection, _scanheaderNew.Tuh_usr_com);
                }

                if (_headerchk != null && _headerchk.Rows.Count > 0)
                {
                    _scanheaderNew.Tuh_pro_user = _headerchk.Rows[0].Field<string>("Tuh_pro_user");
                    _scanheaderNew.Tuh_usr_id = _headerchk.Rows[0].Field<string>("Tuh_usr_id");
                    _scanheaderNew.Tuh_cre_dt = _headerchk.Rows[0].Field<DateTime>("Tuh_cre_dt");
                }

                _inventoryRepDAL.SavePickedHeader(_scanheaderNew);

                InventoryHeader oAOD_FROM_INTHDR = _inventoryDAL.Get_Int_Hdr(_scanheaderNew.Tuh_doc_no);
                MasterLocation _mstLoc = _generalDAL.GetLocationInfor(oAOD_FROM_INTHDR.Ith_com, oAOD_FROM_INTHDR.Ith_loc);

                if (_mstLoc.Ml_is_serial)
                {
                    //Get Serialized Items
                    #region MyRegion
                    DataTable _dt0 = new DataTable();
                    DataTable _dt00 = new DataTable();
                    _dt0 = _inventoryDAL.GetIntSerDetails(_scanheaderNew.Tuh_doc_no);
                    _dt00 = _inventoryDAL.GetScmSerDetails(_scanheaderNew.Tuh_doc_no);
                    _dt0.Merge(_dt00);
                    if (_dt0.Rows.Count > 0)
                    {
                        foreach (DataRow _dr in _dt0.Rows)
                        {
                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_scanheaderNew.Tuh_usr_com, (String)_dr["ITS_ITM_CD"]);
                            if (_itmlist != null)
                            {
                                _pick.Tus_base_doc_no = _scanheaderNew.Tuh_doc_no;
                                _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                                _pick.Tus_bin = _defbin;
                                _pick.Tus_com = _scanheaderNew.Tuh_usr_com;
                                _pick.Tus_cre_by = _scanheaderNew.Tuh_usr_id;
                                _pick.Tus_cre_dt = System.DateTime.Now;
                                _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                                _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                                _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                                _pick.Tus_doc_dt = System.DateTime.Now.Date;
                                _pick.Tus_doc_no = _scanheaderNew.Tuh_doc_no;

                                if (_outwardType == "AOD")
                                {
                                    _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                    _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                    _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                    _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                    _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                    _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                                    _pick.Tus_ageloc = _dr["ITS_AGELOC"] == DBNull.Value ? string.Empty : (String)_dr["ITS_AGELOC"];
                                    _pick.Tus_ageloc_dt = _dr["ITS_AGELOC_DT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_AGELOC_DT"];
                                    if (string.IsNullOrEmpty(_dr["ITS_ISOWNMRN"].ToString()))
                                    { _pick.Tus_isownmrn = 0; }
                                    else
                                    { _pick.Tus_isownmrn = Convert.ToInt32(_dr["ITS_ISOWNMRN"]); }

                                }
                                else
                                {
                                    _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                    _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                    _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                    _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                    _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                    _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                                }

                                _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                                _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_itm_model = _itmlist.Mi_model;
                                _pick.Tus_loc = _loc;
                                _pick.Tus_new_remarks = String.Empty;
                                _pick.Tus_new_status = String.Empty;

                                _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                                _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                                _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                                _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];

                                _pick.Tus_out_date = DateTime.Now.Date;
                                _pick.Tus_qty = 1;
                                _pick.Tus_seq_no = 0;
                                _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                                _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                                _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                                _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                                _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                                _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                                _pick.Tus_serial_id = String.Empty;
                                _pick.Tus_session_id = _scanheaderNew.Tuh_session_id;
                                _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);

                                _pick.Tus_usrseq_no = Convert.ToInt32(_scanheaderNew.Tuh_usrseq_no);
                                _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                                _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);

                                _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                                _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 
                                _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015
                                _picklist.Add(_pick);
                                _inventoryRepDAL.SavePickedItemSerials(_pick);
                            }
                            else
                                if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITS_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITS_ITM_CD"];
                        }
                    }
                    #endregion
                }

                //Get None-Serialized Items
                DataTable _dt1 = new DataTable();
                DataTable _dt11 = new DataTable();
                if (_mstLoc.Ml_is_serial)
                {
                    _dt1 = _inventoryDAL.GetIntBatchDetailsDecimal(_scanheaderNew.Tuh_doc_no);
                    _dt11 = _inventoryDAL.GetScmBatchDetailsDecimal(_scanheaderNew.Tuh_doc_no);
                }
                else
                {
                    _dt1 = _inventoryDAL.GET_INTBATCH_BY_DOC(_scanheaderNew.Tuh_doc_no);
                    _dt11 = _inventoryDAL.GET_SCM_BATCH_BY_DOC(_scanheaderNew.Tuh_doc_no);
                }
                _dt1.Merge(_dt11);
                if (_dt1.Rows.Count > 0)
                {


                    #region MyRegion
                    foreach (DataRow _dr in _dt1.Rows)
                    {
                        _itmlist = _inventoryDAL.GetItem(_scanheaderNew.Tuh_usr_com, (String)_dr["ITB_ITM_CD"]);
                        //if (_mstLoc.Ml_is_serial == false)
                        //{
                        //    ReptPickItems _itm = new ReptPickItems();
                        //    //_itm.Tui_batch
                        //    //_itm.Tui_grn
                        //    //_itm.Tui_grn_dt
                        //    //_itm.Tui_pic_itm_cd
                        //    //_itm.Tui_pic_itm_qty
                        //    _itm.Tui_pic_itm_stus=(String)_dr["ITB_ITM_STUS"];
                        //    _itm.Tui_req_itm_cd = (String)_dr["ITB_ITM_CD"];
                        //    _itm.Tui_req_itm_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                        //    //_itm.Tui_req_itm_stus
                        //    //_itm.Tui_sup
                        //    _itm.Tui_usrseq_no = Convert.ToInt32(_scanheaderNew.Tuh_usrseq_no);

                        //    _inventoryRepDAL.SavePickedItems(_itm);
                        //}
                        // else
                        // {
                        #region Pick serial
                        //if (_mstLoc.Ml_is_serial == 0)
                        ReptPickSerials _pick = new ReptPickSerials();
                        if (_itmlist != null)
                        {
                            _pick.Tus_base_doc_no = _scanheaderNew.Tuh_doc_no;
                            _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITB_ITM_LINE"]);
                            _pick.Tus_batch_line = Convert.ToInt16(_dr["ITB_BATCH_LINE"]);
                            _pick.Tus_bin = _defbin;
                            _pick.Tus_com = _scanheaderNew.Tuh_usr_com;
                            _pick.Tus_cre_by = _scanheaderNew.Tuh_usr_id;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_cross_batchline = 0;
                            _pick.Tus_cross_itemline = 0;
                            _pick.Tus_cross_seqno = 0;
                            _pick.Tus_cross_serline = 0;
                            _pick.Tus_doc_dt = System.DateTime.Now.Date;
                            _pick.Tus_doc_no = _scanheaderNew.Tuh_doc_no;

                            if (_outwardType == "AOD-")
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;
                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }
                            else
                            {
                                _pick.Tus_exist_grncom = string.Empty;
                                _pick.Tus_exist_grnno = string.Empty;
                                _pick.Tus_exist_grndt = DateTime.MinValue;
                                _pick.Tus_exist_supp = string.Empty;

                                _pick.Tus_itm_stus = (String)_dr["ITB_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);
                            }

                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = (String)_dr["ITB_ITM_CD"];
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_line = 0;
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = String.Empty;
                            _pick.Tus_new_status = String.Empty;

                            _pick.Tus_orig_grncom = string.Empty;
                            _pick.Tus_orig_grndt = DateTime.MinValue;
                            _pick.Tus_orig_grnno = string.Empty;
                            _pick.Tus_orig_supp = string.Empty;

                            _pick.Tus_out_date = DateTime.Now.Date;
                            _pick.Tus_qty = Convert.ToDecimal(_dr["ITB_QTY"]);
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_ser_1 = "N/A";
                            _pick.Tus_ser_2 = string.Empty;
                            _pick.Tus_ser_3 = string.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            _pick.Tus_ser_id = 0;
                            _pick.Tus_ser_line = 0;
                            _pick.Tus_serial_id = String.Empty;
                            _pick.Tus_session_id = _scanheaderNew.Tuh_session_id;
                            _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITB_UNIT_COST"]);

                            _pick.Tus_usrseq_no = Convert.ToInt32(_scanheaderNew.Tuh_usrseq_no);
                            _pick.Tus_warr_no = string.Empty;
                            _pick.Tus_warr_period = 0;
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015

                            _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                            _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 
                            _pick.Tus_pgs_prefix = _dr["ITB_MITM_CD"] == DBNull.Value ? string.Empty : (String)_dr["ITB_MITM_CD"]; //Added by Chamal 15-Sep-2015

                            _picklist.Add(_pick);
                            _inventoryRepDAL.SavePickedItemSerials(_pick);

                        }
                        else
                            if (string.IsNullOrEmpty(_itemlist)) _itemlist = (String)_dr["ITB_ITM_CD"]; else _itemlist += ", " + (String)_dr["ITB_ITM_CD"];
                        #endregion
                        // }
                    }
                    #endregion

                }


                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();

                _unavailableitemlist = _itemlist;

            }
            catch (Exception ex)
            {
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();

                err = ex.Message;
            }

            return _picklist;
        }

        //Tharaka 2015-12-11
        public Int32 SavePickedItemSerials(ReptPickSerials _pick)
        {
            Int32 _eff = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _eff = _inventoryRepDAL.SavePickedItemSerials(_pick);

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
            }
            catch (Exception)
            {
                _inventoryRepDAL.TransactionRollback();
                _eff = -1;
            }
            return _eff;
        }

        //fazan 2015-12-10
        public DataTable SortBLDetails(string BL_NO, string Doc_No, string Ref_No, string Entry_No)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SortBLDetails(BL_NO, Doc_No, Ref_No, Entry_No);
        }

        //fazan 2015-12-11
        public DataTable invoiceInfo()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.invoiceInfo();
        }
        //fazan 2015-12-11
        public DataTable InvoiceWarranty_INFO(string serialno, string warrantyno, string invoice, string dono)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.InvoiceWarranty_INFO(serialno, warrantyno, invoice, dono);
        }

        //fazan 2015-12-12
        public Int32 Inventorysmst_Update(int warranty_period, string Remarks, string customer, string Details, DateTime warrentyDt, int serialid)
        {
            Int32 effect;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            effect = _inventoryDAL.Inventorysmst_Update(warranty_period, Remarks, customer, Details, warrentyDt, serialid);
            return effect;
        }

        //Sahan 14/Dec/2015
        public DataTable CheckDocIsInRepDB(string company, string request)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckDocIsInRepDB(company, request);
        }

        //fazan 2015-12-15
        public Int32 warranty_amend_insert(string request_by, DateTime request_dt, string req_session, int req_serid, string status, string app_by, DateTime app_date, string app_session, int war_period, string war_remarks, DateTime warranty_stdt, string customer)
        {
            Int32 eff = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            eff = _inventoryDAL.warranty_amend_insert(request_by, request_dt, req_session, req_serid, status, app_by, app_date, app_session, war_period, war_remarks, warranty_stdt, customer);
            _inventoryDAL.ConnectionClose();
            return eff;

        }

        //fazan 2015-12-16
        public DataTable get_warrenty_ammendData()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_warrenty_ammendData();

        }
        //fazan 2015-12-16
        public DataTable filter_warranty_approve(string war_from, string war_to)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.filter_warranty_approve(war_from, war_to);

        }



        //fazan 2015-12-16
        public DataTable getOperationCode()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getOperationCode();
        }

        //fazan 2015-12-16
        public DataTable searchtowndata(string countrycd, string description, string province, string district, string towncd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.searchtowndata(countrycd, description, province, district, towncd);

        }


        //fazan 2015-12-17
        public DataTable s_districtDetails(string districtcd, string description, string provincecd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.s_districtDetails(districtcd, description, provincecd);

        }

        //Sahan 17/Dec/2015
        public DataTable CheckIsPDALoc(string company, string loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckIsPDALoc(company, loc);
        }

        //Sahan 17/Dec/2015
        public DataTable CheckHasLoadingBay(string company, string doc, string loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckHasLoadingBay(company, doc, loc);
        }

        //Sahan 17/Dec/2015
        public Int32 DeleteRepSerials(Int32 seqno, string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.DeleteRepSerials(seqno, doc);
        }

        //Sahan 17/Dec/2015
        public List<ReptPickSerials> GetTempPickSerialBySeqNo(Int32 seqno, string _docNo, string company, string loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTempPickSerialBySeqNo(seqno, _docNo, company, loc);
        }
        //Rukshan 18/Dec/2015
        public int SaveMRNRequestApproveamend(List<InventoryRequestItem> _inventoryRequest, InventoryRequest _inventoryRequesthdr, out string _docNo)
        {
            int result = 0;
            _docNo = "";
            string _documentNo = string.Empty;
            bool _resUpdateErr = false;
            string _errro = "";
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                result = _inventoryDAL.SaveInventoryRequestforApproval(_inventoryRequesthdr);
                if (_inventoryRequest != null)
                {
                    foreach (InventoryRequestItem _ReqItem in _inventoryRequest)
                    {
                        _inventoryDAL.SaveInventoryRequestItem(_ReqItem);
                        if (_inventoryRequesthdr.Temp_itr_chnl_allocation)
                        {
                            UpdateItemAllocationDataFIFO(_inventoryDAL, _ReqItem, _inventoryRequesthdr);
                        }
                        #region update reservation data 08 Nov 2016
                        if (_inventoryRequesthdr.TMP_IS_RES_UPDATE)
                        {
                            if (!string.IsNullOrEmpty(_ReqItem.Itri_res_no))
                            {
                                if (_ReqItem.Itri_res_no != "N/A")
                                {
                                    int _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                    {
                                        IRL_CURT_COM = _inventoryRequesthdr.Itr_com,
                                        IRL_CURT_LOC = _inventoryRequesthdr.Itr_loc,
                                        IRL_ORIG_DOC_TP = _inventoryRequesthdr.Itr_tp,
                                        IRL_ORIG_DOC_NO = _inventoryRequesthdr.Itr_ref,
                                        IRL_ORIG_DOC_DT = DateTime.Now,

                                        IRL_CURT_DOC_TP = _inventoryRequesthdr.Itr_sub_tp,
                                        IRL_CURT_DOC_NO = _documentNo,
                                        IRL_CURT_DOC_DT = _inventoryRequesthdr.Itr_dt,
                                        IRL_RES_NO = _ReqItem.Itri_res_no,
                                        IRL_ITM_CD = _ReqItem.Itri_itm_cd,
                                        IRL_ITM_STUS = _ReqItem.Itri_itm_stus,
                                        IRL_MOD_BY_NEW = _inventoryRequesthdr.Itr_cre_by,
                                        IRL_MOD_SESSION = _inventoryRequesthdr.Itr_session_id,
                                        IRL_MOD_DT = DateTime.Now,
                                        IRL_CRE_BY = _inventoryRequesthdr.Itr_cre_by,
                                        IRL_CRE_DT = DateTime.Now,
                                        IRL_CRE_SESSION = _inventoryRequesthdr.Itr_session_id,
                                        IRL_RES_QTY = _ReqItem.Itri_qty
                                    }, 0, _inventoryDAL, out _errro);
                                    if (_res <= 0)
                                    {
                                        _resUpdateErr = true;
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    _inventoryDAL.TransactionCommit();
                    result = 1;
                }
            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _docNo = ex.Message;
            }
            return result;
        }

        //Fazan 18-Dec-2015
        public DataTable getGrn_details(string doc_no)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getGrn_details(doc_no);
        }

        //Fazan 21-Dec-2015
        public DataTable warehouse_company(string p_mw_com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.warehouse_company(p_mw_com);
        }


        //Rukshan 22-Dec-2015
        public Int16 UpdateAllScanSerials(ReptPickSerials _reptPickSerials)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerials != null) effect = _inventoryRepDAL.UpdatePickedItemSerials(_reptPickSerials);
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            return effect;
        }

        //Tharaka 2015-12-23
        public DataTable GetItemBalanceForBIN(string _company, string _location, string _item, string _status, String BIN)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemBalanceForBIN(_company, _location, _item, _status, BIN);
        }

        //Tharaka 2015-12-29 InventorySerialN
        private Int32 InventryCostCalculation(InventoryBatchN invSerials, InventorySerialN oSerials, String UserID, string SessionID, string BaseDocument, Int32 SeqNumber, Int32 direction)
        {
            Int32 Result = 0;
            if (_generalDAL == null)
            {
                _generalDAL = new GeneralDAL();
            }
            if (invSerials == null || oSerials == null)
            {
                return Result;
            }
            if (_inventoryDAL == null)
            {
                _inventoryDAL = new InventoryDAL();
            }
            MasterItem oItem = _inventoryDAL.GetItem(invSerials.Inb_com, invSerials.Inb_itm_cd);
            MasterLocation oLocation = _generalDAL.GetLocationInfor(invSerials.Inb_com, invSerials.Inb_loc);
            String ItemBaseUOM = oItem.Mi_anal2.ToString();
            WarehouseBin oWarehouseBin = _inventoryDAL.GET_BIN_BY_CODE(invSerials.Inb_com, invSerials.Inb_loc, invSerials.Inb_bin);
            decimal TotalDays = 0;
            InventoryHeader oBaseDocument = null;
            if (direction == 0)
            {
                oBaseDocument = _inventoryDAL.Get_Int_Hdr(oSerials.Ins_cross_doc_no);

                //Modified Sahan for Consignment Return Note
                if (oBaseDocument == null)
                {
                    oBaseDocument = _inventoryDAL.Get_Int_Hdr(oSerials.Ins_fifo_doc_no);
                }
                //
                if (oBaseDocument != null)
                {
                    TotalDays = (decimal)(invSerials.Inb_doc_dt - oBaseDocument.Ith_doc_date).TotalDays;
                }
            }

            _securityDAL = new SecurityDAL();
            DataTable dtSBU = _securityDAL.GetSBU_User(invSerials.Inb_com, UserID, null);
            string SBU = "";
            foreach (DataRow dr in dtSBU.Rows)
            {
                int value = Convert.ToInt32(dr[2].ToString());
                if (value == 1)
                {
                    SBU = dr[1].ToString();
                }
            }

            String BaseDodumet = invSerials.Inb_base_doc_no;

            if (oWarehouseBin != null && !string.IsNullOrEmpty(oWarehouseBin.Ibn_tp) && !string.IsNullOrEmpty(oItem.Mi_anal2))
            {
                List<MST_COM_LOGI_COST> oLogiCosts = _inventoryDAL.GET_LOGI_COST(invSerials.Inb_com, ItemBaseUOM, oWarehouseBin.Ibn_tp, direction);
                if (oLogiCosts != null)
                {
                    foreach (MST_COM_LOGI_COST oCostItem in oLogiCosts)
                    {
                        decimal CostValue = 0;
                        if (oItem.Mi_anal2 == "W")
                        {
                            CostValue = oCostItem.Mclc_per_rt * 1 * TotalDays;
                        }
                        else if (oItem.Mi_anal2 == "V")
                        {
                            CostValue = oItem.Mi_dim_height * oItem.Mi_dim_length * oItem.Mi_dim_width * oCostItem.Mclc_per_rt * TotalDays;
                        }

                        INT_BATCHLOGICOST oBatchCost = new INT_BATCHLOGICOST();
                        oBatchCost.Itbc_seq_no = invSerials.Inb_seq_no;
                        oBatchCost.Itbc_itm_line = invSerials.Inb_itm_line;
                        oBatchCost.Itbc_batch_line = invSerials.Inb_batch_line;
                        oBatchCost.Itbc_cost_line = oLogiCosts.IndexOf(oCostItem) + 1;
                        oBatchCost.Itbc_batch_no = invSerials.Inb_batch_no;
                        oBatchCost.Itbc_doc_no = invSerials.Inb_doc_no;
                        oBatchCost.Itbc_doc_dt = invSerials.Inb_doc_dt;
                        oBatchCost.Itbc_com = invSerials.Inb_com;
                        oBatchCost.Itbc_sbu = SBU;
                        oBatchCost.Itbc_channel = oLocation.Ml_cate_2;
                        oBatchCost.Itbc_loc = invSerials.Inb_loc;
                        oBatchCost.Itbc_bin = invSerials.Inb_bin;
                        oBatchCost.Itbc_itm_cd = invSerials.Inb_itm_cd;
                        oBatchCost.Itbc_itm_stus = invSerials.Inb_itm_stus;
                        oBatchCost.Itbc_qty = 1;
                        oBatchCost.Itbc_unit_cost = invSerials.Inb_unit_cost;
                        oBatchCost.Itbc_cost_cat = oCostItem.Mclc_cost_cat;
                        oBatchCost.Itbc_cost_tp = oCostItem.Mclc_cost_tp;
                        oBatchCost.Itbc_cost_ele = oCostItem.Mclc_cost_ele;
                        oBatchCost.Itbc_logi_cost = CostValue;
                        oBatchCost.Itbc_direct = direction;
                        if (direction == 0 && oBaseDocument != null)
                        {
                            oBatchCost.Itbc_no_of = TotalDays;
                            oBatchCost.Itbc_indoc_no = oBaseDocument.Ith_doc_no;
                            oBatchCost.Itbc_indoc_dt = oBaseDocument.Ith_doc_date;
                        }
                        oBatchCost.Itbc_act = 1;
                        oBatchCost.Itbc_cre_by = UserID;
                        oBatchCost.Itbc_cre_dt = DateTime.Now;
                        oBatchCost.Itbc_cre_session = SessionID;
                        oBatchCost.Itbc_mod_by = UserID;
                        oBatchCost.Itbc_mod_dt = DateTime.Now;
                        oBatchCost.Itbc_mod_session = SessionID;

                        Result = _inventoryDAL.SaveIntBatchLogiCost(oBatchCost);

                        //foreach (ReptPickSerials oSerialItem in oSerials)
                        if (invSerials != null)
                        {
                            INR_SERMSTCOST oCostSearial = new INR_SERMSTCOST();
                            oCostSearial.Irsmc_seq = invSerials.Inb_seq_no;
                            oCostSearial.Irsmc_ser_id = oSerials.Ins_ser_id;
                            oCostSearial.Irsmc_com = oSerials.Ins_com;
                            oCostSearial.Irsmc_sbu = SBU;
                            oCostSearial.Irsmc_channel = oLocation.Ml_cate_2;
                            oCostSearial.Irsmc_loc = oSerials.Ins_loc;
                            oCostSearial.Irsmc_cost_cat = oCostItem.Mclc_cost_cat;
                            oCostSearial.Irsmc_cost_tp = oCostItem.Mclc_cost_tp;
                            oCostSearial.Irsmc_cost_ele = oCostItem.Mclc_cost_ele;
                            oCostSearial.Irsmc_cost = CostValue;
                            oCostSearial.Irsmc_direct = direction;
                            oCostSearial.Irsmc_doc_no = invSerials.Inb_doc_no;
                            oCostSearial.Irsmc_doc_dt = invSerials.Inb_doc_dt;
                            oCostSearial.Irsmc_unit_cost = invSerials.Inb_unit_cost;
                            oCostSearial.Irsmc_no_of = (Int32)TotalDays;
                            if (direction == 0 && oBaseDocument != null)
                            {
                                oCostSearial.Irsmc_indoc_no = BaseDocument;
                                oCostSearial.Irsmc_indoc_dt = oBaseDocument.Ith_doc_date;
                            }
                            oCostSearial.Irsmc_act = 1;
                            oCostSearial.Irsmc_cre_by = UserID;
                            oCostSearial.Irsmc_cre_dt = DateTime.Now;
                            oCostSearial.Irsmc_cre_session = SessionID;
                            oCostSearial.Irsmc_mod_by = UserID;
                            oCostSearial.Irsmc_mod_dt = DateTime.Now;
                            oCostSearial.Irsmc_mod_session = SessionID;

                            Result = _inventoryDAL.SaveInrSermstCost(oCostSearial);
                        }
                    }
                }
            }
            return Result;
        }

        //Fazan 22-Dec-2015
        public DataTable GetOperationCode(string com_cd, string loc_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetOperationCode(com_cd, loc_cd);
        }

        public DataTable getchaneldescription(string company, string code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getchaneldescription(company, code);
        }


        public DataTable getdistrictDetails(string province_cd, string districtcd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getdistrictDetails(province_cd, districtcd);
        }

        //Fazan 30-Dec-2015
        public DataTable getunitCost(string itemcode, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getunitCost(itemcode, serial);

        }

        //Fazan 30-Dec-2015
        public DataTable getStorageDetails(string itemcode, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getStorageDetails(itemcode, serial);

        }
        public DataTable get_noofdays(string itemcode, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_noofdays(itemcode, serial);
        }


        public DataTable WarehouseDeatils(string towncode, string countrycode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.WarehouseDeatils(towncode, countrycode);

        }

        public DataTable Loc_Details()
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Loc_Details();
        }

        public DataTable Total_unit_handled(string company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Total_unit_handled(company);
        }

        public DataTable Total_document_handled(string company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Total_document_handled(company);
        }

        //Tharaka 2016-01-05
        public Int32 DeletePickSerByItemAndBaseItemLine(ReptPickSerials _scanserNew, out string err)
        {
            Int32 effect = 0;
            err = string.Empty;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                effect = _inventoryRepDAL.DeletePickSerByItemAndBaseItemLine(_scanserNew);

                _inventoryRepDAL.TransactionCommit();


                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                err = ex.Message;
                _inventoryRepDAL.TransactionRollback();
            }
            return effect;
        }

        //Tharaka 2016-01-05
        public Int32 DeletePickSerByItemAndItemLine(ReptPickSerials _scanserNew, out string err)
        {
            Int32 effect = 0;
            err = string.Empty;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                effect = _inventoryRepDAL.DeletePickSerByItemAndItemLine(_scanserNew);

                _inventoryRepDAL.TransactionCommit();


                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                err = ex.Message;
                _inventoryRepDAL.TransactionRollback();
            }
            return effect;
        }

        //Tharaka 2016-01-05
        public Int32 UPDATE_QTY_ITM_STUS_NEWSTUS(decimal Qty, Int32 Seq, string item, string stus, string stusNew)
        {
            Int32 effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                effect = _inventoryRepDAL.UPDATE_QTY_ITM_STUS_NEWSTUS(Qty, Seq, item, stus, stusNew);
                _inventoryRepDAL.TransactionCommit();

                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
            }
            return effect;
        }
        //Written by Rukshan 24/Dec/2015
        public DataTable GETSEARCHRESERVATION(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETSEARCHRESERVATION(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Written by Rukshan 30/Dec/2015
        public DataTable GetItemInventoryBalancechanel(string _company, string _Item, string _status, string _DFDP)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalancechanel(_company, _Item, _status, _DFDP);
        }

        //Tharaka 2016-01-08
        public Int32 UPDATE_PICK_QTY(decimal Qty, Int32 Seq, string item, string stus, Int32 IsUpdatePick)
        {
            Int32 effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                effect = _inventoryRepDAL.UPDATE_PICK_QTY(Qty, Seq, item, stus, IsUpdatePick);
                _inventoryRepDAL.TransactionCommit();

                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
            }
            return effect;
        }

        //Sahan 14/Jan/2016
        public DataTable LoadItemsBySerial(string item, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemsBySerial(item, serial);
        }

        //Sahan 14/Jan/2016
        public DataTable CheckAbilityMainItemSplit(string item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckAbilityMainItemSplit(item);
        }

        //Sahan 18/Jan/2016
        public List<InventorySubSerialMaster> GetAvailablesubSerilsMainWeb(String _ItemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAvailablesubSerilsMainWeb(_ItemCode);
        }

        //Rukshan 20/Jan/2016
        public DataTable GETREQ_TRACKER_DATA_BY_CUSTEMER(string _customer, string _entyno, int _dateoption, DateTime _ReqDateFrom,
            DateTime _ReqDateTo, DateTime _ExpectedFrom, DateTime ExpectedTo, string _ProfitCenter, string _Loc, string _Item, string _cat1, string _sts = null)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable FinalTbl = new DataTable();
            DataTable EntryTbl = new DataTable();
            DataTable DispatchQtyTbl = new DataTable();
            DataTable ReceiptQtyTbl = new DataTable();
            DataTable CustomerTbl = new DataTable();
            DataRow dr = null;
            FinalTbl.Columns.Add(new DataColumn("Req_App_No", typeof(string)));
            FinalTbl.Columns.Add(new DataColumn("Req_App_Date", typeof(DateTime)));
            FinalTbl.Columns.Add(new DataColumn("Req_No", typeof(string)));
            FinalTbl.Columns.Add(new DataColumn("Req_Date", typeof(DateTime)));
            FinalTbl.Columns.Add(new DataColumn("Req_By", typeof(string)));
            FinalTbl.Columns.Add(new DataColumn("Entry_No", typeof(string)));
            FinalTbl.Columns.Add(new DataColumn("Entry_Date", typeof(DateTime)));
            FinalTbl.Columns.Add(new DataColumn("Entry_Create_Date", typeof(DateTime)));
            FinalTbl.Columns.Add(new DataColumn("Dispatch_Qty", typeof(decimal)));
            FinalTbl.Columns.Add(new DataColumn("Receipt_Qty", typeof(decimal)));
            FinalTbl.Columns.Add(new DataColumn("ReqStatus", typeof(string)));
            FinalTbl.Columns.Add(new DataColumn("Cusdec_EntryNo", typeof(string)));
            FinalTbl.Columns.Add(new DataColumn("Cusdec_EntryDate", typeof(DateTime)));
            FinalTbl.Columns.Add(new DataColumn("IS_VALUE_FOR_GRN", typeof(string))); //Lakshika 
            FinalTbl.TableName = "Tracker";

            if (_customer != null)
            {
                #region Customer
                CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(_customer, null, null, null, _ReqDateFrom, _ReqDateTo);
                if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                {
                    string Reqno = string.Empty;
                    foreach (DataRow entryrow in CustomerTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Reqno))
                        {
                            Reqno = entryrow["itr_req_no"].ToString();
                        }
                        else
                        {
                            Reqno = Reqno + "," + entryrow["itr_req_no"].ToString();
                        }
                        dr["Req_App_No"] = entryrow["itr_req_no"].ToString();
                        dr["Req_App_Date"] = entryrow["itr_dt"].ToString();
                        dr["Req_No"] = entryrow["itr_ref"].ToString();
                        dr["ReqStatus"] = entryrow["itr_stus"].ToString();
                        string date = entryrow["ReqDate"].ToString();
                        if (date != "")
                        {
                            dr["Req_Date"] = entryrow["ReqDate"].ToString();
                        }

                        dr["Req_By"] = entryrow["Req_by"].ToString();
                        dr["Req_By"] = entryrow["Req_by"].ToString();
                        FinalTbl.Rows.Add(dr);
                    }
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Reqno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(tmpReqNo, null);
                        EntryTbl.Merge(dt);
                    }
                    //EntryTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(Reqno, null);
                    if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                    {
                        string Entryno = string.Empty;
                        foreach (DataRow row in EntryTbl.Rows)
                        {
                            if (string.IsNullOrWhiteSpace(Entryno))
                            {
                                Entryno = row["Entry No"].ToString();
                            }
                            else
                            {
                                Entryno = Reqno + "," + row["Entry No"].ToString();
                            }
                            string _no = row["cuh_oth_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Entry_No"] = row["Entry No"].ToString();
                                HRow[i]["Entry_Date"] = row["Entry Date"].ToString();
                                HRow[i]["Entry_Create_Date"] = row["cuh_cre_dt"].ToString();
                                HRow[i]["Cusdec_EntryNo"] = row["cuh_cusdec_entry_no"].ToString();
                                HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime(row["cuh_cusdec_entry_dt"].ToString());
                            }

                        }
                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(tmpReqNo, 1, null, _ReqDateFrom, _ReqDateTo, null);
                            DispatchQtyTbl.Merge(dt);
                        }
                        // DispatchQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(Entryno, 1, null, _ReqDateFrom, _ReqDateTo, null);
                        if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in DispatchQtyTbl.Rows)
                            {
                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                                }

                            }
                        }
                        //searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(tmpReqNo, 1);
                            ReceiptQtyTbl.Merge(dt);
                        }
                        //ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(Entryno, 1);
                        if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in ReceiptQtyTbl.Rows)
                            {

                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Receipt_Qty"] = row["Receipt QTY"].ToString();
                                }

                            }
                        }
                    }
                }
                return FinalTbl;
                #endregion
            }
            else if (_entyno != null)
            {
                #region Entry no
                EntryTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(null, _entyno);
                if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                {
                    string Reqno = string.Empty;
                    foreach (DataRow entryrow in EntryTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Reqno))
                        {
                            Reqno = entryrow["cuh_oth_no"].ToString();
                        }
                        else
                        {
                            Reqno = Reqno + "," + entryrow["cuh_oth_no"].ToString();
                        }

                        dr["Entry_No"] = entryrow["Entry No"].ToString();
                        dr["Entry_Date"] = entryrow["Entry Date"].ToString();
                        dr["Entry_Create_Date"] = entryrow["cuh_cre_dt"].ToString();
                        dr["Req_App_No"] = entryrow["cuh_oth_no"].ToString();
                        dr["Cusdec_EntryNo"] = entryrow["cuh_cusdec_entry_no"].ToString();
                        dr["Cusdec_EntryDate"] = Convert.ToDateTime(entryrow["cuh_cusdec_entry_dt"].ToString());
                        dr["IS_VALUE_FOR_GRN"] = entryrow["IS_VALUE_FOR_GRN"].ToString(); //Lakshika 2016-09-03
                        FinalTbl.Rows.Add(dr);
                    }
                    CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, Reqno, null, null, _ReqDateTo, _ExpectedFrom);
                    if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                    {
                        foreach (DataRow entryrow in CustomerTbl.Rows)
                        {
                            string _no = entryrow["itr_req_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Req_App_No"] = entryrow["itr_req_no"].ToString();
                                HRow[i]["Req_App_Date"] = entryrow["itr_dt"].ToString();
                                HRow[i]["Req_No"] = entryrow["itr_ref"].ToString();
                                string date = entryrow["ReqDate"].ToString();
                                if (date != "")
                                {
                                    dr["Req_Date"] = entryrow["ReqDate"].ToString();
                                }
                                //HRow[i]["Req_Date"] = entryrow["ReqDate"].ToString();
                                HRow[i]["Req_By"] = entryrow["Req_by"].ToString();
                                HRow[i]["ReqStatus"] = entryrow["ITR_STUS"].ToString();
                            }


                        }
                    }
                    DispatchQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(_entyno, 1, null, _ReqDateFrom, _ReqDateTo, null);
                    if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                    {
                        foreach (DataRow row in DispatchQtyTbl.Rows)
                        {
                            string _no = row["ith_entry_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                            }

                        }
                    }
                    ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(_entyno, 1);
                    if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                    {
                        foreach (DataRow row in ReceiptQtyTbl.Rows)
                        {

                            string _no = row["ith_entry_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Receipt_Qty"] = row["Receipt QTY"].ToString();
                            }

                        }
                    }
                }
                return FinalTbl;
                #endregion
            }
            else if (_dateoption > 0)
            {
                #region Customer
                CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_DATE(_ReqDateFrom, _ReqDateTo, _ExpectedFrom, ExpectedTo, _dateoption, _sts);
                if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                {
                    string Reqno = string.Empty;
                    foreach (DataRow entryrow in CustomerTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Reqno))
                        {
                            Reqno = entryrow["itr_req_no"].ToString();
                        }
                        else
                        {
                            Reqno = Reqno + "," + entryrow["itr_req_no"].ToString();
                        }
                        dr["Req_App_No"] = entryrow["itr_req_no"].ToString();
                        dr["Req_App_Date"] = entryrow["itr_dt"].ToString();
                        dr["Req_No"] = entryrow["itr_ref"].ToString();

                        string date = entryrow["ReqDate"].ToString();
                        if (date != "")
                        {
                            dr["Req_Date"] = entryrow["ReqDate"].ToString();
                        }

                        dr["Req_By"] = entryrow["Req_by"].ToString();
                        dr["ReqStatus"] = entryrow["itr_stus"].ToString();
                        FinalTbl.Rows.Add(dr);
                    }
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Reqno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(tmpReqNo, null);
                        EntryTbl.Merge(dt);
                    }
                    if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                    {
                        string Entryno = string.Empty;
                        foreach (DataRow row in EntryTbl.Rows)
                        {
                            if (string.IsNullOrWhiteSpace(Entryno))
                            {
                                Entryno = row["Entry No"].ToString();
                            }
                            else
                            {
                                Entryno = Reqno + "," + row["Entry No"].ToString();
                            }
                            string _no = row["cuh_oth_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Entry_No"] = row["Entry No"].ToString();
                                HRow[i]["Entry_Date"] = row["Entry Date"].ToString();
                                HRow[i]["Entry_Create_Date"] = row["cuh_cre_dt"].ToString();
                                HRow[i]["Cusdec_EntryNo"] = row["cuh_cusdec_entry_no"].ToString();

                                if (row["cuh_cusdec_entry_dt"] == DBNull.Value)
                                {
                                    HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime("01/Jan/1990");
                                }
                                else
                                {
                                    HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime(row["cuh_cusdec_entry_dt"].ToString());
                                }


                            }

                        }

                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(tmpReqNo, 1, null, _ReqDateFrom, _ReqDateTo, null);
                            DispatchQtyTbl.Merge(dt);
                        }

                        if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in DispatchQtyTbl.Rows)
                            {
                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                                }

                            }
                        }
                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(tmpReqNo, 1);
                            ReceiptQtyTbl.Merge(dt);
                        }
                        //ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(Entryno, 1);
                        if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in ReceiptQtyTbl.Rows)
                            {

                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Receipt_Qty"] = row["Receipt QTY"].ToString();
                                }

                            }
                        }
                    }
                    return FinalTbl;
                }
                #endregion

            }
            else if (_ProfitCenter != null)
            {
                #region Profit Center
                CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, null, _ProfitCenter, null, _ReqDateFrom, _ReqDateTo);
                if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                {
                    string Reqno = string.Empty;
                    foreach (DataRow entryrow in CustomerTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Reqno))
                        {
                            Reqno = entryrow["itr_req_no"].ToString();
                        }
                        else
                        {
                            Reqno = Reqno + "," + entryrow["itr_req_no"].ToString();
                        }
                        dr["Req_App_No"] = entryrow["itr_req_no"].ToString();
                        dr["Req_App_Date"] = entryrow["itr_dt"].ToString();
                        dr["Req_No"] = entryrow["itr_ref"].ToString();
                        dr["ReqStatus"] = entryrow["itr_stus"].ToString();
                        string date = entryrow["ReqDate"].ToString();
                        if (date != "")
                        {
                            dr["Req_Date"] = entryrow["ReqDate"].ToString();
                        }

                        dr["Req_By"] = entryrow["Req_by"].ToString();
                        FinalTbl.Rows.Add(dr);
                    }
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Reqno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(tmpReqNo, null);
                        EntryTbl.Merge(dt);
                    }
                    // EntryTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(Reqno, null);
                    if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                    {
                        string Entryno = string.Empty;
                        foreach (DataRow row in EntryTbl.Rows)
                        {
                            if (string.IsNullOrWhiteSpace(Entryno))
                            {
                                Entryno = row["Entry No"].ToString();
                            }
                            else
                            {
                                Entryno = Reqno + "," + row["Entry No"].ToString();
                            }
                            string _no = row["cuh_oth_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Entry_No"] = row["Entry No"].ToString();
                                HRow[i]["Entry_Date"] = row["Entry Date"].ToString();
                                HRow[i]["Entry_Create_Date"] = row["cuh_cre_dt"].ToString();
                                HRow[i]["Cusdec_EntryNo"] = row["cuh_cusdec_entry_no"].ToString();
                                HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime(row["cuh_cusdec_entry_dt"].ToString());
                            }

                        }
                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(tmpReqNo, 1, null, _ReqDateFrom, _ReqDateTo, null);
                            ReceiptQtyTbl.Merge(dt);
                        }
                        //DispatchQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(Entryno, 1, null, _ReqDateFrom, _ReqDateTo, null);
                        if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in DispatchQtyTbl.Rows)
                            {
                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                                }

                            }
                        }
                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(tmpReqNo, 1);
                            ReceiptQtyTbl.Merge(dt);
                        }
                        //ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(Entryno, 1);
                        if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in ReceiptQtyTbl.Rows)
                            {

                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Receipt_Qty"] = string.IsNullOrEmpty(row["Receipt QTY"].ToString()) ? 0 : Convert.ToInt32(row["Receipt QTY"].ToString());
                                }

                            }
                        }
                    }
                }
                return FinalTbl;
                #endregion
            }
            else if (_Loc != null)
            {
                #region Loaction
                CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, null, null, _Loc, _ReqDateFrom, _ReqDateTo);
                if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                {
                    string Reqno = string.Empty;
                    foreach (DataRow entryrow in CustomerTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Reqno))
                        {
                            Reqno = entryrow["itr_req_no"].ToString();
                        }
                        else
                        {
                            Reqno = Reqno + "," + entryrow["itr_req_no"].ToString();
                        }
                        dr["Req_App_No"] = entryrow["itr_req_no"].ToString();
                        dr["Req_App_Date"] = entryrow["itr_dt"].ToString();
                        dr["Req_No"] = entryrow["itr_ref"].ToString();
                        dr["ReqStatus"] = entryrow["itr_stus"].ToString();
                        string date = entryrow["ReqDate"].ToString();
                        if (date != "")
                        {
                            dr["Req_Date"] = entryrow["ReqDate"].ToString();
                        }

                        dr["Req_By"] = entryrow["Req_by"].ToString();
                        FinalTbl.Rows.Add(dr);
                    }
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Reqno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(tmpReqNo, null);
                        EntryTbl.Merge(dt);
                    }
                    //EntryTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(Reqno, null);
                    if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                    {
                        string Entryno = string.Empty;
                        foreach (DataRow row in EntryTbl.Rows)
                        {
                            if (string.IsNullOrWhiteSpace(Entryno))
                            {
                                Entryno = row["Entry No"].ToString();
                            }
                            else
                            {
                                Entryno = Reqno + "," + row["Entry No"].ToString();
                            }
                            string _no = row["cuh_oth_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Entry_No"] = row["Entry No"].ToString();
                                HRow[i]["Entry_Date"] = row["Entry Date"].ToString();
                                HRow[i]["Entry_Create_Date"] = row["cuh_cre_dt"].ToString();
                                HRow[i]["Cusdec_EntryNo"] = row["cuh_cusdec_entry_no"].ToString();
                                HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime(row["cuh_cusdec_entry_dt"].ToString());
                            }

                        }
                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(tmpReqNo, 1, null, _ReqDateFrom, _ReqDateTo, null);
                            EntryTbl.Merge(dt);
                        }
                        //DispatchQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(Entryno, 1, null, _ReqDateFrom, _ReqDateTo, null);
                        if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in DispatchQtyTbl.Rows)
                            {
                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                                }

                            }
                        }
                        searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                        for (int i = 0; i < searchParams.Length; i++)
                        {
                            string tmpReqNo = searchParams[i].ToString();
                            DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(tmpReqNo, 1);
                            EntryTbl.Merge(dt);
                        }
                        //ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(Entryno, 1);
                        if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                        {
                            foreach (DataRow row in ReceiptQtyTbl.Rows)
                            {

                                string _no = row["ith_entry_no"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Receipt_Qty"] = row["Receipt QTY"].ToString();
                                }

                            }
                        }
                    }
                }
                return FinalTbl;
                #endregion
            }
            else if (_Item != null)
            {
                #region Item
                DispatchQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(null, -1, _Item, _ReqDateFrom, _ReqDateTo, null);
                if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                {
                    string Entryno = string.Empty;
                    foreach (DataRow row in DispatchQtyTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Entryno))
                        {
                            Entryno = row["ith_entry_no"].ToString();
                        }
                        else
                        {
                            Entryno = Entryno + "," + row["ith_entry_no"].ToString();
                        }
                        dr["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                        dr["Entry_No"] = row["ith_entry_no"].ToString();

                        FinalTbl.Rows.Add(dr);


                    }
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(tmpReqNo, 1);
                        ReceiptQtyTbl.Merge(dt);
                    }
                    //ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(Entryno, 1);
                    if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                    {
                        foreach (DataRow row in ReceiptQtyTbl.Rows)
                        {

                            string _no = row["ith_entry_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Receipt_Qty"] = row["Receipt QTY"].ToString();
                            }

                        }
                    }
                    List<string> NewItems = new List<string>();
                    List<string> OldEntry = new List<string>();
                    OldEntry = Entryno.Split(',').ToList();
                    string joined = string.Empty;
                    string Reqno = string.Empty;
                    foreach (var money in OldEntry.ToList())
                    {
                        NewItems.AddRange(OldEntry.Take(500));
                        if (OldEntry.Count < 500)
                        {
                            OldEntry.RemoveRange(0, OldEntry.Count);
                        }
                        else
                        {
                            OldEntry.RemoveRange(0, 500);
                        }

                        joined = string.Join(",", NewItems);
                        EntryTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(null, joined);
                        if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                        {

                            foreach (DataRow row in EntryTbl.Rows)
                            {
                                if (string.IsNullOrWhiteSpace(Reqno))
                                {
                                    Reqno = row["cuh_oth_no"].ToString();
                                }
                                else
                                {
                                    Reqno = Entryno + "," + row["cuh_oth_no"].ToString();
                                }
                                string _no = row["Entry No"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Entry_No"] = row["Entry No"].ToString();
                                    HRow[i]["Entry_Date"] = row["Entry Date"].ToString();
                                    HRow[i]["Entry_Create_Date"] = row["cuh_cre_dt"].ToString();
                                    HRow[i]["Req_App_No"] = row["cuh_oth_no"].ToString();
                                    HRow[i]["Cusdec_EntryNo"] = row["cuh_cusdec_entry_no"].ToString();
                                    HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime(row["cuh_cusdec_entry_dt"].ToString());
                                }

                            }
                            if (NewItems.Count < 500)
                            {
                                NewItems.RemoveRange(0, NewItems.Count);
                            }
                            else
                            {
                                NewItems.RemoveRange(0, 500);
                            }
                        }
                        else
                        {
                            if (NewItems.Count < 500)
                            {
                                NewItems.RemoveRange(0, NewItems.Count);
                            }
                            else
                            {
                                NewItems.RemoveRange(0, 500);
                            }
                        }

                    }
                    searchParams = Reqno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, tmpReqNo, null, null, _ReqDateTo, _ExpectedFrom);
                        CustomerTbl.Merge(dt);
                    }
                    //CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, Reqno, null, null, _ReqDateTo, _ExpectedFrom);
                    if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                    {
                        foreach (DataRow row in CustomerTbl.Rows)
                        {
                            string _no = row["itr_req_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Req_App_No"] = row["itr_req_no"].ToString();
                                HRow[i]["Req_App_Date"] = row["itr_dt"].ToString();
                                HRow[i]["Req_No"] = row["itr_ref"].ToString();
                                HRow[i]["ReqStatus"] = row["itr_stus"].ToString();
                                string date = row["ReqDate"].ToString();
                                if (date != "")
                                {
                                    dr["Req_Date"] = row["ReqDate"].ToString();
                                }
                                // HRow[i]["Req_Date"] = row["ReqDate"].ToString();
                                HRow[i]["Req_By"] = row["Req_by"].ToString();
                            }

                        }
                    }

                }
                #endregion

            }
            else if (_cat1 != null)
            {
                #region MainCatergory
                DispatchQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(null, 2, null, _ReqDateFrom, _ReqDateTo, _cat1);
                if ((DispatchQtyTbl != null) && (DispatchQtyTbl.Rows.Count > 0))
                {
                    string Entryno = string.Empty;
                    foreach (DataRow row in DispatchQtyTbl.Rows)
                    {
                        dr = FinalTbl.NewRow();
                        if (string.IsNullOrWhiteSpace(Entryno))
                        {
                            Entryno = row["ith_entry_no"].ToString();
                        }
                        else
                        {
                            Entryno = Entryno + "," + row["ith_entry_no"].ToString();
                        }
                        dr["Dispatch_Qty"] = row["DISPATCH QTY"].ToString();
                        dr["Entry_No"] = row["ith_entry_no"].ToString();

                        FinalTbl.Rows.Add(dr);


                    }
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Entryno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(tmpReqNo, 1);
                        ReceiptQtyTbl.Merge(dt);
                    }
                    //ReceiptQtyTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(Entryno, 1);
                    if ((ReceiptQtyTbl != null) && (ReceiptQtyTbl.Rows.Count > 0))
                    {
                        foreach (DataRow row in ReceiptQtyTbl.Rows)
                        {

                            string _no = row["ith_entry_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Receipt_Qty"] = row["Receipt QTY"].ToString();
                            }

                        }
                    }
                    List<string> NewItems = new List<string>();
                    List<string> OldEntry = new List<string>();
                    OldEntry = Entryno.Split(',').ToList();
                    string joined = string.Empty;
                    string Reqno = string.Empty;
                    foreach (var money in OldEntry.ToList())
                    {
                        NewItems.AddRange(OldEntry.Take(500));
                        if (OldEntry.Count < 500)
                        {
                            OldEntry.RemoveRange(0, OldEntry.Count);
                        }
                        else
                        {
                            OldEntry.RemoveRange(0, 500);
                        }

                        joined = string.Join(",", NewItems);
                        EntryTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_REQNO(null, joined);
                        if ((EntryTbl != null) && (EntryTbl.Rows.Count > 0))
                        {

                            foreach (DataRow row in EntryTbl.Rows)
                            {
                                if (string.IsNullOrWhiteSpace(Reqno))
                                {
                                    Reqno = row["cuh_oth_no"].ToString();
                                }
                                else
                                {
                                    Reqno = Reqno + "," + row["cuh_oth_no"].ToString();
                                }
                                string _no = row["Entry No"].ToString();
                                DataRow[] HRow = FinalTbl.Select("Entry_No = '" + _no + "'");
                                for (int i = 0; i < HRow.Length; i++)
                                {
                                    HRow[i]["Entry_No"] = row["Entry No"].ToString();
                                    HRow[i]["Entry_Date"] = row["Entry Date"].ToString();
                                    HRow[i]["Entry_Create_Date"] = row["cuh_cre_dt"].ToString();
                                    HRow[i]["Req_App_No"] = row["cuh_oth_no"].ToString();
                                    HRow[i]["Cusdec_EntryNo"] = row["cuh_cusdec_entry_no"].ToString();
                                    HRow[i]["Cusdec_EntryDate"] = Convert.ToDateTime(row["cuh_cusdec_entry_dt"].ToString());
                                }

                            }
                            if (NewItems.Count < 500)
                            {
                                NewItems.RemoveRange(0, NewItems.Count);
                            }
                            else
                            {
                                NewItems.RemoveRange(0, 500);
                            }
                        }
                        else
                        {
                            if (NewItems.Count < 500)
                            {
                                NewItems.RemoveRange(0, NewItems.Count);
                            }
                            else
                            {
                                NewItems.RemoveRange(0, 500);
                            }
                        }

                    }
                    searchParams = Reqno.Split(seperator, StringSplitOptions.None);
                    for (int i = 0; i < searchParams.Length; i++)
                    {
                        string tmpReqNo = searchParams[i].ToString();
                        DataTable dt = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, tmpReqNo, null, null, _ReqDateTo, _ReqDateFrom);
                        CustomerTbl.Merge(dt);
                    }
                    //CustomerTbl = _inventoryDAL.GETREQ_TRACKER_DATA_BY_CUSTEMER(null, Reqno, null, null, _ReqDateTo, _ExpectedFrom);
                    if ((CustomerTbl != null) && (CustomerTbl.Rows.Count > 0))
                    {
                        foreach (DataRow row in CustomerTbl.Rows)
                        {
                            string _no = row["itr_req_no"].ToString();
                            DataRow[] HRow = FinalTbl.Select("Req_App_No = '" + _no + "'");
                            for (int i = 0; i < HRow.Length; i++)
                            {
                                HRow[i]["Req_App_No"] = row["itr_req_no"].ToString();
                                HRow[i]["Req_App_Date"] = row["itr_dt"].ToString();
                                HRow[i]["Req_No"] = row["itr_ref"].ToString();
                                HRow[i]["ReqStatus"] = row["itr_stus"].ToString();
                                string date = row["ReqDate"].ToString();
                                if (date != "")
                                {
                                    HRow[i]["Req_Date"] = row["ReqDate"].ToString();
                                }
                                // HRow[i]["Req_Date"] = row["ReqDate"].ToString();
                                HRow[i]["Req_By"] = row["Req_by"].ToString();
                            }

                        }
                    }

                }
                #endregion

            }
            return FinalTbl;
        }

        //Rukshan 21/Jan/2016
        public DataTable GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(string item, int IssumQty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO(item, IssumQty);
        }
        public DataTable GETREQ_TRACKER_DATA_BY_ENTRYNO_DO_NEW(string item, int IssumQty, Int32 _derction)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO_DO_NEW(item, IssumQty, _derction);
        }
        //Rukshan 21/Jan/2016
        public DataTable GETREQ_TRACKER_DATA_BY_ENTRYNO(string item, int IssumQty, string _item, DateTime _ReqDateFrom, DateTime _ReqDateTo, string _cat1)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETREQ_TRACKER_DATA_BY_ENTRYNO(item, IssumQty, _item, _ReqDateFrom, _ReqDateTo, _cat1);
        }

        //Rukshan 21/Jan/2016
        public decimal GET_PREVIOUS_SALES_QTY(string _com, string _loc, DateTime _fromdate, DateTime _Todate, string _item, string _doctype)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_PREVIOUS_SALES_QTY(_com, _loc, _fromdate, _Todate, _item, _doctype);
        }
        //Sahan 25 Jan 2016
        public DataTable LoadDistinctDates(string company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadDistinctDates(company);
        }

        //Sahan 25 Jan 2016
        public DataTable GetSlowMovingInventoryDetails(string company, DateTime fromdate, DateTime todate, DateTime selecteddate, string item, string model, string brand, string cat)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSlowMovingInventoryDetails(company, fromdate, todate, selecteddate, item, model, brand, cat);
        }

        //Sahan 25 Jan 2016
        public DataTable LoadAgeSlots(string company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadAgeSlots(company);
        }

        // Tharaka 2016-01-21
        public DataTable GET_DISPOSAL_SERIALS(String Disposaljob, out DataTable OItems)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable oSerials = _inventoryDAL.GET_DISPOSAL_SERIALS(Disposaljob);
            OItems = _inventoryDAL.GET_DISPOSAL_ITMS(Disposaljob);
            return oSerials;
        }

        //Sahan 25 Jan 2016
        public DataTable LoadInventoryByExpiryDate(string company, string item, string isordbyloc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadInventoryByExpiryDate(company, item, isordbyloc);
        }



        //public string Get_POCost_Details(DateTime _fdate, DateTime _tdate, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
        //    string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user, out string _err)
        //{
        //    _err = string.Empty;
        //    string _filePath = string.Empty;

        //    DataTable _dtResults;
        //    _inventoryDAL = new InventoryDAL();
        //    _salesDAL = new SalesDAL();
        //    DataTable GLOB_DataTable = new DataTable();

        //    DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
        //    if (tmp_user_pc.Rows.Count > 0)
        //    {
        //        foreach (DataRow drow in tmp_user_pc.Rows)
        //        {
        //            _dtResults = _inventoryDAL.Get_GIT_Details(_asat, _com, drow["tpl_pc"].ToString(), in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user);
        //            GLOB_DataTable.Merge(_dtResults);
        //        }
        //    }

        //    _err = "";
        //    _filePath = "";
        //    _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
        //    if (GLOB_DataTable.Rows.Count == 0)
        //    {
        //        _err = "No Records Found.";
        //    }

        //    return _filePath;

        //}

        public string ExportExcel2007(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        //Sahan 8 Feb 2016
        public DataTable LoadBinCodeItem(string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadBinCodeItem(company, location);
        }

        //Sahan 8 Feb 2016
        public List<InventorySubSerialMaster> LoadItemCompoData(string item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemCompoData(item);
        }

        //Sahan 8 Feb 2016
        public DataTable SearchSerialByItem(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSerialByItem(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 8 Feb 2016
        public DataTable LoadLocationAndStatusMainItem(string item, string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadLocationAndStatusMainItem(item, company, location);
        }


        //Tharaka 2015-12-28
        public InventoryHeader GetINTHDRByOthDoc(String Com, String Type, String OthDoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetINTHDRByOthDoc(Com, Type, OthDoc);
        }

        //Randima 2016/11/29
        public List<InventoryHeader> GetINTHDRByDispDoc(String Com, String jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetINTHDRByDispDoc(Com, jobNo);
        }

        //SUBODANA
        public InventoryHeader GetINTHDRByDocnO(String Com, String Type, String OthDoc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetINTHDRByDocnO(Com, Type, OthDoc);
        }
        //Sahan 8 Feb 2016
        public DataTable CheckIsItemDiscontinue(string item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckIsItemDiscontinue(item);
        }

        //Rukshan 11/Feb/2016
        public int CANCEL_MRN(string _com, string _loc, string _reqno, string _status, string _modby, DateTime _moddate)
        {
            Int32 effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryDAL.CANCEL_MRN(_com, _loc, _reqno, _status, _modby, _moddate);
                _inventoryDAL.TransactionCommit();

                // effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
            }
            return effect;


        }


        //Rukshan 15 Feb 2016
        public Int32 Update_ResHeaderStatus(string STATUS, string USER, string COM, string MRN)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Update_ResHeaderStatus(STATUS, USER, COM, MRN);
        }

        //Sahan 15 Feb 2016
        public DataTable LoadSerialStatus(string company, string location, string itemcode, string serial1, string serial2, string serial3, Int32 serialstus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadSerialStatus(company, location, itemcode, serial1, serial2, serial3, serialstus);
        }


        //Rukshan 16/Feb/2016
        public bool Check_MRN_Item_exceed_Ins(List<InventoryRequestItem> _Item, string _com, string _loc, DateTime _now)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            // _inventoryDAL.BeginTransaction();


            decimal MRNTotalcost = 0;
            decimal currentCost_Loc = 0;
            decimal Current_Value__location = 0;
            decimal TotalGIT = 0;
            decimal Ins_value = 0;
            decimal qty = 0;
            Ins_value = _inventoryDAL.GET_INSVALUE_BYLOC(_com, _loc);
            foreach (InventoryRequestItem _itm in _Item)
            {
                qty = _itm.Itri_qty;
                decimal _cost = _inventoryDAL.GetLatestCost(_com, _loc, _itm.Itri_itm_cd, "GOD");
                MRNTotalcost = MRNTotalcost + (_cost * qty);
            }
            currentCost_Loc = _inventoryDAL.GetLatestCost_Loc(_com, _loc);

            if (Ins_value > 0)
            {
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
                DataTable _git = _inventoryDAL.Get_GIT_Details(_now, _com, _loc, null, null, null, null, null, null, null, null, null);
                TotalGIT = _git.AsEnumerable().Sum(x => x.Field<decimal>("Item Total Cost"));
            }
            Current_Value__location = currentCost_Loc + TotalGIT;
            decimal Total = (MRNTotalcost + Current_Value__location);
            if (Total > Ins_value)
            {
                // _inventoryDAL.TransactionCommit();
                return false;

            }
            else
            {
                // _inventoryDAL.TransactionCommit();
                return true;
            }

        }

        //Nuwan 2016/02/17
        public List<MST_GIFTVOUCHER_SEARCH_HEAD> getGiftVoucherSearch(string company, int item, string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.getGiftVoucherSearch(company, item, pgeNum, pgeSize, searchFld, searchVal);
        }

        //Sahan 23 Feb 2015
        public Int32 UpdateLoadingBay(ReptPickHeader _Header)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateLoadingBay(_Header);
        }

        //Sahan 23 Feb 2015
        public DataTable LoadBLData(string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadBLData(doc);
        }

        //Sahan 23 Feb 2015
        public DataTable LoadFinDataNumber(string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadFinDataNumber(doc);
        }

        //Sahan 23 Feb 2015
        public DataTable LoadFinData(string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadFinData(doc);
        }

        //Sahan 23 Feb 2015
        public DataTable LoadSerialId(string company, string location, string serial, Int32 type)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadSerialId(company, location, serial, type);
        }

        //Sahan 23 Feb 2015
        public DataTable LoadSerialEnquiryData(Int32 serialid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadSerialEnquiryData(serialid);
        }

        //Rukshan 29/02/2016
        public DataTable GetItemInventoryBalanceStatu_both_LP_IMP(string _company, string _location, string _item, string _status, bool _checkstatus, out string _name, out string _statusnew)
        {
            _inventoryDAL = new InventoryDAL();
            if (_checkstatus == true)
            {
                DataTable _statusInfo = _inventoryDAL.GetItemStatusMaster(_status, null);
                if (_statusInfo != null)
                {
                    if (_statusInfo.Rows.Count > 0)
                    {
                        int _IS_LP = Convert.ToInt32(_statusInfo.Rows[0]["MIS_IS_LP"].ToString());
                        string LP_CD = _statusInfo.Rows[0]["MIS_LP_CD"].ToString();
                        string Imp_CD = _statusInfo.Rows[0]["mis_scm2_imp"].ToString();
                        if (LP_CD != "")
                        {
                            if (_IS_LP == 0)
                            {
                                _name = "With LP Status";
                            }
                            else { _name = "With Imports Status"; }
                            string status = _status + "," + LP_CD;
                            _statusnew = LP_CD;
                            return _inventoryDAL.GetINV_BAL_STUS_LPAND_IMP(_company, _location, _item, status);
                        }
                        else
                        {
                            _name = "With Imports Status";
                            string status2 = _status + "," + Imp_CD;
                            _statusnew = Imp_CD;
                            return _inventoryDAL.GetINV_BAL_STUS_LPAND_IMP(_company, _location, _item, status2);
                        }

                    }
                }
            }
            _name = "";
            _statusnew = "";
            return _inventoryDAL.GetINV_BAL_STUS_LPAND_IMP(_company, _location, _item, _status);
        }

        //Sahan 2/Mar/2016
        public DataTable GetDocQty(Int32 seq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDocQty(seq);
        }
        /*Lakshan 02-Mar-2016*/
        public List<InventorySerialMaster> GetSerialMasterData(InventorySerialMaster _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialMasterData(_ser);
        }
        //Rukshan 29/02/2016
        public Int32 SaveDispatchPlanebyAllitem(List<InventoryRequest> oHeaders, string _location, string _status1, string _status2, bool _isstatus, bool PDA, string warehousecom, string warehouseloc, string loadingbay, out string docNums, out string err)
        {
            Int32 result = 0;
            err = string.Empty;
            docNums = string.Empty;

            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                foreach (InventoryRequest oHeader in oHeaders)
                {
                    MasterAutoNumber _mastAutoNo = oHeader._mastAutoNo;

                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = oHeader.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    result = _inventoryDAL.UpdateAutoNumber(_mastAutoNo);

                    Int32 SeqNumber = 0;
                    oHeader.Itr_req_no = _documentNo;
                    docNums = docNums + ", " + _documentNo;
                    SeqNumber = _inventoryDAL.SaveInventoryRequest(oHeader);
                    //_status2 = "GDLP";
                    //string status = _status1 + ","+ _status2;
                    foreach (InventoryRequestItem _inventoryRequestItem in oHeader.InventoryRequestItemList)
                    {
                        _inventoryRequestItem.Itri_qty = _inventoryRequestItem.Itri_app_qty;
                        _inventoryRequestItem.Itri_app_qty = 0;
                        List<InventoryLocation> oLocItems_status2 = new List<InventoryLocation>();
                        decimal qty_status2 = 0;
                        decimal qty_status1 = 0;
                        List<InventoryLocation> oLocItems_status1 = _inventoryDAL.GetItemInventoryBalance(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status1);
                        InventoryRequestItem _duplicate = new InventoryRequestItem();
                        if (oLocItems_status1 != null)
                        {
                            decimal[] oAppLocations_qty = oLocItems_status1.Select(x => x.Inl_free_qty).Distinct().ToArray();

                            qty_status1 = oAppLocations_qty[0];
                        }

                        if (_status2 != "")
                        {
                            oLocItems_status2 = _inventoryDAL.GetItemInventoryBalance(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status2);
                            if (oLocItems_status2 != null)
                            {
                                decimal[] oAppLocations_qty_2 = oLocItems_status2.Select(x => x.Inl_free_qty).Distinct().ToArray();
                                qty_status2 = oAppLocations_qty_2[0];
                            }

                        }
                        if (_inventoryRequestItem.Itri_qty < qty_status1)
                        {
                            _inventoryRequestItem.Itri_bqty = _inventoryRequestItem.Itri_qty;
                            result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status1, oHeader.Itr_cre_by, _inventoryRequestItem.Itri_bqty);
                        }
                        else if ((oLocItems_status2 == null) && (oLocItems_status1 == null))
                        {
                            continue;
                        }
                        else
                        {
                            decimal Total = qty_status1 + qty_status2;
                            if (Total >= _inventoryRequestItem.Itri_qty)
                            {
                                decimal _remqty = _inventoryRequestItem.Itri_qty - qty_status1;
                                result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status1, oHeader.Itr_cre_by, qty_status1);
                                result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status2, oHeader.Itr_cre_by, _remqty);


                                _duplicate = _inventoryRequestItem;
                                _duplicate.Itri_bqty = _remqty;
                                _duplicate.Itri_qty = _remqty;
                                _duplicate.Itri_itm_stus = _status2;
                                MasterItem _MstItem = new MasterItem();
                                _MstItem.Mi_cd = _inventoryRequestItem.Itri_itm_cd;
                                _duplicate.MasterItem = _MstItem;
                                _duplicate.Itri_seq_no = SeqNumber;
                                result = _inventoryDAL.SaveInventoryRequestItem(_duplicate);
                                result = _inventoryDAL.UpdateRequestItem(_inventoryRequestItem.Itr_req_no, _inventoryRequestItem.Itri_itm_cd, _remqty);


                                _inventoryRequestItem.Itri_bqty = qty_status1;
                                _inventoryRequestItem.Itri_qty = qty_status1;
                                _inventoryRequestItem.Itri_itm_stus = _status1;
                            }
                            else
                            {
                                if (qty_status1 == 0)
                                {
                                    _inventoryRequestItem.Itri_bqty = qty_status2;
                                    _inventoryRequestItem.Itri_qty = qty_status2;
                                    _inventoryRequestItem.Itri_itm_stus = _status2;
                                    result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status2, oHeader.Itr_cre_by, qty_status2);
                                }
                                else if (qty_status2 == 0)
                                {
                                    _inventoryRequestItem.Itri_bqty = qty_status1;
                                    _inventoryRequestItem.Itri_qty = qty_status1;
                                    _inventoryRequestItem.Itri_itm_stus = _status1;
                                    result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status1, oHeader.Itr_cre_by, qty_status1);
                                }
                                else
                                {

                                    _inventoryRequestItem.Itri_bqty = qty_status1;
                                    _inventoryRequestItem.Itri_qty = qty_status1;
                                    _inventoryRequestItem.Itri_itm_stus = _status1;
                                    result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status1, oHeader.Itr_cre_by, qty_status1);

                                    _inventoryRequestItem.Itri_bqty = qty_status2;
                                    _inventoryRequestItem.Itri_qty = qty_status2;
                                    _inventoryRequestItem.Itri_itm_stus = _status2;
                                    result = _inventoryDAL.UpdateLocationRes(oHeader.Itr_com, _location, _inventoryRequestItem.Itri_itm_cd, _status2, oHeader.Itr_cre_by, qty_status2);

                                }

                            }
                        }
                        //Update balance


                        result = _inventoryDAL.UpdateRequestItem(_inventoryRequestItem.Itr_req_no, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_bqty);


                        _inventoryDAL.Change_MRNReq_status(oHeader.Itr_com, oHeader.Itr_ref);
                        MasterItem _is = _inventoryDAL.GetItem(oHeader.Itr_com, _inventoryRequestItem.Itri_itm_cd);
                        _inventoryRequestItem.MasterItem = _is;
                        _inventoryRequestItem.Itri_seq_no = SeqNumber;
                        result = _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);


                        #region PDA
                        if (PDA == true)
                        {
                            Int32 user_seq_num = GET_SEQNUM_FOR_INVOICE(oHeader.Itr_tp, oHeader.Itr_com, _documentNo, 1);
                            if (user_seq_num == -1)
                            {

                                user_seq_num = Generate_new_seq_num(oHeader.Itr_cre_by, "MRNA", 1, oHeader.Itr_com);
                                ReptPickHeader _inputReptPickHeader = new ReptPickHeader();

                                _inputReptPickHeader.Tuh_usrseq_no = Convert.ToInt32(user_seq_num);
                                _inputReptPickHeader.Tuh_usr_id = oHeader.Itr_cre_by;
                                _inputReptPickHeader.Tuh_usr_com = oHeader.Itr_com;
                                _inputReptPickHeader.Tuh_session_id = oHeader.Itr_session_id;
                                _inputReptPickHeader.Tuh_doc_tp = oHeader.Itr_tp;
                                _inputReptPickHeader.Tuh_direct = false;
                                _inputReptPickHeader.Tuh_ischek_itmstus = false;
                                _inputReptPickHeader.Tuh_ischek_simitm = false;
                                _inputReptPickHeader.Tuh_ischek_reqqty = false;
                                _inputReptPickHeader.Tuh_doc_no = _documentNo;
                                _inputReptPickHeader.Tuh_usr_loc = oHeader.Itr_loc;
                                _inputReptPickHeader.Tuh_wh_com = warehousecom;
                                _inputReptPickHeader.Tuh_wh_loc = warehouseloc;
                                _inputReptPickHeader.Tuh_load_bay = loadingbay;

                                result = SavePickedHeader(_inputReptPickHeader);

                                if (result == -1)
                                {
                                    err = "PDA error";
                                    _inventoryDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    return result;
                                }
                            }
                            else
                            {
                                ReptPickHeader _inputReptPickHeader = new ReptPickHeader();

                                _inputReptPickHeader.Tuh_doc_no = _documentNo;
                                _inputReptPickHeader.Tuh_doc_tp = oHeader.Itr_tp;
                                _inputReptPickHeader.Tuh_direct = false;
                                _inputReptPickHeader.Tuh_usr_com = oHeader.Itr_com;
                                _inputReptPickHeader.Tuh_usr_loc = oHeader.Itr_loc;
                                _inputReptPickHeader.Tuh_wh_com = warehousecom;
                                _inputReptPickHeader.Tuh_wh_loc = warehouseloc;
                                _inputReptPickHeader.Tuh_load_bay = loadingbay;
                                _inputReptPickHeader.Tuh_usrseq_no = Convert.ToInt32(user_seq_num);
                                result = UpdatePickHeader(_inputReptPickHeader);

                                if (result == -1)
                                {
                                    err = "PDA error";
                                    _inventoryDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    return result;
                                }
                            }
                            DataTable dtchkitm = CheckItemsScannedStatus(user_seq_num);

                            if (dtchkitm.Rows.Count > 0)
                            {
                                err = "Document has already sent to PDA or has alread processed";
                                _inventoryDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                return result;
                            }
                            List<ReptPickItems> _saveonly = new List<ReptPickItems>();


                            //AddItem(_item, _cost, null, null, user_seq_num.ToString(), null);

                            ReptPickItems _reptitm = new ReptPickItems();
                            _reptitm.Tui_usrseq_no = Convert.ToInt32(user_seq_num);
                            _reptitm.Tui_req_itm_qty = _inventoryRequestItem.Itri_bqty;
                            _reptitm.Tui_req_itm_cd = _inventoryRequestItem.Itri_itm_cd;
                            // _reptitm.Tui_req_itm_stus = _addedItem.Itri_itm_stus;
                            // _reptitm.Tui_pic_itm_cd = Convert.ToString(_addedItem.Itri_line_no);
                            // _reptitm.Tui_pic_itm_stus = Convert.ToString(_addedItem.Itri_unit_price);
                            _reptitm.Tui_pic_itm_qty = _inventoryRequestItem.Itri_bqty;
                            _saveonly.Add(_reptitm);

                            result = SavePickedItems(_saveonly);
                            if (result == -1)
                            {
                                err = "PDA Item error";
                                _inventoryDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                return result;
                            }
                            if (_duplicate != null)
                            {
                                ReptPickItems _reptitm2 = new ReptPickItems();
                                _reptitm2.Tui_usrseq_no = Convert.ToInt32(user_seq_num);
                                _reptitm2.Tui_req_itm_qty = _duplicate.Itri_bqty;
                                _reptitm2.Tui_req_itm_cd = _duplicate.Itri_itm_cd;
                                // _reptitm.Tui_req_itm_stus = _addedItem.Itri_itm_stus;
                                // _reptitm.Tui_pic_itm_cd = Convert.ToString(_addedItem.Itri_line_no);
                                // _reptitm.Tui_pic_itm_stus = Convert.ToString(_addedItem.Itri_unit_price);
                                _reptitm2.Tui_pic_itm_qty = _duplicate.Itri_bqty;
                                _saveonly.Add(_reptitm2);

                                result = SavePickedItems(_saveonly);
                                if (result == -1)
                                {
                                    err = "PDA Item error";
                                    _inventoryDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    return result;
                                }
                            }


                        }
                        #endregion
                    }

                    ////Check and update balance for the request
                    //decimal balanace = oHeaders.Sum(x => x.Itri_bqty);
                    //if (balanace == 0)
                    //{
                    //    result = _custServiceDAL.Update_ReqHeaderStatus("F", oHeader.Itr_cre_by, oHeader.Itr_com, SelectedDocumnt);
                    //}

                }
                _inventoryDAL.TransactionCommit();

                _custServiceDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();

                err = ex.Message;
            }
            return result;
        }

        /*Lakshan 03-Mar-2016*/
        public DataTable getImpPiHdrTps(string _piNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getImpPiHdrTps(_piNo);
        }
        /*Lakshan 03-Mar-2016*/
        public Int32 GetBlItmMaxSeqNo(ImportsBLItems _itm, out string err)
        {
            err = "";
            try
            {
                _inventoryDAL = new InventoryDAL();
                return _inventoryDAL.GetBlItmMaxSeqNo(_itm);
            }
            catch (Exception ex)
            {
                err = ex.Message;
                return 0;
            }

        }
        /*Rukshan 03-Mar-2016*/
        public decimal GET_SUM_USE_BL(string _bl, string _itm)
        {

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            decimal value = _inventoryDAL.GET_SUM_USE_BL(_bl, _itm);
            _inventoryDAL.TransactionCommit();
            return value;
        }

        //Rukshan 2016-3-4
        public int SaveCUSA_amend(List<InventoryRequestItem> _inventoryRequest, List<ImportsBLItems> oImportsBLItems, InventoryRequest reqhdr, out string _docNo)
        {
            int result = 0;
            _docNo = "";
            string _documentNo = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (reqhdr != null)
                {
                    result = _inventoryDAL.SaveInventoryRequest(reqhdr);
                }

                if (_inventoryRequest != null)
                {
                    foreach (InventoryRequestItem _ReqItem in _inventoryRequest)
                    {
                        MasterItem _MstItem = new MasterItem();
                        _MstItem.Mi_cd = _ReqItem.Itri_itm_cd;
                        _ReqItem.MasterItem = _MstItem;
                        if (reqhdr._checkLineno)
                        {
                            var _checkItemline = _inventoryRequest.Where(x => x.Itri_job_no == _ReqItem.Itri_job_no && x.Itri_com == _ReqItem.Itri_com
                                && x.Itri_job_line == _ReqItem.Itri_job_line).ToList();

                            if (_checkItemline.Count > 1)
                            {
                                result = -1;
                                _inventoryDAL.TransactionRollback();
                                _docNo = "Process Terminate - item line duplicate";
                                return result;
                            }
                        }
                        _inventoryDAL.SaveInventoryRequestItem(_ReqItem);

                    }
                    if (oImportsBLItems != null)
                    {
                        foreach (ImportsBLItems _BlItem in oImportsBLItems)
                        {
                            _inventoryDAL.Update_BI_Rqty(_BlItem.Ibi_seq_no, _BlItem.Ibi_itm_cd, _BlItem.Ibi_line, _BlItem.Ibi_req_qty, 0);
                        }

                    }
                    _inventoryDAL.TransactionCommit();
                    result = 1;
                }
            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _docNo = ex.Message;
            }
            return result;
        }

        //2016-Mar-05
        public List<ItemKitComponent> GetItemKitComponentSplit(ItemKitComponent _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemKitComponentSplit(_obj);
        }


        //Sahan 10 Mar 2016
        public Int32 UpdateSerialMaster(SerialMasterLog SerialMaster)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateSerialMaster(SerialMaster);
        }


        //Rukshan 12-Mar-2016
        public Int16 UpdatePicked_Hd_doc(ReptPickHeader _reptPickSerials, MasterAutoNumber _AutoNo)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                if (_reptPickSerials != null)
                    effect = _inventoryRepDAL.UpdatePicked_Hd_doc(_reptPickSerials);
                Int16 e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                // _docNo = ex.Message;
            }
            return effect;
        }

        //Lakshan 14 Mar 2016
        public List<QuotationHeader> GetLatestValidQuotationData(string _com, string _sup, string _type, string _subtype, DateTime _date, decimal _qty, string _status, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetLatestValidQuotationData(_com, _sup, _type, _subtype, _date, _qty, _status, _item);
        }

        //15 Mar/2015 Sahan
        public DataTable LoadItemDataBySerial(string serial, string company, string location, string cat1, string cat2, string cat3)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadItemDataBySerial(serial, company, location, cat1, cat2, cat3);
        }

        //Rukshan 16/03/2016
        public DataTable GET_TEMP_DOC(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _from, DateTime _To)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_TEMP_DOC(_initialSearchParams, _searchCatergory, _searchText, _from, _To);
        }
        //Rukshan 16/03/2016
        public DataTable GET_TEMP_ITM(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_TEMP_ITM(_initialSearchParams, _searchCatergory, _searchText);
        }
        public DataTable GetItemTotalScanedQty(string docnum)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemTotalScanedQty(docnum);
        }
        public DataTable GetItemTotalDocumentQty(string docnum)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemTotalDocumentQty(docnum);
        }
        public DataTable loadDocumentItems(string docnum)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.loadDocumentItems(docnum);
        }

        public List<MasterLocationNew> GetMasterLocations(MasterLocationNew _loc)
        {
            _generalDAL = new GeneralDAL();
            return _generalDAL.GetMasterLocations(_loc);
        }

        //Lakshan 23/Mar/2016
        public List<ReptPickSerials> GET_ReptPickSerials(ReptPickSerials _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_ReptPickSerials(_obj);
        }

        //Lakshan 23/Mar/2016
        public List<ReptPickHeader> GetReptPickHeaders(ReptPickHeader _obj)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetReptPickHeaders(_obj);
        }

        //Lakshan 23/Mar/2016
        public ReptPickHeader GetReptPickHeader(ReptPickHeader _obj)
        {
            ReptPickHeader _item = new ReptPickHeader();
            List<ReptPickHeader> _list = GetReptPickHeaders(_obj);
            if (_list != null)
            {
                if (_list.Count > 0)
                {
                    _item = _list[0];
                }
            }
            return _item;
        }


        //Rukshan 24/Mar/2016
        public List<InventoryRequestItem> Check_bl_GRN(List<InventoryRequestItem> _itm, string JobNo, string loc)
        {
            _inventoryDAL = new InventoryDAL();
            if (_itm != null)
            {
                if (_itm.Count > 0)
                {
                    foreach (InventoryRequestItem Listitm in _itm)
                    {
                        DataTable _chek = _inventoryDAL.Check_bl_GRN(loc, JobNo, Listitm.Itri_line_no);
                        if (_chek != null)
                        {
                            if (_chek.Rows.Count > 0)
                            {
                                if (Listitm.Itri_itm_cd == _chek.Rows[0][0].ToString())
                                {
                                    Listitm.Itri_qty = Listitm.Itri_app_qty;//Convert.ToDecimal(_chek.Rows[0][1].ToString());
                                    Listitm.Itri_itm_cd = _chek.Rows[0][0].ToString();
                                }
                            }
                        }
                    }

                }
            }
            return _itm;
        }
        /*Lakshan 29-Mar-2016*/
        public List<InventorySerialN> Get_INR_SER_DATA(InventorySerialN _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_INR_SER_DATA(_ser);
        }
        /*Lakshan 30-Mar-2016*/
        public List<MasterItemComponent> Get_MST_ITM_COMPONENT(MasterItemComponent _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_MST_ITM_COMPONENT(_ser);
        }

        //Lakshan 23/Mar/2016
        public List<ReptPickItems> GET_ReptPickItems(ReptPickItems _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_ReptPickItems(_obj);
        }
        //Lakshan April 8 2016
        public List<InventorySubSerialMaster> GET_INR_SERMSTSUB(InventorySubSerialMaster _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_SERMSTSUB(_obj);
        }

        //Lakshan 11 Apr 2016
        public List<ImpAstHeader> GET_IMP_AST_HDR(ImpAstHeader _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_IMP_AST_HDR(_obj);
        }

        //Lakshan 11 Apr 2016
        public List<ImpAstDet> GET_Entry_no_Ammend(string _docNo, string _entryNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_Entry_no_Ammend(_docNo, _entryNo);
        }
        //Lakshan 18 Apr 2016
        public List<ReptPickSerialsSub> GET_TEMP_PICK_SER_SUB(ReptPickSerialsSub _obj)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_SER_SUB(_obj);
        }

        //Rukshan 11/Feb/2016
        public Int32 Cancel_DispatchPlan(List<InventoryRequest> _oHeadersDetails, List<InventoryRequestItem> oRequesItems, out string err, bool isfinish)
        {
            Int32 effect = 0;
            err = string.Empty;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                string docNums = string.Empty;
                string createby = string.Empty;
                string _basedoc = string.Empty;
                string _baserefno = string.Empty;
                List<ReptPickItems> _repItmList = null;
                ReptCommonDAL rcd = new ReptCommonDAL();
                List<InvoiceItem> _invItem = new List<InvoiceItem>();
                List<InvoiceItem> _resultItmList = new List<InvoiceItem>();
                foreach (InventoryRequest oHeader in _oHeadersDetails)
                {
                    //Update quary to cancelation 26.08.2017 Udaya comment
                    if (oHeader.sad_res_line_no_udt)
                    {
                        if (oHeader.Tmp_res_base_doc_tp == "SOA")
                        {
                            _resultItmList = _inventoryDAL.SOA_Cancellation(oHeader.Itr_req_no, oHeader.Itr_com).ToList();
                        }
                    }
                    _basedoc = oHeader.Itr_req_no;
                    _baserefno = oHeader.Itr_ref;
                    if (isfinish == true)
                    {
                        effect = _custServiceDAL.Update_ReqHeaderStatus("C", oHeader.Itr_cre_by, oHeader.Itr_com, oHeader.Itr_req_no);
                    }

                    //  effect = _custServiceDAL.Update_ReqHeaderStatus("C", oHeader.Itr_cre_by, oHeader.Itr_com, oHeader.Itr_req_no);
                    effect = _custServiceDAL.Update_ReqHeaderStatus("A", oHeader.Itr_cre_by, oHeader.Itr_com, oHeader.Itr_ref);
                    createby = oHeader.Itr_cre_by;
                    MasterAutoNumber _mastAutoNo = oHeader._mastAutoNo;

                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = oHeader.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    effect = _inventoryDAL.UpdateAutoNumber(_mastAutoNo);

                    Int32 SeqNumber = 0;
                    oHeader.Itr_req_no = _documentNo;
                    docNums = docNums + ", " + _documentNo;
                    SeqNumber = _inventoryDAL.SaveInventoryRequest(oHeader);

                    _inventoryRepDAL = new ReptCommonDAL();
                    _tmpPickHdr = _inventoryRepDAL.GET_TEMP_PICK_HDR_DATA(new ReptPickHeader()
                    {
                        Tuh_usr_com = oHeader.Itr_com,
                        Tuh_doc_no = _basedoc
                    }).FirstOrDefault();
                    if (_tmpPickHdr != null)
                    {
                        _repItmList = _inventoryRepDAL.GET_TEMP_PICK_ITM_DATA(new ReptPickItems() { Tui_usrseq_no = _tmpPickHdr.Tuh_usrseq_no });
                    }

                    foreach (InventoryRequestItem _inventoryRequestItem in oHeader.InventoryRequestItemList)
                    {
                        //Update quary to cancelation 26.08.2017 Udaya comment
                        if (oHeader.sad_res_line_no_udt)
                        {
                            if (_resultItmList.Count > 0)
                            {
                                _invItem.Add(_resultItmList.Where(c => c.Sad_itm_cd == _inventoryRequestItem.Itri_itm_cd).FirstOrDefault());
                            }
                        }

                        //CHECK TEMP PICK SER
                        DataTable Chkser = _inventoryDAL.SP_CHECKTEMPSERNW(oHeader.Itr_com, _basedoc, _inventoryRequestItem.Itri_line_no);
                        Int32 itmcount = Convert.ToInt32(Chkser.Rows[0][0].ToString());
                        if (itmcount > 0)
                        {
                            effect = -1;
                            err = " Already scaned this document ";
                            _custServiceDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            return effect;
                        }
                        //update temppickitem
                        effect = _inventoryDAL.UpdateSerQtyForDispatch(_basedoc, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_itm_stus, Convert.ToInt32(_inventoryRequestItem.Itri_qty), _inventoryRequestItem.Itri_line_no.ToString());


                        effect = _inventoryDAL.UpdateRequestItem2(_basedoc, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_qty, _inventoryRequestItem.Itri_line_no);
                        if (effect > 0)
                        {
                            effect = _inventoryDAL.UpdateRequestItemFORSONEW(_baserefno, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_qty, _inventoryRequestItem.Itri_base_req_line);
                            //effect = _inventoryDAL.UpdateRequestItemFORSONEW(_baserefno, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_qty, _inventoryRequestItem.Itri_line_no);

                            if (effect == 0)
                            {
                                effect = -1;
                                err = "Cant Cancel Process Doc:" + _baserefno + " Item" + _inventoryRequestItem.Itri_itm_cd + " Qty" + _inventoryRequestItem.Itri_qty + " Line" + _inventoryRequestItem.Itri_base_req_line;
                                _custServiceDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return effect;
                            }
                        }
                        else
                        {
                            effect = -1;
                            err = "Cant Cancel Process  Doc:" + _basedoc + " Item" + _inventoryRequestItem.Itri_itm_cd + " Qty" + _inventoryRequestItem.Itri_qty + " Line" + _inventoryRequestItem.Itri_line_no;
                            _custServiceDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            return effect;
                        }


                        MasterItem _is = _inventoryDAL.GetItem(oHeader.Itr_com, _inventoryRequestItem.Itri_itm_cd);
                        _inventoryRequestItem.MasterItem = _is;
                        _inventoryRequestItem.Itri_seq_no = SeqNumber;
                        effect = _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        DataTable CHECKRESQTY = _inventoryDAL.CHECKRESQTY(oHeader.Itr_com, _inventoryRequestItem.Itri_loc, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_itm_stus, createby, _inventoryRequestItem.Itri_qty);
                        if (CHECKRESQTY != null)
                        {
                            if (_inventoryRequestItem.Itri_res_no == null || _inventoryRequestItem.Itri_res_no == "N/A" || _inventoryRequestItem.Itri_res_no == "")
                            {
                                decimal resqty = Convert.ToDecimal(CHECKRESQTY.Rows[0]["INL_RES_QTY"].ToString());
                                decimal freeqty = Convert.ToDecimal(CHECKRESQTY.Rows[0]["inl_free_qty"].ToString());
                                if (resqty >= Convert.ToDecimal(_inventoryRequestItem.Itri_qty))
                                {
                                    effect = _inventoryDAL.ROLLBACKLocationRes(oHeader.Itr_com, _inventoryRequestItem.Itri_loc, _inventoryRequestItem.Itri_itm_cd, _inventoryRequestItem.Itri_itm_stus, createby, _inventoryRequestItem.Itri_qty);
                                }
                                else
                                {
                                    err = "Cannot cancel ! Reserved Qty not available in  location :" + _inventoryRequestItem.Itri_loc;
                                    return -5;
                                }
                            }
                        }
                        #region reservation data update mrna cancel by lakshan
                        //foreach (InventoryRequestItem _invReq in oHeader.InventoryRequestItemList)
                        //{
                        if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no) && _inventoryRequestItem.Itri_res_no != "N/A")
                        {
                            InventoryRequest _intRefReqData = new InventoryRequest();
                            int _res = 0;
                            string _errro = "";
                            INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                            _baseDocCancel.IRL_CURT_COM = oHeader.Itr_com;
                            _baseDocCancel.IRL_CURT_LOC = oHeader.Itr_issue_from;
                            _baseDocCancel.IRL_ORIG_DOC_TP = oHeader.Tmp_res_base_doc_tp;
                            _baseDocCancel.IRL_ORIG_DOC_NO = oHeader.Tmp_res_base_doc_no;
                            _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                            _baseDocCancel.IRL_CURT_DOC_TP = oHeader.Tmp_res_base_doc_tp + "_CANCL";
                            _baseDocCancel.IRL_CURT_DOC_NO = oHeader.Tmp_res_base_doc_no;
                            _baseDocCancel.IRL_CURT_DOC_DT = oHeader.Itr_dt;
                            _baseDocCancel.IRL_RES_NO = _inventoryRequestItem.Itri_res_no;
                            _baseDocCancel.IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd;
                            _baseDocCancel.IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus;
                            _baseDocCancel.IRL_MOD_BY_NEW = oHeader.Itr_cre_by;
                            _baseDocCancel.IRL_MOD_SESSION = oHeader.Itr_session_id;
                            _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                            _baseDocCancel.IRL_CRE_BY = oHeader.Itr_cre_by;
                            _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                            _baseDocCancel.IRL_CRE_SESSION = oHeader.Itr_session_id;
                            _baseDocCancel.IRL_RES_QTY = _inventoryRequestItem.Itri_qty;
                            _res = ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                            if (_res > 0)
                            {
                                _intRefReqData = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = oHeader.Itr_ref }).FirstOrDefault();
                                INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                _refDocSave.IRL_CURT_COM = oHeader.Itr_com;
                                _refDocSave.IRL_CURT_LOC = oHeader.Itr_issue_from;
                                _refDocSave.IRL_ORIG_DOC_TP = oHeader.Tmp_res_base_doc_tp + "_CANCL";
                                _refDocSave.IRL_ORIG_DOC_NO = oHeader.Tmp_res_base_doc_no;
                                _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                _refDocSave.IRL_CURT_DOC_TP = _intRefReqData.Itr_tp;
                                _refDocSave.IRL_CURT_DOC_NO = _intRefReqData.Itr_req_no;
                                _refDocSave.IRL_CURT_DOC_DT = _intRefReqData.Itr_dt;
                                _refDocSave.IRL_RES_NO = _inventoryRequestItem.Itri_res_no;
                                _refDocSave.IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd;
                                _refDocSave.IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus;
                                _refDocSave.IRL_MOD_BY_NEW = oHeader.Itr_cre_by;
                                _refDocSave.IRL_MOD_SESSION = oHeader.Itr_session_id;
                                _refDocSave.IRL_MOD_DT = DateTime.Now;
                                _refDocSave.IRL_CRE_BY = oHeader.Itr_cre_by;
                                _refDocSave.IRL_CRE_DT = DateTime.Now;
                                _refDocSave.IRL_CRE_SESSION = oHeader.Itr_session_id;
                                _refDocSave.IRL_RES_QTY = _inventoryRequestItem.Itri_qty;
                                _res = ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                            }
                            if (_res < 1)
                            {
                                effect = -1;
                                err = _errro;
                                _custServiceDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return effect;
                            }
                            // }
                        }
                        #endregion
                    }
                    try
                    {
                        //foreach (var item in _repItmList)
                        //{
                        //rcd.Del_temp_pick_itm(item.Tui_usrseq_no, item.Tui_req_itm_cd, item.Tui_req_itm_stus, 0, 1);
                        //}
                    }
                    catch (Exception ex)
                    {
                        err = "Issue in item delete process...!!!";
                        return -6;
                    }
                }

                //if(oRequesItems!=null){
                //    foreach(InventoryRequestItem _itm in oRequesItems){
                //        effect = _inventoryDAL.ROLLBACKLocationRes(_itm.Itri_com, _itm.Itri_loc, _itm.Itri_itm_cd, _itm.Itri_itm_stus, createby, _itm.Itri_qty);

                //    }

                //}

                //Update quary to cancelation 26.08.2017 Udaya comment
                if (_oHeadersDetails.FirstOrDefault().sad_res_line_no_udt)
                {
                    foreach (InvoiceItem item in _invItem)
                    {
                        //effect = _inventoryDAL.UpdateSOACancellation(item.Sad_itm_cd, item.Sad_itm_line, item.Sad_inv_no);
                        if (item != null)
                        {
                            effect = _inventoryDAL.UpdateSOACancellation(item.Sad_itm_cd, item.Sad_itm_line, item.Sad_inv_no);
                        }
                    }
                }
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();
                err = docNums;
                effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                err = ex.Message;
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;


        }


        //Lakshan 25 Apr 2016
        public DataTable GetSupplierItemSerial(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSupplierItemSerial(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Rukshan 25/Feb/2016
        public Int32 SaveBufferLevel(List<MasterBufferChannel> _MasterBufferChannel, out string err)
        {
            Int32 effect = 0;
            err = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (_MasterBufferChannel != null)
                {
                    foreach (MasterBufferChannel _buffer in _MasterBufferChannel)
                    {
                        effect = _inventoryDAL.SaveBufferLevel(_buffer);
                    }
                    if (effect != 1)
                    {
                        err = "Data Invalid Please check";
                    }
                    effect = 1;
                }
                _inventoryDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                effect = -1;
                err = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        //Lakshan 27 Apr 2016
        public DataTable GetBLDetailsByModel(ImportsBLItems _impBlItm, MasterItem _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBLDetailsByModel(_impBlItm, _item);
        }


        //Rukshan 28 Apr 2016
        public Int32 saveInrLocation(List<InventoryLocation> _loc, out string err)
        {
            Int32 effect = 0;
            err = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (_loc != null)
                {
                    foreach (InventoryLocation _buffer in _loc)
                    {
                        effect = _inventoryDAL.saveInrLocation(_buffer);
                    }
                    // effect = 1;
                    if (effect != 1)
                    {
                        err = "Data Invalid Please check";
                    }
                }
                _inventoryDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                effect = -1;
                err = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        /*Lakshan 29 Apr 2016*/
        public List<InventorySerialN> Get_INT_SER_DATA(InventorySerialN _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_INT_SER_DATA(_ser);
        }

        //subodana 2016-05-05
        public List<InventoryAllocateDetails> getAllocationDet(DateTime fromdt, DateTime todate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getAllocationDet(fromdt, todate);
        }

        // Lakshan 2016 May 06
        public List<InventoryAdhocHeader> GET_INT_ADHOC_HDR(InventoryAdhocHeader _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_ADHOC_HDR(_obj);
        }
        //Rukshan 2016/May/06
        public List<MasterBufferChannel> GetBufferQty_Season(string _item, string _com, string _loc, string _ses, int option)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBufferQty_Season(_item, _com, _loc, _ses, option);
        }
        //Rukshan 2016/May/14
        public Int16 SaveAllScanSerialsList(List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerials != null)
            {
                foreach (ReptPickSerials _serial in _reptPickSerials)
                {
                    effect = _inventoryRepDAL.SavePickedItemSerials(_serial);
                }

            }
            //if (_reptPickSerialsSub != null) _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            return effect;
        }

        public DataTable getLocationDetails(string _com, string _channel, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getLocationDetails(_com, _channel, _loc);
        }

        //Rukshan 2016/May/17
        public Int16 UPDATEPICKSERIAL_BASEITM(List<ReptPickSerials> _reptPickSerials)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerials != null)
            {
                foreach (ReptPickSerials _serial in _reptPickSerials)
                {
                    effect = _inventoryRepDAL.UPDATEPICKSERIAL_BASEITM(_serial);
                }

            }
            //if (_reptPickSerialsSub != null) _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            return effect;
        }
        // subodana 2016-05-19
        public DataTable GET_ITEM_PROFILE_DETAILS(string _com, string cat1, string cat2, string cat3, string cat4, string cat5, string code, string brand, string model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_ITEM_PROFILE_DETAILS(_com, cat1, cat2, cat3, cat4, cat5, code, brand, model);
        }

        //subodana 2016-05-26

        public Int32 SaveAllItemsSerials(ReptPickHeader _inputReptPickHeader, ReptPickItems _items, ReptPickItems _itemslines, ReptPickSerials _inputReptPickSerials)
        {
            Int32 effect = 0;
            try
            {

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryRepDAL.SavePickedHeader(_inputReptPickHeader);
                if (effect != 1) effect = -1;

                effect = _inventoryDAL.UpdatePickItem(_items);
                if (effect != 1) effect = -1;

                effect = _inventoryDAL.UpdatePickItemLine(_itemslines);
                if (effect != 1) effect = -1;

                effect = _inventoryDAL.SavePickedItemSerialsPDA(_inputReptPickSerials);
                if (effect != 1) effect = -1;

                if (effect != -1)
                {
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _inventoryRepDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    return effect;
                }
                else
                {
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    return effect;
                }



            }
            catch (Exception e)
            {
                effect = -1;
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                return effect;
            }


        }
        //subodana 2016-05-31
        public DataTable getRequestItemDetails(string _com, string _reqno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getRequestItemDetails(_com, _reqno);
        }

        //Lakshan 31 May 2016
        public int ProductAssemblySave(MasterAutoNumber _autonoAsbl, out string _assDoc,
        InventoryHeader _invOutHeader, List<ReptPickSerials> _reptPickSerialsOut, List<ReptPickSerialsSub> _reptPickSerialsSubOut, MasterAutoNumber _autonoMinus, out string _docMines,
        InventoryHeader _invINHeader, List<ReptPickSerials> _reptPickSerialsIn, List<ReptPickSerialsSub> _reptPickINSerialsSubIn, MasterAutoNumber _autonoPlus, out string _docPlus,
        InventoryHeader _invHdrAodIn, List<ReptPickSerials> _reptPickSerialsAodIn, out string _aodInDoc, MasterAutoNumber _autonoAodIn,
        InventoryHeader _invHdrAodOut, List<ReptPickSerials> _reptPickSerialsAodOut, out string _aodOutDoc, MasterAutoNumber _autonoAodOut,
            out string _error, bool _aod)
        {
            Int16 effect = 0;
            _docMines = "";
            _docPlus = "";
            _aodInDoc = "";
            _aodOutDoc = "";
            _assDoc = "";
            _error = "";

            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_autonoAsbl.Aut_moduleid, _autonoAsbl.Aut_direction, _autonoAsbl.Aut_start_char, _autonoAsbl.Aut_cate_tp, _autonoAsbl.Aut_cate_cd, _autonoAsbl.Aut_modify_dt, _autonoAsbl.Aut_year).Aut_number;
                string _documentNo = _invINHeader.Ith_loc + "-" + _autonoAsbl.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                effect = _inventoryDAL.UpdateAutoNumber(_autonoAsbl);

                Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                _invOutHeader.Ith_seq_no = UserSeqNo;
                _invOutHeader.Ith_doc_no = Convert.ToString(UserSeqNo);

                _assDoc = _documentNo;
                //effect = UpdateInventoryAutoNumber(_invOutHeader, _autonoAsbl, "+", out _error);
                _invOutHeader.Ith_sub_docno = _documentNo;
                _invINHeader.Ith_sub_docno = _documentNo;
                _invHdrAodIn.Ith_sub_docno = _documentNo;
                _invHdrAodOut.Ith_sub_docno = _documentNo;

                _invOutHeader.Ith_job_no = _documentNo;
                _invINHeader.Ith_job_no = _documentNo;
                _invHdrAodIn.Ith_job_no = _documentNo;
                _invHdrAodOut.Ith_job_no = _documentNo;

                #region ADJ PLUS AND MINES
                effect = SaveOutwardScanSerial(_invOutHeader, _reptPickSerialsOut, _reptPickSerialsSubOut, null, false);
                effect = UpdateInventoryAutoNumber(_invOutHeader, _autonoMinus, "-", out _docMines);

                _invINHeader.Ith_oth_docno = _docMines;
                effect = SaveInwardScanSerial(_invINHeader, _reptPickSerialsIn, _reptPickINSerialsSubIn);
                effect = UpdateInventoryAutoNumber(_invINHeader, _autonoPlus, "+", out _docPlus);
                #endregion
                #region AOD PLUS AND MINES
                if (_aod)
                {
                    List<ReptPickSerials> _listAodOut = new List<ReptPickSerials>();
                    List<ReptPickSerials> _listAodIn = new List<ReptPickSerials>();
                    foreach (var item in _reptPickSerialsAodOut)
                    {
                        ReptPickSerials _reptPickSerial = _inventoryDAL.GetReservedByserialID(item.Tus_com, _invINHeader.Ith_loc, item.Tus_bin, item.Tus_itm_cd, item.Tus_ser_id);
                        _listAodOut.Add(_reptPickSerial);
                    }


                    effect = SaveOutwardScanSerial(_invHdrAodOut, _listAodOut, _reptPickSerialsSubOut, null, false);
                    effect = UpdateInventoryAutoNumber(_invHdrAodOut, _autonoAodOut, "-", out _aodOutDoc);
                    MasterBinLocation _bin = _generalDAL.GetMasterBinLocations(new MasterBinLocation() { Ibl_com_cd = _invHdrAodIn.Ith_com, Ibl_loc_cd = _invHdrAodIn.Ith_loc }).SingleOrDefault();
                    foreach (var item in _listAodOut)
                    {
                        item.Tus_loc = _invHdrAodIn.Ith_loc;
                        item.Tus_bin = _bin != null ? _bin.Ibl_bin_cd : "";
                        item.Tus_doc_no = _aodOutDoc;
                    }
                    _invHdrAodIn.Ith_oth_docno = _aodOutDoc;
                    effect = SaveInwardScanSerial(_invHdrAodIn, _listAodOut, _reptPickINSerialsSubIn);
                    effect = UpdateInventoryAutoNumber(_invHdrAodIn, _autonoAodIn, "+", out _aodInDoc);
                }
                #endregion
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _error = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        //Written by Rukshan 03/Jun/2016
        public List<INT_REQ> GETREQBY_REF(string _DOC, string _COM, string _TYPE, string _itm, int _line)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETREQBY_REF(_DOC, _COM, _TYPE, _itm, _line);
        }
        //subodana 2016-06-03
        public DataTable getExistingSerial(string _docno, string _code, string docno, string status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getExistingSerial(_docno, _code, docno, status);
        }
        //subodana 2016-06-03
        public Int32 UpdateExistingSerialRecived(string docno, Int32 serial, Int32 reserved)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateExistingSerialRecived(docno, serial, reserved);
        }

        //Lakshan 04 Jun 2016
        public List<RepConditionType> GET_REF_COND_TP(RepConditionType _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REF_COND_TP(_obj);
        }
        //Rukshan 06 Jun 2016
        public List<ReptPickHeader> GetAllScanHdr(string _company, string _user, string _doctype, int _direc, string _location = null)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanHdr(_company, _user, _doctype, _direc, _location);
        }
        //Darshana 06-06-2016
        public MasterItemBlock GetBlockedItmByCatTp(string _company, string _profit, string _item, int _pricetype, string _catTp)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBlockedItmByCatTp(_company, _profit, _item, _pricetype, _catTp);
        }

        //subodana 2016-06-06
        public DataTable getINRSerial(string _serial, string _code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getINRSerial(_serial, _code);
        }
        //subodana 2016-06-06
        public DataTable GetTepItems(Int32 seq, string _code, string status = null, string userid = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTepItems(seq, _code, status, userid, doctp);
        }
        public DataTable GetTempPickLocations(string locationCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTempPickLocations(locationCode);
        }
        public DataTable getLocManagerDetail(string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getLocManagerDetail(_loc);
        }

        public List<QuotationHeader> GetLatestAllValidQuotation(string _com, string _sup, string _type, string _subtype, DateTime _date, decimal _qty, string _status, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            List<QuotationHeader> _list = new List<QuotationHeader>();
            _list = _inventoryDAL.GetLatestAllValidQuotation(_com, _sup, _type, _subtype, _date, _qty, _status, _item);
            return _list;
        }

        //Lakshan 16 Jun 2016
        public DataTable SearchSerialsInr(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSerialsInr(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Lakshan 16 Jun 2016
        public DataTable SearchSerialsIntByItem(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSerialsIntByItem(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Rukshan 16-06-2016
        public List<InventoryLocation> GETWH_INV_BALANCE(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETWH_INV_BALANCE(_company, _location, _item, _status);
        }
        //Add by Lakshan 20 Jun 2016
        public List<InventoryHeader> GET_INT_HDR_DATA(InventoryHeader _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_HDR_DATA(_obj);
        }
        public DataTable getWarrantyPrintDetails(string _warrno, int _page, string _docno)
        {//Sanjeewa 2016-06-20
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getWarrantyPrintDetails(_warrno, _page, _docno);
        }
        public DataTable getWarrantyPrintMobDetails(string _com, string _seqno, string _item, string _serial, int _page)
        {//Sanjeewa 2016-06-20
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getWarrantyPrintMobDetails(_com, _seqno, _item, _serial, _page);
        }
        //Rukshan 22-06-2016
        public DataTable GetItemInventoryBalanceStatus_RES(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalanceStatus_RES(_company, _location, _item, _status);
        }

        public List<InventoryHeader> GetIntHdrDatByDateRange(InventoryHeader obj, DateTime from, DateTime to, Int32 isDateRange)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetIntHdrDatByDateRange(obj, from, to, isDateRange);
        }
        //nuwan 2016.0625
        public DataTable getCurrentDocumentDetails(string p_tuh_usr_com, string p_tuh_doc_no, string p_tuh_usr_loc, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getCurrentDocumentDetails(p_tuh_usr_com, p_tuh_doc_no, p_tuh_usr_loc, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }
        //Add by Rukshan 27 Jun 2016
        public DataTable CHECK_TOBOND_GRN(string _com, string _doc, string _itm, out bool _result)
        {
            _inventoryDAL = new InventoryDAL();
            _result = false;
            DataTable _tblBalance = _inventoryDAL.CHECK_TOBOND_GRN(_com, _doc, _itm);
            if (_tblBalance.Rows.Count > 0)
            {
                _result = true;
            }
            return _tblBalance;
        }
        public DataTable CHECK_TOBOND_GRNLTST(string _com, string _doc, string _itm, out bool _result)
        {
            _inventoryDAL = new InventoryDAL();
            _result = false;
            DataTable _tblBalance = _inventoryDAL.CHECK_TOBOND_GRN_LTST(_com, _doc, _itm);
            if (_tblBalance.Rows.Count > 0)
            {
                _result = true;
            }
            return _tblBalance;
        }
        //Add By Lakshan 2016/Jun/2016
        public DataTable SearchSplitReCall(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime dtFrom, DateTime dtTo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSplitReCall(_initialSearchParams, _searchCatergory, _searchText, dtFrom, dtTo);
        }

        public Int16 SaveAllScanSerials_Excel(List<ReptPickSerials> _reptPickSerials, List<ReptPickItems> _ReptPickItems, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            if (_reptPickSerials != null)
            {
                foreach (ReptPickSerials _serial in _reptPickSerials)
                {
                    effect = _inventoryRepDAL.SavePickedItemSerials(_serial);
                    Boolean update_inr_ser = _inventoryDAL.Update_serialID_INS_AVAILABLE(_serial.Tus_com, _serial.Tus_loc, _serial.Tus_itm_cd, Convert.ToInt32(_serial.Tus_ser_id), -1);
                }
            }
            if (_ReptPickItems != null)
            {
                foreach (ReptPickItems _itm in _ReptPickItems)
                {
                    effect = _inventoryRepDAL.SavePickedItems(_itm);
                }
            }
            if (_reptPickSerialsSub != null) _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();
            return effect;
        }

        //Add by Rukshan 12 Jul 2016
        public string GET_BOOKMAX_SERIAL(string _com, string _itm, out int _latpage)
        {
            _inventoryDAL = new InventoryDAL();
            string serial = string.Empty;
            serial = _inventoryDAL.GET_BOOKMAX_SERIAL(_com, _itm, out _latpage);
            return serial;
        }

        //Lakshan 14 Jul 2016
        public List<InventoryBatchRefN> Get_Inr_Batch(InventoryBatchRefN _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Inr_Batch(_obj);
        }
        //Rukshan 19 Jul 2016
        public List<PurchaseOrderDetail> GetPOItemsList(string _poNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPOItemsList(_poNo);
        }
        //Lakshan 20 Jul 2016
        public DataTable GetAodItem(string _docNo, string _item, string _model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAodItem(_docNo, _item, _model);
        }

        //Add by Rukshan 23 Jul 2016
        public string GET_TEMPBOOKMAX_SERIAL(string _com, string _itm, int _seq, out int _latpage)
        {
            _inventoryDAL = new InventoryDAL();
            string serial = string.Empty;
            serial = _inventoryDAL.GET_TEMPBOOKMAX_SERIAL(_com, _itm, _seq, out _latpage);
            return serial;
        }

        //Rukshan 25 Jul 2016
        public DataTable Get_Root_Loc(string _company, string _root, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Root_Loc(_company, _root, _loc);
        }

        //Rukshan 25 Jul 2016
        public List<InventoryLocation> Get_Root_Loc_Inv(string _com, string _Route, string _Itemcode, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            List<InventoryLocation> _Invetory = new List<InventoryLocation>();

            DataTable _Loc = _inventoryDAL.Get_Root_Loc(_com, _Route, null);

            if (_Loc != null)
            {
                if (_Loc.Rows.Count > 0)
                {
                    foreach (DataRow _row in _Loc.Rows)
                    {
                        List<InventoryLocation> _Invetoryselect = _inventoryDAL.GetItemInventoryBalance(_com, _row[0].ToString(), _Itemcode, _status);
                        if (_Invetoryselect != null)
                        {
                            _Invetory.AddRange(_Invetoryselect);
                        }

                    }
                }

            }



            return _Invetory;
        }

        //Add By Rukshan 2016/Jul/2016
        public DataTable SearchInrBatch(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _dtFrom, DateTime _dtTo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchInrBatch(_initialSearchParams, _searchCatergory, _searchText, _dtFrom, _dtTo);
        }

        //Add By Rukshan 2016/Jul/25
        public DataTable SearchSerialsInr_Batchno(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSerialsInr_Batchno(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Add By Rukshan 2016/Jul/25
        public DataTable chekInr_batchno(string _docNo, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.chekInr_batchno(_docNo, _com);
        }

        //Add By Rukshan 2016/Aug/02
        public DataTable GetComItem(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetComItem(_item);
        }

        //subodana 2016-08-05
        public List<AODTrackerHDRdata> Get_AOD_Trackerdata(string com, string fromloc, string toloc, DateTime fromdate, DateTime todate, string inval, string outval)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_AOD_Trackerdata(com, fromloc, toloc, fromdate, todate, inval, outval);
        }
        //subodana 
        public DataTable GETTRANSDETAILS(string com, string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETTRANSDETAILS(com, doc);
        }
        //subodana 2016-08-06
        public List<AODTrackerHDRdata> Get_AOD_TrackerdataByDoc(string com, string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_AOD_TrackerdataByDoc(com, doc);
        }
        //subodana 2016-08-06
        public List<AODTrackerHDRdata> Get_AOD_TrackerdataByTRNS(string com, string method, string party, string refno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_AOD_TrackerdataByTRNS(com, method, party, refno);
        }
        //subodana 
        public DataTable GETAODITEMS(string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETAODITEMS(doc);
        }
        //subodana 
        public DataTable GETAODSERIAL(string com, string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETAODSERIAL(com, doc);
        }

        public List<ModelCatAndTypes> Get_Model_cat_Type(string model, string _Maincat, out List<ModelPic> _pic)
        {
            _inventoryDAL = new InventoryDAL();
            _pic = new List<ModelPic>();
            List<ModelCatAndTypes> _type = new List<ModelCatAndTypes>();
            _pic = _inventoryDAL.Get_Modelpic(model);
            _type = _inventoryDAL.Get_Model_cat_Type(_Maincat);
            DataTable _tbl = new DataTable();

            if (_type != null)
            {
                _tbl = _inventoryDAL.GETMODELCLS_DEF(model);
                if (_tbl != null)
                {
                    foreach (DataRow _row in _tbl.Rows)
                    {
                        string mcd_cls_cat = _row[1].ToString();
                        string mcd_cls_tp = _row[2].ToString();
                        string DES = _row[3].ToString();
                        var _filter = _type.SingleOrDefault(x => x.MCT_CLS_CAT == mcd_cls_cat && x.MCT_CLS_TP == mcd_cls_tp);
                        if (_filter != null)
                        {
                            _filter.MCT_DEF = DES;
                        }
                    }
                }
            }

            return _type;
        }

        public List<InventorySerialN> GetDerWarrantyPrintSerial(string _docNo, int _rePrint)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDerWarrantyPrintSerial(_docNo, _rePrint);
        }
        //Lakshan 2016 Aug 10
        public Int32 UpdateDerectWarantyPrint(Int32 _serId)
        {
            Int32 effect = 0;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                effect = _inventoryDAL.UpdateDerectWarantyPrint(_serId);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                }

            }
            catch (Exception e)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                return effect;
            }
            return effect;
        }

        //Rukshan 15/Aug/2016
        public Int32 SaveModelClsDef(List<ModelClsDef> _ModelClsDef, List<ModelPic> _pic, out string err)
        {
            Int32 effect = 0;
            _inventoryDAL = new InventoryDAL();
            err = string.Empty;
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            if (_ModelClsDef != null)
            {
                foreach (ModelClsDef _def in _ModelClsDef)
                {
                    effect = _inventoryDAL.SaveModelClsDef(_def);
                }
            }
            if (_pic != null)
            {
                int i = 0;

                foreach (ModelPic _def in _pic)
                {
                    if (_def.MMP_LINE == 0)
                    {
                        i = _pic.Max(x => x.MMP_LINE);

                        _def.MMP_LINE = i + 1;
                        i++;
                    }

                    effect = _inventoryDAL.SaveModelPic(_def);
                }
            }
            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();
            return effect;
        }

        //Lakshan 2016 Aug 15
        public List<ReptPickHeader> GetAllScanHdrWithDateRange(ReptPickHeader _obj, Int32 _isDtRang, DateTime _dtFrom, DateTime _dtTo)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanHdrWithDateRange(_obj, _isDtRang, _dtFrom, _dtTo);
        }
        //subodana 2016-08-18
        public List<ReservationItemsrep> GetReservationItemsDet(string com, DateTime fromdate, DateTime todate, string docno, string itemcode, string status, string dispatchloc, string custormer, string type, string adminTeam)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetReservationItemsDet(com, fromdate, todate, docno, itemcode, status, dispatchloc, custormer, type, adminTeam);
        }

        //Rukshan 2016 Aug 18
        public List<InventorySerialN> Get_Reserved_SerialsNew(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Reserved_SerialsNew(_company, _location);
        }
        //subodana 2016-08-19
        public List<CatwithItems> GetItemsDetWithCat(string cat)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemsDetWithCat(cat);
        }
        //subodana 
        public DataTable CheckINTReqBond(string com, string refno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CheckINTReqBond(com, refno);
        }
        //Lakshan 2016-08-20
        public List<InventoryItem> GET_INT_ITM_DATA(InventoryItem _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_ITM_DATA(_obj);
        }
        //Lakshan 2016 Aug 20
        public List<ReptPickSerials> GET_TEMP_PICK_SER_BY_INT_SER(InventorySerialN _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_TEMP_PICK_SER_BY_INT_SER(_obj);
        }
        //subodana 2016-08-20
        public List<BLtracker> GetBlTrackerData(string com, DateTime fromdate, DateTime todate, string blno, string itemcode, string bondno, string model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBlTrackerData(com, fromdate, todate, blno, itemcode, bondno, model);
        }
        public DataTable GetItemDataInTempPickItem(string itmCode, string docNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemDataInTempPickItem(itmCode, docNo);
        }
        //DARSHANA 2016-08-23
        public List<InventoryRequest> GET_REQUEST_FOR_DISPATCH_NO(String Com, String Route, String MainCate, String Item, String ReqType, String Loc, String SubCate, String Model, DateTime Date, DateTime ToDate, int type, string ReqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REQUEST_FOR_DISPATCH_NO(Com, Route, MainCate, Item, ReqType, Loc, SubCate, Model, Date, ToDate, type, ReqNo);
        }

        //Randima 2016-08-25
        public DataTable GetItemReservationDet(string _com, string _loc, string _itm, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable MRNResData = _inventoryDAL.GetItemReservationDet(_com, _loc, _itm, _status);
            DataTable ResData = _inventoryDAL.GetItemReservationDetail2(_com, _loc, _itm, _status);
            int i = 0;
            foreach (var resdata in ResData.Rows)
            {
                string resno = ResData.Rows[i]["Doc No"].ToString();
                string item = ResData.Rows[i]["Item"].ToString();
                DataTable qtydt = _inventoryDAL.GetResBalQty(resno, item, _loc);
                if (qtydt.Rows[0][0].ToString() != "")
                {
                    ResData.Rows[i]["Qty"] = Convert.ToInt32(ResData.Rows[i]["Qty"].ToString()) - Convert.ToInt32(qtydt.Rows[0][0].ToString());
                }

                i++;
            }


            MRNResData.Merge(ResData);
            MRNResData.DefaultView.Sort = "Doc Date desc";
            DataTable dt = MRNResData.DefaultView.ToTable();
            DataColumn newcolumn = new DataColumn("temporary", typeof(string));
            dt.Columns.Add(newcolumn);

            foreach (DataRow dr in dt.Rows)
            {
                DateTime date = Convert.ToDateTime(dr["Doc Date"].ToString());
                string shortDate = date.ToShortDateString();
                dr["temporary"] = shortDate;


            }
            dt.Columns.Remove("Doc Date");
            newcolumn.ColumnName = "Doc Date";
            return dt;
        }

        //Lakshan 2016 Aug 29
        public List<ReptPickHeader> GetReportTempPickHdr(ReptPickHeader _obj)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetReportTempPickHdr(_obj);
        }
        // subodana 2016-08-26 save PDA new

        public int SavePDAnew(ReptPickHeader _inputReptPickHeader, ReptPickItems _items)
        {
            int result = 0;

            return result;
        }
        public DataTable getTempPickHdrDoc(string seq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getTempPickHdrDoc(seq);
        }
        public decimal GetActualRateAodIn(string _docNo, Int32 _lineNo)
        {
            decimal _actRt = 0;
            decimal _TmpSActRt = 0;
            _inventoryDAL = new InventoryDAL();
            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_docNo, _lineNo);
            if (_dt != null)
            {
                if (_dt.Rows.Count > 0)
                {
                    _actRt = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                }
            }
            return _actRt;
        }

        public DataTable GetGRNDetailsByReqNo(string _seqNo)
        {

            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.GetGRNDetailsByReqNo(_seqNo);
            return _grnDtls;
        }


        //Lakshika 2016-09-06
        public DataTable GetGRNItemsDetailsBySeqNo(string _seqNo)
        {

            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.GetGRNItemsDetailsBySeqNo(_seqNo);
            return _grnDtls;
        }
        //subodana
        public List<AdjesmentDet> StockAdjDetails(string com, string chnal, DateTime fromdate, DateTime todate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.StockAdjDetails(com, chnal, fromdate, todate);
        }
        //Nuwan 2016.09.08
        public decimal checkStockAvailabilityOfItem(string itemcode, string company, string location, string bincode, string itmstatus, decimal qtyforscan, out string error)
        {
            decimal stkBal = 0;
            try
            {
                error = string.Empty;
                _inventoryDAL = new InventoryDAL();
                decimal batchBalance = _inventoryDAL.getItemBatchBalance(itemcode, company, location, bincode, itmstatus);
                decimal tempPickSerQty = _inventoryDAL.getTempPickSerQty(itemcode, company, location, bincode, itmstatus);
                stkBal = batchBalance - tempPickSerQty;
                if (stkBal - qtyforscan < 0)
                {
                    if (tempPickSerQty > 0)
                    {
                        DataTable docs = getExistsItemDocument(itemcode, company, location, bincode, itmstatus);
                        if (docs.Rows.Count > 0)
                        {
                            error = "Stock :" + batchBalance.ToString() + " Item  already scan in : ";
                            string doc = "";
                            foreach (DataRow row in docs.Rows)
                            {
                                doc += "( Doc :" + row["TUH_DOC_NO"].ToString() + " Qty : " + row["tus_qty"].ToString() + " )";
                            }
                            error = error + doc;
                        }
                    }
                }
                return stkBal;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return stkBal;
            }
        }
        public bool deleteTempDocument(string docnum, string seqno, out string error)
        {
            error = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {

                Int32 eff = 0;
                DataTable scnQty = _inventoryDAL.GetItemTotalScanedQty(docnum);
                if (scnQty.Rows.Count > 0 && scnQty.Rows[0]["SEQ_QTY"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(scnQty.Rows[0]["SEQ_QTY"].ToString()) > 0)
                    {
                        error = "Already scanned document can't delete.";
                        return false;
                    }
                    else
                    {
                        eff = _inventoryDAL.deleteTempDocument(seqno);
                    }
                }
                else
                {
                    eff = _inventoryDAL.deleteTempDocument(seqno);
                }
                if (eff == 1)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return true;
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to delete document";
                    return false;
                }

            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                error = ex.Message.ToString();
                return false;
            }
        }

        //subodana 
        public DataTable SP_GETENTRYREQDATA(string com, string sino)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.SP_GETENTRYREQDATA(com, sino);
            return _grnDtls;
        }
        //subodana 
        public DataTable SP_GETENTRYRESDATA(string sino, string Bno, string Itm)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.SP_GETENTRYRESDATA(sino, Bno, Itm);
            return _grnDtls;
        }
        //subodana 
        public DataTable SP_GETRESQTYMRN(string com, string loc, string itmcode, string status)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.SP_GETRESQTYMRN(com, loc, itmcode, status);
            return _grnDtls;
        }

        //Lakshika 2016-09-12 
        public DataTable updateWarrentryIsPrint(string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.updateWarrentryIsPrint(_docno);
            return _grnDtls;
        }

        public Int32 updateDocumentFinishStatus(string docno, string doctyp, Int32 status, out string error)
        {
            Int32 eff = 0;
            error = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                eff = _inventoryDAL.updateDocumentFinishStatus(docno, doctyp, status);
                if (eff == 1)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return eff;
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to finish document";
                    return eff;
                }
            }
            catch (Exception ex)
            {

                error = ex.Message;
                return eff;
            }
        }
        //Lakshan 13 Sep 2016
        public List<InventoryBatchN> GET_INT_BATCH_DATA(InventoryBatchN _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_BATCH_DATA(_obj);
        }
        public DataTable chechIsAvailableSerial(string itmcode, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.chechIsAvailableSerial(itmcode, serial);
        }
        //subodana 2016-09-13
        public Int32 UpdateReqUser(string com, string reqno, string user)
        {
            Int32 _eff = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _eff = _inventoryDAL.UpdateReqUser(com, reqno, user);
            _inventoryDAL.ConnectionClose();
            return _eff;
        }
        //SUBODANA

        public DataTable SP_GETUPDATEUSER(string COM, string REQNO)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _grnDtls = _inventoryDAL.SP_GETUPDATEUSER(COM, REQNO);
            return _grnDtls;

        }
        public Int32 UpdateIntSerReserved(InventorySerialN _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.UpdateIntSerReserved(_obj);

        }
        public DataTable LoadFinishedCurrentJobs(string p_tuh_usr_com, string p_tuh_usr_loc, string p_tuh_usr_id, string p_tuh_doc_tp, Int32 p_tuh_direct, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadFinishedCurrentJobs(p_tuh_usr_com, p_tuh_usr_loc, p_tuh_usr_id, p_tuh_doc_tp, p_tuh_direct, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);

        }
        public bool reopenTempDocument(string docnum, string doctp, string seqno, out string error)
        {
            error = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {

                Int32 eff = 0;
                eff = _inventoryDAL.reopenTempDocument(seqno, doctp);
                if (eff == 1)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return true;
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to reopen document";
                    return false;
                }
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                error = ex.Message.ToString();
                return false;
            }
        }
        //Nuwan 2016.09.15
        public DataTable getExistsItemDocument(string itemcode, string company, string location, string bincode, string itmstatus)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                return _inventoryDAL.getExistsItemDocument(itemcode, company, location, bincode, itmstatus);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DataTable GetBalanceQtyForResItmRpt(string com, string req_no, string item_cd, int line_no)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _balQty = _inventoryDAL.GetBalanceQtyForResItmRpt(com, req_no, item_cd, line_no);
            return _balQty;
        }
        public decimal getDocumentSerialCount(string docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getDocumentSerialCount(docno);
        }

        //Rukshan 15 Sep 2016
        public string GET_INR_BATCH_ITM(string _GRN, string _itm, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_BATCH_ITM(_GRN, _itm, _com);
        }
        public string GET_INR_BATCH_ITMforJob(string _job, Int32 _itmline, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_BATCH_ITMforJob(_job, _itmline, _com);
        }
        public DataTable CalculateAodExcelData(DateTime _dtFrom, DateTime _dtTo)
        {
            DataTable _finalData = new DataTable();
            GetInvDataMisMatch();
            #region MyRegion
            /*
            _inventoryDAL = new InventoryDAL();
            ReptCommonDAL _repComDal = new ReptCommonDAL();
            DataTable _finalData = new DataTable();
            //_dtFrom = new DateTime(2016, 06, 01);
            //_dtTo = new DateTime(2016, 06, 31);
            InventoryDAL _INVDAL = new InventoryDAL();
            _INVDAL.ConnectionOpen_DR();
            DataTable _dtAodIn = _INVDAL.GetAODInDataForExcelReport(_dtFrom, _dtTo);
            List<Temp_aod_rec> _list = new List<Temp_aod_rec>();
            foreach (DataRow drIn in _dtAodIn.Rows)
            {
                Temp_aod_rec _rec = new Temp_aod_rec();
                _rec.madmin = drIn["in_admin"].ToString();
                _rec.mloc = drIn["in_loc"].ToString();
                _rec.oadmin = drIn["out_admin"].ToString();
                _rec.channel = drIn["out_chnl"].ToString();
                decimal _tmpDec = 0;
                _rec.in_cost = decimal.TryParse(drIn["cost_amount"].ToString(), out _tmpDec) ? Convert.ToDecimal(drIn["cost_amount"].ToString()) : 0;
                _list.Add(_rec);
                // _rec.out_cost = Convert.ToDecimal(drIn["out_admin"].ToString());
                //_rec.user_id = drIn["out_admin"].ToString();
            }
            _repComDal.ConnectionOpen();
            _repComDal.BeginTransaction();
            foreach (var item in _list)
            {
                _repComDal.UpdateTempAodRec(item);
            }

            DataTable _dtAodout = _INVDAL.GetAODOutDataForExcelReport(_dtFrom, _dtTo);
            _list = new List<Temp_aod_rec>();
            foreach (DataRow drIn in _dtAodout.Rows)
            {
                Temp_aod_rec _rec = new Temp_aod_rec();
                _rec.madmin = drIn["in_admin"].ToString();
                _rec.mloc = drIn["out_loc"].ToString();
                _rec.oadmin = drIn["out_admin"].ToString();
                _rec.channel = drIn["in_chnl"].ToString();
                decimal _tmpDec = 0;
                _rec.out_cost = decimal.TryParse(drIn["cost_amount"].ToString(), out _tmpDec) ? Convert.ToDecimal(drIn["cost_amount"].ToString()) : 0;
                _list.Add(_rec);
                // _rec.out_cost = Convert.ToDecimal(drIn["out_admin"].ToString());
                //_rec.user_id = drIn["out_admin"].ToString();
            }
            foreach (var item in _list)
            {
                _repComDal.UpdateTempAodRec(item);
            }
            _repComDal.TransactionCommit();
            //Update data*/
            #endregion
            return _finalData;
        }
        public Int32 deleteSeriallisezedSerial(string serialCheck, string docdirection, string doctyp, string _scanDocument, ReptPickSerials _inputReptPickSerials, ReptPickItems _itemsQty, string company, string location, string _item, Int32 serialid, string locserialcheck, Int32 docseq, out string error, string userid = null, string doctp = null)
        {
            error = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            Int32 eff = 0;
            try
            {
                eff = _inventoryDAL.DeleteItemsWIthSerialsNew(_inputReptPickSerials, userid, doctp);
                if (eff <= 0)
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to delete item with serial.";
                    return -1;
                }
                if (serialCheck == "True" && docdirection == "1" && doctyp == "AOD")
                {
                    eff = _inventoryDAL.UpdateExistingSerialRecivedNew(_scanDocument, serialid, 0);
                    if (eff <= 0)
                    {
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();
                        error = "Unable to update reserve status.";
                        return -1;
                    }
                }
                else if (doctyp == "SRN" && docdirection == "1")
                {
                    eff = _inventoryDAL.UpdateExistingSerialRecivedINDo(_scanDocument, serialid, 0);
                    if (eff <= 0)
                    {
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();
                        error = "Unable to update reserve status.";
                        return -1;
                    }

                }
                if (docdirection == "0" && locserialcheck == "True" && doctyp != "STJO")
                {
                    bool res = _inventoryDAL.Update_serialID_INS_AVAILABLENew(company, location, _item, serialid, 1);
                    if (res == false)
                    {
                        //_inventoryDAL.TransactionRollback();
                        //_inventoryDAL.ConnectionClose();
                        error = "Serial status not updated.";
                    }
                }
                eff = _inventoryDAL.UpdateQtyNew(_itemsQty, userid, doctp);
                if (eff <= 0)
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to update quantity.";
                    return -1;
                }
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                return eff;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                error = ex.Message.ToString();
                return -1;
            }
        }
        public Int32 deleteNonSerialItems(ReptPickItems _itemsQty, ReptPickSerials _inputReptPickSerialsUpdate, out string error, string userid = null, string doctp = null)
        {
            error = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            Int32 eff = 0;
            try
            {
                eff = _inventoryDAL.UpdateSerializedItemsQtyNew(_inputReptPickSerialsUpdate, userid, doctp);
                if (eff <= 0)
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to update tempory serial table.";
                    return -1;
                }
                eff = _inventoryDAL.UpdateQtyNew(_itemsQty, userid, doctp);
                if (eff <= 0)
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to update quantity.";
                    return -1;
                }
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                return eff;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                error = ex.Message.ToString();
                return -1;
            }
        }
        public Int32 saveStockOutDetails(DataTable dtdoccheck, ReptPickHeader _inputReptPickHeader, string isseriaitem, DataTable temppickitems, string iscurrent, decimal qtyforscan, ReptPickItems _items, string iscreatejob, ReptPickItems _itemslines, DataTable dtsericlavailable, ReptPickSerials _inputReptPickSerials,
            string company, string location, string txtitemcode, Int32 serialid, string _scanDocument, string warecom, string wareloc, string loadingpoint, string locserialcheck, out string error)
        {
            error = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            string doctype = string.Empty;
            Int32 eff = 0;
            try
            {

                if (dtdoccheck.Rows.Count == 0)
                {
                    eff = _inventoryRepDAL.SavePickedHeader(_inputReptPickHeader);
                    if (eff == -1)
                    {
                        error = "Unable to add header details.";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        return -1;
                    }
                    doctype = _inputReptPickHeader.Tuh_doc_tp;
                }
                else
                {
                    doctype = dtdoccheck.Rows[0]["TUH_DOC_TP"].ToString();

                }

                if (isseriaitem != "1" && temppickitems.Rows.Count > 1 && iscurrent == "CurrentJobb")
                {
                    decimal tempScnQty = qtyforscan;
                    foreach (DataRow dtrw in temppickitems.Rows)
                    {
                        if (tempScnQty == 0)
                        {
                            break;
                        }
                        if ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString()) != 0))
                        {
                            if (tempScnQty > 0 && ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString())) < tempScnQty))
                            {
                                _items.Tui_pic_itm_qty = Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                                _items.Tui_pic_itm_cd = dtrw["tui_pic_itm_cd"].ToString();
                                tempScnQty = tempScnQty - _items.Tui_pic_itm_qty;//Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                            }
                            else
                            {
                                _items.Tui_pic_itm_qty = tempScnQty;
                                _items.Tui_pic_itm_cd = dtrw["tui_pic_itm_cd"].ToString();
                                tempScnQty = tempScnQty - _items.Tui_pic_itm_qty;
                            }
                            eff = _inventoryDAL.UpdatePickItemStockInOutNew(_items);
                            if (eff == -1)
                            {
                                error = "Unable to update stock details.";
                                _inventoryDAL.TransactionRollback();
                                _inventoryDAL.ConnectionClose();

                                _inventoryRepDAL.TransactionRollback();
                                _inventoryRepDAL.ConnectionClose();
                                return -1;
                            }
                        }
                    }
                }
                else
                {
                    eff = _inventoryDAL.UpdatePickItemStockInOutNew(_items);
                    if (eff == -1)
                    {
                        error = "Unable to update stock details.";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        return -1;
                    }
                }
                if (iscreatejob == "CreateJobNumber")
                {
                    eff = _inventoryDAL.UpdatePickItemLine(_itemslines);
                    if (eff == -1)
                    {
                        error = "Unable to update item line.";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        return -1;
                    }
                }

                if (dtsericlavailable.Rows.Count == 0 || isseriaitem != "1")
                {
                    if (isseriaitem != "1" && temppickitems.Rows.Count > 1 && iscurrent == "CurrentJobb")
                    {
                        decimal tempScnQty = qtyforscan;
                        foreach (DataRow dtrw in temppickitems.Rows)
                        {
                            if (tempScnQty == 0)
                            {
                                break;
                            }
                            if ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString()) != 0))
                            {
                                if (tempScnQty > 0 && ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString())) < tempScnQty))
                                {
                                    _inputReptPickSerials.Tus_qty = Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                                    _inputReptPickSerials.Tus_base_itm_line = Convert.ToInt32(dtrw["tui_pic_itm_cd"].ToString());
                                    tempScnQty = tempScnQty - _inputReptPickSerials.Tus_qty;//Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                                }
                                else
                                {
                                    _inputReptPickSerials.Tus_qty = tempScnQty;
                                    _inputReptPickSerials.Tus_base_itm_line = Convert.ToInt32(dtrw["tui_pic_itm_cd"].ToString());
                                    tempScnQty = tempScnQty - _inputReptPickSerials.Tus_qty;
                                }
                                DataTable dtDocDetails = _inventoryDAL.getCurrentDocumentDetails(company, _scanDocument, location, warecom, wareloc, loadingpoint);
                                if (dtDocDetails.Rows.Count > 0 && temppickitems.Rows.Count > 0)
                                {
                                    if (dtDocDetails.Rows[0]["TUH_IS_TAKE_RES"] != null && dtDocDetails.Rows[0]["TUH_IS_TAKE_RES"].ToString() == "1")
                                        _inputReptPickSerials.Tus_resqty = _inputReptPickSerials.Tus_qty;
                                }

                                _inputReptPickSerials.Tus_itm_line = Convert.ToInt32(dtrw["tui_pic_itm_cd"].ToString());
                                eff = _inventoryDAL.SavePickedItemSerialsPDA(_inputReptPickSerials);
                                if (eff == -1)
                                {
                                    error = "Unable to update picked item serial.";
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();

                                    _inventoryRepDAL.TransactionRollback();
                                    _inventoryRepDAL.ConnectionClose();
                                    return -1;
                                }
                            }
                        }
                    }
                    else
                    {
                        eff = _inventoryDAL.SavePickedItemSerialsPDA(_inputReptPickSerials);
                        if (eff == -1)
                        {
                            error = "Unable to update picked item serial.";
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();

                            _inventoryRepDAL.TransactionRollback();
                            _inventoryRepDAL.ConnectionClose();
                            return -1;
                        }
                    }
                    if (isseriaitem == "1" && locserialcheck == "True" && doctype != "STJO")
                    {
                        Boolean update_inr_ser = _inventoryDAL.Update_serialID_INS_AVAILABLE(company, location, txtitemcode, serialid, -1);
                        if (!update_inr_ser)
                        {
                            error = "Unable to update serial status.";
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();

                            _inventoryRepDAL.TransactionRollback();
                            _inventoryRepDAL.ConnectionClose();
                            return -1;
                        }
                    }
                }
                if (doctype != "GRN")
                {
                    Int32 validateSeranditem = _inventoryDAL.validateItemAndSerial(_inputReptPickSerials.Tus_usrseq_no, _inputReptPickSerials.Tus_base_itm_line);
                    if (validateSeranditem == -1)
                    {

                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();

                        error = "Invalid tempory item and serial update.Please re-scan.";
                        return -1;
                    }
                }
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
                return eff;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();

                _inventoryRepDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();

                error = ex.Message.ToString();
                return -1;
            }
        }

        //Lakshan add Only bll methode 17 Sep 2016
        public InventoryRequest GetInventoryRequestDataByReqNo(InventoryRequest _inputInventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInventoryRequestDataByReqNo(_inputInventoryRequest);
        }

        //Rukhan 18-sep-2016
        public List<ReptPickSerials> GetInvoiceSerialForReversalBYITM(string _company,
            string _invoice, int _baseRefline, string _itm, int _qty)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceSerialForReversalBYITM(_company, _invoice, _baseRefline, _itm, _qty);
        }

        //Lakshan 2016 Sep 19
        public List<ReptPickSerials> GET_TEMP_PICK_SER_DATA(ReptPickSerials _repPickSer)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_SER_DATA(_repPickSer);
        }
        //Lakshan 2016 Sep 20
        public List<ReptPickItems> GET_TEMP_PICK_ITM_DATA(ReptPickItems _repTemItm)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_ITM_DATA(_repTemItm);
        }
        //Lakshan 2016 Sep 20
        public List<ReptPickHeader> GET_TEMP_PICK_HDR_DATA(ReptPickHeader _repHdr)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_HDR_DATA(_repHdr);
        }

        public Int32 saveStockInDetails(DataTable dtdoccheck, ReptPickHeader _inputReptPickHeader, string isseriaitem, DataTable temppickitems, string iscurrentjobs, decimal qtyforscan, ReptPickItems _items,
            string iscreatejob, DataTable dtsericlavailable, ReptPickItems _itemslines, string doctp, string existsdocno, Int32 existseialno, ReptPickSerials _inputReptPickSerials, string company, string location,
            string _scanDocument, string warecom, string wareloc, string loadingpoint, Int32 existserialcount, out string error, string passDocTp = null)
        {
            error = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            string userid = "";
            Int32 eff = 0;
            try
            {
                userid = _inputReptPickSerials.Tus_cre_by;
                if (dtdoccheck.Rows.Count == 0)
                {
                    eff = _inventoryRepDAL.SavePickedHeader(_inputReptPickHeader);
                    if (eff == -1)
                    {
                        error = "Unable to add header details.";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        return -1;
                    }
                }
                if (isseriaitem != "1" && temppickitems.Rows.Count > 1 && iscurrentjobs == "CurrentJobb")
                {
                    decimal tempScnQty = qtyforscan;
                    foreach (DataRow dtrw in temppickitems.Rows)
                    {
                        if (tempScnQty == 0)
                        {
                            break;
                        }
                        if ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString()) != 0))
                        {
                            if (tempScnQty > 0 && ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString())) < tempScnQty))
                            {
                                _items.Tui_pic_itm_qty = Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                                _items.Tui_pic_itm_cd = dtrw["tui_pic_itm_cd"].ToString();
                                tempScnQty = tempScnQty - _items.Tui_pic_itm_qty;//Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                            }
                            else
                            {
                                _items.Tui_pic_itm_qty = tempScnQty;
                                _items.Tui_pic_itm_cd = dtrw["tui_pic_itm_cd"].ToString();
                                tempScnQty = tempScnQty - _items.Tui_pic_itm_qty;
                            }
                            eff = _inventoryDAL.UpdatePickItemStockInOutNew(_items, userid, passDocTp);
                            if (eff == -1)
                            {
                                error = "Unable to update stock details.";
                                _inventoryDAL.TransactionRollback();
                                _inventoryDAL.ConnectionClose();

                                _inventoryRepDAL.TransactionRollback();
                                _inventoryRepDAL.ConnectionClose();
                                return -1;
                            }
                        }
                    }
                    // reqqty < qtyforscan + picqty
                }
                else
                {
                    eff = _inventoryDAL.UpdatePickItemStockInOutNew(_items, userid, passDocTp);
                    if (eff == -1)
                    {
                        error = "Unable to update stock details.";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        return -1;
                    }
                }

                if (iscreatejob == "CreateJobNumber")
                {
                    eff = _inventoryDAL.UpdatePickItemLine(_itemslines, userid, passDocTp);
                    if (eff == -1)
                    {
                        error = "Unable to update item line.";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();

                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        return -1;
                    }
                }
                if (dtsericlavailable.Rows.Count == 0 || isseriaitem != "1")
                {
                    if (doctp == "AOD" && existserialcount > 0)
                    {
                        if (isseriaitem == "1")
                        {
                            eff = _inventoryDAL.UpdateExistingSerialRecivedNew(existsdocno, existseialno, 1);
                            if (eff <= 0)
                            {
                                _inventoryDAL.TransactionRollback();
                                _inventoryDAL.ConnectionClose();
                                error = "Unable to update reserve status.";
                                return -1;
                            }
                        }
                    }
                    else if (doctp == "SRN" && existserialcount > 0)
                    {
                        if (isseriaitem == "1")
                        {
                            eff = _inventoryDAL.UpdateExistingSerialRecivedINDo(_scanDocument, existseialno, 1);
                            if (eff <= 0)
                            {
                                _inventoryDAL.TransactionRollback();
                                _inventoryDAL.ConnectionClose();
                                error = "Unable to update reserve status.";
                                return -1;
                            }
                        }
                    }
                    if (isseriaitem != "1" && temppickitems.Rows.Count > 1 && iscurrentjobs == "CurrentJobb")
                    {
                        decimal tempScnQty = qtyforscan;
                        foreach (DataRow dtrw in temppickitems.Rows)
                        {
                            if (tempScnQty == 0)
                            {
                                break;
                            }
                            if ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString()) != 0))
                            {
                                if (tempScnQty > 0 && ((Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString())) < tempScnQty))
                                {
                                    _inputReptPickSerials.Tus_qty = Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                                    _inputReptPickSerials.Tus_base_itm_line = Convert.ToInt32(dtrw["tui_pic_itm_cd"].ToString());
                                    tempScnQty = tempScnQty - _inputReptPickSerials.Tus_qty;//Convert.ToDecimal(dtrw["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToDecimal(dtrw["TUI_PIC_ITM_QTY"].ToString());
                                }
                                else
                                {
                                    _inputReptPickSerials.Tus_qty = tempScnQty;
                                    _inputReptPickSerials.Tus_base_itm_line = Convert.ToInt32(dtrw["tui_pic_itm_cd"].ToString());
                                    tempScnQty = tempScnQty - _inputReptPickSerials.Tus_qty;
                                }
                                DataTable dtDocDetails = _inventoryDAL.getCurrentDocumentDetails(company, _scanDocument, location, warecom, wareloc, loadingpoint);
                                if (dtDocDetails.Rows.Count > 0)
                                {
                                    if (dtDocDetails.Rows[0]["TUH_IS_TAKE_RES"] != null && dtDocDetails.Rows[0]["TUH_IS_TAKE_RES"].ToString() == "1")
                                        _inputReptPickSerials.Tus_resqty = _inputReptPickSerials.Tus_qty;
                                }

                                _inputReptPickSerials.Tus_itm_line = Convert.ToInt32(dtrw["tui_pic_itm_cd"].ToString());
                                eff = _inventoryDAL.SavePickedItemSerialsPDA(_inputReptPickSerials, passDocTp);
                                if (eff == -1)
                                {
                                    error = "Unable to update picked item serial.";
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();

                                    _inventoryRepDAL.TransactionRollback();
                                    _inventoryRepDAL.ConnectionClose();
                                    return -1;
                                }
                            }
                        }
                        // reqqty < qtyforscan + picqty
                    }
                    else
                    {
                        eff = _inventoryDAL.SavePickedItemSerialsPDA(_inputReptPickSerials, passDocTp);
                        if (eff == -1)
                        {
                            error = "Unable to update picked item serial.";
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();

                            _inventoryRepDAL.TransactionRollback();
                            _inventoryRepDAL.ConnectionClose();
                            return -1;
                        }
                    }
                }

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
                return eff;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();

                _inventoryRepDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();

                error = ex.Message.ToString();
                return -1;
            }
        }
        public DataTable getINTSerial(string serial, string itmcd, string docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getINTSerial(serial, itmcd, docno);
        }

        //Lakshan 2016 Sep 22
        public Int32 UpdateTempPickSerSerVerification(ReptPickSerials _obj)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            int _res = _inventoryRepDAL.UpdateTempPickSerSerVerification(_obj);
            if (_res > 0)
            {
                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
            }
            else
            {
                _inventoryRepDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
            }
            return _res;
        }
        //Lakshan 2016 Sep 23
        public List<InventoryRequest> GET_INT_REQ_DATA(InventoryRequest _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQ_DATA(_obj);
        }
        //Lakshan 2016 Sep 23
        public List<InventoryRequestItem> GET_INT_REQ_ITM_DATA(InventoryRequestItem _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQ_ITM_DATA(_obj);
        }
        #region Temp Methode
        public Int32 GetInvDataMisMatch()
        {
            Int32 _res = 0;
            #region serial id mis match
            //Data mis match
            /* 
            int count = 0;
            _inventoryDAL = new InventoryDAL();
            List<InventoryHeader> _invList = _inventoryDAL.GET_INT_HDR_DATA_BY_RANGE(new InventoryHeader()
            {
                Ith_com = "ABL",
                Ith_doc_tp = "AOD",
                Ith_direct = true
            }, new DateTime(2016, 08, 22), new DateTime(2016, 08,31));

            List<InventorySerialN> _serIdNotInAodOut = new List<InventorySerialN>();
            List<InventorySerialN> _serIdNotInAodIn = new List<InventorySerialN>();
            foreach (var item in _invList)
            {
                List<InventorySerialN> _aodOutSer = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN() { Ins_doc_no = item.Ith_oth_docno });
                if (_aodOutSer.Count > 0)
                {
                    List<InventorySerialN> _aodInSer = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN() { Ins_doc_no = item.Ith_doc_no });
                    //if (_aodOutSer.Count==_aodInSer.Count)
                    //{
                        foreach (var _inSer in _aodInSer)
                        {
                            foreach (var _outSer in _aodOutSer)
                            {
                                if (_inSer.Ins_ser_id == _outSer.Ins_ser_id)
                                {
                                    _inSer.Ins_reversed = 1;
                                }
                            }
                            if (_inSer.Ins_reversed != 1)
                            {
                                _inSer.Ins_res_code = item.Ith_oth_docno;
                                _serIdNotInAodOut.Add(_inSer);
                            }
                        }
                    //}
                }
                count++;
            }
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            foreach (var item in _serIdNotInAodOut)
            {
                _inventoryRepDAL.UpdateTempPickSerIdInvalid(item.Ins_doc_no, item.Ins_ser_id, item.Ins_itm_cd, item.Ins_res_code, item.Ins_ser_1);
            }
            _inventoryRepDAL.TransactionCommit();
             * */
            #endregion
            //_res = UpdateInrResBalance();
            return _res;
        }

        //Lakshan 2016 Sep 23
        public List<INR_RES> GET_INR_RES_DATA(INR_RES _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_RES_DATA(_obj);
        }
        #endregion

        //Rukhan 25-sep-2016
        public List<ReptPickSerials> GetInvoiceSerialForReversalBYSerial(string _company, string _location, string _user, string _session, string _defBin,
          string _invoice, string _serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvoiceSerialForReversalBYSerial(_company, _location, _user, _session, _defBin, _invoice, _serial);
        }
        //Lakshan 28 Sep 2016
        public List<InventorySerialN> Get_INT_SER_NOT_RES_SERIAL_ID(InventorySerialN _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(_ser);
        }
        //Modify by Lakshan 01 Oct 2016
        public DataTable GetItemComponentTableNew(string _mainItemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemComponentTableNew(_mainItemCode);
        }



        //subodana 2016-10-03
        public DataTable GetPriceBookLvl(string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPriceBookLvl(_com);
        }
        //subodana 2016-10-03
        public DataTable GetItemPrice(string pb, string pl, string itm, DateTime dt)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemPrice(pb, pl, itm, dt);
        }


        public List<InventoryRequestItem> GetMRN_Req_pickitm(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetMRN_Req_pickitm(_reqNo);
        }
        public Int32 getItemBinScanQty(string itemCode, string bincode, string docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemBinScanQty(itemCode, bincode, docno);
        }
        public decimal getTotalStockQty(string itemcd, string company, string location)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getTotalStockQty(itemcd, company, location);
        }

        public DataTable GetReportParam(string com, string user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetReportParam(com, user);
        }

        public DataTable SearchSplitReCallNew(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime dtFrom, DateTime dtTo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSplitReCallNew(_initialSearchParams, _searchCatergory, _searchText, dtFrom, dtTo);
        }
        //Subodana 11-10-2016
        public List<InventoryLocation> GETWH_INV_BALANCENew(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GETWH_INV_BALANCENew(_company, _location, _item, _status);
        }

        //Randima 13/Oct/2016
        public ReptPickSerials getSerialDet_INTSER(int _seqNo, int _itmLine, int _batchLine, int _serLine)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getSerialDet_INTSER(_seqNo, _itmLine, _batchLine, _serLine);
        }

        //Lakshan 17 Oct 2016 Reference GetAllMaterialRequestsList
        public List<InventoryRequest> GetAllMaterialRequestsListNew(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllMaterialRequestsListNew(_inventoryRequest);
        }
        public DataTable GetTepItemsInOtherStatus(Int32 _userSeqNo, string itmcd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetTepItemsInOtherStatus(_userSeqNo, itmcd);
        }
        public DataTable GetINV_BAL_STUS_LPAND_IMP(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetINV_BAL_STUS_LPAND_IMP(_company, _location, _item, _status);
        }
        //subodana 2016-10-21
        public DataTable GetEntryProgDetails(string entryno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetEntryProgDetails(entryno);
        }
        //subodana 2016-10-21
        public DataTable GetEntryProgGRN(string entryno, string item, string aodno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetEntryProgGRN(entryno, item, aodno);
        }
        public bool validateSRNSerialInDo(string invoiceno, string itemcode, string isseriaitem, string serial, out string errormsg)
        {
            errormsg = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                if (isseriaitem == "1")
                {

                    DataTable serdata = _inventoryDAL.getScanedSerialInDO(invoiceno, itemcode, serial);
                    if (serdata.Rows.Count == 0)
                    {
                        errormsg = "Invalid serial or item.Not contain in Dilivery order.";
                        return false;
                    }

                }
                else
                {
                    DataTable itmdata = _inventoryDAL.getScanedItemInDO(invoiceno, itemcode);
                    if (itmdata.Rows.Count == 0)
                    {
                        errormsg = "Invalid item.Not contain in Dilivery order.";
                        return false;
                    }
                }
                return true;

            }
            catch (Exception ex)
            {
                errormsg = ex.Message.ToString();
                return false;
            }

        }

        //Lakshan 24 Oct 2016
        #region Send Aod In Mail and Sms
        public void SendAodInSMS(InventoryHeader _invHdr, InventoryDAL _invDal, GeneralDAL _genDal)
        {
            MasterLocationNew _mstLoc = _genDal.GetMasterLocations(new MasterLocationNew() { Ml_com_cd = _invHdr.Ith_com, Ml_loc_cd = _invHdr.Ith_loc }).FirstOrDefault();
            if (_mstLoc != null)
            {
                if (_mstLoc.Ml_act == 1)
                {
                    //string _realPhNo = GetRealPhoneNumber(_mstLoc.Ml_mobi);
                    //OutSMS _out = new OutSMS();
                    //_out.Createtime = DateTime.Now;
                    //string _smsMsg = "Goods are received to <in location> for AOD out # <aod out number> on <create date and time in AOD inward>";
                    //_out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                    //_out.Msgstatus = 0;
                    //_out.Msgtype = "S";
                    //_out.Receivedtime = DateTime.Now;
                    //_out.Receiver = _entity.Mbe_cd;
                    ////_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                    //_out.Senderphno = _entity.Mbe_mob;
                    //_out.Refdocno = _itm.Sard_ref_no;
                    //_out.Sender = _invoiceHeader.Sah_cre_by;
                    //_out.Createtime = DateTime.Now;
                    //_inventoryDAL.SaveSMSOut(_out);
                }
            }
        }


        #endregion

        public List<MasterBusinessEntity> GET_MST_BUSENTITY_DATA(string _com, string _busCd, string _tp = "")
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_MST_BUSENTITY_DATA(_com, _busCd);
        }
        //RUKSHAN 2016-10-23
        public Int32 GET_SEQNUM_FOR_INVOICE_LOC(string doc_type, string company, string invoiceNO, int direction_, string _loc)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.GET_SEQNUM_FOR_INVOICE_LOC(doc_type, company, invoiceNO, direction_, _loc);
        }


        public SalesOrderHeader GET_SAO_HDR_DATA(string _soNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_SAO_HDR_DATA(_soNo);
        }
        public DataTable IsDocAvailableWithSeq(string p_tuh_usr_com, Int32 p_docseq, string p_tuh_usr_loc, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay, string doctp)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.IsDocAvailableWithSeq(p_tuh_usr_com, p_docseq, p_tuh_usr_loc, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay, doctp);
        }
        public DataTable GetItemDataInTempPickItemWithSeq(string itmCode, Int32 docseqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemDataInTempPickItemWithSeq(itmCode, docseqNo);
        }
        //Sahan 07/Sep/2015
        public DataTable CalculateScannedQtyWithSeq(string _itemcode, string _itemstatus, string _company, string _location, string _bin, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay, Int32 docseq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CalculateScannedQtyWithSeq(_itemcode, _itemstatus, _company, _location, _bin, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay, docseq);
        }
        //nuwan 2016.06.25
        public DataTable getCurrentDocumentDetailsSeq(string p_tuh_usr_com, Int32 p_tuh_doc_seq, string p_tuh_usr_loc, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getCurrentDocumentDetailsSeq(p_tuh_usr_com, p_tuh_doc_seq, p_tuh_usr_loc, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay);
        }
        public Int32 updateDocumentFinishStatusSeq(Int32 docseq, string doctyp, Int32 status, DateTime nowdt, out string error, string userid = null, string doctp = null)
        {
            Int32 eff = 0;
            error = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                eff = _inventoryDAL.updateDocumentFinishStatusSeq(docseq, doctyp, status, nowdt, userid, doctp);
                if (eff == 1)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return eff;
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to finish document";
                    return eff;
                }
            }
            catch (Exception ex)
            {

                error = ex.Message;
                return eff;
            }
        }
        public DataTable GetItemTotalScanedQtySeq(Int32 seqno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemTotalScanedQtySeq(seqno);
        }
        public DataTable GetItemTotalDocumentQtySeq(Int32 docseq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemTotalDocumentQtySeq(docseq);
        }
        public DataTable loadDocumentItemsSeq(Int32 docseq, string userid = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.loadDocumentItemsSeq(docseq, userid, doctp);
        }
        //Sahan 26/Aug/2015
        public DataTable LoadSavedSerialsSeq(Int32 p_tus_doc_seq, string p_tus_com, string p_tus_loc, string p_tus_itm_cd, string p_tus_bin, string p_tus_itm_stus, string p_tuh_wh_com, string p_tuh_wh_loc, string p_tuh_load_bay, string userid = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadSavedSerialsSeq(p_tus_doc_seq, p_tus_com, p_tus_loc, p_tus_itm_cd, p_tus_bin, p_tus_itm_stus, p_tuh_wh_com, p_tuh_wh_loc, p_tuh_load_bay, userid, doctp);
        }
        public Int32 getItemBinScanQtySeq(string itemCode, string bincode, Int32 docseq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemBinScanQtySeq(itemCode, bincode, docseq);
        }
        public DataTable getDOSerialData(string docno, string itemcd, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getScanedSerialDataInDO(docno, itemcd, serial);

        }
        public DataTable getINTSerialdo(string docno, string item, string serial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getINTSerialdo(docno, item, serial);
        }

        //Checking for the serial/serial id duplicate
        public int CheckSerialFoundDO(string _company, string _invoice, List<ReptPickSerials> _reptPickSerials, out string _error)
        {
            _inventoryDAL = new InventoryDAL();
            string _item = string.Empty;
            string _serial = string.Empty;
            string _loc = string.Empty;
            Int64 _id = 0;
            StringBuilder _build = new StringBuilder();
            foreach (ReptPickSerials _srl in _reptPickSerials)
            {
                _item = _srl.Tus_itm_cd; _serial = _srl.Tus_ser_1; _id = _srl.Tus_ser_id;
                List<ReptPickSerials> _doitemserials = new List<ReptPickSerials>();
                _doitemserials = _inventoryDAL.GetInvoiceSerialForReversalBYSerial(_company, null, null, null, null, _invoice, _serial);


                if (_doitemserials == null || _doitemserials.Count == 0)
                    if (_build == null)
                        _build.Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
                    else
                        _build.AppendLine().Append(" Item-").Append(_item).Append(" | Serial-").Append(_serial).Append(" | Id-").Append(Convert.ToString(_id));
            }
            if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
            {

                _error = "Please check the below item(s). These serial(s) are already available in location - " + _loc + ".\n " + _build.ToString();
                return -1;
            }
            else
            {
                _error = string.Empty;
                return 1;
            }
        }

        //Rukshan 16/03/2016
        public DataTable GET_EnquiryBond(string _com, string _sbu, string _tobond, string _bl, int cusdec, string _item, string _DOC, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_EnquiryBond(_com, _sbu, _tobond, _bl, cusdec, _item, _DOC, _loc);
        }

        public List<InventoryAllocateDetails> GET_INR_STOCK_ALOC_DATA(InventoryAllocateDetails _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_STOCK_ALOC_DATA(_obj);
        }
        public decimal GET_INR_LOC_BAL_DATA(InventoryLocation _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_LOC_BAL_DATA(_obj);
        }
        //Lakshan 04 Nov 2016
        public Int32 UpdateItemAllocationDataFIFO(InventoryDAL _invDal, InventoryRequestItem _reqItm, InventoryRequest _req, GeneralDAL _genDal = null)
        {
            int _eff = 0;
            if (_genDal == null)
            {
                _generalDAL = new GeneralDAL();
            }
            else
            {
                _generalDAL = _genDal;
            }
            MasterLocationNew _mstLocNew = _generalDAL.GetMasterLocations(new MasterLocationNew() { Ml_loc_cd = _req.Itr_loc, Ml_com_cd = _req.Itr_com }).FirstOrDefault();
            MasterLocationPriorityHierarchy _locHir = _generalDAL.GET_MST_LOC_INFO_DATA(_req.Itr_loc, "CHNL");
            string _chnl = "";
            if (_mstLocNew != null)
            {
                _chnl = _mstLocNew.Ml_cate_1;
            }
            if (_locHir != null)
            {
                _chnl = _locHir.Mli_val;
            }
            List<InventoryAllocateDetails> _chnlAllocation = _invDal.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
            {
                Isa_chnl = _chnl,
                Isa_com = _req.Itr_com,
                Isa_itm_cd = _reqItm.Itri_itm_cd,
                Isa_itm_stus = _reqItm.Itri_itm_stus
            });
            if (_chnlAllocation != null)
            {
                foreach (InventoryAllocateDetails _chnAllData in _chnlAllocation)
                {
                    if (_chnAllData.Isa_aloc_bqty >= _reqItm.Itri_qty)
                    {
                        _chnAllData.Isa_aloc_bqty = _reqItm.Itri_qty;
                        _invDal.UpdateItemAllocationData(_chnAllData);
                        _reqItm.Itri_qty = _reqItm.Itri_qty - _reqItm.Itri_qty;
                    }
                    else
                    {
                        //_chnAllData.Isa_aloc_bqty = _reqItm.Itri_qty;
                        _invDal.UpdateItemAllocationData(_chnAllData);
                        _reqItm.Itri_qty = _reqItm.Itri_qty - _chnAllData.Isa_aloc_bqty;
                    }
                }
            }
            return _eff;
        }

        //Lakshan 04 Nov 2016
        public Int32 InrResLogDataManage(INR_RES_LOG _obj, Int32 _updateTp, InventoryDAL _invDal, out string _err)
        {
            // 0 for save 1 for update
            _err = string.Empty;
            //_inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            //_inventoryDAL.BeginTransaction();
            Int32 _res = 0;
            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
            INR_RES_LOG _resLogSave = new INR_RES_LOG();
            INR_RES _resHdr = new INR_RES();
            INR_RES_DET _resDet = new INR_RES_DET();
            bool _resDetDataAva = false;
            bool _resLogDataAva = false;
            try
            {
                _resHdr = _invDal.GET_INR_RES_DATA(new INR_RES() { IRS_RES_NO = _obj.IRL_RES_NO, IRS_COM = _obj.IRL_CURT_COM }).FirstOrDefault();
                _resDet = _invDal.GET_INR_RES_DET_DATA(new INR_RES_DET()
                {
                    IRD_RES_NO = _obj.IRL_RES_NO,
                    IRD_ITM_CD = _obj.IRL_ITM_CD,
                    IRD_ITM_STUS = _obj.IRL_ITM_STUS
                }).FirstOrDefault();
                if (_resDet != null)
                {
                    _resDetDataAva = true;
                }
                if (!_resDetDataAva)
                {
                    _res = -1;
                    _err = "Reservation detail data not found !";
                    return _res;
                }
                if (_updateTp == 0)//Insert
                {
                    INR_RES_LOG _resObj = new INR_RES_LOG();
                    _resObj.IRL_RES_NO = _obj.IRL_RES_NO;
                    _resObj.IRL_ITM_CD = _obj.IRL_ITM_CD;
                    _resObj.IRL_ITM_STUS = _obj.IRL_ITM_STUS;
                    _resObj.IRL_CURT_COM = _obj.IRL_CURT_COM;
                    _resObj.IRL_CURT_LOC = _obj.IRL_CURT_LOC;
                    _resObj.IRL_CURT_DOC_NO = _obj.IRL_ORIG_DOC_NO;
                    _resObj.IRL_CURT_DOC_TP = _obj.IRL_ORIG_DOC_TP;
                    _resObj.IRL_ACT = 1;
                    if (_obj.IRL_CURT_DOC_TP == "AOD-IN")
                    {
                        _resObj.IRL_CURT_COM = "GIT";
                        _resObj.IRL_CURT_LOC = "GIT";
                    }
                    _resLogAvaData = _invDal.GET_INR_RES_LOG_DATA_NEW(_resObj);

                    if (_resLogAvaData != null)
                    {
                        if (_resLogAvaData.Count > 0)
                        {
                            _resLogDataAva = true;
                        }
                    }
                    if (!_resLogDataAva)
                    {
                        _res = -1;
                        _err = "Reservation log data not found !";
                        return _res;
                    }
                    //errro
                    if (_resLogAvaData.Count > 0)
                    {
                        bool _isResLogUpdate = false;
                        INR_RES_LOG _tmpLogRes = new INR_RES_LOG();
                        foreach (var _tmpResData in _resLogAvaData)
                        {
                            _tmpLogRes = INR_RES_LOG.CreateNewObject(_tmpResData);
                            _tmpResData.TMP_IRL_RES_BQTY = _tmpLogRes.IRL_RES_BQTY;
                        }
                        _resLogAvaData = _resLogAvaData.OrderBy(c => c.IRL_CURT_DOC_DT).ToList();
                        foreach (var _resAva in _resLogAvaData)
                        {
                            #region MyRegion
                            if (!_isResLogUpdate)
                            {
                                if (_resAva.TMP_IRL_RES_BQTY >= _obj.IRL_RES_QTY)
                                {
                                    #region if available balance equal or grater
                                    _resLogSave = new INR_RES_LOG();
                                    _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                    _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                    _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                    _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                    _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                    _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                    _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                    _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_QTY;
                                    _resAva.IRL_RES_BQTY = _resAva.IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                    _resAva.TMP_IRL_RES_BQTY = _resAva.TMP_IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                    _resLogSave.IRL_ACT = _resAva.IRL_RES_BQTY <= 0 ? 0 : 1;
                                    _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                    _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                    _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                    _resLogSave.IRL_LINE = _resAva.IRL_LINE;
                                    _res = _invDal.InrResLogDataUpdateIssue(_resLogSave);

                                    _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                    _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;

                                    _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                    _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                    _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                    _resLogSave.IRL_RES_QTY = _obj.IRL_RES_QTY;
                                    _resLogSave.IRL_RES_BQTY = _obj.IRL_RES_QTY;
                                    _resLogSave.IRL_RES_IQTY = 0;
                                    _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                    _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                    _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                    _resLogSave.IRL_ACT = 1;

                                    _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                    _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                    _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                    _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                    _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                    _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                    _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                    if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                    {
                                        _resLogSave.IRL_CURT_COM = "GIT";
                                        _resLogSave.IRL_CURT_LOC = "GIT";
                                        _resLogSave.IRL_RES_WP = 1;
                                    }
                                    if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                    {
                                        _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                        _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                        _resLogSave.IRL_RES_WP = 0;
                                    }
                                    _res = _invDal.InrResLogDataSave(_resLogSave);
                                    #endregion
                                }
                                else
                                {
                                    #region if available balance  less
                                    _resLogSave = new INR_RES_LOG();
                                    _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                    _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                    _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                    _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                    _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                    _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                    _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                    _resLogSave.IRL_RES_IQTY = _obj.TMP_IRL_RES_BQTY;
                                    _resAva.IRL_RES_BQTY = 0;
                                    _resAva.TMP_IRL_RES_BQTY = 0;
                                    _resLogSave.IRL_ACT = 0;
                                    _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                    _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                    _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                    _res = _invDal.InrResLogDataUpdateIssue(_resLogSave);

                                    _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                    _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;
                                    _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                    _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                    _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                    _resLogSave.IRL_RES_QTY = _resLogSave.IRL_RES_IQTY;
                                    _resLogSave.IRL_RES_BQTY = _resLogSave.IRL_RES_IQTY;
                                    _resLogSave.IRL_RES_IQTY = 0;
                                    _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                    _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                    _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                    _resLogSave.IRL_ACT = 1;

                                    _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                    _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                    _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                    _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                    _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                    _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                    _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                    if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                    {
                                        _resLogSave.IRL_CURT_COM = "GIT";
                                        _resLogSave.IRL_CURT_LOC = "GIT";
                                        _resLogSave.IRL_RES_WP = 1;
                                    }
                                    if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                    {
                                        _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                        _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                        _resLogSave.IRL_RES_WP = 0;
                                    }
                                    if (_resLogSave.IRL_CURT_DOC_TP == "INV")
                                    {
                                        _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                        _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                        _resLogSave.IRL_RES_WP = 0;
                                    }
                                    if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                    {
                                        _resLogSave.IRL_RES_BQTY = 0;
                                        _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_IQTY;
                                    }
                                    _res = _invDal.InrResLogDataSave(_resLogSave);
                                    #endregion
                                }
                                if (_obj.TMP_IRL_RES_BQTY == 0)
                                {
                                    _isResLogUpdate = true;
                                }
                            }
                            #endregion
                        }
                    }
                }
                if (_updateTp == 1)//Update
                {
                    #region update res Log Data
                    /*
                    _resLogAvaData = _invDal.GET_INR_RES_LOG_DATA_NEW(
                        new INR_RES_LOG() { 
                            IRL_RES_NO = _obj.IRL_RES_NO,
                            IRL_ITM_CD = _obj.IRL_ITM_CD,
                            IRL_ITM_STUS = _obj.IRL_ITM_STUS,
                            IRL_CURT_COM = _obj.IRL_CURT_COM,
                            IRL_CURT_LOC = _obj.IRL_CURT_LOC,
                            IRL_ACT = 1,
                        });
                    if (_resLogAvaData.Count<1)
                    {
                        _res = -1;
                        _err = "No Data Available For Update !";
                        return _res;
                    }
                    else
                    {
                       
                        bool _isResLogUpdate=false;
                        foreach (var _tmpResData in _resLogAvaData)
                        {
                            _tmpResData.TMP_IRL_RES_BQTY = _tmpResData.IRL_RES_BQTY;
                        }
                        foreach (var _resUp in _resLogAvaData)
                        {
                            if (!_isResLogUpdate)
                            {
                                if (_resUp.TMP_IRL_RES_BQTY >= _obj.IRL_RES_QTY)
                                {
                                    _resLogSave = new INR_RES_LOG();
                                    _resLogSave.IRL_RES_NO = _resUp.IRL_RES_NO;
                                    _resLogSave.IRL_CURT_COM = _resUp.IRL_CURT_COM;
                                    _resLogSave.IRL_CURT_LOC = _resUp.IRL_CURT_LOC;
                                    _resLogSave.IRL_ITM_CD = _resUp.IRL_ITM_CD;
                                    _resLogSave.IRL_RES_QTY = _obj.IRL_RES_QTY;
                                    _resUp.TMP_IRL_RES_BQTY = _resUp.TMP_IRL_RES_BQTY - _resLogSave.IRL_RES_QTY;
                                    _resLogSave.IRL_ACT = _resUp.TMP_IRL_RES_BQTY <= 0 ? 0 : 1  ;
                                    _resLogSave.IRL_MOD_BY = _obj.IRL_MOD_BY;
                                    _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                    _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                    _res = _invDal.InrResLogDataUpdate(_resLogSave);
                                }
                                else
                                {
                                    _resLogSave = new INR_RES_LOG();
                                    _resLogSave.IRL_RES_NO = _resUp.IRL_RES_NO;
                                    _resLogSave.IRL_CURT_COM = _resUp.IRL_CURT_COM;
                                    _resLogSave.IRL_CURT_LOC = _resUp.IRL_CURT_LOC;
                                    _resLogSave.IRL_ITM_CD = _resUp.IRL_ITM_CD;
                                    _resLogSave.IRL_RES_QTY = _resUp.IRL_RES_BQTY;
                                    _resUp.TMP_IRL_RES_BQTY = _resUp.TMP_IRL_RES_BQTY - _resUp.IRL_RES_BQTY;
                                    _resLogSave.IRL_ACT = _resUp.TMP_IRL_RES_BQTY <= 0 ? 0 : 1;
                                    _resLogSave.IRL_MOD_BY = _obj.IRL_MOD_BY;
                                    _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                    _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                    _res = _invDal.InrResLogDataUpdate(_resLogSave);
                                    _obj.TMP_IRL_RES_BQTY = _obj.TMP_IRL_RES_BQTY - _obj.TMP_IRL_RES_BQTY;
                                }
                                if (_obj.TMP_IRL_RES_BQTY == 0)
                                {
                                    _isResLogUpdate = true;
                                }
                            }
                        }
                    }
                    * */
                    #endregion
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();
                _res = -1;
            }
            return _res;
        }

        //subodana 2016-11-04
        public DataTable CusEnqEntryData(DateTime fromdate, DateTime todate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CusEnqEntryData(fromdate, todate);
        }
        //subodana 2016-11-04
        public DataTable CusEnqCusdecData(DateTime fromdate, DateTime todate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CusEnqCusdecData(fromdate, todate);
        }

        public List<INR_RES_LOG> GET_INR_RES_LOG_DATA_NEW(INR_RES_LOG _resLog)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(_resLog);
        }
        //Lakshan 07 Nov 2016
        public List<INR_RES_DET> GET_INR_RES_DET_DATA_NEW(INR_RES_DET _resDet)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_RES_DET_DATA_NEW(_resDet);
        }
        //Lakshan 09 Nov 2016
        public int UpdateInventoryRequestStatusWithNote(InventoryRequest _inventoryRequest, List<InventoryRequestItem> _invReqItm, out string _errr)
        {
            _errr = "";
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                result = _inventoryDAL.UpdateInventoryRequestStatusWithNote(_inventoryRequest);
                foreach (var item in _invReqItm)
                {
                    _inventoryDAL.UpdateInventoryRequestItemWithNoteNew(item);
                }
                InventoryRequest _invReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_req_no }).FirstOrDefault();
                if (_invReq != null)
                {
                    _inventoryRequest.Itr_loc = _invReq.Itr_loc;
                }
                MasterLocationNew _mstLocNew = _generalDAL.GetMasterLocations(new MasterLocationNew() { Ml_loc_cd = _invReq.Itr_loc, Ml_com_cd = _invReq.Itr_com }).FirstOrDefault();
                if (_mstLocNew != null)
                {
                    if (_mstLocNew.Ml_loc_tp != "WH")
                    {
                        MasterLocationPriorityHierarchy _locHir = _generalDAL.GET_MST_LOC_INFO_DATA(_invReq.Itr_loc, "CHNL");
                        MasterLocationPriorityHierarchy _locHirUsrLoc = _generalDAL.GET_MST_LOC_INFO_DATA(_invReq.Itr_issue_from, "CHNL");
                        if (_locHir == null)
                        {
                            _errr = "Please check the channel of the location !";
                        }
                        if (_locHirUsrLoc == null)
                        {
                            _errr = "Please check the channel of the location !";
                        }
                        if (!string.IsNullOrEmpty(_errr))
                        {
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();
                            _generalDAL.ConnectionClose();
                            result = -1;
                            return result;
                        }
                        if (_locHirUsrLoc.Mli_val != _locHir.Mli_val)
                        {
                            foreach (var item in _invReqItm)
                            {
                                UpdateItemAllocationDataFIFO(_inventoryDAL, item, _inventoryRequest);
                            }
                        }
                    }
                }
                //_inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                result = 1;
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        //Lakshan 31 Oct 2016
        public InventoryLocation GET_INR_LOC_BALANCE(InventoryLocation _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_LOC_BALANCE(_obj);
        }
        //Lakshan 31 Oct 2016
        public Int32 UpdateIntReqProcessData(InventoryRequest _obj)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                result = _inventoryDAL.UpdateIntReqProcessData(_obj);
                if (result > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }
        //Lakshan 2016 Sep 23
        public List<InventoryRequest> GET_INT_REQ_DATA_NEW(InventoryRequest _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQ_DATA_NEW(_obj);
        }
        //Lakshan 2016 Nov 12
        public List<ReptPickHeader> GET_TEMP_PICK_HDR_DATA_WITH_COMPLETE_DATE(ReptPickHeader _repHdr)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_HDR_DATA_WITH_COMPLETE_DATE(_repHdr);
        }
        //Lakshan 12 Nov 2016
        public List<InventoryRequest> GET_REQ_FOR_DISPATCH_BYNO(String Com, String Route, String MainCate, String Item, String ReqType, String Loc, String SubCate, String Model, DateTime Date, DateTime ToDate, int type, string ReqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REQ_FOR_DISPATCH_BYNO(Com, Route, MainCate, Item, ReqType, Loc, SubCate, Model, Date, ToDate, type, ReqNo);
        }
        //Lakshan 12 Nov 2016
        public List<InventoryRequest> GET_REQUEST_FOR_DISPATCH_EXP_DT(String Com, String Route, String MainCate, String Item, String ReqType, String Loc, String SubCate, String Model, DateTime Date, DateTime ToDate, int type)
        {
            _inventoryDAL = new InventoryDAL();
            List<InventoryRequest> oRequestHeaders = _inventoryDAL.GET_REQUEST_FOR_DISPATCH_EXP_DT(Com, Route, MainCate, Item, ReqType, Loc, SubCate, Model, Date, ToDate, type);
            //added by Chamal 29-01-2018 (Due to slowness, client side code ad in server side)
            if (oRequestHeaders.Count > 0)
            {
                foreach (var oRequestHeaderslist in oRequestHeaders)
                {
                    if (oRequestHeaderslist.Itr_req_no != "AD-HOC")
                    {
                        InventoryRequest _obj = new InventoryRequest();
                        _obj.Itr_req_no = oRequestHeaderslist.Itr_ref.ToString();
                        InventoryRequest _reqData = _inventoryDAL.GET_INT_REQ_DATA(_obj).FirstOrDefault();
                        if (_reqData != null)
                        {
                            if (_reqData.Itr_tp == "SO")
                            {
                                SalesOrderHeader _soHdr = _inventoryDAL.GET_SAO_HDR_DATA(_reqData.Itr_ref);
                                if (_soHdr != null)
                                {
                                    oRequestHeaderslist.Itr_mod_dt = _soHdr.SOH_MOD_WHEN;
                                }
                            }
                            else
                            {
                                oRequestHeaderslist.Itr_mod_dt = oRequestHeaderslist.Itr_cre_dt;
                            }
                            oRequestHeaderslist.Itr_cre_dt = _reqData.Itr_cre_dt;
                            oRequestHeaderslist.tmpapprovedate_show = 1;
                        }
                    }
                    if (oRequestHeaderslist.Itr_ref == "AD-HOC")
                    {
                        InventoryRequest _obj = new InventoryRequest();
                        _obj.Itr_req_no = oRequestHeaderslist.Itr_req_no.ToString();
                        InventoryRequest _reqData = _inventoryDAL.GET_INT_REQ_DATA(_obj).FirstOrDefault();
                        if (oRequestHeaderslist.Itr_tp == "REQD")
                        {
                            oRequestHeaderslist.Itr_mod_dt = _reqData.Itr_cre_dt;
                        }
                    }
                }
            }
            return oRequestHeaders;
        }

        //2016-NOV-15
        public List<ItemKitComponent> GetItemKitComponent_ProductPlane(ItemKitComponent _obj, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            List<ItemKitComponent> _kit = new List<ItemKitComponent>();
            _kit = _inventoryDAL.GetItemKitComponentSplit(_obj);
            if (_kit.Count > 0)
            {
                foreach (ItemKitComponent _kitItemObj in _kit)
                {
                    DataTable unitprice = _salesDAL.GetUnitPriceNew(_kitItemObj.MIKC_ITM_CODE_COMPONENT, _loc);
                    if (unitprice.Rows.Count > 0)
                    {
                        string unitpricess = unitprice.Rows[0]["UNITPRICE"].ToString();
                        _obj.MIKC_COST = Convert.ToDecimal(unitpricess);
                    }
                }
            }
            return _kit;
        }

        public Int32 SaveProjectPlane(SatProjectHeader _BOQ, MasterAutoNumber mastAutoNo, List<ItemKitComponent> Cost, List<ProductionFinGood> _finItem, List<ProductionPlaneDetails> _ProLine, out string doc)
        {
            //,List<ProductionFinGood> _finItem
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_BOQ != null)
                {
                    if (mastAutoNo != null)
                    {
                        if (_BOQ.SPH_NO == null)
                        {
                            Int32 _autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                            doc = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _BOQ.SPH_NO = doc;
                            _effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                        }
                    }

                    seq = _salesDAL.SaveBOQHDD(_BOQ);
                }
                if (Cost != null)
                {
                    if (Cost.Count > 0)
                    {
                        if (seq > 0)
                        {
                            int i = 0;
                            i = Cost.Max(x => x.MIKC_LINE);
                            foreach (ItemKitComponent _Items in Cost)
                            {
                                SatProjectDetails ProDet = new SatProjectDetails();
                                if (_Items.MIKC_LINE == 0)
                                {

                                    // if (i > 1)
                                    // {
                                    i++;
                                    //}
                                    ProDet.SPD_SEQ = seq;
                                    ProDet.SPD_NO = doc;
                                    ProDet.SPD_LINE = i;
                                    ProDet.SPD_ACTVE = 1;
                                }
                                else
                                {
                                    ProDet.SPD_LINE = _Items.MIKC_LINE;
                                    ProDet.SPD_NO = _Items.MIKC_DOCNO;
                                    ProDet.SPD_SEQ = _Items.MIKC_SEQ_NO;
                                }
                                ProDet.SPD_ITM = _Items.MIKC_ITM_CODE_COMPONENT;
                                ProDet.SPD_ITM_DESC = _Items.MIKC_DESC_COMPONENT;
                                // obrevdet.SPD_ACT_COST = prdata.SPD_ACT_COST;
                                // obrevdet.SPD_ACT_QTY = prdata.SPD_ACT_QTY;
                                // obrevdet.SPD_ACT_REV = prdata.SPD_ACT_REV;
                                // ProDet.SPD_LINE = i;
                                ProDet.SPD_ACTVE = _Items.MIKC_ACTIVE;
                                ProDet.SPD_EST_COST = _Items.MIKC_COST;
                                ProDet.SPD_EST_QTY = _Items.MIKC_NO_OF_UNIT;
                                ProDet.SPD_MRN_BAL = ProDet.SPD_EST_QTY;
                                //ProDet.SPD_EST_REV = ((Convert.ToDecimal(_priceDetailRef.FirstOrDefault().Sapd_itm_price.ToString()) * prdata.SPD_EST_QTY) - Convert.ToDecimal(prdata.SPD_EST_COST.ToString()));
                                //ProDet.SPD_INV_PRT_DESC = prdata.SPD_INV_PRT_DESC;
                                //ProDet.SPD_LINE = prdata.SPD_LINE;
                                //ProDet.SPD_MODEL = prdata.SPD_MODEL;
                                //ProDet.SPD_NO = prdata.SPD_NO;
                                //ProDet.SPD_SEQ = prdata.SPD_SEQ;
                                //ProDet.SPD_ITM = prdata.SPD_ITM;
                                //ProDet.SPD_ITM_DESC = prdata.SPD_ITM_DESC;
                                _Items.MIKC_CREATE_BY = _BOQ.SPH_CRE_BY;
                                _Items.MIKC_LAST_MODIFY_BY = _BOQ.SPH_CRE_BY;
                                _effect = _salesDAL.SaveBOQDetails(ProDet);
                            }


                        }
                    }
                }
                if (_finItem != null)
                {
                    if (_finItem.Count > 0)
                    {

                        int i = 0;

                        i = _finItem.Max(x => x.SPF_LINE);

                        foreach (ProductionFinGood _Items in _finItem)
                        {


                            if (_Items.SPF_LINE == 0)
                            {
                                _Items.SPF_SEQ = seq;
                                _Items.SPF_PRO_NO = doc;
                                i++;
                                _Items.SPF_LINE = i;
                            }

                            _Items.SPF_CRE_BY = _BOQ.SPH_CRE_BY;
                            _Items.SPF_MOD_BY = _BOQ.SPH_CRE_BY;
                            _effect = _salesDAL.SaveProjectFGOD(_Items);
                            //if (_effect > 0)
                            //{
                            //    i++;
                            //}
                        }
                    }
                }
                if (_ProLine != null)
                {
                    if (_ProLine.Count > 0)
                    {
                        int i = 0;
                        i = _finItem.Max(x => x.SPF_LINE);
                        foreach (ProductionPlaneDetails _Items in _ProLine)
                        {
                            if (_Items.SPL_LINE == 0)
                            {
                                _Items.SPL_SEQ = seq;
                                _Items.SPL_PRO_NO = doc;
                                i++;
                                _Items.SPL_LINE = i;
                            }
                            _Items.SPL_CRE_BY = _BOQ.SPH_CRE_BY;
                            _Items.SPL_MOD_BY = _BOQ.SPH_CRE_BY;
                            _effect = _salesDAL.SaveProjectLine(_Items);
                        }
                    }
                }
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                doc = ex.Message;
                _effect = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }


            return _effect;
        }

        //Lakshan 16 Nov 2016
        public Int32 SaveWarrantyAuthorization(List<int_war_print_auth> _objList)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                foreach (var item in _objList)
                {
                    result = _inventoryDAL.SaveWarrantyAuthorization(item);
                }
                if (result > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }
        //Lakshan 16 Nov 2016
        public List<int_war_print_auth> GET_INT_WAR_PRINT_AUTH(int_war_print_auth _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_WAR_PRINT_AUTH(_obj);
        }
        //Add by Lakshan 17 Nov 2016
        public Int32 UpdateWarrantyAuthorization(int_war_print_auth _objList)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                result = _inventoryDAL.UpdateWarrantyAuthorization(_objList);
                if (result > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }

        //Rukshan 18 Nov 2016
        public List<ProductionLine> GET_PRODUCTLINE(ProductionLine _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_PRODUCTLINE(_obj);
        }
        //Nuwan 2016.11.21
        public bool updateItemReservations(Int32 userseq, string reserve, string company, string location, string userid, string sessionid, out string error)
        {
            error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                Int32 result = 0;
                DataTable items = _inventoryDAL.getReservationRequiredItems(userseq, reserve);
                if (items.Rows.Count > 0)
                {
                    DataTable doc = _inventoryDAL.getTemporyDocument(userseq, company);
                    if (doc.Rows.Count > 0)
                    {
                        if (DBNull.Value.Equals(doc.Rows[0]["TUH_BASE_DOC"]))
                        {
                            error = "Invalid base reference document.";
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();
                            return false;
                        }
                        InventoryRequest oHeader = new InventoryRequest();
                        oHeader.TMP_IS_RES_UPDATE = true;
                        oHeader.Itr_com = company;
                        oHeader.Itr_req_no = string.Empty;
                        oHeader.Itr_tp = "SOA";
                        oHeader.Itr_sub_tp = "NOR";
                        oHeader.Itr_loc = location;
                        oHeader.Itr_ref = doc.Rows[0]["TUH_BASE_DOC"].ToString();
                        oHeader.Itr_dt = DateTime.Now.Date;
                        oHeader.Itr_exp_dt = DateTime.Now.Date;
                        oHeader.Itr_stus = "A";
                        oHeader.Itr_job_no = string.Empty;
                        oHeader.Itr_bus_code = string.Empty;
                        oHeader.Itr_note = string.Empty;
                        oHeader.Itr_issue_from = location;
                        oHeader.Itr_rec_to = "";
                        oHeader.Itr_direct = 0;
                        oHeader.Itr_country_cd = string.Empty;
                        oHeader.Itr_town_cd = string.Empty;
                        oHeader.Itr_cur_code = string.Empty;
                        oHeader.Itr_exg_rate = 0;
                        oHeader.Itr_collector_id = string.Empty;
                        oHeader.Itr_collector_name = string.Empty;
                        oHeader.Itr_act = 1;
                        oHeader.Itr_cre_by = userid;
                        oHeader.Itr_session_id = sessionid;
                        oHeader.Itr_issue_com = company;

                        MasterAutoNumber masterAuto = new MasterAutoNumber();
                        masterAuto.Aut_cate_tp = "LOC";
                        masterAuto.Aut_cate_cd = location;
                        masterAuto.Aut_direction = null;
                        masterAuto.Aut_modify_dt = null;
                        masterAuto.Aut_moduleid = "SOA";
                        masterAuto.Aut_number = 0;
                        masterAuto.Aut_start_char = "SOA";
                        masterAuto.Aut_year = null;

                        oHeader._mastAutoNo = masterAuto;

                        MasterAutoNumber _mastAutoNo = oHeader._mastAutoNo;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                        string _documentNo = oHeader.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        result = _inventoryDAL.UpdateAutoNumber(_mastAutoNo);

                        Int32 SeqNumber = 0;
                        oHeader.Itr_req_no = _documentNo;
                        SeqNumber = _inventoryDAL.SaveInventoryRequest(oHeader);

                        foreach (DataRow row in items.Rows)
                        {
                            DataTable inrLocDetaiils = _inventoryDAL.getInrLocItemDetails(row["TUI_REQ_ITM_CD"].ToString(), row["TUI_REQ_ITM_STUS"].ToString(), company, location);
                            if (inrLocDetaiils.Rows.Count > 0)
                            {
                                if (Convert.ToInt32(inrLocDetaiils.Rows[0]["INL_FREE_QTY"].ToString()) > 0 && (Convert.ToInt32(row["TUI_REQ_ITM_QTY"].ToString()) > Convert.ToInt32(row["TUI_RES_QTY"].ToString())))
                                {
                                    Int32 eff = 0;
                                    Int32 reserveQty = 0;
                                    if ((Convert.ToInt32(row["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToInt32(row["TUI_RES_QTY"].ToString())) <= Convert.ToInt32(inrLocDetaiils.Rows[0]["INL_FREE_QTY"].ToString()))
                                    {
                                        reserveQty = Convert.ToInt32(row["TUI_REQ_ITM_QTY"].ToString()) - Convert.ToInt32(row["TUI_RES_QTY"].ToString());
                                        eff = _inventoryDAL.updateReservationQuantity(row["TUI_REQ_ITM_CD"].ToString(), row["TUI_REQ_ITM_STUS"].ToString(), company, location, reserveQty, userseq, row["TUI_PIC_ITM_CD"].ToString());

                                        if (eff < 0)
                                        {
                                            error = "Unable to update reservations.";
                                            _inventoryDAL.TransactionRollback();
                                            _inventoryDAL.ConnectionClose();
                                            return false;
                                        }
                                    }
                                    else
                                    {
                                        reserveQty = Convert.ToInt32(inrLocDetaiils.Rows[0]["INL_FREE_QTY"].ToString());
                                        eff = _inventoryDAL.updateReservationQuantity(row["TUI_REQ_ITM_CD"].ToString(), row["TUI_REQ_ITM_STUS"].ToString(), company, location, reserveQty, userseq, row["TUI_PIC_ITM_CD"].ToString());

                                        if (eff < 0)
                                        {
                                            error = "Unable to update reservations.";
                                            _inventoryDAL.TransactionRollback();
                                            _inventoryDAL.ConnectionClose();
                                            return false;
                                        }
                                    }
                                    if (eff > 0)
                                    {
                                        InventoryRequestItem oNewItem = new InventoryRequestItem();
                                        oNewItem.Itri_loc = location;
                                        oNewItem.Itri_mitm_cd = row["TUI_REQ_ITM_CD"].ToString();
                                        oNewItem.Itri_itm_stus = row["TUI_REQ_ITM_STUS"].ToString();
                                        oNewItem.Itri_bqty = reserveQty;
                                        oNewItem.Itri_qty = reserveQty;
                                        oNewItem.Itri_app_qty = reserveQty;
                                        oNewItem.Itr_req_no = _documentNo;
                                        oNewItem.Itri_res_no = "";
                                        oNewItem.Itri_res_qty = reserveQty;
                                        oNewItem.Itri_note = "Updated by PDA";
                                        oNewItem.Itri_line_no = Convert.ToInt32(row["TUI_PIC_ITM_CD"].ToString());
                                        oNewItem.Itri_seq_no = SeqNumber;
                                        result = _inventoryDAL.SaveInventoryRequestItem(oNewItem);
                                        if (result < 0)
                                        {
                                            error = "Unable to update request item.";
                                            _inventoryDAL.TransactionRollback();
                                            _inventoryDAL.ConnectionClose();
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        error = "Invalid document number";
                        _inventoryDAL.TransactionRollback();
                        _inventoryDAL.ConnectionClose();
                        return false;
                    }
                }
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                return true;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                return false;
            }
        }
        public DataTable getItemDetWithStatus(Int32 userseq, string status, string itmcd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemDetWithStatus(userseq, status, itmcd);
        }
        //Lakshan 23 Nov 2016
        public decimal GET_INR_BATCH_BALANCE_BY_BATCH_NO(InventoryBatchN _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_BATCH_BALANCE_BY_BATCH_NO(_obj);
        }

        private string CHECKSERILA_COM(List<ReptPickSerials> _serialList, InventoryDAL _inventoryDAL)
        {
            //_err = string.Empty;
            string _foundserial = string.Empty;
            // _inventoryDAL = new InventoryDAL();
            DataTable _tbl = new DataTable();
            if (_serialList != null)
            {
                if (_serialList.Count > 0)
                {
                    foreach (ReptPickSerials _obj in _serialList)
                    {
                        MasterItem _mstItm = _inventoryDAL.GetItem(_obj.Tus_com, _obj.Tus_itm_cd);
                        if (_mstItm.Mi_is_ser1 == 1)
                        {
                            _tbl = _inventoryDAL.CHECKSERILA_COM(_obj.Tus_com, _obj.Tus_itm_cd, _obj.Tus_ser_1);
                            if (_tbl.Rows.Count > 0)
                            {
                                return _foundserial = "Serial no already available or use -" + _obj.Tus_ser_1;

                            }
                        }


                    }
                }

            }

            return _foundserial;

        }

        public Int32 SaveSalesOrder(SalesOrderHeader SalesOrder_hdr, MasterAutoNumber mastAutoNo, List<SalesOrderItems> SalesOrder_itm, List<SalesOrderSer> SalesOrder_ser, SalesDAL _salesDAL, FinancialDAL _financialDAL, InventoryDAL _inventoryDAL, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string _documentNo = string.Empty;
            string documentNo = null;
            try
            {
                string newseqno = string.Empty;
                string outputopno = string.Empty;
                Int32 so_rest_stk = 0;
                Int32 mpc_so_res = 0;
                int seq = 0;
                List<Int32> qtylist = new List<int>();
                InventoryRequest p_inventoryRequest = new InventoryRequest();
                if (SalesOrder_hdr != null)
                {
                    if (mastAutoNo != null)
                    {
                        Int32 _autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                        _documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_start_char + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                        result = _financialDAL.UpdateAutoNumber(mastAutoNo);
                    }
                    if (string.IsNullOrEmpty(SalesOrder_hdr.SOH_SO_NO))
                    {
                        SalesOrder_hdr.SOH_SO_NO = _documentNo;
                    }
                    HpSystemParameters _SystemPara = new HpSystemParameters();
                    _SystemPara = _salesDAL.GetSystemParameter("PC", SalesOrder_hdr.SOH_PC, "SOAP", SalesOrder_hdr.SOH_DT);

                    MasterProfitCenter _MasterProfitCenter = _salesDAL.GetProfitCenter(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC);
                    if (_inventoryDAL.Is_OptionPerimitted(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_CRE_BY, 16011) == 0)
                    {
                        //if (_SystemPara.Hsy_cd == "SOAP")
                        //{
                        //    decimal _totalInvoice = SalesOrder_hdr.SOH_ANAL_10;
                        //    decimal _credit = SalesOrder_hdr.SOH_ANAL_11;
                        //    if (_credit < _totalInvoice)
                        //    {
                        //        SalesOrder_hdr.SOH_STUS = "S";
                        //    }
                        //    else
                        //    {
                        //        SalesOrder_hdr.SOH_STUS = "A";
                        //    }
                        //}
                        if (_MasterProfitCenter != null)
                        {
                            if (_MasterProfitCenter.Mpc_chk_credit == true)
                            {
                                SalesOrder_hdr.SOH_STUS = "S";
                            }
                            else if (_MasterProfitCenter.Mpc_chk_credit == false)
                            {
                                SalesOrder_hdr.SOH_STUS = "A";
                            }
                        }

                    }
                    else
                    {
                        SalesOrder_hdr.SOH_STUS = "A";
                    }

                    Tuple<int, int> _effect2 = _salesDAL.PlaceSalesOrder(SalesOrder_hdr);
                    newseqno = _effect2.Item2.ToString();
                    documentNo = _documentNo;
                    outputopno = _documentNo;
                    // result = _inventoryDAL.UpdateQuatationDOStatus(SalesOrder_hdr.SOH_STRUCTURE_SEQ);

                    //Pick stage 


                    p_inventoryRequest.Ird_res_no = "";
                    p_inventoryRequest.Itr_act = 1;
                    p_inventoryRequest.Itr_anal1 = "";
                    // p_inventoryRequest.Itr_anal2 = _cusdecHdr.CUH_SUN_REQ_NO;
                    p_inventoryRequest.Itr_bus_code = SalesOrder_hdr.SOH_CUS_CD;//"N/A";
                    p_inventoryRequest.Itr_com = SalesOrder_hdr.SOH_COM;
                    // p_inventoryRequest.Itr_country_cd = SalesOrder_hdr.;
                    p_inventoryRequest.Itr_cre_by = SalesOrder_hdr.SOH_CRE_BY;
                    // p_inventoryRequest.Itr_cur_code = _cusdecHdr.CUH_CUR_CD;
                    p_inventoryRequest.Itr_direct = 0;
                    p_inventoryRequest.Itr_dt = SalesOrder_hdr.SOH_DT.Date;
                    p_inventoryRequest.Itr_exp_dt = SalesOrder_hdr.SOH_DT.Date;
                    p_inventoryRequest.Itr_exg_rate = SalesOrder_hdr.SOH_EX_RT;
                    //  p_inventoryRequest.Itr_exp_dt = _cusdecHdr.CUH_DT.Date;
                    p_inventoryRequest.Itr_issue_com = SalesOrder_hdr.SOH_COM;
                    p_inventoryRequest.Itr_issue_from = SalesOrder_hdr.SOH_DISP_LOC;
                    p_inventoryRequest.Itr_loc = SalesOrder_hdr.SOH_PC;
                    // p_inventoryRequest.Itr_mod_by = _cusdecHdr.CUH_CRE_BY;
                    p_inventoryRequest.Itr_note = SalesOrder_hdr.SOH_REMARKS;
                    p_inventoryRequest.Itr_rec_to = string.Empty;
                    p_inventoryRequest.Itr_ref = SalesOrder_hdr.SOH_SO_NO;
                    p_inventoryRequest.Itr_req_no = SalesOrder_hdr.SOH_SO_NO;
                    p_inventoryRequest.Itr_seq_no = 0;
                    p_inventoryRequest.Itr_session_id = SalesOrder_hdr.SOH_SESSION_ID;
                    p_inventoryRequest.Itr_stus = SalesOrder_hdr.SOH_STUS;
                    p_inventoryRequest.Itr_sub_tp = "SO";
                    p_inventoryRequest.Itr_tp = "SO";

                    // p_inventoryRequest.Itr_job_no = _cusdecHdr.CUH_SUN_BOND_NO;

                    seq = _inventoryDAL.SaveInventoryRequest(p_inventoryRequest);



                }

                #region reservation log data update add by Rukshan modify by Lakshan 03 MAr 2017
                if (SalesOrder_itm.Count > 0)
                {
                    foreach (SalesOrderItems _itm in SalesOrder_itm)
                    {
                        if (!string.IsNullOrEmpty(_itm.SOI_RES_NO))
                        {
                            string _err = string.Empty;
                            //_salesDAL.UPDATE_RES_BQTY(_itm.SOI_RES_NO, _itm.SOI_RES_LINE_NO, _itm.SOI_QTY);
                            Int32 _res = 0;
                            _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                            {
                                IRD_RES_NO = _itm.SOI_RES_NO,
                                IRD_ITM_CD = _itm.SOI_ITM_CD,
                                IRD_ITM_STUS = _itm.SOI_ITM_STUS,
                                IRD_RES_BQTY = _itm.SOI_QTY
                            });

                            InventoryBLL _BL = new InventoryBLL();
                            if (_itm.SOI_resLogUpdate == 1)
                            {
                                #region reservation
                                INR_RES_LOG _resLogSave = new INR_RES_LOG();
                                _resLogSave.IRL_RES_NO = _itm.SOI_RES_NO;
                                _resLogSave.IRL_ITM_CD = _itm.SOI_ITM_CD;
                                _resLogSave.IRL_ITM_STUS = _itm.SOI_ITM_STUS;
                                _resLogSave.IRL_CURT_COM = SalesOrder_hdr.SOH_COM;
                                _resLogSave.IRL_CURT_LOC = SalesOrder_hdr.SOH_DEL_LOC;
                                _resLogSave.IRL_RES_QTY = _itm.SOI_QTY;
                                _resLogSave.IRL_MOD_BY_NEW = SalesOrder_hdr.SOH_CRE_BY;
                                _resLogSave.IRL_MOD_DT = SalesOrder_hdr.SOH_CRE_WHEN;
                                _resLogSave.IRL_CRE_BY = SalesOrder_hdr.SOH_CRE_BY;
                                _resLogSave.IRL_CRE_DT = SalesOrder_hdr.SOH_CRE_WHEN;
                                _resLogSave.IRL_CRE_SESSION = SalesOrder_hdr.SOH_SESSION_ID;
                                _resLogSave.IRL_CURT_DOC_NO = SalesOrder_hdr.SOH_SO_NO;
                                _resLogSave.IRL_CURT_DOC_TP = "SO";
                                _resLogSave.IRL_CURT_DOC_DT = SalesOrder_hdr.SOH_DT;
                                _resLogSave.IRL_RES_WP = 1;
                                _resLogSave.IRL_ORIG_DOC_NO = _itm.SOI_RES_NO;
                                _resLogSave.IRL_ORIG_DOC_TP = "INV";
                                result = _BL.ReservationLogDataUpdateCancel(_resLogSave, 0, _inventoryDAL, out _err);
                                if (result == 0)
                                {
                                    documentNo = _err;
                                    result = -1;
                                    _salesDAL.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _salesDAL.ConnectionClose();
                                    _financialDAL.ConnectionClose();
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();
                                }
                                #endregion
                            }
                        }

                        #region checkvalidation
                        /*
                        if (!string.IsNullOrEmpty(SalesOrder_hdr.SOH_DISP_LOC))
                        {
                            DataTable dtchkpc_rest_stk = Check_PC_SO_REST_STK(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_DISP_LOC);

                            if (dtchkpc_rest_stk.Rows.Count > 0)
                            {
                                foreach (DataRow ddr in dtchkpc_rest_stk.Rows)
                                {
                                    if (!string.IsNullOrEmpty(ddr["mpc_so_rest_stk"].ToString()))
                                    {
                                        so_rest_stk = Convert.ToInt32(ddr["mpc_so_rest_stk"].ToString());
                                    }
                                    if (!string.IsNullOrEmpty(ddr["mpc_so_res"].ToString()))
                                    {
                                        mpc_so_res = Convert.ToInt32(ddr["mpc_so_res"].ToString());
                                    }
                                }
                            }

                            if (so_rest_stk == 1)
                            {

                                DataTable dtbal = CheckLocationBaBalance(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_DISP_LOC, _itm.SOI_ITM_CD, _itm.SOI_ITM_STUS);
                                    Decimal balance = 0;

                                    foreach (DataRow item in dtbal.Rows)
                                    {
                                        balance = Convert.ToDecimal(item["inl_free_qty"].ToString());
                                    }

                                    if (balance > 0)
                                    {
                                        qtylist.Add(0);
                                    }
                                    else
                                    {
                                        qtylist.Add(1);
                                    }
                                
                            }
                        }

                        if (qtylist.Contains(1))
                        {
                            documentNo = "Stock is not available for added item/items at the dispatch location";
                            _salesDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            _salesDAL.ConnectionClose();
                            _financialDAL.ConnectionClose();
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();
                            result = -1;
                            msg = documentNo;
                            return result;
                        }
                         */
                        #endregion

                        // SalesOrder_hdr.mpc_so_res = mpc_so_res;

                        _itm.SOI_SEQ_NO = Convert.ToInt32(newseqno);
                        _itm.SOI_SO_NO = outputopno;
                        result = _salesDAL.SaveSOItems(_itm);

                        //INT_REQ_ITM _ReqItem = new INT_REQ_ITM();
                        //_ReqItem.ITRI_QTY = _itm.SOI_INV_QTY;
                        //_ReqItem.ITRI_SEQ_NO = _itm.SOI_ITM_SEQ;//Convert.ToInt32(itemInv.Cells[14].Text);
                        //_ReqItem.ITRI_ITM_CD = _itm.SOI_ITM_CD;//itemInv.Cells[1].Text;
                        //result = _salesDAL.BalanceItemStock(_ReqItem);

                        result = _salesDAL.UpdatePrice(_itm.SOI_ITM_CD, _itm.SOI_PBOOK, _itm.SOI_PB_LVL, SalesOrder_hdr.SOH_CUS_CD, _itm.SOI_PROMO_CD, _itm.SOI_SEQ, _itm.SOI_ITM_SEQ);

                        #region SalesOrderItemTax
                        SalesOrderItemTax SalesOrderItemTax = new SalesOrderItemTax();
                        SalesOrderItemTax.SOTX_SO_NO = outputopno;
                        SalesOrderItemTax.SOTX_ITM_CD = _itm.SOI_ITM_CD; //ddr.Cells[1].Text;
                        SalesOrderItemTax.SOTX_ITM_TAX_TP = "VAT";
                        SalesOrderItemTax.SOTX_ITM_TAX_RT = 0;
                        SalesOrderItemTax.SOTX_ITM_TAX_AMT = _itm.SOI_ITM_TAX_AMT;
                        SalesOrderItemTax.SOTX_JOB_NO = string.Empty;
                        SalesOrderItemTax.SOTX_JOB_LINE = _itm.SOI_ITM_LINE;
                        SalesOrderItemTax.SOTX_SEQ_NO = Convert.ToInt32(newseqno);
                        SalesOrderItemTax.SOTX_ITM_LINE = _itm.SOI_ITM_LINE;

                        result = _salesDAL.SaveSOItemTax(SalesOrderItemTax);
                        #endregion

                        if (SalesOrder_hdr.mpc_so_res == 1)
                        {
                            result = _salesDAL.UpdateINRLoc(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC, _itm.SOI_ITM_CD, _itm.SOI_ITM_STUS, _itm.SOI_INV_QTY);

                        }

                        #region save Request
                        InventoryRequestItem _inventoryRequestItem = new InventoryRequestItem();
                        MasterItem _mstItem = new MasterItem();
                        _mstItem.Mi_cd = _itm.SOI_ITM_CD;
                        _inventoryRequestItem.MasterItem = _mstItem;
                        _inventoryRequestItem.Itri_advan_qty = 0;
                        _inventoryRequestItem.Itri_base_req_line = 0;
                        _inventoryRequestItem.Itri_base_req_no = "";
                        _inventoryRequestItem.Itri_batchno = "";
                        _inventoryRequestItem.Itri_buffer = 0;
                        _inventoryRequestItem.Itri_cncl_qty = 0;
                        _inventoryRequestItem.Itri_com = SalesOrder_hdr.SOH_COM;
                        _inventoryRequestItem.Itri_seq_no = seq;
                        _inventoryRequestItem.Itri_line_no = _itm.SOI_ITM_LINE;
                        _inventoryRequestItem.Itri_itm_cd = _itm.SOI_ITM_CD;
                        _inventoryRequestItem.Itri_itm_stus = _itm.SOI_ITM_STUS;
                        _inventoryRequestItem.Itri_qty = _itm.SOI_QTY;
                        _inventoryRequestItem.Itri_bqty = _itm.SOI_QTY;
                        _inventoryRequestItem.Itri_unit_price = _itm.SOI_UNIT_RT;
                        _inventoryRequestItem.Itri_app_qty = _itm.SOI_QTY;
                        _inventoryRequestItem.Itri_res_no = _itm.SOI_RES_NO;
                        _inventoryRequestItem.Itri_res_line = _itm.SOI_RES_LINE_NO;
                        _inventoryRequestItem.Mi_session_id = SalesOrder_hdr.SOH_SESSION_ID;
                        // _inventoryRequestItem.Itri_bqty = cusdecItm.Cui_qty;
                        // _inventoryRequestItem.Itri_job_no = _cusdecHdr.CUH_SUN_BOND_NO;
                        // _inventoryRequestItem.Itri_job_line = cusdecItm.Cui_line;
                        // _inventoryRequestItem.MasterItem.Mi_cd = cusdecItm.Cui_itm_cd;
                        _inventoryRequestItem.Temp_itri_is_allocation = _itm.SOI_allocation;
                        _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        if (SalesOrder_hdr.SOH_STUS == "A")
                        {
                            if (_inventoryRequestItem.Temp_itri_is_allocation == 1)
                            {
                                UpdateItemAllocationDataFIFO(_inventoryDAL, _inventoryRequestItem, p_inventoryRequest);
                            }

                        }



                        #endregion
                    }

                }
                #endregion


                //change status sales order request 


                result = 1;
            }
            catch (Exception ex)
            {
                documentNo = ex.Message;
                result = -1;

            }

            msg = documentNo;
            return result;
        }

        //Lakshan 06 Dec 2016
        public List<UnitConvert> GET_UNIT_CONVERTER_DATA(UnitConvert _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_UNIT_CONVERTER_DATA(_obj);
        }
        //Lakshan 08 Dec 2016
        public List<ReptPickSerials> GetAllScanSerialsListForAodOut(string _company, string _location, string _user, Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSerialsListForAodOut(_company, _location, _user, _userseqno, _doctype);
        }
        //Lakshan 08 Dec 2016
        public List<MasterItemSimilar> GET_MST_ITM_SIMILER_DATA(MasterItemSimilar _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_MST_ITM_SIMILER_DATA(_obj);
        }

        public List<MasterItemSimilar> GetSimilerItemBalanceData(MasterItemSimilar _obj, string _company)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            InventoryLocation _tmpInrLoc = new InventoryLocation();
            List<InventoryLocation> _inrReqLocBal = new List<InventoryLocation>();
            List<InventoryLocation> _inrIssLocBal = new List<InventoryLocation>();
            List<MasterItemSimilar> _simItmList = _inventoryDAL.GET_MST_ITM_SIMILER_DATA(new MasterItemSimilar() { Misi_itm_cd = _obj.Misi_itm_cd, Misi_com = _company });
            if (_simItmList != null)
            {
                foreach (var item in _simItmList)
                {
                    MasterItem _mstItm = _generalDAL.GetItemMaster(item.Misi_sim_itm_cd);
                    if (_mstItm != null)
                    {
                        item.Tmp_itm_desc = _mstItm.Mi_shortdesc;
                    }
                    _tmpInrLoc = new InventoryLocation()
                    {
                        Inl_com = _obj.Tmp_req_com,
                        Inl_loc = _obj.Tmp_req_loc,
                        Inl_itm_cd = item.Misi_sim_itm_cd,
                    };
                    _inrReqLocBal = _inventoryDAL.GET_INR_LOC_BALANCE_ALL_STUS(_tmpInrLoc);
                    item.Tmp_req_loc_bal = _inrReqLocBal.Sum(c => c.Inl_qty);
                    _tmpInrLoc = new InventoryLocation()
                    {
                        Inl_com = _obj.Tmp_iss_com,
                        Inl_loc = _obj.Tmp_iss_loc,
                        Inl_itm_cd = item.Misi_sim_itm_cd,
                    };
                    _inrIssLocBal = _inventoryDAL.GET_INR_LOC_BALANCE_ALL_STUS(_tmpInrLoc);
                    item.Tmp_Iss_loc_bal = _inrIssLocBal.Sum(c => c.Inl_qty);

                }
            }
            return _simItmList;
        }

        public DataTable check_AOD_Recieved(string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.check_AOD_Recieved(_docno);

        }

        public bool CheckAOD_AlreadyIn(string _aodno, string _com, out string loc)
        {
            _inventoryDAL = new InventoryDAL();
            loc = string.Empty;
            return _inventoryDAL.CheckAOD_AlreadyIn(_aodno, _com, out loc);

        }

        public DataTable GetItemInventoryBalanceQty(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalanceQty(_company, _location, _item, _status);

        }

        public List<ReservationItemsrep> ReservationItemList(DateTime fromdate, DateTime todate, string itemcode, string cat, string dispatchloc,
            string customer, string status, string docno, string cat2, string cat3, string adminTeam, string com, string user)
        {
            _inventoryDAL = new InventoryDAL();
            _custServiceDAL = new CustServiceDAL();
            _generalDAL = new GeneralDAL();


            List<ReservationItemsrep> reslist = null;
            if (cat != "" && itemcode == "")
            {
                //check items

                List<CatwithItems> itemlist = _inventoryDAL.GetItemsDetWithCat(cat);

                if (cat2 != "")
                {
                    itemlist = itemlist.Where(x => x.mi_cate_2 == cat2).ToList();
                }
                if (cat3 != "")
                {
                    itemlist = itemlist.Where(x => x.mi_cate_3 == cat3).ToList();
                }
                List<ReservationItemsrep> resitemslist = new List<ReservationItemsrep>();
                foreach (var items in itemlist)
                {
                    ReservationItemsrep resitemob = new ReservationItemsrep();
                    itemcode = items.mi_cd.ToString();
                    reslist = _inventoryDAL.GetReservationItemsDet(com, fromdate, todate, docno, itemcode, status, dispatchloc, customer, "CUSA", adminTeam);
                    resitemslist.AddRange(reslist);
                }


            }
            else
            {
                reslist = _inventoryDAL.GetReservationItemsDet(com, fromdate, todate, docno, itemcode, status, dispatchloc, customer, "CUSA", adminTeam);
            }

            foreach (var reslistnew in reslist)
            {
                string refno = reslistnew.itr_req_no.ToString();
                string item_cd = reslistnew.itri_itm_cd.ToString();
                int line_no = reslistnew.line_no;
                string reqnumber = "";
                DataTable Hdrdata = new DataTable(); ;
                //check bond
                DataTable chkbond = _inventoryDAL.CheckINTReqBond(com, refno);
                if (chkbond.Rows.Count > 0)
                {
                    reqnumber = chkbond.Rows[0][0].ToString();
                    //cusdec hdrdara
                    Hdrdata = _custServiceDAL.GetCusdecHDRData(reqnumber, com);
                }
                if (Hdrdata.Rows.Count > 0)
                {
                    //entryno
                    reslistnew.itr_ref = Hdrdata.Rows[0]["cuh_doc_no"].ToString();
                    reslistnew.entryno = Hdrdata.Rows[0]["cuh_cusdec_entry_no"].ToString();
                    //entrydate
                    if (Hdrdata.Rows[0]["cuh_cusdec_entry_dt"].ToString() != "")
                        reslistnew.entrydate = Convert.ToDateTime(Hdrdata.Rows[0]["cuh_cusdec_entry_dt"].ToString());
                }

                DataTable balQty = _inventoryDAL.GetBalanceQtyForResItmRpt(com, refno, item_cd, line_no);
                DataTable balQty2 = _inventoryDAL.GetBalanceQtyForResItmRpt2(com, reslistnew.itr_ref, line_no);
                if (balQty.Rows.Count > 0)
                {
                    if (balQty.Rows[0]["BAL_QTY"].ToString() == "0")
                    {
                        reslistnew.bal_qty = 0;
                    }
                    else if (balQty.Rows[0]["BAL_QTY"].ToString() == "")
                    {
                        reslistnew.bal_qty = 0;
                    }
                    else
                    {
                        reslistnew.bal_qty = Convert.ToInt32(balQty.Rows[0]["BAL_QTY"].ToString());
                    }

                    //reslistnew.bal_qty = balQty.Rows[0]["BAL_QTY"].ToString() == "" ? Convert.ToInt32("0") : Convert.ToInt32(balQty.Rows[0]["BAL_QTY"].ToString());
                }

                if (balQty2.Rows.Count > 0)
                {
                    if (balQty2.Rows[0]["BAL_QTY"].ToString() == "0")
                    {
                        reslistnew.bal_qty = 0;
                    }
                }


                //else
                //{
                //    reslistnew.bal_qty = 0;
                //}
            }
            string _filePath = string.Empty;
            string _email = string.Empty;
            string _toemail = string.Empty;
            string _err = "";
            DataTable Param = new DataTable();
            DataRow dr;
            Param.Columns.Add("User", typeof(string));
            Param.Columns.Add("Location", typeof(string));
            Param.Columns.Add("Fromdate", typeof(DateTime));
            Param.Columns.Add("Todate", typeof(DateTime));
            Param.Columns.Add("Company", typeof(string));

            dr = Param.NewRow();
            dr["User"] = user;
            dr["Fromdate"] = fromdate;
            dr["Todate"] = todate;
            dr["Location"] = "";
            dr["Company"] = com;
            Param.Rows.Add(dr);

            DataTable dtCreateUser = _inventoryDAL.GetUserNameByUserID(user);
            if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
            {
                if (dtCreateUser.Rows[0]["se_email"] != null)
                {
                    _toemail = dtCreateUser.Rows[0]["se_email"].ToString();
                }
            }

            reslist = reslist.Where(a => a.bal_qty > 0).ToList();
            DataTable totresult = DataTableExtensions.ToDataTable(reslist);
            _filePath = ExportExcel2007(com, user, Param, totresult, out _err);
            SmtpClient smtpClient = new SmtpClient();
            MailMessage message = new MailMessage();
            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
            smtpClient.Host = _generalDAL.GetMailHost();
            smtpClient.Port = 25;
            message.From = fromAddress;
            string FOOTER = _generalDAL.GetMailFooterMsg();
            _email = "Dear Sir/Madam, <br>" + "Your Reservation Details Report generated.  <br> Please find the  system generated Reservation Details Report.";
            message.To.Add(_toemail);
            message.Subject = "Reservation Details Report";
            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
            //message.Bcc.Add(new MailAddress(""));
            Attachment at = new Attachment(_filePath);
            message.Attachments.Add(at);
            message.IsBodyHtml = false;
            message.Body = _email;
            message.IsBodyHtml = true;
            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
            // Send SMTP mail
            smtpClient.Send(message);
            return reslist;
        }
        public string ExportExcel2007(string _com, string _user, DataTable TitleData, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, TitleData, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }
        //Tharaka 2015-10-13 copy by lakshan 16 Dec 2016
        public List<InventoryLocation> GET_LOC_ITEMS_FOR_DISPATCH_NEW(String Com, String UserID, String Item, String Stus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_LOC_ITEMS_FOR_DISPATCH_NEW(Com, UserID, Item, Stus);
        }

        /// <summary>
        /// get stock balance on Item 2016-1-25 by DULANGA
        /// </summary>
        /// <param name="_obj"></param>
        /// <returns></returns>
        public List<InventoryLocation> GET_INR_LOC_BALANCE_ALL_STUS(InventoryLocation _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_LOC_BALANCE_ALL_STUS(_obj);

        }




        public Int32 ReservationLogDataUpdate(INR_RES_LOG _obj, Int32 _updateTp, InventoryDAL _invDal, out string _err)
        {
            // 0 for save 1 for update
            _err = string.Empty;
            //_inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            //_inventoryDAL.BeginTransaction();
            Int32 _res = 0;
            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
            INR_RES_LOG _resLogSave = new INR_RES_LOG();
            INR_RES _resHdr = new INR_RES();
            INR_RES_DET _resDet = new INR_RES_DET();
            bool _resDetDataAva = false;
            bool _resLogDataAva = false;
            try
            {
                _resHdr = _invDal.GET_INR_RES_DATA(new INR_RES() { IRS_RES_NO = _obj.IRL_RES_NO, IRS_COM = _obj.IRL_CURT_COM }).FirstOrDefault();
                _resDet = _invDal.GET_INR_RES_DET_DATA(new INR_RES_DET()
                {
                    IRD_RES_NO = _obj.IRL_RES_NO,
                    IRD_ITM_CD = _obj.IRL_ITM_CD,
                    IRD_ITM_STUS = _obj.IRL_ITM_STUS
                }).FirstOrDefault();
                if (_resDet != null)
                {
                    _resDetDataAva = true;
                }
                if (!_resDetDataAva)
                {
                    _res = -1;
                    _err = "Reservation detail data not found !";
                    return _res;
                }
                if (_updateTp == 0)//Insert
                {
                    INR_RES_LOG _resObj = new INR_RES_LOG();
                    _resObj.IRL_RES_NO = _obj.IRL_RES_NO;
                    _resObj.IRL_ITM_CD = _obj.IRL_ITM_CD;
                    _resObj.IRL_ITM_STUS = _obj.IRL_ITM_STUS;
                    _resObj.IRL_CURT_COM = _obj.IRL_CURT_COM;
                    _resObj.IRL_CURT_LOC = _obj.IRL_CURT_LOC;
                    _resObj.IRL_CURT_DOC_NO = _obj.IRL_ORIG_DOC_NO;
                    _resObj.IRL_CURT_DOC_TP = _obj.IRL_ORIG_DOC_TP;
                    _resObj.IRL_ACT = 1;
                    if (_obj.IRL_CURT_DOC_TP == "AOD-IN")
                    {
                        _resObj.IRL_CURT_COM = "GIT";
                        _resObj.IRL_CURT_LOC = "GIT";
                    }
                    _resLogAvaData = _invDal.GET_INR_RES_LOG_DATA_NEW(_resObj);

                    if (_resLogAvaData != null)
                    {
                        if (_resLogAvaData.Count > 0)
                        {
                            _resLogDataAva = true;
                        }
                    }
                    if (!_resLogDataAva)
                    {
                        _res = -1;
                        _err = "Reservation log data not found !";
                        return _res;
                    }
                    //errro
                    if (_resLogAvaData.Count > 0)
                    {
                        bool _isResLogUpdate = false;
                        INR_RES_LOG _tmpLogRes = new INR_RES_LOG();
                        foreach (var _tmpResData in _resLogAvaData)
                        {
                            _tmpLogRes = INR_RES_LOG.CreateNewObject(_tmpResData);
                            _tmpResData.TMP_IRL_RES_BQTY = _tmpResData.IRL_RES_BQTY;
                        }
                        _resLogAvaData = _resLogAvaData.OrderBy(c => c.IRL_CURT_DOC_DT).ToList();

                        while (_obj.IRL_RES_QTY > 0)
                        {
                            decimal _reAvaCount = 0;
                            if (_resLogAvaData.Count > 0)
                            {
                                _reAvaCount = _resLogAvaData.Sum(c => c.IRL_RES_BQTY);
                            }
                            if (_reAvaCount <= 0)
                            {
                                break;
                            }
                            foreach (var _resAva in _resLogAvaData)
                            {
                                if (_obj.IRL_RES_QTY > 0)
                                {
                                    if (_resAva.TMP_IRL_RES_BQTY >= _obj.IRL_RES_QTY)
                                    {
                                        #region if available balance equal or grater
                                        _resLogSave = new INR_RES_LOG();
                                        _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                        _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                        _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                        _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                        _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                        _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                        _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                        _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_QTY;
                                        _resAva.IRL_RES_BQTY = _resAva.IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                        _resAva.TMP_IRL_RES_BQTY = _resAva.TMP_IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                        _resLogSave.IRL_ACT = _resAva.IRL_RES_BQTY <= 0 ? 0 : 1;
                                        _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                        _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                        _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                        _resLogSave.IRL_LINE = _resAva.IRL_LINE;
                                        _res = _invDal.InrResLogDataUpdateIssue(_resLogSave);

                                        _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                        _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;

                                        _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                        _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                        _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                        _resLogSave.IRL_RES_QTY = _obj.IRL_RES_QTY;
                                        _resLogSave.IRL_RES_BQTY = _obj.IRL_RES_QTY;
                                        _resLogSave.IRL_RES_IQTY = 0;
                                        _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                        _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                        _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                        _resLogSave.IRL_ACT = _resLogSave.IRL_RES_BQTY <= 0 ? 0 : 1;

                                        _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                        _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                        _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                        _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                        _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                        _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                        _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                        if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                        {
                                            _resLogSave.IRL_CURT_COM = "GIT";
                                            _resLogSave.IRL_CURT_LOC = "GIT";
                                            _resLogSave.IRL_RES_WP = 1;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                        {
                                            _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                            _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                            _resLogSave.IRL_RES_WP = 0;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                        {
                                            _resLogSave.IRL_RES_BQTY = 0;
                                            _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_IQTY;
                                            _resLogSave.IRL_ACT = 0;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                        {
                                            _resLogSave.IRL_RES_WP = 1;
                                        }
                                        _res = _invDal.InrResLogDataSave(_resLogSave);
                                        _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _obj.IRL_RES_QTY;
                                        if (_obj.IRL_RES_QTY == 0)
                                        {
                                            continue;
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region if available balance  less
                                        _resLogSave = new INR_RES_LOG();
                                        _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                        _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                        _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                        _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                        _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                        _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                        _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                        _resLogSave.IRL_RES_IQTY = _resAva.TMP_IRL_RES_BQTY;
                                        _resAva.IRL_RES_BQTY = 0;
                                        _resAva.TMP_IRL_RES_BQTY = 0;
                                        _resLogSave.IRL_ACT = 0;
                                        _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                        _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                        _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                        _resLogSave.IRL_LINE = _resAva.IRL_LINE;
                                        _res = _invDal.InrResLogDataUpdateIssue(_resLogSave);

                                        _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                        _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;
                                        _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                        _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                        _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                        _resLogSave.IRL_RES_QTY = _resLogSave.IRL_RES_IQTY;
                                        _resLogSave.IRL_RES_BQTY = _resLogSave.IRL_RES_IQTY;
                                        _resLogSave.IRL_RES_IQTY = 0;
                                        _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                        _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                        _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                        _resLogSave.IRL_ACT = 1;

                                        _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                        _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                        _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                        _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                        _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                        _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                        _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                        if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                        {
                                            _resLogSave.IRL_CURT_COM = "GIT";
                                            _resLogSave.IRL_CURT_LOC = "GIT";
                                            _resLogSave.IRL_RES_WP = 1;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                        {
                                            _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                            _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                            _resLogSave.IRL_RES_WP = 0;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP == "INV")
                                        {
                                            _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                            _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                            _resLogSave.IRL_RES_WP = 0;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                        {
                                            _resLogSave.IRL_RES_BQTY = 0;
                                            _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_IQTY;
                                            _resLogSave.IRL_ACT = 0;
                                        }
                                        if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                        {
                                            _resLogSave.IRL_RES_WP = 1;
                                        }
                                        _res = _invDal.InrResLogDataSave(_resLogSave);
                                        _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _obj.IRL_RES_QTY;
                                        if (_obj.IRL_RES_QTY == 0)
                                        {
                                            continue;
                                        }
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();
                _res = -1;
            }
            return _res;
        }

        //Written By Rukshan on 07 Nov 2015
        public DataTable GET_GetTobond_BL_Date(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _from, DateTime _to)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GetTobond_BL_Date(_initialSearchParams, _searchCatergory, _searchText, _from, _to);
        }
        public List<InventoryRequestItem> GET_INT_REQ_ITM_DATA_BY_REQ_NO(string _itr_req_no)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_itr_req_no);

        }


        public Int32 SaveStockVerification(PhysicalStockVerificationHdr _stockhdr, MasterAutoNumber mastAutoNo, out string doc, out string _message, List<AuditMemebers> _auditMemebers = null)
        {
            //,List<ProductionFinGood> _finItem
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (_stockhdr != null)
                {
                    if (mastAutoNo != null)
                    {
                        if ((_stockhdr.AUSH_JOB == null) || (_stockhdr.AUSH_JOB == ""))
                        {
                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                            doc = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _stockhdr.AUSH_JOB = doc;
                            _effect = _inventoryDAL.UpdateAutoNumber(mastAutoNo);
                            seq = _inventoryDAL.SavePhysicalStockVerificationHdr(_stockhdr);
                        }
                    }

                    if (seq > 0)
                    {
                        //Save audit members
                        if (_auditMemebers != null)
                        {
                            _auditMemebers.ForEach(x => x.Ajm_Job_no = _stockhdr.AUSH_JOB);

                            foreach (AuditMemebers _member in _auditMemebers)
                            {
                                int _rowEffects = _inventoryDAL.SaveAuditMemebers(_member);
                                if (_rowEffects <= 0)
                                {
                                    throw new Exception("Couldn't save audit member details");
                                }
                            }

                        }

                        //Updated by akila 2017/02/21
                        PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                        if (_stockhdr.IsNewJob) { _main.Ausm_Subjob_Status = "P"; } //Pending job, the default value is p-pending (at thime job is created) 
                        else
                        {
                            if (_stockhdr.AUSH_STUS == "P")
                            {
                                _main.Ausm_Subjob_Status = "S"; _main.Ausm_Subjob_Strdt = DateTime.Now;
                            }
                            else if (_stockhdr.AUSH_STUS == "F")
                            {
                                _main.Ausm_Subjob_Status = "F"; _main.Ausm_Subjob_Enddt = DateTime.Now; ;
                            }
                        }

                        if (_stockhdr.AUSH_NO_JOB == 0)
                        {
                            int _seq = _inventoryDAL.GetSerialID();
                            // PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                            _main.Ausm_cre_by = _stockhdr.AUSH_CRE_BY;
                            _main.Ausm_cre_dt = DateTime.Now;
                            _main.Ausm_dt = _stockhdr.AUSH_DT;
                            _main.Ausm_loc = _stockhdr.AUSH_LOC;
                            _main.Ausm_stus = true;
                            _main.Ausm_seq = _seq;
                            _main.Ausm_job = doc;
                            _main.Ausm_com = _stockhdr.AUSH_COM;
                            _main.Ausm_main_job = doc;

                            //Add by akila 2017/02/21
                            _main.Ausm_Subjob_Status = "P"; //When create a new job this status is - Pending
                            _main.Ausm_Subjob_Strdt = null;
                            _main.Ausm_Subjob_Enddt = null;
                            _main.Ausm_Mod_By = _stockhdr.AUSH_MOD_BY;
                            _main.Ausm_Session_Id = _stockhdr.AUSH_SESSION_ID;

                            _inventoryDAL.SavePhysicalStockVerificationMain(_main);
                        }
                        else if (_stockhdr.AUSH_NO_JOB > 0)
                        {
                            MasterAutoNumber masterAutoSub = new MasterAutoNumber();
                            masterAutoSub.Aut_cate_tp = "LOC";
                            masterAutoSub.Aut_cate_cd = _stockhdr.AUSH_LOC;  // string.IsNullOrEmpty(Session["UserDefLoca"].ToString()) ? Session["UserDefProf"].ToString() : Session["UserDefLoca"].ToString();
                            masterAutoSub.Aut_direction = null;
                            masterAutoSub.Aut_modify_dt = null;
                            masterAutoSub.Aut_moduleid = "STJO";
                            masterAutoSub.Aut_number = 0;
                            masterAutoSub.Aut_start_char = "STJO";
                            masterAutoSub.Aut_year = Convert.ToDateTime(_stockhdr.AUSH_DT).Year;
                            string subjob = string.Empty;
                            for (int i = 0; i <= _stockhdr.AUSH_NO_JOB; i++)
                            {
                                int _seq = _inventoryDAL.GetSerialID();//cannot generated seq 
                                if (i == 0)
                                {
                                    //PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                                    _main.Ausm_cre_by = _stockhdr.AUSH_CRE_BY;
                                    _main.Ausm_cre_dt = DateTime.Now;
                                    _main.Ausm_dt = _stockhdr.AUSH_DT;
                                    _main.Ausm_loc = _stockhdr.AUSH_LOC;
                                    _main.Ausm_stus = true;
                                    _main.Ausm_seq = _seq;
                                    _main.Ausm_job = doc;
                                    _main.Ausm_com = _stockhdr.AUSH_COM;
                                    _main.Ausm_main_job = doc;
                                    _main.Ausm_Mod_By = _stockhdr.AUSH_MOD_BY;
                                    _main.Ausm_Session_Id = _stockhdr.AUSH_SESSION_ID;
                                    _inventoryDAL.SavePhysicalStockVerificationMain(_main);
                                }
                                else
                                {
                                    subjob = masterAutoSub.Aut_cate_cd + "-" + masterAutoSub.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + i.ToString("00000", CultureInfo.InvariantCulture);
                                    //Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAutoSub.Aut_moduleid, masterAutoSub.Aut_direction, masterAutoSub.Aut_start_char, masterAutoSub.Aut_cate_tp, masterAutoSub.Aut_cate_cd, masterAutoSub.Aut_modify_dt, masterAutoSub.Aut_year).Aut_number;
                                    //subjob = masterAutoSub.Aut_cate_cd + "-" + masterAutoSub.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    //_effect = _inventoryDAL.UpdateAutoNumber(masterAutoSub);

                                    //PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                                    _main.Ausm_cre_by = _stockhdr.AUSH_CRE_BY;
                                    _main.Ausm_cre_dt = DateTime.Now;
                                    _main.Ausm_dt = _stockhdr.AUSH_DT;
                                    _main.Ausm_loc = _stockhdr.AUSH_LOC;
                                    _main.Ausm_stus = true;
                                    _main.Ausm_seq = _seq;
                                    _main.Ausm_job = subjob;
                                    _main.Ausm_com = _stockhdr.AUSH_COM;
                                    _main.Ausm_main_job = doc;
                                    _main.Ausm_Mod_By = _stockhdr.AUSH_MOD_BY;
                                    _main.Ausm_Session_Id = _stockhdr.AUSH_SESSION_ID;
                                    _inventoryDAL.SavePhysicalStockVerificationMain(_main);
                                }

                            }
                        }
                        else { _message = null; _effect = 0; }
                    }
                }

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                _message = null;
                _effect = 1;
            }
            catch (Exception ex)
            {
                doc = null;
                _message = ex.Message;
                _effect = 0;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }


            return _effect;
        }


        //Written By Rukshan on 30 Nov 2016
        public DataTable SEARCH_STOCKVERF_HDR(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _from, DateTime _to)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SEARCH_STOCKVERF_HDR(_initialSearchParams, _searchCatergory, _searchText, _from, _to);
        }

        public PhysicalStockVerificationHdr GET_STOCKVERF_HDR(String _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_STOCKVERF_HDR(_doc);

        }

        public List<PhsicalStockVerificationMain> GET_STOCKVERF_MAIN(String _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_STOCKVERF_MAIN(_doc);

        }

        public Int32 FineshStockVerification(string _maindoc, string _com, string _loc, string _user, out string doc)
        {
            //,List<ProductionFinGood> _finItem
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (!string.IsNullOrEmpty(_maindoc))
                {
                    List<PhsicalStockVerificationMain> _PhsicalStockVerificationMain = new List<PhsicalStockVerificationMain>();
                    List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                    _PhsicalStockVerificationMain = _inventoryDAL.GET_STOCKVERF_MAIN(_maindoc);
                    if (_PhsicalStockVerificationMain.Count > 0)
                    {
                        foreach (PhsicalStockVerificationMain _main in _PhsicalStockVerificationMain)
                        {
                            string _doc = _main.Ausm_job;
                            int user_seq_num = GET_SEQNUM_FOR_INVOICE("STJO", _com, _doc, 0);
                            _serList = GetAllScanSerialsList(_com, _loc, null, user_seq_num, "STJO");
                            if (_serList != null)
                            {
                                _serList = _serList.Where(x => x.Tus_base_doc_no == _doc).ToList();
                                var _scanItems = _serList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus, x.Tus_qty }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                                foreach (var itm in _scanItems)
                                {
                                    PhysicalStockVerificationItem _itm = new PhysicalStockVerificationItem();
                                    _itm.Ausi_seq = _main.Ausm_seq;
                                    _itm.Ausi_job = _doc;
                                    _itm.Ausi_itm = itm.Peo.Tus_itm_cd;
                                    _itm.Ausi_stus = itm.Peo.Tus_itm_stus;
                                    _itm.Ausi_db_qty = itm.Peo.Tus_qty * itm.theCount;
                                    _itm.Ausi_cre_by = _main.Ausm_cre_by;
                                    _main.Ausm_cre_dt = _main.Ausm_cre_dt;
                                    _effect = _inventoryDAL.SavePhysicalStockVerificationItem(_itm);
                                }

                                //foreach (PhysicalStockVerificationItem _itm in _itemList)
                                //{
                                //    _inventoryDAL.UpdatePhysicalStockItem(_itm);
                                //}

                                //save serials
                                if (_serList.Count > 0)
                                {
                                    foreach (ReptPickSerials _ser in _serList)
                                    {
                                        PhysicalStockVerificationSerial _serial = new PhysicalStockVerificationSerial();
                                        _serial.Auss_cre_by = _main.Ausm_cre_by;
                                        _serial.Auss_cre_dt = DateTime.Now;
                                        _serial.Auss_in_doc = _ser.Tus_doc_no;
                                        _serial.Auss_in_dt = _ser.Tus_doc_dt;
                                        _serial.Auss_item = _ser.Tus_itm_cd;
                                        _serial.Auss_itm_stus = _ser.Tus_itm_stus;
                                        _serial.Auss_job = _doc;
                                        _serial.Auss_ref_stus = null;
                                        _serial.Auss_rpt_type = null;
                                        _serial.Auss_seq = _main.Ausm_seq;
                                        _serial.Auss_ser_id = _ser.Tus_ser_id;
                                        _serial.Auss_serial = _ser.Tus_ser_1;
                                        _serial.Auss_type = null;
                                        _serial.Auss_warranty = _ser.Tus_warr_no;
                                        _serial.Auss_rmk = null;
                                        _effect = _inventoryDAL.SavePhysicalStockVerificationSerial(_serial);
                                    }
                                }
                            }
                        }
                    }

                    if (_effect >= 1)
                    {
                        PhysicalStockVerificationHdr _hdr = new PhysicalStockVerificationHdr();
                        _hdr.AUSH_COM = _com;
                        _hdr.AUSH_JOB = _maindoc;
                        _hdr.AUSH_MOD_BY = _user;
                        _hdr.AUSH_STUS = "F";
                        _effect = _inventoryDAL.UpdatePhysicalStockHdr(_hdr);
                    }
                }

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                doc = ex.Message;
                _effect = -1;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }


            return _effect;
        }

        //Written By Rukshan on 07 Nov 2015
        public DataTable GET_GetTobond_BL_RES(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GetTobond_BL_RES(_initialSearchParams, _searchCatergory, _searchText);
        }

        public List<InventoryAllocateDetails> GET_STOCK_ALOC_DATA_TRCK(InventoryAllocateDetails _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_STOCK_ALOC_DATA_TRCK(_obj);
        }
        //Lakshan 15 Jan 2017
        public List<ReptPickSerials> AllocationDataValidateAodOut(List<ReptPickSerials> _serList, MasterLocation _inLoc, string _outLoc)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            List<ReptPickSerials> _errList = new List<ReptPickSerials>();
            string _errMsg = "";
            ReptPickSerials _err = new ReptPickSerials();
            MasterLocationPriorityHierarchy _locHir = _generalDAL.GET_MST_LOC_INFO_DATA(_inLoc.Ml_loc_cd, "CHNL");
            string _chnl = "";
            if (_locHir != null)
            {
                _chnl = _locHir.Mli_val;
            }
            if (_inLoc != null)
            {
                if (_inLoc.Ml_loc_tp != "WH")
                {
                    decimal _allAllocationQty = 0;
                    decimal _chnlAllocationQty = 0;
                    decimal _allInvBal = 0;
                    decimal _reqAppQty = 0;
                    decimal _tmpDecimal = 0;
                    List<InventoryAllocateDetails> _allAllocation = new List<InventoryAllocateDetails>();
                    List<InventoryAllocateDetails> _chnlAllocation = new List<InventoryAllocateDetails>();
                    InventoryLocation _inrLocBal = new InventoryLocation();
                    var _itmList = _serList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                    foreach (var item in _itmList)
                    {
                        _reqAppQty = item.theCount;
                        _allAllocation = _inventoryDAL.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
                        {
                            Isa_com = _inLoc.Ml_com_cd,
                            Isa_itm_cd = item.Peo.Tus_itm_cd,
                            Isa_itm_stus = item.Peo.Tus_itm_stus
                        });
                        if (_allAllocation.Count > 0)
                        {
                            _allAllocationQty = _allAllocation.Sum(c => c.Isa_aloc_bqty);
                        }
                        if (_allAllocationQty > 0)
                        {
                            _chnlAllocation = _inventoryDAL.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
                            {
                                Isa_chnl = _chnl,
                                Isa_com = _inLoc.Ml_com_cd,
                                Isa_itm_cd = item.Peo.Tus_itm_cd,
                                Isa_itm_stus = item.Peo.Tus_itm_stus
                            });
                            if (_chnlAllocation.Count > 0)
                            {
                                _chnlAllocationQty = _chnlAllocation.Sum(c => c.Isa_aloc_bqty);
                            }

                            _allInvBal = _inventoryDAL.GET_INR_LOC_BALANCE_BY_COM(new InventoryLocation()
                            {
                                Inl_com = _inLoc.Ml_com_cd,
                                Inl_loc = _outLoc,
                                Inl_itm_cd = item.Peo.Tus_itm_cd,
                                Inl_itm_stus = item.Peo.Tus_itm_stus
                            });
                            if (_reqAppQty > _chnlAllocationQty)
                            {
                                decimal _availableBalanc = _chnlAllocationQty + (_allInvBal - _allAllocationQty);
                                if (_reqAppQty > _availableBalanc)
                                {
                                    if (_availableBalanc > -1)
                                    {
                                        //Tmp_err_msg
                                        _errMsg = "You cannot exceed the allocation qty. Available Balance : " + (_allInvBal - _allAllocationQty + _chnlAllocationQty);
                                    }
                                    else
                                    {
                                        _errMsg = "You cannot exceed the allocation qty. Available Balance : " + _chnlAllocationQty;
                                    }
                                    _err = new ReptPickSerials();
                                    _err.Tmp_err_msg = _errMsg;
                                    _err.Tus_itm_cd = item.Peo.Tus_itm_cd;
                                    _err.Tus_itm_cd = item.Peo.Tus_itm_stus;
                                    _errList.Add(_err);
                                }
                            }
                        }
                    }
                }
            }
            return _errList;
        }

        //Add by Rukshan 
        public DataTable CHECK_TOBOND_GRN_status(string _com, string _doc, string _itm, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            DataTable _tblBalance = _inventoryDAL.CHECK_TOBOND_GRN_status(_com, _doc, _itm, _status);

            return _tblBalance;
        }

        //Add by Akila 2017/01/10
        public DataTable GetItemStatusDefinition_byLocation(string comCode, string locationCode)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetItemStatusDefinition_byLocation(comCode, locationCode);
        }
        //Lakshan 15 Jan 2017
        public List<InventoryRequestItem> AllocationValidateInterTransferApprove(InventoryRequest _invReq, List<InventoryRequestItem> _reqItmList)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            List<InventoryRequestItem> _errList = new List<InventoryRequestItem>();
            string _errMsg = "";
            InventoryRequestItem _err = new InventoryRequestItem();
            MasterLocation _inLoc = _generalDAL.GetLocationByLocCode(_invReq.Itr_com, _invReq.Itr_loc);
            MasterLocationPriorityHierarchy _locHir = _generalDAL.GET_MST_LOC_INFO_DATA(_invReq.Itr_loc, "CHNL");

            #region MyRegion
            string _chnl = "";
            if (_locHir != null)
            {
                _chnl = _locHir.Mli_val;
            }
            if (_inLoc != null)
            {
                if (_inLoc.Ml_loc_tp != "WH")
                {
                    decimal _allAllocationQty = 0;
                    decimal _chnlAllocationQty = 0;
                    decimal _allInvBal = 0;
                    decimal _reqAppQty = 0;
                    decimal _tmpDecimal = 0;
                    List<InventoryAllocateDetails> _allAllocation = new List<InventoryAllocateDetails>();
                    List<InventoryAllocateDetails> _chnlAllocation = new List<InventoryAllocateDetails>();
                    InventoryLocation _inrLocBal = new InventoryLocation();
                    var _itmList = _reqItmList.GroupBy(x => new { x.Itri_itm_cd, x.Itri_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Itri_qty) });
                    foreach (var item in _itmList)
                    {
                        _reqAppQty = item.theCount;
                        _allAllocation = _inventoryDAL.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
                        {
                            Isa_com = _inLoc.Ml_com_cd,
                            Isa_itm_cd = item.Peo.Itri_itm_cd,
                            Isa_itm_stus = item.Peo.Itri_itm_stus
                        });
                        if (_allAllocation.Count > 0)
                        {
                            _allAllocationQty = _allAllocation.Sum(c => c.Isa_aloc_bqty);
                        }
                        if (_allAllocationQty > 0)
                        {
                            _chnlAllocation = _inventoryDAL.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
                            {
                                Isa_chnl = _chnl,
                                Isa_com = _inLoc.Ml_com_cd,
                                Isa_itm_cd = item.Peo.Itri_itm_cd,
                                Isa_itm_stus = item.Peo.Itri_itm_stus
                            });
                            if (_chnlAllocation.Count > 0)
                            {
                                _chnlAllocationQty = _chnlAllocation.Sum(c => c.Isa_aloc_bqty);
                            }

                            _allInvBal = _inventoryDAL.GET_INR_LOC_BALANCE_BY_COM(new InventoryLocation()
                            {
                                Inl_com = _inLoc.Ml_com_cd,
                                Inl_loc = _inLoc.Ml_loc_cd,
                                Inl_itm_cd = item.Peo.Itri_itm_cd,
                                Inl_itm_stus = item.Peo.Itri_itm_stus
                            });
                            if (_reqAppQty > _chnlAllocationQty)
                            {
                                decimal _availableBalanc = _chnlAllocationQty + (_allInvBal - _allAllocationQty);
                                if (_reqAppQty > _availableBalanc)
                                {
                                    if (_availableBalanc > -1)
                                    {
                                        //Tmp_err_msg
                                        _errMsg = "You cannot exceed the allocation qty. Available Balance : " + (_allInvBal - _allAllocationQty + _chnlAllocationQty);
                                    }
                                    else
                                    {
                                        _errMsg = "You cannot exceed the allocation qty. Available Balance : " + _chnlAllocationQty;
                                    }
                                    _err = new InventoryRequestItem();
                                    _err.Itri_itm_stus_desc = _errMsg;
                                    _err.Itri_itm_cd = item.Peo.Itri_itm_cd;
                                    _err.Itri_itm_stus = item.Peo.Itri_itm_stus;
                                    _errList.Add(_err);
                                }
                            }
                        }
                    }
                }
            }
            #endregion
            return _errList;
        }

        //Lakshan 04 Nov 2016
        public Int32 UpdateItemAllocationDataFIFODO(InventoryDAL _invDal, InventoryRequestItem _reqItm, InventoryRequest _req)
        {
            int _eff = 0;
            _generalDAL = new GeneralDAL();
            // MasterProfitCenter _mstProNew = new MasterProfitCenter();
            // _mstProNew = _invDal.GetProfitCenter(_req.Itr_com, _req.Itr_anal3);
            string _sbChnl = string.Empty;
            DataTable _getSbChnl = _invDal.GetChanelOnPC(_req.Itr_com, _req.Itr_anal3, "CHNL");
            if (_getSbChnl != null)
            {
                if (_getSbChnl.Rows.Count > 0)
                {
                    _sbChnl = _getSbChnl.Rows[0].Field<string>("mpi_val");
                }

            }

            //  MasterLocationNew _mstLocNew =_salesDAL.GetMasterLocations(new MasterLocationNew() { Ml_loc_cd = _req.Itr_loc, Ml_com_cd = _req.Itr_com }).FirstOrDefault();
            List<InventoryAllocateDetails> _chnlAllocation = _invDal.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
            {
                Isa_chnl = _sbChnl,//_mstProNew.Mpc_chnl,
                Isa_com = _req.Itr_com,
                Isa_itm_cd = _reqItm.Itri_itm_cd,
                Isa_itm_stus = _reqItm.Itri_itm_stus
            });

            if (_chnlAllocation != null)
            {
                foreach (InventoryAllocateDetails _chnAllData in _chnlAllocation)
                {
                    string _toEmail = "lakshan@abansgroup.com";
                    if (!string.IsNullOrEmpty(_toEmail))
                    {
                        _chnAllData.Isa_aloc_bqty = _reqItm.Itri_qty;
                        _invDal.UpdateItemAllocationData(_chnAllData);
                        _reqItm.Itri_qty = _reqItm.Itri_qty - _reqItm.Itri_qty;
                    }
                    else
                    {
                        //_chnAllData.Isa_aloc_bqty = _reqItm.Itri_qty;
                        _invDal.UpdateItemAllocationData(_chnAllData);
                        _reqItm.Itri_qty = _reqItm.Itri_qty - _chnAllData.Isa_aloc_bqty;
                    }
                }
            }
            return _eff;
        }

        //Rukshan
        public List<ReptPickHeader> GetReportPickHdrDetails(ReptPickHeader _obj)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetReportPickHdrDetails(_obj);
        }
        public MasterProfitCenter GetProfitCenter(string _company, string _profitCenter)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetProfitCenter(_company, _profitCenter);
        }
        //Lakshan 28 Jan 2017
        //public Int32 Delete_Serials_AOD(string compny, string location, Int32 userSeqNo, Int32 ser_id, string Item, string _mainSerila)
        //{
        //    ReptCommonDAL rcd = new ReptCommonDAL();
        //    Boolean rows = false;
        //    rows = rcd.Del_temp_pick_ser(compny, location, userSeqNo, ser_id, Item);
        //    string _Sid = ser_id.ToString();
        //    rows = rcd.Del_temp_pick_Subser(userSeqNo, _mainSerila, Item);

        //    rows = _inventoryDAL.Update_serialID_INS_AVAILABLE(compny, location, itemCD, ser_ID, availability);

        //    return rows;
        //}

        public int checkInsuvaluExcel(List<InventoryRequestItem> _updateRequest, string _com, bool _cont, out string _docNo, out int _Insvalue, out string _docIntr)
        {
            int result = 0;
            _docNo = "";
            _Insvalue = 0;
            _docIntr = "";
            bool _resUpdateErr = false;
            string _errro = "";
            string _documentNo = string.Empty;
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (_updateRequest != null)
                {
                    int _res = 0;
                    int seqno = 0;
                    bool _ins = false;
                    var _showroom = _updateRequest.GroupBy(x => new { x.Showroom }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                    foreach (var shor in _showroom)
                    {
                        var _SelectItemByshowroom = _updateRequest.Where(x => x.Showroom == shor.Peo.Showroom).ToList();
                        if (_cont == true)
                        {
                            _ins = true;
                        }
                        else
                        {
                            _ins = Check_MRN_Item_exceed_Ins(_SelectItemByshowroom, _com, shor.Peo.Showroom, DateTime.Now.Date);
                        }
                        if (_ins == false)
                        {
                            _docNo = "Location insurance value exceeding-" + shor.Peo.Showroom;
                            _Insvalue = 1;
                            result = -1;
                            _inventoryDAL.TransactionRollback();
                            return result;
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _docNo = ex.Message;
            }



            return result;

        }

        //RUKSHAN 2017 FEB 02
        public List<ReptPickItems> GET_TEMP_PICK_ITM_GROUP(string _seq)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_ITM_GROUP(_seq);
        }
        //Lakshan 06 Feb 2017
        public DataTable SearchSerialsByProductionNo(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSerialsByProductionNo(_initialSearchParams, _searchCatergory, _searchText);
        }
        public decimal GET_INR_LOC_BALANCE_BY_COM(InventoryLocation _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_LOC_BALANCE_BY_COM(_obj);
        }

        public List<InventoryRequest> GET_INT_REQ(InventoryRequest _OBJ)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQ(_OBJ);
        }
        public List<InventoryRequest> GET_INT_REQPRISSUE(InventoryRequest _OBJ)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_REQPRISSUE(_OBJ);
        }
        public int ProductionIssue(InventoryHeader _HDR, List<ReptPickSerials> _adjminusserial, List<ReptPickSerials> _adjplusserial, string _fromloc, string _toloc, out string error, string _prodno)
        {
            int result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                //_ScmCommonDAL.ConnectionOpen();
                //_ScmCommonDAL.BeginTransaction();

                MasterAutoNumber masterAuto = new MasterAutoNumber();
                #region Fill MasterAutoNumber
                masterAuto.Aut_cate_cd = _HDR.Ith_loc;
                masterAuto.Aut_cate_tp = "LOC";
                masterAuto.Aut_direction = null;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "ADJ";
                masterAuto.Aut_number = 5;//what is Aut_number
                masterAuto.Aut_start_char = "ADJ";
                masterAuto.Aut_year = null;
                #endregion

                string _minusdoc = string.Empty;
                string _genSalesDoc = string.Empty;
                string _genInventoryDoc = string.Empty;
                error = string.Empty;
                #region validation add by lakshan 05 jun 2017
                List<TmpValidation> _errorList = new List<TmpValidation>();
                List<TmpValidation> _dataList = new List<TmpValidation>();
                TmpValidation _data = new TmpValidation();
                TmpValidation _err = new TmpValidation();
                InventoryLocation _tmpLocBal = new InventoryLocation();

                List<InventoryRequestItem> _reqItmList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(_HDR.Ith_manual_ref);
                List<ProductionFinGood> _proFinGood = _salesDAL.GETFINGOD(_HDR.Ith_oth_docno);
                //Inventory.GetItemKitComponentSplit(_kitCom);
                List<ItemKitComponent> _kitComList = _inventoryDAL.GetItemKitComponentSplit(new ItemKitComponent() { MIKC_ITM_CODE_MAIN = _proFinGood[0].SPF_ITM, MIKC_ACTIVE = 1 });
                bool _isValidAdjQty = false;

                decimal _fgQty = _adjplusserial.Sum(c => c.Tus_qty);
                foreach (var _kit in _kitComList)
                {
                    _data = new TmpValidation();
                    _data.itemCode = _kit.MIKC_ITM_CODE_COMPONENT;
                    _data.Pro_no_of_kit_qty = _kit.MIKC_NO_OF_UNIT;
                    _data.Pro_kit_out_qty = _data.Pro_no_of_kit_qty * _fgQty;
                    if (_adjminusserial != null)
                    {
                        //var _serList = _adjminusserial.Where(c => c.Tus_itm_cd == _data.itemCode == c.Tus_itm_stus = "GOD").ToList();
                        //if (_serList!=null)
                        //{
                        //    _data.Pick_qty = _serList.Sum(c => c.Tus_qty);        
                        //}
                    }
                    if (_data.Pro_kit_out_qty == _data.Pick_qty)
                    {
                        _dataList.Add(_data);
                    }
                    else
                    {
                        _err = new TmpValidation();
                        _err.errorMsg = "Invalid quentity found ";
                        _errorList.Add(_err);
                    }
                }
                #endregion
                #region ADJMinus
                _HDR.Ith_direct = false;
                result = ADJMinus2(_HDR, _adjminusserial, null, masterAuto, out _minusdoc, _inventoryRepDAL, _inventoryDAL);
                if (result == -1)
                {
                    error = _minusdoc;
                    result = -1;
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    return result;
                }
                #endregion

                List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                _BATCH = _inventoryDAL.GETInventorybatch(_HDR.Ith_com, _HDR.Ith_seq_no.ToString());
                decimal cost = 0;
                if (_BATCH.Count > 0)
                {
                    cost = _BATCH.Sum(item => item.Inb_unit_cost * item.Inb_qty);//Added By Dualj To Calculate Sum
                }
                decimal qty = 1;
                if (_adjplusserial.Count > 0)
                {
                    qty = _adjplusserial.Sum(item => item.Tus_qty);//Added By Dualj To Calculate Sum
                }


                #region ADJPlus
                foreach (ReptPickSerials _SER in _adjplusserial)
                {
                    _SER.Tus_base_doc_no = _minusdoc;
                    _SER.Tus_doc_no = _minusdoc;
                    _SER.Tus_unit_cost = ((_SER.Tus_unit_cost + cost) / qty);
                }
                if (result > 0)
                {
                    _HDR.Ith_direct = true;
                    _HDR.Ith_seq_no = 0;
                    _HDR.Ith_oth_docno = _minusdoc;
                    foreach (var item in _adjplusserial)
                    {

                    }
                    result = ADJPlus2(_HDR, _adjplusserial, null, masterAuto, out _minusdoc, _inventoryDAL, _inventoryRepDAL, _ScmCommonDAL);

                    if (result==-2)
                    {
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        error = "Duplicate Serial Found!";
                        return result;
                    }
                }
                #endregion

                if (result > 0)
                {

                    #region Inventory AutoNumber
                    MasterAutoNumber _inventoryAuto = new MasterAutoNumber();
                    _inventoryAuto.Aut_cate_cd = _toloc;
                    _inventoryAuto.Aut_cate_tp = "LOC";
                    _inventoryAuto.Aut_direction = null;
                    _inventoryAuto.Aut_modify_dt = null;
                    _inventoryAuto.Aut_moduleid = string.Empty;
                    _inventoryAuto.Aut_start_char = string.Empty;
                    _inventoryAuto.Aut_modify_dt = null;
                    _inventoryAuto.Aut_year = DateTime.Now.Year;
                    #endregion
                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    #region Inventory Header Value Assign
                    _inventoryHeader.Ith_acc_no = string.Empty;
                    _inventoryHeader.Ith_anal_1 = string.Empty;
                    _inventoryHeader.Ith_anal_10 = false;//Direct AOD
                    _inventoryHeader.Ith_anal_11 = false;
                    _inventoryHeader.Ith_anal_12 = false;
                    _inventoryHeader.Ith_anal_2 = string.Empty;
                    _inventoryHeader.Ith_anal_3 = string.Empty;
                    _inventoryHeader.Ith_anal_4 = string.Empty;
                    _inventoryHeader.Ith_anal_5 = string.Empty;
                    _inventoryHeader.Ith_anal_6 = 0;
                    _inventoryHeader.Ith_anal_7 = 0;
                    _inventoryHeader.Ith_anal_8 = DateTime.Now.Date;
                    _inventoryHeader.Ith_anal_9 = DateTime.Now.Date;
                    _inventoryHeader.Ith_bus_entity = string.Empty;
                    _inventoryHeader.Ith_cate_tp = string.Empty;
                    _inventoryHeader.Ith_channel = string.Empty;
                    _inventoryHeader.Ith_com = _HDR.Ith_com;
                    _inventoryHeader.Ith_com_docno = string.Empty;
                    _inventoryHeader.Ith_cre_by = _HDR.Ith_cre_by;
                    _inventoryHeader.Ith_cre_when = DateTime.Now.Date;
                    _inventoryHeader.Ith_del_add1 = string.Empty;
                    _inventoryHeader.Ith_del_add2 = string.Empty;
                    _inventoryHeader.Ith_del_code = string.Empty;
                    _inventoryHeader.Ith_del_party = string.Empty;
                    _inventoryHeader.Ith_del_town = string.Empty;
                    _inventoryHeader.Ith_direct = false;
                    _inventoryHeader.Ith_doc_date = DateTime.Now.Date;
                    _inventoryHeader.Ith_doc_no = string.Empty;
                    _inventoryHeader.Ith_doc_tp = string.Empty;
                    _inventoryHeader.Ith_doc_year = DateTime.Now.Date.Year;
                    _inventoryHeader.Ith_entry_no = _HDR.Ith_job_no;
                    _inventoryHeader.Ith_entry_tp = string.Empty;
                    _inventoryHeader.Ith_git_close = false;
                    _inventoryHeader.Ith_git_close_date = DateTime.Now.Date;
                    _inventoryHeader.Ith_git_close_doc = string.Empty;
                    _inventoryHeader.Ith_is_manual = false;
                    _inventoryHeader.Ith_isprinted = false;
                    _inventoryHeader.Ith_job_no = _HDR.Ith_job_no; ;//boq number
                    _inventoryHeader.Ith_loading_point = string.Empty;
                    _inventoryHeader.Ith_loading_user = string.Empty;
                    _inventoryHeader.Ith_loc = _HDR.Ith_loc;
                    _inventoryHeader.Ith_manual_ref = _HDR.Ith_cre_by; ;
                    _inventoryHeader.Ith_mod_by = _HDR.Ith_cre_by;
                    _inventoryHeader.Ith_mod_when = DateTime.Now.Date;
                    _inventoryHeader.Ith_noofcopies = 0;
                    _inventoryHeader.Ith_oth_loc = _toloc;
                    _inventoryHeader.Ith_oth_docno = _minusdoc;
                    _inventoryHeader.Ith_remarks = _HDR.Ith_remarks;
                    _inventoryHeader.Ith_sbu = string.Empty;
                    //_inventoryHeader.Ith_seq_no = 0; removed by Chamal 12-05-2013
                    _inventoryHeader.Ith_session_id = _HDR.Ith_session_id;
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_sub_tp = string.Empty;
                    _inventoryHeader.Ith_vehi_no = string.Empty;
                    _inventoryHeader.Ith_oth_com = _HDR.Ith_com;
                    _inventoryHeader.Ith_anal_1 = "0";
                    _inventoryHeader.Ith_anal_2 = string.Empty;

                    _inventoryHeader.Ith_sub_tp = "PRO";
                    _inventoryHeader.Ith_session_id = _HDR.Ith_session_id;
                    _inventoryHeader.Ith_vehi_no = _HDR.Ith_vehi_no;//add rukshan 06/jan/2016
                    //_inventoryHeader.Ith_anal_3 = ddlDeliver.SelectedItem.Text;//add rukshan 06/jan/2016



                    #endregion
                    #region add by lakshan 10Jan2018
                    List<ReptPickSerials> _outSerList = new List<ReptPickSerials>();
                    List<ReptPickSerials> _tmpOutSerList = new List<ReptPickSerials>();
                    ReptPickSerials _outSer = new ReptPickSerials();
                    MasterItem _mstItm = new MasterItem();
                    foreach (ReptPickSerials _SER in _adjplusserial)
                    {
                        _mstItm = _inventoryDAL.GetItemMaster(_SER.Tus_itm_cd);
                        if (_mstItm.Mi_is_ser1 == 1)
                        {
                            _outSer = _inventoryDAL.Get_all_details_on_serialID(_SER.Tus_com, _HDR.Ith_loc, _SER.Tus_bin, _SER.Tus_itm_cd, _SER.Tus_ser_id);
                            _outSerList.Add(_outSer);
                        }
                        else if (_mstItm.Mi_is_ser1 == 0)
                        {
                            _tmpOutSerList = _inventoryDAL.GetNonSerializedItemRandomlyByDateByDoc(_SER.Tus_com, _SER.Tus_loc, _SER.Tus_itm_cd, _SER.Tus_itm_cd, _SER.Tus_qty,
                                _inventoryHeader.Ith_doc_date, _minusdoc);
                            _outSerList.AddRange(_tmpOutSerList);
                        }
                        else
                        {
                            //not ad as per the dharshana 10Jan2018
                            var _vSerAva = _outSerList.Where(c => c.Tus_itm_cd == _SER.Tus_itm_cd && c.Tus_itm_stus == _SER.Tus_itm_stus &&
                                c.Tus_base_doc_no == _SER.Tus_base_doc_no && c.Tus_base_itm_line == _SER.Tus_base_itm_line).FirstOrDefault();
                            if (_vSerAva == null)
                            {
                                #region obj fill
                                _outSer = new ReptPickSerials();
                                _outSer.Tus_cre_by = _SER.Tus_cre_by;
                                _outSer.Tus_usrseq_no = _SER.Tus_usrseq_no;
                                _outSer.Tus_base_doc_no = _minusdoc;
                                _outSer.Tus_base_itm_line = _SER.Tus_base_itm_line;
                                _outSer.Tus_itm_desc = _mstItm.Mi_shortdesc;
                                _outSer.Tus_itm_model = _mstItm.Mi_model;
                                _outSer.Tus_com = _SER.Tus_com;
                                _outSer.Tus_loc = _SER.Tus_loc;
                                _outSer.Tus_bin = _SER.Tus_bin;
                                _outSer.Tus_itm_cd = _SER.Tus_itm_cd;
                                _outSer.Tus_itm_stus = _SER.Tus_itm_stus;
                                _outSer.Tus_qty = _SER.Tus_qty;
                                _outSer.Tus_ser_1 = "N/A";
                                _outSer.Tus_ser_2 = "N/A";
                                _outSer.Tus_ser_3 = "N/A";
                                _outSer.Tus_ser_4 = "N/A";
                                _outSer.Tus_ser_id = 0;
                                _outSer.Tus_serial_id = "0";
                                _outSer.Tus_job_no = _SER.Tus_job_no;
                                _outSer.Tus_pgs_prefix = "";
                                _outSer.Tus_job_line = _SER.Tus_job_line;
                                _outSerList.Add(_outSer);
                                #endregion
                            }
                            else
                            {
                                _vSerAva.Tus_qty = _vSerAva.Tus_qty + _SER.Tus_qty;
                            }

                        }
                    }
                    #region validation
                    decimal _adjMinestot = _adjplusserial.Sum(c => c.Tus_qty);
                    decimal _aodOutTot = _outSerList.Sum(c => c.Tus_qty);
                    if (_adjMinestot != _aodOutTot)
                    {
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        error = "AOD and Adjesment serial mismatch !";
                        return result;
                    }
                    #endregion
                    #endregion
                    foreach (ReptPickSerials _SER in _outSerList)
                    {
                        _SER.Tus_new_remarks = "AOD-OUT";
                    }
                    // result = SaveCommonOutWardEntry(_HDR.Ith_com, null, _HDR.Ith_com, _HDR.Ith_job_no, _inventoryHeader, _inventoryAuto, null, null, _adjplusserial, null, out error, out _genSalesDoc, out _genInventoryDoc, false, false);
                    //AOD OUT
                    #region aod data
                    MasterLocation _loc = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc);
                    bool _isOtherLocAutoIn = false;
                    if (_loc.Ml_auto_ain && _loc.Ml_anal1 == "SCM2") _isOtherLocAutoIn = true;
                    string _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);

                    _inventoryHeader.Ith_doc_tp = "AOD"; _inventoryAuto.Aut_moduleid = "AOD"; _inventoryAuto.Aut_start_char = "AOD";
                    _inventoryAuto.Aut_direction = 0;
                    //if (_isInvalidManualDocType) 
                    //    if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) 
                    //        if (_inventoryHeader.Ith_anal_2 == "AOD")
                    //            _inventoryHeader.Ith_anal_1 = "0";
                    string _aodoutno = string.Empty;
                    _inventoryHeader.Ith_direct = false;
                    _inventoryHeader.Ith_seq_no = 0;
                    // _inventoryHeader.Ith_is_manual = _isManualSelect;
                    #endregion
                    result = SaveOutwardScanSerial(_inventoryHeader, _outSerList, null, null, false);
                    _inventoryHeader.Ith_doc_tp = "AOD"; _inventoryAuto.Aut_moduleid = "AOD"; _inventoryAuto.Aut_start_char = "AOD";
                    _inventoryAuto.Aut_direction = 0;
                    string aoudno = string.Empty;
                    result = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _genInventoryDoc);

                    var _scanItems = _adjplusserial.GroupBy(x => new { x.Tus_itm_cd, x.Tus_qty }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                    foreach (var itm in _scanItems)
                    {
                        decimal _QTY = itm.Peo.Tus_qty * itm.theCount;
                        _inventoryDAL.UPDATE_PROJECT_BYISSUE(_HDR.Ith_anal_2, itm.Peo.Tus_itm_cd, _QTY, _HDR.Ith_manual_ref);
                    }

                    if (result > 0)
                    {
                        result = 1;
                        error = _genInventoryDoc;
                        _inventoryDAL.TransactionCommit();
                        _inventoryRepDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                    }
                    else
                    {
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();

                    }
                }

            }

            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                error = ex.Message;
            }
            return result;
        }
        //Add by Lakshan 15 Feb 2017
        public int CancelIntertransferDocument(InventoryRequest _inventoryRequest)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                result = _inventoryDAL.CancelIntertransferDocument(_inventoryRequest);
                #region add reservation log update by lakshan 04 Mar 2017
                List<InventoryRequestItem> _reqList = new List<InventoryRequestItem>();
                _reqList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_inventoryRequest.Itr_req_no);
                if (_reqList != null)
                {
                    if (_reqList.Count > 0)
                    {
                        foreach (var item in _reqList)
                        {
                            if (!string.IsNullOrEmpty(item.Itri_res_no) && (item.Itri_res_no != "N/A"))
                            {

                                InventoryRequest _intMrn = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_req_no }).FirstOrDefault();
                                int _res = 0;
                                string _errro = "";
                                _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                {
                                    IRD_RES_NO = item.Itri_res_no,
                                    IRD_ITM_CD = item.Itri_itm_cd,
                                    IRD_ITM_STUS = item.Itri_itm_stus,
                                    IRD_RES_BQTY = (item.Itri_qty * -1)
                                });

                                INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                                _baseDocCancel.IRL_CURT_COM = _intMrn.Itr_com;
                                _baseDocCancel.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                _baseDocCancel.IRL_ORIG_DOC_TP = _intMrn.Itr_tp;
                                _baseDocCancel.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                                _baseDocCancel.IRL_CURT_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                _baseDocCancel.IRL_CURT_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                _baseDocCancel.IRL_RES_NO = item.Itri_res_no;
                                _baseDocCancel.IRL_ITM_CD = item.Itri_itm_cd;
                                _baseDocCancel.IRL_ITM_STUS = item.Itri_itm_stus;
                                _baseDocCancel.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                _baseDocCancel.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                _baseDocCancel.IRL_RES_QTY = item.Itri_qty;
                                _res = ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                                if (_res > 0)
                                {
                                    INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                    _refDocSave.IRL_CURT_COM = _intMrn.Itr_com;
                                    _refDocSave.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                    _refDocSave.IRL_ORIG_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                    _refDocSave.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                    _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                    _refDocSave.IRL_CURT_DOC_TP = "INV";
                                    _refDocSave.IRL_CURT_DOC_NO = item.Itri_res_no;
                                    _refDocSave.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                    _refDocSave.IRL_RES_NO = item.Itri_res_no;
                                    _refDocSave.IRL_ITM_CD = item.Itri_itm_cd;
                                    _refDocSave.IRL_ITM_STUS = item.Itri_itm_stus;
                                    _refDocSave.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                    _refDocSave.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                    _refDocSave.IRL_MOD_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                    _refDocSave.IRL_CRE_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                    _refDocSave.IRL_RES_QTY = item.Itri_qty;
                                    _res = ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                                }
                                if (_res < 1)
                                {
                                    _res = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();
                                    return _res;
                                }
                            }
                        }
                    }
                }
                #endregion

                if (result > 0)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    result = -1;
                }
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }

        //Add by Lakshan 15 Feb 2017
        public int CancelIntertransferDocumentBulk(List<InventoryRequest> _inventoryRequest)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                InventoryRequest _tmpInvReq = new InventoryRequest();
                foreach (InventoryRequest _tmp in _inventoryRequest)
                {
                    _tmpInvReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _tmp.Itr_req_no }).FirstOrDefault();
                    if (_tmpInvReq != null)
                    {
                        if (_tmpInvReq.Itr_tp == "INTR")
                        {
                            _inventoryDAL.CancelIntertransferDocument(_tmp);
                        }
                        else
                        {
                            _inventoryDAL.UpdateInventoryRequestStatusBulk(_tmp);
                        }
                    }
                    #region add reservation log update by lakshan 04 Mar 2017
                    List<InventoryRequestItem> _reqList = new List<InventoryRequestItem>();
                    _reqList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_tmp.Itr_req_no);
                    if (_reqList != null)
                    {
                        if (_reqList.Count > 0)
                        {
                            #region s
                            foreach (var item in _reqList)
                            {
                                if (!string.IsNullOrEmpty(item.Itri_res_no) && (item.Itri_res_no != "N/A"))
                                {

                                    InventoryRequest _intMrn = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _tmp.Itr_req_no }).FirstOrDefault();
                                    int _res = 0;
                                    string _errro = "";
                                    _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = item.Itri_res_no,
                                        IRD_ITM_CD = item.Itri_itm_cd,
                                        IRD_ITM_STUS = item.Itri_itm_stus,
                                        IRD_RES_BQTY = (item.Itri_qty * -1)
                                    });

                                    INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                                    _baseDocCancel.IRL_CURT_COM = _intMrn.Itr_com;
                                    _baseDocCancel.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                    _baseDocCancel.IRL_ORIG_DOC_TP = _intMrn.Itr_tp;
                                    _baseDocCancel.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                    _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                                    _baseDocCancel.IRL_CURT_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                    _baseDocCancel.IRL_CURT_DOC_NO = _intMrn.Itr_req_no;
                                    _baseDocCancel.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                    _baseDocCancel.IRL_RES_NO = item.Itri_res_no;
                                    _baseDocCancel.IRL_ITM_CD = item.Itri_itm_cd;
                                    _baseDocCancel.IRL_ITM_STUS = item.Itri_itm_stus;
                                    _baseDocCancel.IRL_MOD_BY_NEW = _tmp.Itr_mod_by;
                                    _baseDocCancel.IRL_MOD_SESSION = _tmp.Itr_session_id;
                                    _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                                    _baseDocCancel.IRL_CRE_BY = _tmp.Itr_cre_by;
                                    _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                                    _baseDocCancel.IRL_CRE_SESSION = _tmp.Itr_session_id;
                                    _baseDocCancel.IRL_RES_QTY = item.Itri_qty;
                                    _res = ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                                    if (_res > 0)
                                    {
                                        INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                        _refDocSave.IRL_CURT_COM = _intMrn.Itr_com;
                                        _refDocSave.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                        _refDocSave.IRL_ORIG_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                        _refDocSave.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                        _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                        _refDocSave.IRL_CURT_DOC_TP = "INV";
                                        _refDocSave.IRL_CURT_DOC_NO = item.Itri_res_no;
                                        _refDocSave.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                        _refDocSave.IRL_RES_NO = item.Itri_res_no;
                                        _refDocSave.IRL_ITM_CD = item.Itri_itm_cd;
                                        _refDocSave.IRL_ITM_STUS = item.Itri_itm_stus;
                                        _refDocSave.IRL_MOD_BY_NEW = _tmp.Itr_mod_by;
                                        _refDocSave.IRL_MOD_SESSION = _tmp.Itr_session_id;
                                        _refDocSave.IRL_MOD_DT = DateTime.Now;
                                        _refDocSave.IRL_CRE_BY = _tmp.Itr_cre_by;
                                        _refDocSave.IRL_CRE_DT = DateTime.Now;
                                        _refDocSave.IRL_CRE_SESSION = _tmp.Itr_session_id;
                                        _refDocSave.IRL_RES_QTY = item.Itri_qty;
                                        _res = ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                                    }
                                    if (_res < 1)
                                    {
                                        _res = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _inventoryDAL.ConnectionClose();
                                        return _res;
                                    }
                                }

                            }
                            #endregion
                        }
                    }
                    #endregion
                }
                //_inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                result = 1;
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }

        //Akila 2017/02/13
        public DataTable GetAuditMembers(string _comCode, string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetAuditMembers(_comCode, _jobNo);
        }

        public DataTable SearchAuditMembers(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            return _inventoryDAL.SearchAuditMembers(_initialSearchParams, _searchCatergory, _searchText);
        }

        //By Akila 2017/02/15
        public DataTable SearchAuditJobs(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime? _from, DateTime? _to)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.SearchAuditJobs(_initialSearchParams, _searchCatergory, _searchText, _from, _to);
        }

        //By Akila 201/02/15
        public DataTable GetAuditJobDetails(string _companyCode, string _locationCode, string _jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetAuditJobDetails(_companyCode, _locationCode, _jobNo);
        }
        //Lakshan 21 Feb 21
        public InventoryHeader GET_INT_HDR_DATA_BY_OTH_DOC_NO(string _docTp, string _othDocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INT_HDR_DATA_BY_OTH_DOC_NO(_docTp, _othDocNo);
        }

        public int SaveAuditMemebers(AuditMemebers _auditMemebers)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.SaveAuditMemebers(_auditMemebers);
        }
        //Lakshan 21 Feb 21
        public List<InventoryRequest> GET_SOA_REQ_DATA_FOR_INVOICE(string _invNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_SOA_REQ_DATA_FOR_INVOICE(_invNo);
        }

        //By Akila 2017/02/22
        public int ProcessStockCountJob(string _company, string _location, string _currentUser, List<PhsicalStockVerificationMain> _mainList, out string _errorMessgae)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            try
            {
                string _sessionId = _mainList.Select(x => x.Ausm_Session_Id).Distinct().First().ToString();
                string _modeBy = _mainList.Select(x => x.Ausm_Mod_By).Distinct().First().ToString();

                List<AuditJobItem> _itemList = new List<AuditJobItem>();
                List<AuditJobSerial> _serailList = new List<AuditJobSerial>();
                _serailList = _inventoryDAL.GetSerialDocDetailsByLocation(_company, _location);
                if (_serailList.Count > 0)
                {
                    var xList = (from _serials in _serailList
                                 group _serials by new { _serials.Audjs_ItemCode, _serials.Audjs_ItemStatus } into _serialGroup
                                 orderby _serialGroup.Key.Audjs_ItemCode
                                 select new
                                 {
                                     ItemCode = _serialGroup.Key.Audjs_ItemCode,
                                     ItemStatus = _serialGroup.Key.Audjs_ItemStatus,
                                     ItemCount = _serialGroup.Count()
                                 }).ToList();


                    //get distinct item codes
                    List<string> _distinctItems = _serailList.Select(x => x.Audjs_ItemCode).Distinct().ToList<string>();
                    if (_distinctItems != null)
                    {
                        //count db balance for each item
                        foreach (string _distinctItem in _distinctItems)
                        {
                            List<AuditJobSerial> _tmpItemList1 = _serailList.Where(x => x.Audjs_ItemCode == _distinctItem).ToList<AuditJobSerial>();
                            if (_tmpItemList1.Count > 0)
                            {
                                //Get distinct item status
                                List<string> _itemStatus = _tmpItemList1.Select(x => x.Audjs_ItemStatus).Distinct().ToList<string>();
                                if (_itemStatus.Count > 0)
                                {
                                    foreach (string _tmpStatus in _itemStatus)
                                    {
                                        int _itemCount = _serailList.Where(x => x.Audjs_ItemCode == _distinctItem && x.Audjs_ItemStatus == _tmpStatus).Select(x => x.Audjs_ItemCode).Count();

                                        // MasterItem _mstItm = _inventoryDAL.GetItem(_company, _distinctItem);
                                        AuditJobItem _item = new AuditJobItem();
                                        _item.Audji_itm = _distinctItem;
                                        _item.Audji_db_qty = Convert.ToDecimal(_itemCount);
                                        _item.Audji_stus = _tmpStatus;
                                        _itemList.Add(_item);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    DataTable dtCurrentBalance = _inventoryDAL.GetStockBalanceCurrent(_currentUser, null, null, null, null, null, null, null, null, 1, 0, _company, _location, "N", "N", "N", 0);

                    var stkverify = (from b in dtCurrentBalance.AsEnumerable()
                                     group b by new { Itemcode = b["item_code"] } into g
                                     select new
                                     {
                                         Itemcode1 = g.Key.Itemcode,
                                         ItemQty = g.Sum(x => x.Field<Decimal>("qty"))
                                     }).ToList();

                    for (int i = 0; i < stkverify.Count; i++)
                    {
                        //MasterItem _mstItm = _inventoryDAL.GetItem(_company, stkverify[i].Itemcode1.ToString());
                        AuditJobItem _item = new AuditJobItem();
                        _item.Audji_itm = stkverify[i].Itemcode1.ToString();
                        _item.Audji_db_qty = Convert.ToDecimal(stkverify[i].ItemQty.ToString());
                        _item.Audji_stus = "GOD";
                        //if (_mstItm != null)
                        //{
                        //    _item.Ausi_desc = _mstItm.Mi_shortdesc;
                        //}
                        _itemList.Add(_item);
                    }
                }

                //int _seq = _inventoryDAL.GetSerialID();
                string _job = null;
                if (_mainList.Count > 0)
                {
                    int _seq = Convert.ToInt32(_mainList[0].Ausm_seq);
                    _job = _mainList[0].Ausm_job;

                    foreach (PhsicalStockVerificationMain _mainItem in _mainList)
                    {
                        _inventoryDAL.SavePhysicalStockVerificationMain(_mainItem);
                    }

                    //Task _addItems = Task.Factory.StartNew(()=>AddAuditItems(_itemList, _seq, _job, _currentUser));
                    //Task _addSerials = Task.Factory.StartNew(() => AddAuditSerials(_serailList, _seq, _job, _currentUser));

                    //Task.WaitAll(_addItems, _addSerials);

                    if (_itemList.Count > 0) //Save to aud_svr_main
                    {
                        foreach (AuditJobItem _itm in _itemList)
                        {
                            _itm.Audji_seq = _seq;
                            _itm.Audji_job = _job;
                            _itm.Audji_cre_by = _currentUser;
                            _itm.Audji_session_id = _sessionId;
                            _inventoryDAL.SaveAuditJobItems(_itm);
                        }
                    }

                    if (_serailList.Count > 0)
                    {
                        foreach (AuditJobSerial _ser in _serailList)
                        {
                            _ser.Audjs_Seq = _seq;
                            _ser.Audjs_JobNo = _job;
                            _ser.Audjs_Type = "S";
                            _ser.Audjs_CreatedBy = _currentUser;
                            _ser.Audjs_ModBy = _modeBy;
                            _ser.Audjs_SessionId = _sessionId;
                            _inventoryDAL.SaveAuditJobSerails(_ser);
                        }
                    }
                }

                _errorMessgae = null;
                _inventoryDAL.TransactionCommit();
                //_jobNo = _job;
                //_serialList = _tempSerial;
                //_itemList = _tempItem;
                return 1;
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _errorMessgae = ex.Message;
                //_jobNo = "";
                //_serialList = null;
                //_itemList = null;
                return -1;
            }
        }
        public DataTable GET_CUSDEC_ITEM(string doc, string item)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GET_CUSDEC_ITEM(doc, item);
        }
        public Int32 ReservationLogDataUpdateCancel(INR_RES_LOG _obj, Int32 _updateTp, InventoryDAL _invDal, out string _err)
        {
            _err = string.Empty;
            Int32 _res = 0;
            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
            INR_RES_LOG _resLogSave = new INR_RES_LOG();
            INR_RES _resHdr = new INR_RES();
            INR_RES_DET _resDet = new INR_RES_DET();
            bool _resDetDataAva = false;
            bool _resLogDataAva = false;
            try
            {
                #region collect data 1
                _resHdr = _invDal.GET_INR_RES_DATA(new INR_RES() { IRS_RES_NO = _obj.IRL_RES_NO, IRS_COM = _obj.IRL_CURT_COM }).FirstOrDefault();
                _resDet = _invDal.GET_INR_RES_DET_DATA(new INR_RES_DET()
                {
                    IRD_RES_NO = _obj.IRL_RES_NO,
                    IRD_ITM_CD = _obj.IRL_ITM_CD,
                    IRD_ITM_STUS = _obj.IRL_ITM_STUS
                }).FirstOrDefault();
                if (_resDet != null)
                {
                    _resDetDataAva = true;
                }
                if (!_resDetDataAva)
                {
                    _res = -1;
                    _err = "Reservation detail data not found !";
                    return _res;
                }
                #endregion
                if (_updateTp == 0)//Insert
                {
                    #region collect data 2
                    INR_RES_LOG _resObj = new INR_RES_LOG();
                    _resObj.IRL_RES_NO = _obj.IRL_RES_NO;
                    _resObj.IRL_ITM_CD = _obj.IRL_ITM_CD;
                    _resObj.IRL_ITM_STUS = _obj.IRL_ITM_STUS;
                    _resObj.IRL_CURT_COM = _obj.IRL_CURT_COM;
                    _resObj.IRL_CURT_LOC = _obj.IRL_CURT_LOC;
                    _resObj.IRL_CURT_DOC_NO = _obj.IRL_ORIG_DOC_NO;
                    _resObj.IRL_CURT_DOC_TP = _obj.IRL_ORIG_DOC_TP;
                    _resObj.IRL_ACT = 1;
                    if (_obj.IRL_CURT_DOC_TP == "AOD-IN")
                    {
                        _resObj.IRL_CURT_COM = "GIT";
                        _resObj.IRL_CURT_LOC = "GIT";
                    }
                    _resLogAvaData = _invDal.GET_INR_RES_LOG_DATA_NEW(_resObj);

                    if (_resLogAvaData != null)
                    {
                        if (_resLogAvaData.Count > 0)
                        {
                            _resLogDataAva = true;
                        }
                    }
                    if (!_resLogDataAva)
                    {
                        _res = -1;
                        _err = "Reservation log data not found !";
                        return _res;
                    }
                    #endregion
                    if (_resLogAvaData.Count > 0)
                    {
                        #region update temp bal column
                        INR_RES_LOG _tmpLogRes = new INR_RES_LOG();
                        foreach (var _tmpResData in _resLogAvaData)
                        {
                            _tmpLogRes = INR_RES_LOG.CreateNewObject(_tmpResData);
                            _tmpResData.TMP_IRL_RES_BQTY = _tmpResData.IRL_RES_BQTY;
                        }
                        #endregion
                        _resLogAvaData = _resLogAvaData.OrderBy(c => c.IRL_CURT_DOC_DT).ToList();
                        //Update process
                        while (_obj.IRL_RES_QTY > 0)
                        {
                            decimal _reAvaCount = 0;
                            if (_resLogAvaData.Count > 0)
                            {
                                _reAvaCount = _resLogAvaData.Sum(c => c.IRL_RES_BQTY);
                            }
                            if (_reAvaCount <= 0)
                            {
                                break;
                            }

                            foreach (var _resAva in _resLogAvaData)
                            {
                                if (_obj.IRL_RES_QTY > 0)
                                {
                                    if (_resAva.IRL_RES_BQTY > 0)
                                    {
                                        //if (_resAva.TMP_IRL_RES_BQTY >= _obj.IRL_RES_QTY)
                                        if (_obj.IRL_RES_QTY <= _resAva.IRL_RES_BQTY)
                                        {
                                            #region if available balance equal or grater
                                            #region update
                                            _resLogSave = new INR_RES_LOG();
                                            _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                            _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                            _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                            _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                            _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                            _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                            _resLogSave.IRL_LINE = _resAva.IRL_LINE;


                                            _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_QTY;
                                            _resAva.IRL_RES_BQTY = _resAva.IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                            //_resAva.TMP_IRL_RES_BQTY = _resAva.TMP_IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_ACT = _resAva.IRL_RES_BQTY <= 0 ? 0 : 1;
                                            _res = _invDal.InrResLogDataUpdateIssue(_resLogSave);
                                            #endregion
                                            #region save
                                            _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;

                                            _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                            _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_QTY = _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_RES_BQTY = _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_RES_IQTY = 0;
                                            _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                            _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                            _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                            _resLogSave.IRL_ACT = _resLogSave.IRL_RES_BQTY <= 0 ? 0 : 1;

                                            _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                            _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                            _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                            {
                                                _resLogSave.IRL_CURT_COM = "GIT";
                                                _resLogSave.IRL_CURT_LOC = "GIT";
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                            {
                                                _resLogSave.IRL_RES_BQTY = 0;
                                                _resLogSave.IRL_RES_IQTY = _resLogSave.IRL_RES_QTY;
                                                _resLogSave.IRL_ACT = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                            {
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            _resLogSave.IRL_BASE_LINE = _resAva.IRL_LINE;
                                            _res = _invDal.InrResLogDataSave(_resLogSave);
                                            #endregion
                                            _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _obj.IRL_RES_QTY;
                                            #endregion
                                        }
                                        else
                                        {
                                            #region if available balance  less
                                            _resLogSave = new INR_RES_LOG();
                                            _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                            _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                            _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                            _resLogSave.IRL_RES_IQTY = _resAva.IRL_RES_BQTY;
                                            _resAva.IRL_RES_BQTY = 0;
                                            // _resAva.TMP_IRL_RES_BQTY = 0;
                                            _resLogSave.IRL_ACT = 0;
                                            _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                            _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                            _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                            _resLogSave.IRL_LINE = _resAva.IRL_LINE;
                                            _res = _invDal.InrResLogDataUpdateIssue(_resLogSave);

                                            _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                            _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_QTY = _resLogSave.IRL_RES_IQTY;
                                            _resLogSave.IRL_RES_BQTY = _resLogSave.IRL_RES_IQTY;
                                            _resLogSave.IRL_RES_IQTY = 0;
                                            _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                            _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                            _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                            _resLogSave.IRL_ACT = 1;

                                            _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                            _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                            _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                            {
                                                _resLogSave.IRL_CURT_COM = "GIT";
                                                _resLogSave.IRL_CURT_LOC = "GIT";
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "INV")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                            {
                                                _resLogSave.IRL_RES_BQTY = 0;
                                                _resLogSave.IRL_RES_IQTY = _resLogSave.IRL_RES_QTY;
                                                _resLogSave.IRL_ACT = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                            {
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            _resLogSave.IRL_BASE_LINE = _resAva.IRL_LINE;
                                            _res = _invDal.InrResLogDataSave(_resLogSave);
                                            _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _resLogSave.IRL_RES_QTY;
                                            if (_obj.IRL_RES_QTY == 0)
                                            {
                                                continue;
                                            }
                                            #endregion
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();
                _res = -1;
            }
            return _res;
        }

        //By Akila 2017/02/27
        public void UploadPhysicallyAvailableSerials(string _company, string _location, List<string> _serialList, string _jobNo, int _seqNo, string _userId, bool _isExcessItem, string _itemCode, string _sessionId, out string _message)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                int updatedCount = 0;
                if (_serialList.Count > 0)
                {
                    foreach (string _serial in _serialList)
                    {
                        if (_isExcessItem)
                        {
                            //Load excess items details
                            DataTable _excessItems = new DataTable();
                            _excessItems = _inventoryDAL.GetExcessItems(_serial, _company, _location, _itemCode);
                            if (_excessItems.Rows.Count > 0)
                            {
                                foreach (DataRow _item in _excessItems.Rows)
                                {
                                    AuditJobSerial _excessSerial = new AuditJobSerial();
                                    _excessSerial.Audjs_Seq = _seqNo;
                                    _excessSerial.Audjs_JobNo = _jobNo;
                                    _excessSerial.Audjs_Type = "S";
                                    _excessSerial.Audjs_CreatedBy = _userId;
                                    _excessSerial.Audjs_SerialNo = _serial;
                                    _excessSerial.Audjs_ItemCode = _item["ins_itm_cd"] == DBNull.Value ? string.Empty : _item["ins_itm_cd"].ToString();
                                    _excessSerial.Audjs_ItemStatus = _item["ins_itm_stus"] == DBNull.Value ? string.Empty : _item["ins_itm_stus"].ToString();
                                    _excessSerial.Audjs_WarrantyNo = _item["ins_warr_no"] == DBNull.Value ? string.Empty : _item["ins_warr_no"].ToString();
                                    _excessSerial.Audjs_SerialId = Convert.ToInt32(_item["ins_ser_id"].ToString());
                                    _excessSerial.Audjs_ModBy = _userId;
                                    _excessSerial.Audjs_SessionId = _sessionId;

                                    updatedCount += _inventoryDAL.SaveAuditJobSerails(_excessSerial);
                                }
                            }
                            else
                            {
                                AuditJobSerial _excessSerial = new AuditJobSerial();
                                _excessSerial.Audjs_Seq = _seqNo;
                                _excessSerial.Audjs_JobNo = _jobNo;
                                _excessSerial.Audjs_Type = "S";
                                _excessSerial.Audjs_CreatedBy = _userId;
                                _excessSerial.Audjs_SerialNo = _serial;
                                _excessSerial.Audjs_ItemCode = _itemCode;
                                _excessSerial.Audjs_ModBy = _userId;
                                _excessSerial.Audjs_SessionId = _sessionId;
                                _excessSerial.Audjs_ItemStatus = "GOD";//add by tharanga 2018/04/18
                                updatedCount += _inventoryDAL.SaveAuditJobSerails(_excessSerial);
                            }
                        }
                        else
                        {
                            //Update the physically available serial in aud_job_ser
                            int effectedCount = _inventoryDAL.UpdatePhysicallyAvailableSerials(_serial, _jobNo, _userId, _sessionId);
                            updatedCount += effectedCount;
                            if (effectedCount < 1)
                            {
                                //get serial details for given serail
                                List<AuditJobSerial> _newSerials = new List<AuditJobSerial>();
                                _newSerials = _inventoryDAL.GetSerialDocDetailsBySerial(_company, _location, _serial);
                                if (_newSerials.Count > 0)
                                {
                                    //if new serails available, it will added to the aud_job_serial table
                                    foreach (AuditJobSerial _ser in _newSerials)
                                    {
                                        _ser.Audjs_Seq = _seqNo;
                                        _ser.Audjs_JobNo = _jobNo;
                                        _ser.Audjs_Type = "S";
                                        _ser.Audjs_CreatedBy = _userId;
                                        _ser.Audjs_PhysicallyAvailableSerial = _serial;
                                        _ser.Audjs_ModBy = _userId;
                                        _ser.Audjs_SessionId = _sessionId;
                                        updatedCount += _inventoryDAL.SaveAuditJobSerails(_ser);
                                    }
                                }
                            }
                        }
                    }
                }
                if (updatedCount < 1) { _message = "Serial information not found. zero record updated"; }
                else { _message = null; }
                // _message = null;
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _message = ex.Message;
            }
        }

        //By Akila 2017/03/6
        public List<AuditJobItem> GetProcessedJobItems(string _subJobNo, Int32 _startIndex, Int32 _endIndex)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetProcessedJobItems(_subJobNo, _startIndex, _endIndex);
        }

        //By Akila 2017/03/6
        public List<AuditJobSerial> GetProcessedJobSerials(string _subJobNo, Int32 _startIndex, Int32 _endIndex, Int32 _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetProcessedJobSerials(_subJobNo, _startIndex, _endIndex, _status);
        }

        public void SaveAuditNotes(List<AuditJobSerial> _auditNotes, out string _message)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            _message = null;

            try
            {
                if (_auditNotes.Count > 0)
                {
                    foreach (AuditJobSerial _note in _auditNotes)
                    {
                        _inventoryDAL.SaveAuditJobSerails(_note);
                    }
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
        }

        public Int32 UpdateAuditHeaderDetails(string _company, string _location, string _jobNo, string _userId, Int32 _jobStatus, string _sessionId, out string _message)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            _message = null;
            int effects = 0;

            try
            {
                effects = _inventoryDAL.UpdateAuditHeader(_company, _location, _jobNo, _userId, _jobStatus, _sessionId);
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
            return effects;
        }
        //Lakshan 09 Mar 2017 copy of UpdateInventoryRequestStatus
        public int CancelMaterialRequestNote(InventoryRequest _inventoryRequest)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                result = _inventoryDAL.UpdateInventoryRequestStatus(_inventoryRequest);
                #region add reservation log update by lakshan 04 Mar 2017
                List<InventoryRequestItem> _reqList = new List<InventoryRequestItem>();
                _reqList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_inventoryRequest.Itr_req_no);
                if (_reqList != null)
                {
                    if (_reqList.Count > 0)
                    {
                        foreach (var item in _reqList)
                        {
                            if (!string.IsNullOrEmpty(item.Itri_res_no) && (item.Itri_res_no != "N/A"))
                            {

                                InventoryRequest _intMrn = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryRequest.Itr_req_no }).FirstOrDefault();
                                int _res = 0;
                                string _errro = "";
                                _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                {
                                    IRD_RES_NO = item.Itri_res_no,
                                    IRD_ITM_CD = item.Itri_itm_cd,
                                    IRD_ITM_STUS = item.Itri_itm_stus,
                                    IRD_RES_BQTY = (item.Itri_qty * -1)
                                });

                                INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                                _baseDocCancel.IRL_CURT_COM = _intMrn.Itr_com;
                                _baseDocCancel.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                _baseDocCancel.IRL_ORIG_DOC_TP = _intMrn.Itr_tp;
                                _baseDocCancel.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                                _baseDocCancel.IRL_CURT_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                _baseDocCancel.IRL_CURT_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                _baseDocCancel.IRL_RES_NO = item.Itri_res_no;
                                _baseDocCancel.IRL_ITM_CD = item.Itri_itm_cd;
                                _baseDocCancel.IRL_ITM_STUS = item.Itri_itm_stus;
                                _baseDocCancel.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                _baseDocCancel.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                _baseDocCancel.IRL_RES_QTY = item.Itri_qty;
                                _res = ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                                if (_res > 0)
                                {
                                    INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                    _refDocSave.IRL_CURT_COM = _intMrn.Itr_com;
                                    _refDocSave.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                    _refDocSave.IRL_ORIG_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                    _refDocSave.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                    _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                    _refDocSave.IRL_CURT_DOC_TP = "INV";
                                    _refDocSave.IRL_CURT_DOC_NO = item.Itri_res_no;
                                    _refDocSave.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                    _refDocSave.IRL_RES_NO = item.Itri_res_no;
                                    _refDocSave.IRL_ITM_CD = item.Itri_itm_cd;
                                    _refDocSave.IRL_ITM_STUS = item.Itri_itm_stus;
                                    _refDocSave.IRL_MOD_BY_NEW = _inventoryRequest.Itr_mod_by;
                                    _refDocSave.IRL_MOD_SESSION = _inventoryRequest.Itr_session_id;
                                    _refDocSave.IRL_MOD_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_BY = _inventoryRequest.Itr_cre_by;
                                    _refDocSave.IRL_CRE_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_SESSION = _inventoryRequest.Itr_session_id;
                                    _refDocSave.IRL_RES_QTY = item.Itri_qty;
                                    _res = ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                                }
                                if (_res < 1)
                                {
                                    _res = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();
                                    return _res;
                                }
                            }
                        }
                    }
                }
                #endregion
                //_inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                result = 1;
            }
            catch
            {
                _inventoryDAL.TransactionRollback();
                result = -1;
            }
            return result;
        }
        //subodana 2017-03-18
        public List<Model_Specific> Get_Model_Specific_Data(string model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Model_Specific_Data(model);
        }
        //Add by Rukshan 11/Feb/2016 update by lakshan 20 MAr 2017 //CANCEL_MRN
        public int CancelDistributionApprovedDocument(string _com, string _loc, string _reqno, string _status, string _modby, DateTime _moddate, InventoryRequest _invReq, out string _err)
        {
            Int32 effect = 0;
            _err = "";
            try
            {

                _inventoryDAL = new InventoryDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryDAL.CANCEL_MRN(_com, _loc, _reqno, _status, _modby, _moddate);
                #region add reservation log update by lakshan 04 Mar 2017
                List<InventoryRequestItem> _reqList = new List<InventoryRequestItem>();
                _reqList = _inventoryDAL.GET_INT_REQ_ITM_DATA_BY_REQ_NO(_reqno);
                if (_reqList != null)
                {
                    if (_reqList.Count > 0)
                    {
                        string _errro = "";
                        foreach (var item in _reqList)
                        {
                            if (!string.IsNullOrEmpty(item.Itri_res_no) && (item.Itri_res_no != "N/A"))
                            {
                                InventoryRequest _intMrn = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _reqno }).FirstOrDefault();
                                int _res = 0;


                                INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                                _baseDocCancel.IRL_CURT_COM = _intMrn.Itr_com;
                                _baseDocCancel.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                _baseDocCancel.IRL_ORIG_DOC_TP = _intMrn.Itr_tp;
                                _baseDocCancel.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                                _baseDocCancel.IRL_CURT_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                _baseDocCancel.IRL_CURT_DOC_NO = _intMrn.Itr_req_no;
                                _baseDocCancel.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                _baseDocCancel.IRL_RES_NO = item.Itri_res_no;
                                _baseDocCancel.IRL_ITM_CD = item.Itri_itm_cd;
                                _baseDocCancel.IRL_ITM_STUS = item.Itri_itm_stus;
                                _baseDocCancel.IRL_MOD_BY_NEW = _invReq.Itr_mod_by;
                                _baseDocCancel.IRL_MOD_SESSION = _invReq.Itr_session_id;
                                _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_BY = _invReq.Itr_cre_by;
                                _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                                _baseDocCancel.IRL_CRE_SESSION = _invReq.Itr_session_id;
                                _baseDocCancel.IRL_RES_QTY = item.Itri_qty;
                                _res = ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                                if (_res > 0)
                                {
                                    INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                    _refDocSave.IRL_CURT_COM = _intMrn.Itr_com;
                                    _refDocSave.IRL_CURT_LOC = _intMrn.Itr_issue_from;
                                    _refDocSave.IRL_ORIG_DOC_TP = _intMrn.Itr_tp + "_CANCL";
                                    _refDocSave.IRL_ORIG_DOC_NO = _intMrn.Itr_req_no;
                                    _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                    _refDocSave.IRL_CURT_DOC_TP = "MRN";
                                    _refDocSave.IRL_CURT_DOC_NO = _intMrn.Itr_ref;
                                    _refDocSave.IRL_CURT_DOC_DT = _intMrn.Itr_dt;
                                    _refDocSave.IRL_RES_NO = item.Itri_res_no;
                                    _refDocSave.IRL_ITM_CD = item.Itri_itm_cd;
                                    _refDocSave.IRL_ITM_STUS = item.Itri_itm_stus;
                                    _refDocSave.IRL_MOD_BY_NEW = _invReq.Itr_mod_by;
                                    _refDocSave.IRL_MOD_SESSION = _invReq.Itr_session_id;
                                    _refDocSave.IRL_MOD_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_BY = _invReq.Itr_cre_by;
                                    _refDocSave.IRL_CRE_DT = DateTime.Now;
                                    _refDocSave.IRL_CRE_SESSION = _invReq.Itr_session_id;
                                    _refDocSave.IRL_RES_QTY = item.Itri_qty;
                                    _res = ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                                }
                                if (_res < 1)
                                {
                                    _res = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryDAL.ConnectionClose();
                                    _err = _errro;
                                    return _res;
                                }
                            }
                        }
                    }
                }
                #endregion
                _inventoryDAL.TransactionCommit();

                // effect = 1;
            }
            catch (Exception ex)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }
        //Nuwan 2017.03.17 get doc details for genarate AOD
        public ReptPickHeader getTemporyHeaderDetails(string docno, string doctype, string company, out string error)
        {
            error = string.Empty;
            ReptPickHeader rptHdr = new ReptPickHeader();
            try
            {
                _inventoryDAL = new InventoryDAL();
                rptHdr = _inventoryDAL.getTemporyHeaderDoument(docno, doctype, company);
                return rptHdr;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return rptHdr;
            }
        }
        //nuwan 2017.03.18
        public List<ReptPickSerials> getScanedSerials(Int32 seqNo, out string error)
        {
            error = string.Empty;
            List<ReptPickSerials> res = new List<ReptPickSerials>();
            try
            {
                _inventoryDAL = new InventoryDAL();
                res = _inventoryDAL.getScannedSerial(seqNo);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public List<ReptPickItems> getScanedItems(Int32 seqNo, out string error)
        {
            error = string.Empty;
            List<ReptPickItems> res = new List<ReptPickItems>();
            try
            {
                _inventoryDAL = new InventoryDAL();
                res = _inventoryDAL.getScanedItems(seqNo);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public InventoryHeader getIntHdrData(string docno, string location, string company, out string error)
        {
            error = string.Empty;
            InventoryHeader res = new InventoryHeader();
            try
            {
                _inventoryDAL = new InventoryDAL();
                res = _inventoryDAL.getIntHdrData(docno, location, company);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        ////By Akila
        //private void AddAuditItems(List<AuditJobItem> _items, int _seq, string _job, string _user)
        //{
        //    if (_items.Count > 0) //Save to aud_svr_main
        //    {
        //        foreach (AuditJobItem _itm in _items)
        //        {
        //            _itm.Audji_seq = _seq;
        //            _itm.Audji_job = _job;
        //            _itm.Audji_cre_by = _user;
        //            _inventoryDAL.SaveAuditJobItems(_itm);
        //        }
        //    }
        //}

        //private void AddAuditSerials(List<AuditJobSerial> _serials, int _seq, string _job, string _user)
        //{
        //    if (_serials.Count > 0)
        //    {
        //        foreach (AuditJobSerial _ser in _serials)
        //        {
        //            _ser.Audjs_Seq = _seq;
        //            _ser.Audjs_JobNo = _job;
        //            _ser.Audjs_Type = "S";
        //            _ser.Audjs_CreatedBy = _user;
        //            _inventoryDAL.SaveAuditJobSerails(_ser);
        //        }
        //    }
        //}

        //Akila 2017/03/21
        public DataTable GetAuditItemSummery(string _subJobNo)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetAuditItemSummery(_subJobNo);
        }

        //Akila 2017/03/25
        public List<AuditJobSerial> GetAuditSerialDetails(string _subJobNo, int _searchOption, string _serialNo)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetAuditSerialDetails(_subJobNo, _searchOption, _serialNo);
        }

        //Akila 201/03/27
        public List<AuditJobSerial> GetRemarkedSerials(string _subJobNo)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetRemarkedSerials(_subJobNo);
        }
        public List<RefPrdMt> GET_REF_PRD_MT_DATA(RefPrdMt _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_REF_PRD_MT_DATA(_obj);
        }
        //subodana
        public DataTable GET_AGE_DETAILS(string com, string item, DateTime fdate, DateTime tdate, Int32 mindate, Int32 maxdate, string type)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GET_AGE_DETAILS(com, item, fdate, tdate, mindate, maxdate, type);
        }
        // Udaya 31/03/2017
        public DataTable GetTechAllocationDetails(string com, string allocation, string modelNo, string itemNo, string jobNo, string chassisNo, string engineNo, string dateFrom, string dateTo, string aodNo, string locCode, string profitCenter)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetTechAllocationDetails(com, allocation, modelNo, itemNo, jobNo, chassisNo, engineNo, dateFrom, dateTo, aodNo, locCode, profitCenter);
        }
        // Udaya 31/03/2017
        public Int32 saveUpdate_TechnicianAllocation(List<TechAllocation> _TechAllocation, MasterAutoNumber mastAutoNo, out string doc, out string errMsg)
        {
            Int32 _effect = 0;
            doc = string.Empty;
            var _doc = string.Empty;
            errMsg = string.Empty;
            int chk = _TechAllocation.FindIndex(f => f.AlcoNo == null || f.AlcoNo == "");
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                if (_TechAllocation != null)
                {
                    if (mastAutoNo != null)
                    {
                        if (chk >= 0)
                        {
                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                            _doc = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _TechAllocation.ForEach(r => r.AlcoNo = _doc);
                            _effect = _inventoryDAL.UpdateAutoNumber(mastAutoNo);
                            doc = _doc;
                        }
                    }

                    int sline = 1;
                    foreach (TechAllocation _TechAllo in _TechAllocation)
                    {
                        _TechAllo.LineNo = sline;
                        _effect = _inventoryDAL.saveUpdate_TechnicianAllocation(_TechAllo);
                        sline++;
                    }
                }

                _inventoryDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                errMsg = err.Message;
                // _docNo = "ERROR : " + err.Message.ToString();
                _inventoryDAL.TransactionRollback();
            }
            return _effect;
        }

        // Udaya 03/04/2017
        public Int16 UpdateTechAlloSeqNo(MasterAutoNumber _masterAutoNumber)
        {
            _inventoryDAL = new InventoryDAL();//UpdateAutoNumber
            _inventoryDAL.ConnectionOpen();
            Int16 effect = _inventoryDAL.UpdateTechAlocAutoNumber(_masterAutoNumber);
            _inventoryDAL.ConnectionClose();
            return effect;
        }

        // Udaya 03/04/2017 
        public DataTable TechAlloSeqNo(string modid, string locid, string catid)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.TechAlloSeqNo(modid, locid, catid);
        }

        //Akila 2017/04/06
        public DataTable GetDamageAuditItemDetails(string _company, string _Location, string _serial, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetDamageAuditItemDetails(_company, _Location, _serial, _item);
        }

        public DataTable GetExcessItems(string _serialNo, string _company, string _location, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetExcessItems(_serialNo, _company, _location, _item);
        }
        public List<InventoryRequest> GetAllMaterialRequestsListAodScmWeb(InventoryRequest _inventoryRequest)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAllMaterialRequestsListAodScmWeb(_inventoryRequest);
        }
        //Add by Rukshan 09/sep/2015 modify by Lakshan
        public List<TempPopup> GetSupplierSerialForConsignmentReturn(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSupplierSerialForConsignmentReturn(_initialSearchParams, _searchCatergory, _searchText);
        }
        public List<ReptPickSerials> Search_serial_for_consignment(string company, string location, string itemCode, string status, string suplr, string _serial)
        {
            InventoryDAL _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Search_serial_for_consignment(company, location, itemCode, status, suplr, _serial);
        }

        //Akila 2017/04/20
        public DataTable GetRccDetails(string _company, string _location, string _serial, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRccDetails(_company, _location, _serial, _item);
        }

        public Int16 UpdatePhysicalStockHdr(PhysicalStockVerificationHdr _hdr)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.UpdatePhysicalStockHdr(_hdr);
        }

        //Akila 2017/04/24
        public DataTable GetInvNotDeliveredDetails(string _company, string _location, string _serial, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetInvNotDeliveredDetails(_company, _location, _serial, _item);
        }
        //subodana
        public DataTable GetFreqtyForLocation(string _company, string _location, string status, string _item, string document, string serialid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetFreqtyForLocation(_company, _location, status, _item, document, serialid);
        }

        //subodana
        public DataTable GetFreeoriginalqtyForLocation(string _company, string _location, string status, string _item)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetFreeoriginalqtyForLocation(_company, _location, status, _item);
        }
        //
        //nuwan
        public DataTable GetTepItemsBYCode(Int32 seqno, string itemcd, string userid = null, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemDetBycode(itemcd, seqno, userid, doctp);
        }
        //Nuwan
        public DataTable getItemExpStatus(string itemcd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemExpStatus(itemcd);
        }
        //Nuwan 
        public Int32 addDocumentPrint(string printdoc, string userId, string doctype, string sessionId, string loadingpoint, out string error)
        {
            error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                return _inventoryDAL.addDocumentPrint(printdoc, userId, doctype, sessionId, loadingpoint);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return -1;

            }

        }
        //Isuru 2017/04/26
        public List<PurchseOrderPrint> GetPurReqByDocnO(String Com, String Type, String OthDoc, string Loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPurReqByDocnO(Com, Type, OthDoc, Loc);
        }
        //Udaya 28/04/2017
        public List<TmpValidation> locQtyCheck(List<ReptPickSerials> _reptPickSerials, InventoryHeader _inventoryHeader, string locCode, string comCode)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            List<TmpValidation> qtyValues = new List<TmpValidation>();
            TmpValidation _tmpLocBalVal = new TmpValidation();
            _tmpLocBalVal.view = false;
            InventoryLocation _tmpLocBal = new InventoryLocation();
            List<MasterItemStatus> _ItemStatus = new List<MasterItemStatus>();
            string stus = string.Empty;
            var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus, x.Tus_base_itm_line }).Select(group => new { Peo = group.Key, pickQty = group.Sum(o => o.Tus_qty), resQty = group.Sum(o => o.Tus_resqty) });
            foreach (var _outSer in _serialItemData)
            {
                _tmpLocBalVal = new TmpValidation();
                _tmpLocBalVal.Inl_com = _inventoryHeader.Ith_com;
                _tmpLocBalVal.Inl_loc = _inventoryHeader.Ith_loc;
                _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                _tmpLocBalVal.Pick_qty = _outSer.pickQty;
                _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                {
                    Inl_com = _inventoryHeader.Ith_com,
                    Inl_loc = _inventoryHeader.Ith_loc,
                    Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                    Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                });
                _tmpLocBalVal.Inl_qty = _tmpLocBal.Inl_qty;
                _tmpLocBalVal.Inl_free_qty = _tmpLocBal.Inl_free_qty;
                _tmpLocBalVal.Inl_res_qty = _tmpLocBal.Inl_res_qty;
                _ItemStatus = _generalDAL.GetAllStockTypes(_inventoryHeader.Ith_com);

                if (!string.IsNullOrEmpty(_tmpLocBal.Inl_itm_stus))
                {
                    stus = _ItemStatus.Where(r => r.Mis_cd == _tmpLocBal.Inl_itm_stus).SingleOrDefault().Mis_desc.ToString();
                }
                _tmpLocBalVal.Inl_itm_stus = stus;

                if (_outSer.resQty > 0)
                {
                    if (_tmpLocBal.Inl_res_qty < _tmpLocBalVal.Pick_qty)
                    {
                        _tmpLocBalVal.errorMsg = "Resevation balance not avilable";
                        _tmpLocBalVal.view = true;
                        qtyValues.Add(_tmpLocBalVal);
                    }
                }
                else
                {
                    if (_tmpLocBal.Inl_free_qty < _tmpLocBalVal.Pick_qty)
                    {
                        _tmpLocBalVal.errorMsg = "Free balance not avilable";
                        _tmpLocBalVal.view = true;
                        qtyValues.Add(_tmpLocBalVal);
                    }
                }
            }
            return qtyValues;
        }
        public DataTable GetComponetUnit(string finishitem, string comitem)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetComponetUnit(finishitem, comitem);
        }

        //Akila 2017/05/18
        public int IsItemActive(string _item)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.IsItemActive(_item);
        }

        //Udaya 19/05/2017
        public void GRNExcelUploadValidation(DataTable GetExecelTbl, int _userSeqNo, List<ReptPickSerials> _resultItemsSerialList, string _userwarrid, string poNo, string SessionID, string UserCompanyCode, string UserID, string UserDefLoca, DataTable _test, string cdDate, string PORefNo, string Bincode, string EDate, string Mdate, out bool lblView, out string msg, out int value, out List<ReptPickSerials> _misMatchSerials)
        {
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            string statauscd = string.Empty;
            msg = string.Empty;
            value = 0;
            lblView = false;
            _misMatchSerials = new List<ReptPickSerials>();
            string defaultBin = Bincode;
            List<MasterItemStatus> _statusList = new List<MasterItemStatus>();
            List<ReptPickSerials> _excelReptPickSerials = new List<ReptPickSerials>();
            List<ReptPickSerials> _excelMisMatchReptPickSerials = new List<ReptPickSerials>();
            List<ReptPickSerialsSub> _reptPickSerialsSub = new List<ReptPickSerialsSub>();
            _statusList = _generalDAL.GetAllStockTypes(UserCompanyCode);
            _test.Columns.Add("UpdRowNo", typeof(Int32));
            _test.Columns.Add("POItem", typeof(Int32));
            foreach (DataRow dr in _test.Rows)
            {
                dr["UpdRowNo"] = 0;
                dr["POItem"] = 0;
            }
            if (GetExecelTbl != null)
            {
                if (GetExecelTbl.Rows.Count > 0)
                {
                    for (int i = 1; i < GetExecelTbl.Rows.Count; i++)
                    {
                        try
                        {
                            //string item = GetExecelTbl.Rows[i][0].ToString();
                            //added by wimal to upload model wise Start
                            string item = "";
                            if (GetExecelTbl.Rows[0][0].ToString() == "MODEL")
                            {
                                string model = GetExecelTbl.Rows[i][0].ToString();
                                List<MasterItem> itemlist = _generalDAL.GetItemFromModel(model);
                                if (itemlist.Count == 1)
                                {
                                    item = itemlist[0].Mi_cd;
                                }
                                else if (itemlist.Count > 1)
                                {
                                    msg = model + " Model assign to more than one item...!!!";
                                    value = 6;
                                }
                            }

                            if (GetExecelTbl.Rows[0][0].ToString() == "ITEM")
                            {
                                item = GetExecelTbl.Rows[i][0].ToString();
                            }

                            //added by wimal to upload model wise End
                            MasterItem _itemdetail = _generalDAL.GetItemMaster(item);
                            bool exists = _test.AsEnumerable().Any(r => item == r.Field<string>("PODI_ITM_CD"));
                            if (exists == false)
                            {
                                msg = item + " item not allocate to selected PO no...!!!";
                                value = 6;
                            }
                            if (_itemdetail == null)
                            {
                                msg = item + " item no invalid please check...!!!";
                                value = 6;
                            }

                            string status = GetExecelTbl.Rows[i][1].ToString();
                            string qty = "1";//GetExecelTbl[0].Rows[i][2].ToString(); //Remove from Naveen request
                            if ((_itemdetail.Mi_is_ser1 == -1) && GetExecelTbl.Rows[i][4].ToString() == "")
                            {
                                msg = item + " Decimal item quantity should be enter...!!!";
                                qty = "0";
                                value = 6;
                            }

                            if (_itemdetail.Mi_is_ser1 != 1)
                                qty = GetExecelTbl.Rows[i][4].ToString();

                            string serial1 = GetExecelTbl.Rows[i][2].ToString();
                            string serial2 = GetExecelTbl.Rows[i][3].ToString();
                            string serial3 = string.Empty; //GetExecelTbl[0].Rows[i][5].ToString(); //Remove from Naveen request

                            if ((_itemdetail.Mi_is_ser1 == 1) && Convert.ToInt16(qty) != 1)
                            {
                                msg = serial1 + " serial can not be duplicate quantity should be 1...!!!";
                                value = 6;
                            }

                            if ((_itemdetail.Mi_is_ser1 == 1) && (serial1 == "" || serial1 == "N/A"))
                            {
                                msg = "In item no " + item + " Serial no 1 is empty please check excel sheet...!!!";
                                value = 6;
                            }

                            if ((_itemdetail.Mi_is_ser2 == 1) && (serial2 == "" || serial1 == "N/A"))
                            {
                                msg = "In item no " + item + " Serial no 2 is empty please check excel sheet...!!!";
                                value = 6;
                            }

                            if ((_itemdetail.Mi_is_ser1 == 0) && (serial1 != null && serial1 != "" && serial1 != "N/A"))
                            {
                                msg = "In item no " + item + " is non serialize but excel have serial 1 value - " + serial1 + " please check it...!!!";
                                value = 6;
                            }

                            var statusVal = _statusList.Where(c => c.Mis_desc == status).FirstOrDefault();
                            if (statusVal != null)
                            {
                                statauscd = statusVal.Mis_cd;
                            }
                            #region binValidation Dulaj 2018/Oct/16
                            if (string.IsNullOrEmpty(GetExecelTbl.Rows[i][5].ToString()))
                            {
                                Bincode = defaultBin;
                            }
                            else
                            {
                                string otherBin = GetExecelTbl.Rows[i][5].ToString();
                                DataTable dt = _generalDAL.GetBinLocGRN(UserCompanyCode, UserDefLoca, otherBin, "");
                                if (dt.Rows.Count < 1)
                                {
                                    msg = otherBin + " is invalid bincode!!!";
                                    value = 6;
                                    return;
                                }
                                else
                                { Bincode = otherBin; }
                            }
                            #endregion

                            saveexcel("GRN", poNo, item, serial1, serial2, serial3, _test, statauscd, Convert.ToDecimal(qty), _userSeqNo, _resultItemsSerialList, _userwarrid, SessionID, UserCompanyCode, UserID, UserDefLoca, PORefNo, Bincode, EDate, Mdate, cdDate, _itemdetail, _excelReptPickSerials, _excelMisMatchReptPickSerials, out value, out msg, out _misMatchSerials);
                            _inventoryDAL.TransactionCommit();
                        }

                        catch (Exception ex)
                        {
                            lblView = true;
                            msg = "Excel Data Invalid Please check Excel File and Upload";
                            //excelUpload.Show();
                            value = 3;
                            _inventoryDAL.TransactionRollback();
                            //return;
                        }
                    }
                }
            }
            if (_excelReptPickSerials != null && value == 1)
            {
                value = SaveAllScanSerialsList(_excelReptPickSerials, _reptPickSerialsSub);
                //LoadPOItems(txtPONo.Text.ToString());
            }
        }

        //Udaya 19/05/2017
        private Int32 GenerateNewUserSeqNo(string DocumentType, string _scanDocument, string UserID, string SessionID, string UserCompanyCode, string cdDate)
        {
            _inventoryDAL = new InventoryDAL();
            Int32 generated_seq = 0;
            generated_seq = _inventoryDAL.Generate_new_seq_num(UserID, DocumentType, 1, UserCompanyCode);//direction always =1 for this method                    //assign user_seqno
            ReptPickHeader RPH = new ReptPickHeader();
            RPH.Tuh_doc_tp = DocumentType;
            RPH.Tuh_cre_dt = Convert.ToDateTime(cdDate).Date;// DateTime.Today;//might change //Calendar-SelectedDate;
            RPH.Tuh_ischek_itmstus = true;//might change 
            RPH.Tuh_ischek_reqqty = true;//might change
            RPH.Tuh_ischek_simitm = true;//might change
            RPH.Tuh_session_id = SessionID;
            RPH.Tuh_usr_com = UserCompanyCode;//might change 
            RPH.Tuh_usr_id = UserID;
            RPH.Tuh_usrseq_no = generated_seq;

            RPH.Tuh_direct = true; //direction always (-) for change status
            RPH.Tuh_doc_no = _scanDocument;
            return generated_seq;
        }

        //Udaya 19/05/2017
        private void saveexcel(string DocumentType, string _scanDocument, string PopupItemCode, string _serialNo1, string _serialNo2, string _serialNo3, DataTable _PO, string status, decimal qty, int _userSeqNo, List<ReptPickSerials> _resultItemsSerialList, string _userwarrid, string SessionID, string UserCompanyCode, string UserID, string UserDefLoca, string PORefNo, string Bincode, string EDate, string Mdate, string cdDate, MasterItem _itemdetail, List<ReptPickSerials> _excelReptPickSerials, List<ReptPickSerials> _excelMisMatchReptPickSerials, out int value, out string msg, out List<ReptPickSerials> _misMatchSerials)
        {
            string _warrantyno = string.Empty;
            msg = string.Empty;
            string _tmpMsg = msg;
            msg = string.IsNullOrEmpty(_tmpMsg) ? "" : _tmpMsg;
            value = 0;
            _misMatchSerials = new List<ReptPickSerials>();
            try
            {
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (_userSeqNo == -1)
                {
                    _userSeqNo = GenerateNewUserSeqNo(DocumentType, _scanDocument, UserID, SessionID, UserCompanyCode, cdDate);
                }

                if (_userSeqNo == 0)
                {
                    _userSeqNo = _inventoryDAL.Generate_new_seq_num(UserID, DocumentType, 1, UserCompanyCode);
                    ReptPickHeader _inputReptPickHeader = new ReptPickHeader();
                    _inputReptPickHeader.Tuh_direct = true;
                    _inputReptPickHeader.Tuh_doc_no = _scanDocument;
                    _inputReptPickHeader.Tuh_doc_tp = DocumentType;
                    _inputReptPickHeader.Tuh_ischek_itmstus = false;
                    _inputReptPickHeader.Tuh_ischek_reqqty = false;
                    _inputReptPickHeader.Tuh_ischek_simitm = false;
                    _inputReptPickHeader.Tuh_session_id = SessionID;
                    _inputReptPickHeader.Tuh_usr_com = UserCompanyCode;
                    _inputReptPickHeader.Tuh_usr_id = UserID;
                    _inputReptPickHeader.Tuh_usrseq_no = _userSeqNo;
                    //Save it to the scmrep.temp_pick_hdr header table. 
                    Int32 val = SavePickedHeader(_inputReptPickHeader);
                }

                DataView dv = new DataView(_PO);
                dv.RowFilter = "PODI_ITM_CD ='" + PopupItemCode + "'";
                int deletedLOVcount = dv.Count;
                if (deletedLOVcount >= 1)
                {
                    foreach (DataRowView drv in dv)
                    {
                        if (Convert.ToDecimal(drv["UpdRowNo"]) < Convert.ToDecimal(drv["PODI_QTY"]))
                        {
                            //drv["POItem"] = 1;
                            if (_itemdetail.Mi_is_ser1 != 1)
                            {
                                #region Fill Pick Serial Object decimal items
                                ReptPickSerials _inputReptPickSerials = new ReptPickSerials();
                                _inputReptPickSerials.Tus_usrseq_no = _userSeqNo;
                                _inputReptPickSerials.Tus_doc_no = _scanDocument;
                                _inputReptPickSerials.Tus_seq_no = 0;
                                _inputReptPickSerials.Tus_itm_line = 0;
                                _inputReptPickSerials.Tus_batch_line = 0;
                                _inputReptPickSerials.Tus_ser_line = 0;
                                _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_orig_grndt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_com = UserCompanyCode;
                                _inputReptPickSerials.Tus_loc = UserDefLoca;
                                _inputReptPickSerials.Tus_bin = Bincode;
                                _inputReptPickSerials.Tus_itm_cd = PopupItemCode;
                                _inputReptPickSerials.Tus_new_itm_cd = PopupItemCode;
                                _inputReptPickSerials.Tus_itm_stus = status;
                                _inputReptPickSerials.Tus_unit_cost = Convert.ToDecimal(drv["UNIT_PRICE"].ToString());
                                _inputReptPickSerials.Tus_unit_price = Convert.ToDecimal(drv["UNIT_PRICE"].ToString());
                                _inputReptPickSerials.Tus_qty = qty;


                                _inputReptPickSerials.Tus_ser_1 = "N/A";
                                _inputReptPickSerials.Tus_ser_2 = "N/A";
                                _inputReptPickSerials.Tus_ser_3 = "N/A";


                                //_inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                                _inputReptPickSerials.Tus_ser_id = 0;
                                //if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + UserDefLoca + _userwarrid + _inputReptPickSerials.Tus_ser_id.ToString(); //"-P01-"
                                // _inputReptPickSerials.Tus_warr_no = _warrantyno;
                                _inputReptPickSerials.Tus_warr_no = "";
                                _inputReptPickSerials.Tus_itm_desc = drv["MI_LONGDESC"].ToString();
                                _inputReptPickSerials.Tus_itm_model = drv["MI_MODEL"].ToString();
                                _inputReptPickSerials.Tus_itm_brand = drv["MI_BRAND"].ToString();
                                _inputReptPickSerials.Tus_itm_line = Convert.ToInt32(drv["PODI_LINE_NO"].ToString());
                                _inputReptPickSerials.Tus_cre_by = UserID;
                                _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_session_id = SessionID;
                                _inputReptPickSerials.Tus_job_line = Convert.ToInt32(drv["PODI_LINE_NO"].ToString());
                                _inputReptPickSerials.Tus_job_no = PORefNo;
                                MasterItem _itmExp = _generalDAL.GetItemMasterNew(_inputReptPickSerials.Tus_itm_cd);
                                if (_itmExp != null)
                                {
                                    if (_itmExp.Tmp_mi_is_exp_dt == 1)
                                    {
                                        DateTime _dtTemp = new DateTime();
                                        _inputReptPickSerials.Tus_exp_dt = DateTime.TryParse(EDate.Trim(), out _dtTemp) ? Convert.ToDateTime(EDate.Trim()) : DateTime.MinValue;
                                        _inputReptPickSerials.Tus_manufac_dt = DateTime.TryParse(Mdate.Trim(), out _dtTemp) ? Convert.ToDateTime(Mdate.Trim()) : DateTime.MinValue;
                                    }
                                }
                                #endregion


                                var serCount = 0;
                                if (_resultItemsSerialList != null)
                                {
                                    serCount = (from c in _resultItemsSerialList
                                                where c.Tus_itm_cd == PopupItemCode && c.Tus_itm_line == Convert.ToInt32(drv["PODI_LINE_NO"].ToString())
                                                select c).Count();
                                }
                                if (serCount <= Convert.ToDecimal(drv["PODI_QTY"].ToString()))
                                {
                                    _excelReptPickSerials.Add(_inputReptPickSerials);
                                    value = 1;
                                    foreach (DataRow dr in _PO.Rows)
                                    {
                                        if (dr["PODI_LINE_NO"].ToString() == drv["PODI_LINE_NO"].ToString())
                                        {
                                            dr["UpdRowNo"] = Convert.ToDecimal(dr["UpdRowNo"]) + 1;
                                        }
                                    }
                                }
                                else
                                {

                                }
                            }
                            else if ((IsExistInTempPickSerial(UserCompanyCode, _userSeqNo.ToString(), PopupItemCode, _serialNo1)) == 0)
                            {
                                #region Fill Pick Serial Object
                                ReptPickSerials _inputReptPickSerials = new ReptPickSerials();
                                _inputReptPickSerials.Tus_usrseq_no = _userSeqNo;
                                _inputReptPickSerials.Tus_doc_no = _scanDocument;
                                _inputReptPickSerials.Tus_seq_no = 0;
                                _inputReptPickSerials.Tus_itm_line = 0;
                                _inputReptPickSerials.Tus_batch_line = 0;
                                _inputReptPickSerials.Tus_ser_line = 0;
                                _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_orig_grndt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_com = UserCompanyCode;
                                _inputReptPickSerials.Tus_loc = UserDefLoca;
                                _inputReptPickSerials.Tus_bin = Bincode;
                                _inputReptPickSerials.Tus_itm_cd = PopupItemCode;
                                _inputReptPickSerials.Tus_new_itm_cd = PopupItemCode;
                                _inputReptPickSerials.Tus_itm_stus = status;
                                _inputReptPickSerials.Tus_unit_cost = Convert.ToDecimal(drv["UNIT_PRICE"].ToString());
                                _inputReptPickSerials.Tus_unit_price = Convert.ToDecimal(drv["UNIT_PRICE"].ToString());
                                _inputReptPickSerials.Tus_qty = qty;
                                if (_itemdetail.Mi_is_ser1 == 1)
                                {
                                    DataTable _dtser1 = _inventoryDAL.CheckSerialAvailability("SERIAL1", PopupItemCode, _serialNo1);

                                    if (_dtser1 != null)
                                    {
                                        if (_dtser1.Rows.Count > 0)
                                        {
                                            msg = "Added serial number is already exist!";
                                            //ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "myScript", "showStickyWarningToast('Added serial number is already exist!');", true);
                                            value = 2;
                                            return;
                                        }
                                    }
                                    _dtser1.Dispose();

                                    if ((IsExistInTempPickSerial(UserCompanyCode, _userSeqNo.ToString(), PopupItemCode, _serialNo1)) > 0)
                                    {
                                        msg = "Added serial number is already exist.!";
                                        //ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "myScript", "showStickyWarningToast('Added serial number is already exist.!');", true);
                                        value = 2;
                                        return;
                                    }

                                    if (string.IsNullOrEmpty(_serialNo1))
                                    {
                                        value = 2;
                                        return;
                                    }
                                    if (string.IsNullOrEmpty(_serialNo2))
                                    {
                                        _serialNo2 = "N/A";
                                    }
                                    if (string.IsNullOrEmpty(_serialNo3))
                                    {
                                        _serialNo3 = "N/A";
                                    }
                                    _inputReptPickSerials.Tus_ser_1 = _serialNo1;
                                    _inputReptPickSerials.Tus_ser_2 = _serialNo2;
                                    _inputReptPickSerials.Tus_ser_3 = _serialNo3;
                                }
                                else
                                {
                                    _inputReptPickSerials.Tus_ser_1 = "N/A";
                                    _inputReptPickSerials.Tus_ser_2 = "N/A";
                                    _inputReptPickSerials.Tus_ser_3 = "N/A";
                                }

                                _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                                if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + UserDefLoca + _userwarrid + _inputReptPickSerials.Tus_ser_id.ToString(); //"-P01-"
                                _inputReptPickSerials.Tus_warr_no = _warrantyno;
                                _inputReptPickSerials.Tus_itm_desc = drv["MI_LONGDESC"].ToString();
                                _inputReptPickSerials.Tus_itm_model = drv["MI_MODEL"].ToString();
                                _inputReptPickSerials.Tus_itm_brand = drv["MI_BRAND"].ToString();
                                _inputReptPickSerials.Tus_itm_line = Convert.ToInt32(drv["PODI_LINE_NO"].ToString());
                                _inputReptPickSerials.Tus_cre_by = UserID;
                                _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_session_id = SessionID;
                                _inputReptPickSerials.Tus_job_line = Convert.ToInt32(drv["PODI_LINE_NO"].ToString());
                                _inputReptPickSerials.Tus_job_no = PORefNo;
                                MasterItem _itmExp = _generalDAL.GetItemMasterNew(_inputReptPickSerials.Tus_itm_cd);
                                if (_itmExp != null)
                                {
                                    if (_itmExp.Tmp_mi_is_exp_dt == 1)
                                    {
                                        DateTime _dtTemp = new DateTime();
                                        _inputReptPickSerials.Tus_exp_dt = DateTime.TryParse(EDate.Trim(), out _dtTemp) ? Convert.ToDateTime(EDate.Trim()) : DateTime.MinValue;
                                        _inputReptPickSerials.Tus_manufac_dt = DateTime.TryParse(Mdate.Trim(), out _dtTemp) ? Convert.ToDateTime(Mdate.Trim()) : DateTime.MinValue;
                                    }
                                }
                                #endregion
                                var serCount = 0;
                                if (_resultItemsSerialList != null)
                                {
                                    serCount = (from c in _resultItemsSerialList
                                                where c.Tus_itm_cd == PopupItemCode && c.Tus_itm_line == Convert.ToInt32(drv["PODI_LINE_NO"].ToString())
                                                select c).Count();
                                }
                                if (serCount <= Convert.ToDecimal(drv["PODI_QTY"].ToString()))
                                {
                                    _excelReptPickSerials.Add(_inputReptPickSerials);
                                    value = 1;
                                    foreach (DataRow dr in _PO.Rows)
                                    {
                                        if (dr["PODI_LINE_NO"].ToString() == drv["PODI_LINE_NO"].ToString())
                                        {
                                            dr["UpdRowNo"] = Convert.ToDecimal(dr["UpdRowNo"]) + 1;
                                        }
                                    }
                                }
                                else
                                {

                                }
                            }
                            else
                            {
                                msg = "Added serial number is already exist!";
                                value = 2;
                                return;
                            }
                        }
                        else
                        {
                            continue;
                        }
                        break;
                    }
                }
                else
                {
                    #region Fill Pick Serial Object
                    ReptPickSerials _inputReptPickSerials = new ReptPickSerials();
                    _inputReptPickSerials.Tus_usrseq_no = _userSeqNo;
                    _inputReptPickSerials.Tus_doc_no = _scanDocument;
                    _inputReptPickSerials.Tus_seq_no = 0;
                    _inputReptPickSerials.Tus_itm_line = 0;
                    _inputReptPickSerials.Tus_batch_line = 0;
                    _inputReptPickSerials.Tus_ser_line = 0;
                    _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                    _inputReptPickSerials.Tus_orig_grndt = DateTime.Now.Date;
                    _inputReptPickSerials.Tus_com = UserCompanyCode;
                    _inputReptPickSerials.Tus_loc = UserDefLoca;
                    _inputReptPickSerials.Tus_bin = Bincode;
                    _inputReptPickSerials.Tus_itm_cd = PopupItemCode;
                    //_inputReptPickSerials.Tus_new_itm_cd = PopupItemCode;
                    _inputReptPickSerials.Tus_itm_stus = status;
                    _inputReptPickSerials.Tus_unit_cost = deletedLOVcount >= 1 ? Convert.ToDecimal(dv[0]["UNIT_PRICE"].ToString()) : 0;
                    _inputReptPickSerials.Tus_unit_price = deletedLOVcount >= 1 ? Convert.ToDecimal(dv[0]["UNIT_PRICE"].ToString()) : 0;
                    _inputReptPickSerials.Tus_qty = qty;
                    if (_itemdetail.Mi_is_ser1 == 1)
                    {
                        //Added 19/Dec/2017
                        DataTable _dtser1 = _inventoryDAL.CheckSerialAvailability("SERIAL1", PopupItemCode, _serialNo1);
                        if (_dtser1 != null)
                        {
                            if (_dtser1.Rows.Count > 0)
                            {
                                msg = "Added serial number is already exist!";
                                //ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "myScript", "showStickyWarningToast('Added serial number is already exist!');", true);
                                value = 2;
                                return;
                            }
                        }
                        _dtser1.Dispose();

                        if ((IsExistInTempPickSerial(UserCompanyCode, _userSeqNo.ToString(), PopupItemCode, _serialNo1)) > 0)
                        {
                            msg = "Added serial number is already exist.!";
                            //ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "myScript", "showStickyWarningToast('Added serial number is already exist.!');", true);
                            value = 2;
                            return;
                        }

                        if (string.IsNullOrEmpty(_serialNo1))
                        {
                            value = 2;
                            return;
                        }
                        if (string.IsNullOrEmpty(_serialNo2))
                        {
                            _serialNo2 = "N/A";
                        }
                        if (string.IsNullOrEmpty(_serialNo3))
                        {
                            _serialNo3 = "N/A";
                        }
                        _inputReptPickSerials.Tus_ser_1 = _serialNo1;
                        _inputReptPickSerials.Tus_ser_2 = _serialNo2;
                        _inputReptPickSerials.Tus_ser_3 = _serialNo3;
                    }
                    else
                    {
                        _inputReptPickSerials.Tus_ser_1 = "N/A";
                        _inputReptPickSerials.Tus_ser_2 = "N/A";
                        _inputReptPickSerials.Tus_ser_3 = "N/A";
                    }
                    _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();

                    if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + UserDefLoca + _userwarrid + _inputReptPickSerials.Tus_ser_id.ToString(); //"-P01-"
                    _inputReptPickSerials.Tus_warr_no = _warrantyno;
                    _inputReptPickSerials.Tus_itm_desc = _itemdetail.Mi_longdesc;
                    _inputReptPickSerials.Tus_itm_model = _itemdetail.Mi_model;
                    _inputReptPickSerials.Tus_itm_brand = _itemdetail.Mi_brand;
                    _inputReptPickSerials.Tus_itm_line = deletedLOVcount >= 1 ? Convert.ToInt32(dv[0]["PODI_LINE_NO"].ToString()) : 0;
                    _inputReptPickSerials.Tus_cre_by = UserID;
                    _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                    _inputReptPickSerials.Tus_session_id = SessionID;
                    _inputReptPickSerials.Tus_job_line = deletedLOVcount >= 1 ? Convert.ToInt32(dv[0]["PODI_LINE_NO"].ToString()) : 0;
                    _inputReptPickSerials.Tus_job_no = PORefNo;
                    MasterItem _itmExp = _generalDAL.GetItemMasterNew(_inputReptPickSerials.Tus_itm_cd);
                    if (_itmExp != null)
                    {
                        if (_itmExp.Tmp_mi_is_exp_dt == 1)
                        {
                            DateTime _dtTemp = new DateTime();
                            _inputReptPickSerials.Tus_exp_dt = DateTime.TryParse(EDate.Trim(), out _dtTemp) ? Convert.ToDateTime(EDate.Trim()) : DateTime.MinValue;
                            _inputReptPickSerials.Tus_manufac_dt = DateTime.TryParse(Mdate.Trim(), out _dtTemp) ? Convert.ToDateTime(Mdate.Trim()) : DateTime.MinValue;
                        }
                    }

                    #endregion
                    _excelMisMatchReptPickSerials.Add(_inputReptPickSerials);
                    _misMatchSerials.Add(_inputReptPickSerials);
                    value = 1;
                }
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                value = 6;
            }
        }

        //Isuru 2017/05/23
        public DataTable getpanaltystatesdetails(string invno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getpanaltystatesdetails(invno);
        }
        //Nuwan 
        public Int32 addDocumentPrintNew(string printdoc, string userId, string doctype, string sessionId, string loadingpoint, string wareloc, out string error)
        {
            error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                return _inventoryDAL.addDocumentPrintNew(printdoc, userId, doctype, sessionId, loadingpoint, wareloc);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return -1;

            }

        }

        public Int32 ServiceWorkingProcessComplete(MasterAutoNumber _mstAdjMines, MasterAutoNumber _mstAdjPlus, MasterAutoNumber _mstAodOut,
            InventoryHeader _invHdrAdjMines, InventoryHeader _invHdrAdjPlus, InventoryHeader _invHdrAodOut,
            List<ReptPickSerials> _rptSerialList, List<ReptPickSerialsSub> _rptSubSerialList,
            MasterAutoNumber _mstAdjMinesReq, InventoryHeader _invHdrAdjReq, string _jobNo, Int32 _jobLine,
            out string _docAdjMines, out string _docAdjPlus, out string _docAodOutNo, out string _docAdjMinesREQ, out string _error, out List<TmpValidation> _errList)
        {
            Int16 _effect = 0;
            _docAdjMines = "";
            _docAdjPlus = "";
            _docAodOutNo = "";
            _docAdjMinesREQ = "";
            _error = "";
            _errList = new List<TmpValidation>();
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                ReptPickSerials _tmpPickSer = new ReptPickSerials();
                List<ReptPickSerialsSub> _tmpSubSerials = new List<ReptPickSerialsSub>();
                List<ReptPickSerials> _adjMinusSerials = new List<ReptPickSerials>();
                List<ReptPickSerials> _adjPlusSerials = new List<ReptPickSerials>();
                List<InventorySerialN> _inrSerList = new List<InventorySerialN>();
                List<InventoryLocation> _inrLocList = new List<InventoryLocation>();
                InventoryLocation _inrLoc = new InventoryLocation();
                InventorySerialN _inrSer = new InventorySerialN();
                List<InventoryBatchRefN> _inrBatchData = new List<InventoryBatchRefN>();
                List<InventoryBatchN> _intBatchData = new List<InventoryBatchN>();
                List<InventorySerialN> _intSerData = new List<InventorySerialN>();
                decimal _inrBal = 0, _tmpBal = 0;
                MasterItem _mstItem = new MasterItem();
                #region validation
                foreach (var _rep in _rptSerialList)
                {
                    _mstItem = _generalDAL.GetItemMaster(_rep.Tus_itm_cd);
                    if (_mstItem.Mi_is_ser1 == 1)
                    {
                        if (string.IsNullOrEmpty(_rep.Tus_ser_1) || _rep.Tus_ser_1 == "N/A")
                        {
                            _errList.Add(new TmpValidation() { itemCode = _rep.Tus_itm_cd, itemStatus = _rep.Tus_itm_stus, errorMsg = "Please check the serial # with item !", Ser_1 = _rep.Tus_ser_1 });
                        }
                        else
                        {
                            _inrSer = new InventorySerialN() { Ins_ser_1 = _rep.Tus_ser_1, Ins_available = 1, Ins_loc = _rep.Tus_loc, Ins_com = _rep.Tus_com, Ins_itm_stus = _rep.Tus_itm_stus };
                            _inrSerList = _inventoryDAL.Get_INR_SER_DATA(_inrSer);
                            if (_inrSerList.Count == 0)
                            {
                                _errList.Add(new TmpValidation() { itemCode = _rep.Tus_itm_cd, itemStatus = _rep.Tus_itm_stus, errorMsg = "Serial not available !", Ser_1 = _rep.Tus_ser_1 });
                            }
                            else if (_inrSerList.Count > 1)
                            {
                                _errList.Add(new TmpValidation() { itemCode = _rep.Tus_itm_cd, itemStatus = _rep.Tus_itm_stus, errorMsg = "Serial already duplicated !", Ser_1 = _rep.Tus_ser_1 });
                            }
                            else
                            {
                                ReptPickSerials _pickSer = _inventoryDAL.Get_all_details_on_serialID(_rep.Tus_com, _rep.Tus_loc, _rep.Tus_bin, _rep.Tus_itm_cd, _rep.Tus_ser_id);
                                _adjMinusSerials.Add(_pickSer);
                            }
                        }
                    }
                    if (_mstItem.Mi_is_ser1 == 0)
                    {
                        _inrLoc = new InventoryLocation() { Inl_com = _rep.Tus_com, Inl_loc = _rep.Tus_loc, Inl_itm_cd = _rep.Tus_itm_cd, Inl_itm_stus = _rep.Tus_itm_stus };
                        _inrBal = _inventoryDAL.GET_INR_LOC_BAL_DATA(_inrLoc);
                        _tmpBal = _rptSerialList.Where(c => c.Tus_itm_cd == _rep.Tus_itm_cd && c.Tus_itm_stus == _rep.Tus_itm_stus).Sum(c => c.Tus_qty);
                        if (_tmpBal > _inrBal)
                        {
                            _errList.Add(new TmpValidation() { itemCode = _rep.Tus_itm_cd, itemStatus = _rep.Tus_itm_stus, errorMsg = "Balance not available ", Ser_1 = _rep.Tus_ser_1 });
                        }
                        else
                        {
                            ReptPickSerials _pickSer = _inventoryDAL.Get_all_details_on_serialID(_rep.Tus_com, _rep.Tus_loc, _rep.Tus_bin, _rep.Tus_itm_cd, _rep.Tus_ser_id);
                            _adjMinusSerials.Add(_pickSer);
                        }
                    }
                }
                if (_errList.Count > 0)
                {
                    _effect = -1;
                    _error = "ERRLIST";
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    return _effect;
                }
                #endregion
                #region Adjusment Mines
                _effect = SaveOutwardScanSerial(_invHdrAdjMines, _adjMinusSerials, _tmpSubSerials, null, false);
                _effect = UpdateInventoryAutoNumber(_invHdrAdjMines, _mstAdjMines, "-", out _docAdjMines);
                #endregion
                #region Adjusment Plus
                #region In serial object fill
                _intBatchData = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_invHdrAdjMines.Ith_seq_no);
                _intSerData = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_invHdrAdjMines.Ith_seq_no);
                foreach (var _bat in _intBatchData)
                {
                    _mstItem = _generalDAL.GetItemMaster(_bat.Inb_itm_cd);
                    if (_mstItem.Mi_is_ser1 == 1)
                    {
                        var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                           && c.Ins_itm_line == _bat.Inb_itm_line
                           && c.Ins_batch_line == _bat.Inb_batch_line
                           && c.Ins_itm_cd == _bat.Inb_itm_cd
                           && c.Ins_itm_stus == _bat.Inb_itm_stus
                           ).ToList();
                        bool _isIntSerAva = false;
                        if (_serList != null)
                        {
                            if (_serList.Count == _bat.Inb_qty)
                            {
                                _isIntSerAva = true;
                            }
                        }
                        if (_isIntSerAva)
                        {
                            #region is serial available
                            foreach (var _ser in _serList)
                            {
                                _tmpPickSer = new ReptPickSerials();
                                _tmpPickSer.Tus_doc_no = _docAdjMines;
                                _tmpPickSer.Tus_seq_no = _invHdrAdjMines.Ith_seq_no;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                _tmpPickSer.Tus_doc_dt = _invHdrAdjMines.Ith_doc_date;
                                _tmpPickSer.Tus_com = _bat.Inb_com;
                                _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_itm_stus = "GOD";
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                _tmpPickSer.Tus_qty = 1;
                                _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                _tmpPickSer.Tus_ser_3 = "N/A";
                                _tmpPickSer.Tus_ser_4 = "N/A";
                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                _tmpPickSer.Tus_base_doc_no = _docAdjMines;
                                _tmpPickSer.Tus_base_itm_line = _bat.Inb_itm_line;
                                _adjPlusSerials.Add(_tmpPickSer);
                            }
                            #endregion
                        }
                    }
                    else if (_mstItem.Mi_is_ser1 == 0)
                    {
                        var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                            && c.Ins_itm_line == _bat.Inb_itm_line
                            && c.Ins_batch_line == _bat.Inb_batch_line
                            && c.Ins_itm_cd == _bat.Inb_itm_cd
                            && c.Ins_itm_stus == _bat.Inb_itm_stus
                            ).ToList();
                        bool _isIntSerAva = false;
                        if (_serList != null)
                        {
                            if (_serList.Count == _bat.Inb_qty)
                            {
                                _isIntSerAva = true;
                            }
                        }
                        if (_isIntSerAva)
                        {
                            #region is serial available
                            foreach (var _ser in _serList)
                            {
                                _tmpPickSer = new ReptPickSerials();
                                _tmpPickSer.Tus_doc_no = _docAdjMines;
                                _tmpPickSer.Tus_seq_no = _invHdrAdjMines.Ith_seq_no;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                _tmpPickSer.Tus_doc_dt = _invHdrAdjMines.Ith_doc_date;
                                _tmpPickSer.Tus_com = _bat.Inb_com;
                                _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_itm_stus = "GOD";
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                _tmpPickSer.Tus_qty = 1;
                                _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                _tmpPickSer.Tus_ser_3 = "N/A";
                                _tmpPickSer.Tus_ser_4 = "N/A";
                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                _tmpPickSer.Tus_base_doc_no = _docAdjMines;
                                _tmpPickSer.Tus_base_itm_line = _bat.Inb_itm_line;
                                _adjPlusSerials.Add(_tmpPickSer);
                            }
                            #endregion
                        }
                        else
                        {
                            #region is serial not available
                            _tmpPickSer = new ReptPickSerials();
                            _tmpPickSer.Tus_doc_no = _docAdjMines;
                            _tmpPickSer.Tus_seq_no = _invHdrAdjMines.Ith_seq_no;
                            _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                            _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                            _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                            //_tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                            _tmpPickSer.Tus_doc_dt = _invHdrAdjMines.Ith_doc_date;
                            _tmpPickSer.Tus_com = _bat.Inb_com;
                            _tmpPickSer.Tus_loc = _bat.Inb_loc;
                            _tmpPickSer.Tus_bin = _bat.Inb_bin;
                            _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                            _tmpPickSer.Tus_itm_stus = "GOD";
                            _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                            _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                            _tmpPickSer.Tus_qty = _bat.Inb_qty;
                            //   _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                            _tmpPickSer.Tus_ser_1 = "N/A";
                            _tmpPickSer.Tus_ser_2 = "N/A";
                            _tmpPickSer.Tus_ser_3 = "N/A";
                            _tmpPickSer.Tus_ser_4 = "N/A";
                            _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                            _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                            _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                            //_tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                            //_tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                            //_tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                            //_tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                            //_tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                            //_tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                            //_tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                            _tmpPickSer.Tus_base_doc_no = _docAdjMines;
                            _tmpPickSer.Tus_base_itm_line = _bat.Inb_itm_line;
                            _adjPlusSerials.Add(_tmpPickSer);
                            #endregion
                        }

                    }
                }
                #endregion
                _invHdrAdjPlus.Ith_oth_docno = _docAdjMines;
                _effect = SaveInwardScanSerial(_invHdrAdjPlus, _adjPlusSerials, _tmpSubSerials);
                if (_effect==-2)
                {
                    _effect = -1;
                    _error = "Duplicate Serials Found!";
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    return _effect;
                }
                _effect = UpdateInventoryAutoNumber(_invHdrAdjPlus, _mstAdjPlus, "+", out _docAdjPlus);
                #endregion
                #region AOD OUT
                #region out serial object fill
                _adjMinusSerials = new List<ReptPickSerials>();
                _inrBatchData = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_invHdrAdjPlus.Ith_seq_no);
                _intSerData = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_invHdrAdjPlus.Ith_seq_no);
                _mstItem = new MasterItem();
                _tmpPickSer = new ReptPickSerials();
                foreach (var _bat in _intBatchData)
                {
                    _mstItem = _generalDAL.GetItemMaster(_bat.Inb_itm_cd);
                    if (_mstItem.Mi_is_ser1 == 1)
                    {
                        var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                           && c.Ins_itm_line == _bat.Inb_itm_line
                           && c.Ins_batch_line == _bat.Inb_batch_line
                           && c.Ins_itm_cd == _bat.Inb_itm_cd
                           && c.Ins_itm_stus == _bat.Inb_itm_stus
                           ).ToList();
                        bool _isIntSerAva = false;
                        if (_serList != null)
                        {
                            if (_serList.Count == _bat.Inb_qty)
                            {
                                _isIntSerAva = true;
                            }
                        }
                        if (_isIntSerAva)
                        {
                            #region is serial available
                            foreach (var _ser in _serList)
                            {
                                _tmpPickSer = new ReptPickSerials();
                                _tmpPickSer.Tus_doc_no = _docAdjPlus;
                                _tmpPickSer.Tus_seq_no = _invHdrAdjPlus.Ith_seq_no;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                _tmpPickSer.Tus_doc_dt = _invHdrAdjPlus.Ith_doc_date;
                                _tmpPickSer.Tus_com = _bat.Inb_com;
                                _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_itm_stus = _bat.Inb_itm_stus;
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                _tmpPickSer.Tus_qty = 1;
                                _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                _tmpPickSer.Tus_ser_3 = "N/A";
                                _tmpPickSer.Tus_ser_4 = "N/A";
                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                _adjMinusSerials.Add(_tmpPickSer);
                            }
                            #endregion
                        }
                    }
                    else if (_mstItem.Mi_is_ser1 == 0)
                    {
                        var _serList = _intSerData.Where(c => c.Ins_doc_no == _bat.Inb_doc_no
                            && c.Ins_itm_line == _bat.Inb_itm_line
                            && c.Ins_batch_line == _bat.Inb_batch_line
                            && c.Ins_itm_cd == _bat.Inb_itm_cd
                            && c.Ins_itm_stus == _bat.Inb_itm_stus
                            ).ToList();
                        bool _isIntSerAva = false;
                        if (_serList != null)
                        {
                            if (_serList.Count == _bat.Inb_qty)
                            {
                                _isIntSerAva = true;
                            }
                        }
                        if (_isIntSerAva)
                        {
                            #region is serial available
                            foreach (var _ser in _serList)
                            {
                                _tmpPickSer = new ReptPickSerials();
                                _tmpPickSer.Tus_doc_no = _docAdjPlus;
                                _tmpPickSer.Tus_seq_no = _invHdrAdjPlus.Ith_seq_no;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                                _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                                _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                _tmpPickSer.Tus_doc_dt = _invHdrAdjPlus.Ith_doc_date;
                                _tmpPickSer.Tus_com = _bat.Inb_com;
                                _tmpPickSer.Tus_loc = _bat.Inb_loc;
                                _tmpPickSer.Tus_bin = _bat.Inb_bin;
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_itm_stus = _bat.Inb_itm_stus;
                                _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                                _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                                _tmpPickSer.Tus_qty = 1;
                                _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                _tmpPickSer.Tus_ser_3 = "N/A";
                                _tmpPickSer.Tus_ser_4 = "N/A";
                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                _adjMinusSerials.Add(_tmpPickSer);
                            }
                            #endregion
                        }
                        else
                        {
                            #region is serial not available
                            _tmpPickSer = new ReptPickSerials();
                            _tmpPickSer.Tus_doc_no = _docAdjPlus;
                            _tmpPickSer.Tus_seq_no = _invHdrAdjPlus.Ith_seq_no;
                            _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                            _tmpPickSer.Tus_batch_line = _bat.Inb_batch_line;
                            _tmpPickSer.Tus_itm_line = _bat.Inb_itm_line;
                            //_tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                            _tmpPickSer.Tus_doc_dt = _invHdrAdjPlus.Ith_doc_date;
                            _tmpPickSer.Tus_com = _bat.Inb_com;
                            _tmpPickSer.Tus_loc = _bat.Inb_loc;
                            _tmpPickSer.Tus_bin = _bat.Inb_bin;
                            _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                            _tmpPickSer.Tus_itm_stus = _bat.Inb_itm_stus;
                            _tmpPickSer.Tus_itm_cd = _bat.Inb_itm_cd;
                            _tmpPickSer.Tus_unit_cost = _bat.Inb_unit_cost;
                            _tmpPickSer.Tus_qty = _bat.Inb_qty;
                            //   _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                            _tmpPickSer.Tus_ser_1 = "N/A";
                            _tmpPickSer.Tus_ser_2 = "N/A";
                            _tmpPickSer.Tus_ser_3 = "N/A";
                            _tmpPickSer.Tus_ser_4 = "N/A";
                            _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                            _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                            _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                            _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                            //_tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                            //_tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                            //_tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                            //_tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                            //_tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                            //_tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                            //_tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                            _adjMinusSerials.Add(_tmpPickSer);
                            #endregion
                        }

                    }
                }
                #endregion
                _invHdrAodOut.Ith_oth_docno = _docAdjPlus;
                _effect = SaveOutwardScanSerial(_invHdrAodOut, _adjMinusSerials, _tmpSubSerials, null, false);
                _effect = UpdateInventoryAutoNumber(_invHdrAodOut, _mstAdjMines, "-", out _docAdjMines);
                #endregion
                #region Adj Mines for Job base serials
                List<ReptPickSerials> _adjMinusReqSer = new List<ReptPickSerials>();
                #region ADJ minus for REQ serials
                List<InventoryBatchRefN> _inrBatDataList = new List<InventoryBatchRefN>();
                _intSerData = new List<InventorySerialN>();
                List<InventorySerialN> _intS = new List<InventorySerialN>();
                _inrBatDataList = _inventoryDAL.GET_INR_BATCH_BY_JOB_NO(_jobNo, _jobLine);
                var _batchDocList = _inrBatDataList.GroupBy(x => new { x.Inb_seq_no }).Select(group => new { Peo = group.Key });

                if (_batchDocList != null)
                {
                    foreach (var _b in _batchDocList)
                    {
                        _intS = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_b.Peo.Inb_seq_no);
                        _intSerData.AddRange(_intS);
                    }
                }
                foreach (var _inrB in _inrBatDataList)
                {
                    _mstItem = _generalDAL.GetItemMaster(_inrB.Inb_itm_cd);
                    if (_mstItem.Mi_is_ser1 == 1)
                    {
                        var _serList = _intSerData.Where(c => c.Ins_doc_no == _inrB.Inb_doc_no
                           && c.Ins_itm_line == _inrB.Inb_itm_line
                           && c.Ins_batch_line == _inrB.Inb_batch_line
                           && c.Ins_itm_cd == _inrB.Inb_itm_cd
                           && c.Ins_itm_stus == _inrB.Inb_itm_stus
                           ).ToList();
                        bool _isIntSerAva = false;
                        if (_serList != null)
                        {
                            if (_serList.Count == _inrB.Inb_qty)
                            {
                                _isIntSerAva = true;
                            }
                        }
                        if (_isIntSerAva)
                        {
                            #region is serial available
                            foreach (var _ser in _serList)
                            {
                                _tmpPickSer = new ReptPickSerials();
                                _tmpPickSer.Tus_doc_no = _docAdjPlus;
                                _tmpPickSer.Tus_seq_no = _invHdrAdjPlus.Ith_seq_no;
                                _tmpPickSer.Tus_itm_line = _inrB.Inb_itm_line;
                                _tmpPickSer.Tus_batch_line = _inrB.Inb_batch_line;
                                _tmpPickSer.Tus_itm_line = _inrB.Inb_itm_line;
                                _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                _tmpPickSer.Tus_doc_dt = _invHdrAdjPlus.Ith_doc_date;
                                _tmpPickSer.Tus_com = _inrB.Inb_com;
                                _tmpPickSer.Tus_loc = _inrB.Inb_loc;
                                _tmpPickSer.Tus_bin = _inrB.Inb_bin;
                                _tmpPickSer.Tus_itm_cd = _inrB.Inb_itm_cd;
                                _tmpPickSer.Tus_itm_stus = _inrB.Inb_itm_stus;
                                _tmpPickSer.Tus_itm_cd = _inrB.Inb_itm_cd;
                                _tmpPickSer.Tus_unit_cost = _inrB.Inb_unit_cost;
                                _tmpPickSer.Tus_qty = 1;
                                _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                _tmpPickSer.Tus_ser_3 = "N/A";
                                _tmpPickSer.Tus_ser_4 = "N/A";
                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                _adjMinusReqSer.Add(_tmpPickSer);
                            }
                            #endregion
                        }
                    }
                    else if (_mstItem.Mi_is_ser1 == 0)
                    {
                        var _serList = _intSerData.Where(c => c.Ins_doc_no == _inrB.Inb_doc_no
                            && c.Ins_itm_line == _inrB.Inb_itm_line
                            && c.Ins_batch_line == _inrB.Inb_batch_line
                            && c.Ins_itm_cd == _inrB.Inb_itm_cd
                            && c.Ins_itm_stus == _inrB.Inb_itm_stus
                            ).ToList();
                        bool _isIntSerAva = false;
                        if (_serList != null)
                        {
                            if (_serList.Count == _inrB.Inb_qty)
                            {
                                _isIntSerAva = true;
                            }
                        }
                        if (_isIntSerAva)
                        {
                            #region is serial available
                            foreach (var _ser in _serList)
                            {
                                _tmpPickSer = new ReptPickSerials();
                                _tmpPickSer.Tus_doc_no = _docAdjPlus;
                                _tmpPickSer.Tus_seq_no = _invHdrAdjPlus.Ith_seq_no;
                                _tmpPickSer.Tus_itm_line = _inrB.Inb_itm_line;
                                _tmpPickSer.Tus_batch_line = _inrB.Inb_batch_line;
                                _tmpPickSer.Tus_itm_line = _inrB.Inb_itm_line;
                                _tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                                _tmpPickSer.Tus_doc_dt = _invHdrAdjPlus.Ith_doc_date;
                                _tmpPickSer.Tus_com = _inrB.Inb_com;
                                _tmpPickSer.Tus_loc = _inrB.Inb_loc;
                                _tmpPickSer.Tus_bin = _inrB.Inb_bin;
                                _tmpPickSer.Tus_itm_cd = _inrB.Inb_itm_cd;
                                _tmpPickSer.Tus_itm_stus = _inrB.Inb_itm_stus;
                                _tmpPickSer.Tus_itm_cd = _inrB.Inb_itm_cd;
                                _tmpPickSer.Tus_unit_cost = _inrB.Inb_unit_cost;
                                _tmpPickSer.Tus_qty = 1;
                                _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                                _tmpPickSer.Tus_ser_1 = _ser.Ins_ser_1;
                                _tmpPickSer.Tus_ser_2 = _ser.Ins_ser_2;
                                _tmpPickSer.Tus_ser_3 = "N/A";
                                _tmpPickSer.Tus_ser_4 = "N/A";
                                _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                                _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                                _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                                _tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                                _tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                                _tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                                _tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                                _tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                                _tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                                _tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                                _adjMinusReqSer.Add(_tmpPickSer);
                            }
                            #endregion
                        }
                        else
                        {
                            #region is serial not available
                            _tmpPickSer = new ReptPickSerials();
                            _tmpPickSer.Tus_doc_no = _docAdjPlus;
                            _tmpPickSer.Tus_seq_no = _invHdrAdjPlus.Ith_seq_no;
                            _tmpPickSer.Tus_itm_line = _inrB.Inb_itm_line;
                            _tmpPickSer.Tus_batch_line = _inrB.Inb_batch_line;
                            _tmpPickSer.Tus_itm_line = _inrB.Inb_itm_line;
                            //_tmpPickSer.Tus_ser_line = _ser.Ins_ser_line;
                            _tmpPickSer.Tus_doc_dt = _invHdrAdjPlus.Ith_doc_date;
                            _tmpPickSer.Tus_com = _inrB.Inb_com;
                            _tmpPickSer.Tus_loc = _inrB.Inb_loc;
                            _tmpPickSer.Tus_bin = _inrB.Inb_bin;
                            _tmpPickSer.Tus_itm_cd = _inrB.Inb_itm_cd;
                            _tmpPickSer.Tus_itm_stus = _inrB.Inb_itm_stus;
                            _tmpPickSer.Tus_itm_cd = _inrB.Inb_itm_cd;
                            _tmpPickSer.Tus_unit_cost = _inrB.Inb_unit_cost;
                            _tmpPickSer.Tus_qty = _inrB.Inb_qty;
                            //   _tmpPickSer.Tus_ser_id = _ser.Ins_ser_id;
                            _tmpPickSer.Tus_ser_1 = "N/A";
                            _tmpPickSer.Tus_ser_2 = "N/A";
                            _tmpPickSer.Tus_ser_3 = "N/A";
                            _tmpPickSer.Tus_ser_4 = "N/A";
                            _tmpPickSer.Tus_itm_desc = _mstItem.Mi_shortdesc;
                            _tmpPickSer.Tus_itm_model = _mstItem.Mi_model;
                            _tmpPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                            _tmpPickSer.Tus_ser_remarks = "AOD-OUT";
                            //_tmpPickSer.Tus_orig_grncom = _ser.Ins_orig_grncom;
                            //_tmpPickSer.Tus_orig_grnno = _ser.Ins_orig_grnno;
                            //_tmpPickSer.Tus_orig_grndt = _ser.Ins_orig_grndt;
                            //_tmpPickSer.Tus_orig_supp = _ser.Ins_orig_supp;
                            //_tmpPickSer.Tus_exist_grncom = _ser.Ins_exist_grncom;
                            //_tmpPickSer.Tus_exist_grnno = _ser.Ins_exist_grnno;
                            //_tmpPickSer.Tus_exist_grndt = _ser.Ins_exist_grndt;
                            _adjMinusReqSer.Add(_tmpPickSer);
                            #endregion
                        }

                    }
                }
                #endregion
                _effect = SaveOutwardScanSerial(_invHdrAdjReq, _adjMinusReqSer, _tmpSubSerials, null, false);
                _effect = UpdateInventoryAutoNumber(_invHdrAdjReq, _mstAdjMinesReq, "-", out _docAdjMinesREQ);
                #endregion
                #region commit
                if (_effect > 0)
                {
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _inventoryRepDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    _effect = 1;
                }
                else
                {
                    _effect = -1;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    return _effect;
                }
                #endregion
            }
            catch (Exception err)
            {
                _effect = -1;
                _error = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                return _effect;
            }
            return _effect;
        }


        //Tharanga 2017/06/02
        public DataTable checkIntser(string comcd, string itmCd, string intSer)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.checkIntser(comcd, itmCd, intSer);
        }
        //Udaya 13/06/2017
        public Int32 DispatchRecordUpdate(DataTable dispatch, string comCode, string userID, string sessionId, DateTime modiDate, int chk)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            string _message = null;
            int effects = 0;
            try
            {
                effects = _inventoryDAL.DispatchRecordUpdate(dispatch, comCode, userID, sessionId, modiDate, chk);
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
            return effects;
        }
        //Rukshan 09/sep/2015 modifyby lakshan 26 Jun 2017
        public DataTable GetSupplierSerialWEB(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSupplierSerialWEB(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Udaya 28.06.2017
        public DataTable LoadInventoryDataByExpiryDate(string company, string item, string isordbyloc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadInventoryDataByExpiryDate(company, item, isordbyloc);
        }

        //check permision mob dulanga 28.6.2017
        public Int32 Is_OptionPerimitted(string userCompany, string userId, Int32 optionCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Is_OptionPerimitted(userCompany, userId, optionCode);

        }
        //Lakshan 30 Jun 2017
        public List<InventoryRequestItem> GetSOAItemDataByInvoice(string _invoice)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSOAItemDataByInvoice(_invoice);
        }
        //Udaya 03.07.2017
        public DataTable Collect_ItemReservationDtl(string _com, string _loc, string _itm, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Collect_ItemReservationDtl(_com, _loc, _itm, _status);
        }
        //Udaya 07.07.2017 
        public DataTable get_technicianAllocated_Details(string _com, string _loc, string jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_technicianAllocated_Details(_com, _loc, jobNo);
        }
        //Sahan 28 Nov/2015
        public DataTable GetSearchMRNWebByJobNo(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSearchMRNWebByJobNo(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Tharanga 2017/07/11
        public DataTable Get_Spare_parts_Movement_Report(string _com, string _item, DateTime _frmdate, DateTime _todate, string _pc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Spare_parts_Movement_Report(_com, _item, _frmdate, _todate, _pc);
        }
        //Tharanga 2017/07/12
        public DataTable Get_Spare_parts_Movement(string _com, string _item, DateTime _frmdate, DateTime _todate, string _pc, Int32 p_permission)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Spare_parts_Movement(_com, _item, _frmdate, _todate, _pc, p_permission);
        }

        //kapila 15/Jul/2017
        public List<InventoryLocation> GetItemInventoryBalance_New(string _company, string _location, string _item, string _pbook, string _pblvl)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalance_New(_company, _location, _item, _pbook, _pblvl);
        }
        //Add by Lakshan 05 Aug 2017
        public List<ReptPickSerials> GetSerialDataForDisposalEntry(string _com, string _loc, string _itm, string _itmStus, string _serial, string _supplier, Int32 _serId)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialDataForDisposalEntry(_com, _loc, _itm, _itmStus, _serial, _supplier, _serId);
        }
        //Tharanga 2017/08/01
        public Int32 UpdateTempWaraUploadNew(RCC _RCC, List<Service_Req_Hdr> _ReqHdr, List<Service_Req_Det> _ReqDet, List<Service_Req_Def> _defList, List<ImageUploadDTO> oMainList, Boolean _isDealer, Boolean _isOnline, MasterAutoNumber _masterAutoNumber)
        {
            Int32 effect = 0;
            Int32 _warPeriod = 0;
            Int32 _line = 1;

            _inventoryDAL = new InventoryDAL();
            //effect = _inventoryDAL.UpdateTempWaraUpload_NEW(_ReqHdr,)


            effect = 1;
            return effect;
        }
        //Lakshan 10Aug2017 
        public List<DisposalItem> GET_DISPOSAL_ITM_LIST_WEB(int _seqNo, string _docNo, bool istextchange)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_ITM_LIST_WEB(_seqNo, _docNo, istextchange);
        }
        public DataTable RequirmentsDetails(DateTime _frmDate, DateTime _toDate, string _comCode, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.RequirmentsDetails(_frmDate, _toDate, _comCode, _user);
        }
        public bool saveProductConditionUpdate(InventoryHeader _inventoryMovementHeaderMinus, InventoryHeader _inventoryMovementHeaderPlus, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumberMinus, MasterAutoNumber _masterAutoNumberPlus, List<InventoryRequestItem> _reqItems, out string _minusDocNo, out string _plusDocNo, out string error, List<int> hasstuschangelist, string company, string location, string userid,
            ItemConditionSetup _itemconditions, Int32 its_pick, string docno, string itemcd, List<ItemConditionSetup> _repConSetups, Int32 serial, string addedloc,
             InventoryHeader header1, List<InventoryHeader> updateAnl4Hdr, List<int> successItemsAnal4, string newstatus,
            bool isBinToBinTransfer = false, bool isDeValProcess = false)
        {
            try
            {
                _minusDocNo = string.Empty;
                _plusDocNo = string.Empty;
                error = string.Empty;
                int effect = 0;
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();
                if (hasstuschangelist.Contains(1) && newstatus != "")
                {
                    string _errorList = string.Empty;

                    //List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
                    //PickSerials = _reptPickSerials;=
                    try
                    {
                        //using (TransactionScope tr = new TransactionScope())
                        //{


                        string _company = _inventoryMovementHeaderMinus.Ith_com;
                        string _location = _inventoryMovementHeaderMinus.Ith_loc;
                        string _bin = _inventoryMovementHeaderMinus.Ith_git_close_doc;
                        string _user = _inventoryMovementHeaderMinus.Ith_cre_by;
                        int _seqNo = Convert.ToInt32(_inventoryMovementHeaderMinus.Ith_anal_6);

                        bool availability = true;

                        List<ReptPickSerials> _reMakeSerialList = new List<ReptPickSerials>();

                        if (!isBinToBinTransfer)
                        {
                            #region Auto Pick Non-serialized items
                            if (_reqItems.Count > 0)
                            {
                                foreach (InventoryRequestItem _ritm in _reqItems)
                                {

                                    MasterItem _itm = new MasterItem();
                                    _itm = _inventoryDAL.GetItem(_company, _ritm.Itri_itm_cd);

                                    if (_itm.Mi_is_ser1 == 0)
                                    {
                                        List<ReptPickSerials> _chk;
                                        _chk = _inventoryDAL.GetNonSerializedItemRandomly(_company, _location, _ritm.Itri_itm_cd, _ritm.Itri_itm_stus, _ritm.Itri_app_qty - _ritm.Itri_qty);
                                        if (_chk != null)
                                        {
                                            if (_chk.Count > 0)
                                            {
                                                decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _ritm.Itri_itm_cd && i.Tus_itm_stus == _ritm.Itri_itm_stus select i.Tus_qty).Sum();
                                                if (_statuswiseqty < _ritm.Itri_app_qty - _ritm.Itri_qty) availability = false;
                                            }
                                            else
                                            {
                                                availability = false;
                                                if (string.IsNullOrEmpty(_errorList)) _errorList = _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus; else _errorList += "," + _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus;
                                            }
                                        }
                                        else
                                        {
                                            availability = false;
                                            if (string.IsNullOrEmpty(_errorList)) _errorList = _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus; else _errorList += "," + _ritm.Itri_itm_cd + " | " + _ritm.Itri_itm_stus;
                                        }

                                        if (availability)
                                        {
                                            foreach (ReptPickSerials _pick in _chk)
                                            {
                                                ReptPickSerials _reptPickSerial = _inventoryDAL.Get_all_details_on_serialID(_company, _location, _bin, _ritm.Itri_itm_cd, _pick.Tus_ser_id);
                                                //Update_inrser_INS_AVAILABLE
                                                Boolean update_inr_ser = _inventoryDAL.Update_serialID_INS_AVAILABLE(_company, _location, _ritm.Itri_itm_cd, _pick.Tus_ser_id, -1);
                                                _reptPickSerial.Tus_cre_by = _user;
                                                _reptPickSerial.Tus_usrseq_no = _seqNo;
                                                _reptPickSerial.Tus_cre_by = _user;
                                                _reptPickSerial.Tus_base_doc_no = _seqNo.ToString();
                                                _reptPickSerial.Tus_base_itm_line = _ritm.Itri_line_no;
                                                _reptPickSerial.Tus_itm_desc = _itm.Mi_longdesc;
                                                _reptPickSerial.Tus_itm_model = _itm.Mi_model;
                                                _reptPickSerial.Tus_itm_brand = _itm.Mi_brand;
                                                _reptPickSerial.Tus_new_status = _ritm.Itri_note;
                                                _reptPickSerial.Tus_new_remarks = "N/A";
                                                _reptPickSerial.Tus_com = _inventoryMovementHeaderMinus.Ith_com;
                                                //enter row into TEMP_PICK_SER
                                                _inventoryRepDAL.SavePickedItemSerials(_reptPickSerial);
                                                _reMakeSerialList.Add(_reptPickSerial);
                                            }
                                        }
                                    }
                                    if (_itm.Mi_is_ser1 == -1)
                                    {
                                        ReptPickSerials _reptPickSerial = new ReptPickSerials();
                                        _reptPickSerial.Tus_com = _company;
                                        _reptPickSerial.Tus_loc = _location;
                                        _reptPickSerial.Tus_bin = _bin;
                                        _reptPickSerial.Tus_cre_by = _user;
                                        _reptPickSerial.Tus_usrseq_no = _seqNo;
                                        _reptPickSerial.Tus_cre_by = _user;
                                        _reptPickSerial.Tus_base_doc_no = _seqNo.ToString();
                                        _reptPickSerial.Tus_base_itm_line = _ritm.Itri_line_no;
                                        _reptPickSerial.Tus_itm_desc = _itm.Mi_longdesc;
                                        _reptPickSerial.Tus_itm_model = _itm.Mi_model;
                                        _reptPickSerial.Tus_itm_brand = _itm.Mi_brand;
                                        _reptPickSerial.Tus_itm_cd = _ritm.Itri_itm_cd;
                                        _reptPickSerial.Tus_itm_stus = _ritm.Itri_itm_stus;
                                        _reptPickSerial.Tus_new_status = _ritm.Itri_note;
                                        _reptPickSerial.Tus_new_remarks = "N/A";
                                        _reptPickSerial.Tus_ser_id = 0;
                                        _reptPickSerial.Tus_serial_id = "0";
                                        _reptPickSerial.Tus_ser_1 = "N/A";
                                        _reptPickSerial.Tus_qty = _ritm.Itri_app_qty - _ritm.Itri_qty;

                                        //_inventoryRepDAL.SavePickedItemSerials(_reptPickSerial);
                                        _reMakeSerialList.Add(_reptPickSerial);
                                    }
                                }
                            }

                            if (_reptPickSerials == null)
                            {
                                _reptPickSerials = _reMakeSerialList;
                            }
                            else
                            {
                                foreach (ReptPickSerials _pick in _reMakeSerialList)
                                {
                                    _reptPickSerials.Add(_pick);
                                }
                            }
                            #endregion Auto Pick Non-serialized items
                        }
                        else
                        {
                            Int32 i = 1;

                            #region Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014
                            var _tbnonsersFIFO =
                                  (from _pickSerials in _reptPickSerials
                                   where _pickSerials.Tus_ser_id == 0
                                   group _pickSerials by new { _pickSerials.Tus_usrseq_no, _pickSerials.Tus_base_doc_no, _pickSerials.Tus_base_itm_line, _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus, _pickSerials.Tus_job_no, _pickSerials.Tus_job_line, _pickSerials.Tus_new_status } into batch
                                   select new { scanSeqNo = batch.Key.Tus_usrseq_no, refdoc = batch.Key.Tus_base_doc_no, refdocline = batch.Key.Tus_base_itm_line, bincode = batch.Key.Tus_bin, itemcode = batch.Key.Tus_itm_cd, itemstatus = batch.Key.Tus_itm_stus, jobno = batch.Key.Tus_job_no, jobline = batch.Key.Tus_job_line, itemNewstatus = batch.Key.Tus_new_status, itemqty = batch.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);//Order by Prabhath on 21/02/2014
                            foreach (var non_sers in _tbnonsersFIFO)
                            {
                                MasterItem _mstItm = _inventoryDAL.GetItem(_inventoryMovementHeaderMinus.Ith_com, non_sers.itemcode);
                                if (_mstItm.Mi_is_ser1 == 0)
                                {
                                    int _fifoQty = Convert.ToInt32(non_sers.itemqty);
                                    List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();
                                    if (!string.IsNullOrEmpty(non_sers.jobno))
                                    {
                                        _nonSerialsFifo = _inventoryDAL.Search_Serial_For_Job_Item(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.bincode, non_sers.itemcode, non_sers.itemstatus, non_sers.itemqty, non_sers.jobno, Convert.ToInt32(non_sers.jobline));
                                        if (_nonSerialsFifo == null || _nonSerialsFifo.Count <= 0)
                                        {
                                            _nonSerialsFifo = _inventoryDAL.Search_serials_for_itemCD(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, "", false);
                                        }
                                    }
                                    else
                                    {
                                        _nonSerialsFifo = _inventoryDAL.GET_SERIAL_FOR_ITM_WITH_BIN(_inventoryMovementHeaderMinus.Ith_com, _inventoryMovementHeaderMinus.Ith_loc, non_sers.itemcode, "-1", non_sers.itemstatus, non_sers.bincode);
                                    }

                                    if (_reMakeSerialList.Count > 0)
                                    {
                                        foreach (ReptPickSerials item in _reMakeSerialList)
                                        {
                                            _nonSerialsFifo.RemoveAll(x => x.Tus_ser_id == item.Tus_ser_id);
                                        }
                                    }

                                    var list = (from t in _nonSerialsFifo
                                                orderby t.Tus_doc_dt, t.Tus_seq_no, t.Tus_ser_id
                                                select t).Take(_fifoQty).ToList();
                                    foreach (var _oneList in list)
                                    {
                                        _oneList.Tus_base_doc_no = non_sers.refdoc;
                                        _oneList.Tus_base_itm_line = non_sers.refdocline;

                                        _oneList.Tus_new_status = non_sers.itemNewstatus;
                                    }

                                    //foreach (var _oneList in list)
                                    //{
                                    //    _oneList.Tus_base_doc_no = non_sers.refdoc;
                                    //    _oneList.Tus_base_itm_line = i;//non_sers.refdocline;
                                    //    i++;
                                    //}


                                    _reMakeSerialList.AddRange(list);
                                    //_reMakeSerialList.Remove(_reMakeSerialList.Find(x => x.Tus_base_doc_no == non_sers.refdoc && x.Tus_base_itm_line == non_sers.refdocline && x.Tus_itm_cd == non_sers.itemcode && x.Tus_itm_stus == non_sers.itemstatus));
                                }
                            }

                            _reMakeSerialList.AddRange(_reptPickSerials.FindAll(x => x.Tus_ser_id != 0));

                            #endregion Collect FIFO Serial IDs for Non-Serialized Item :: Chamal 29-Aug-2014

                            if (_reMakeSerialList != null && _reMakeSerialList.Count > 0)
                            {
                                foreach (ReptPickSerials item in _reMakeSerialList)
                                {
                                    ReptPickSerials oOldSer = _reptPickSerials.Find(x => x.Tus_itm_cd == item.Tus_itm_cd && x.Tus_itm_stus == item.Tus_itm_stus);
                                    if (oOldSer != null)
                                    {
                                        //item.Tus_new_status = oOldSer.Tus_new_status;
                                        item.Tus_bin_to = oOldSer.Tus_bin_to;
                                    }
                                }
                            }
                            if (_reMakeSerialList == null || _reMakeSerialList.Count == 0)
                            {
                                effect = -1;
                                _minusDocNo = "Details not found in the inventory";
                                _plusDocNo = "Details not found in the inventory";
                                _errorList = "Details not found in the inventory";
                                error = _errorList;
                                return false;
                            }

                            _reptPickSerials = _reMakeSerialList;
                        }

                        InventoryStatusChangeCommon(_inventoryMovementHeaderMinus, _inventoryMovementHeaderPlus, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumberMinus, _masterAutoNumberPlus, out _minusDocNo, out _plusDocNo, isBinToBinTransfer, isDeValProcess);

                        //_inventoryRepDAL.ConnectionClose();
                        //_inventoryDAL.ConnectionClose();
                        //_ScmCommonDAL.ConnectionClose();

                        //_inventoryRepDAL.TransactionRollback();
                        //_inventoryDAL.TransactionRollback();
                        //_ScmCommonDAL.TransactionRollback();
                        error = "Successfully created document " + _minusDocNo + " / " + _plusDocNo;


                    }
                    catch (Exception err)
                    {
                        effect = -1;
                        if (err.Message.Contains("EMS.SP_UPDATE_INRLOC"))
                        {
                            _minusDocNo = erroritem + " : item/Serial  reserved ! ";
                            _plusDocNo = erroritem + " : item/Serial  reserved ! ";
                            _errorList = erroritem + " : item/Serial  reserved ! ";
                            error = _errorList;
                        }
                        else
                        {
                            _minusDocNo = "ERROR : " + err.Message.ToString();
                            _plusDocNo = "ERROR : " + err.Message.ToString();
                            _errorList = "ERROR : " + err.Message.ToString();
                            error = err.Message.ToString();

                        }
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        return false;
                    }
                }

                #region update condition
                Int32 _eff = 0;
                //_eff = _inventoryDAL.SaveItemConditions(_itemconditions);
                //if (_eff <= 0)
                //{
                //    error = "Error Occurred while save item condition !";
                //    _inventoryRepDAL.TransactionRollback();
                //    _inventoryDAL.TransactionRollback();
                //    _ScmCommonDAL.TransactionRollback();
                //}
                //_eff = _inventoryDAL.UpdateItsPick(its_pick, docno, company, location, itemcd, serial);
                //if (_eff <= 0)
                //{
                //    error = "Error Occurred while update pick status!";
                //    _inventoryRepDAL.TransactionRollback();
                //    _inventoryDAL.TransactionRollback();
                //    _ScmCommonDAL.TransactionRollback();
                //    return false;
                //}
                //if (_eff > 0)
                //{
                if (_repConSetups.Count > 0)
                {
                    foreach (var item in _repConSetups)
                    {
                        item.irsc_ser_id = item.irsc_ser_id;
                        item.irsc_com = company;
                        item.irsc_loc = location;
                        item.irsc_cat = "CT003";
                        //_itemconditions.irsc_tp = txtCondition.Text.Trim().ToUpper();
                        //_itemconditions.irsc_rmk = txtConRemarks.Text.Trim();
                        item.irsc_cre_by = userid;
                        item.irsc_cre_dt = DateTime.Now;
                        item.irsc_stus = "A";
                        item.irsc_add_loc = addedloc;
                        item.irsc_othloc = _itemconditions.irsc_othloc;
                        item.irsc_doc = _itemconditions.irsc_doc;
                        _eff = _inventoryDAL.SaveItemConditions(item);
                        // DataTable dt = _inventoryDAL.GetIntSarByDoc(_plusDocNo);

                        if (_eff <= 0)
                        {
                            error = "Error Occurred while save item condition !";
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            return false;
                        }
                        _eff = _inventoryDAL.UpdateItsPick(its_pick, docno, company, location, itemcd, serial);
                        //results = SaveItemConditions(item, ItsPick, doc, Session["UserCompanyCode"].ToString(), Session["UserDefLoca"].ToString(), txtItmCode.Text, Convert.ToInt32(lblSerId.Text));
                        if (_eff <= 0)
                        {
                            error = "Error Occurred while update pick status!";
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            return false;
                        }
                    }
                }
                // }
                //if (!successItemsAnal4.Contains(0))
                //{
                //    if (header1.Ith_anal_4 != null)
                //        _eff = _inventoryDAL.UpdateAnal4(header1);
                //    if (_eff == -1)
                //    {
                //        error = "Error Occurred while updating anal 4 !";
                //        _inventoryRepDAL.TransactionRollback();
                //        _inventoryDAL.TransactionRollback();
                //        _ScmCommonDAL.TransactionRollback();
                //        return false;
                //    }
                //}
                if (updateAnl4Hdr.Count > 0)
                {
                    foreach (InventoryHeader hdr in updateAnl4Hdr)
                    {
                        if (hdr.Ith_anal_4 != null)
                            _eff = _inventoryDAL.UpdateAnal4(hdr);
                        if (_eff == -1)
                        {
                            error = "Error Occurred while updating anal 4 !";
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _ScmCommonDAL.TransactionRollback();
                            return false;
                        }
                    }
                }

                #endregion
                error = error + ((error != "") ? " and " : "") + "Product Condition Updated Successfully";
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                //tr.Complete();
                effect = 1;
                return true;

            }
            catch (Exception ex)
            {
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _minusDocNo = "";
                _plusDocNo = "";
                error = ex.Message.ToString();
                return false;
            }
        }

        //Udaya 21.08.2017 Supplier Pricess Report
        public DataTable SupplierPricess_Details(DateTime _frmDate, DateTime _toDate, string _comCode, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SupplierPricess_Details(_frmDate, _toDate, _comCode, _user);
        }

        public Int32 Save_InventoryDoShedule(List<InventoryDoShedule> _InvoSheduleList, out string error)
        {
            Int32 effect = 0;
            string _message = null;
            error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                foreach (var _InventoryDoShedule in _InvoSheduleList)
                {
                    effect = _inventoryDAL.Save_InventoryDoShedule(_InventoryDoShedule);
                }

            }
            catch (Exception ex)
            {
                error = ex.Message;
                _inventoryDAL.TransactionRollback();
                error = ex.Message.ToString();
                effect = -1;
            }
            _inventoryDAL.TransactionCommit();
            return effect;
        }
        //Add by lakshan 22Aug2017
        public decimal GetForwardsaleNew(string _showroom, string _Item, string _com, string _pc)
        {
            //Rukshan 29/ Oct/2015
            //Add pc column by lakshan 22 Aug 2017 copy from GetForwardsale
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetForwardsaleNew(_showroom, _Item, _com, _pc);
        }

        //Add by Lakshan 29Aug2017
        public Int32 UpdateMrnItemCode(List<InventoryRequestItem> _reqList, out string _error)
        {
            Int32 eff = 0;
            _error = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                foreach (var item in _reqList)
                {
                    eff = _inventoryDAL.UpdateMrnItemCode(item);
                }
                if (eff == 1)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return eff;
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    _error = "Data not updated correctly !";
                    return eff;
                }
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                return eff;
            }
        }
        public Int32 emptyTempSerialItemsansSerials(Int32 SeqNo)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            Int32 eff = _inventoryDAL.emptyTempSerialItemsansSerials(SeqNo);
            _inventoryDAL.ConnectionClose();
            return eff;

        }

        public Int32 GET_MAX_LINE_DO_SHEDULE(Int32 p_sid_seq_no, Int32 p_sid_itm_line, string p_sid_inv_no, string p_sid_itm_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_MAX_LINE_DO_SHEDULE(p_sid_seq_no, p_sid_itm_line, p_sid_inv_no, p_sid_itm_cd);
        }

        /// <summary>
        /// get Pc info Dulanga 2017/08/30
        /// </summary>
        /// <param name="_company"></param>
        /// <param name="_pc"></param>
        /// <param name="_code"></param>
        /// <returns></returns>
        public DataTable GetChanelOnPC(string _company, string _pc, string _code)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                return _inventoryDAL.GetChanelOnPC(_company, _pc, _code);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }
        public DataTable getConditionDetails(string serialid)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            DataTable res = _inventoryDAL.getConditionDetails(serialid);
            _inventoryDAL.ConnectionClose();
            return res;
        }
        public DataTable LoadHeaderPCUpdateDocHeadOfficeUserNew(string type, DateTime fromdate, DateTime todate, string location, Int32 isUpdated, string cat1, string cat2, string cat3, string document)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadHeaderPCUpdateDocHeadOfficeUserNew(type, fromdate, todate, location, isUpdated, cat1, cat2, cat3, document);
        }
        public DataTable LoadHeaderPCUpdateDocWareHouseUserNew(string type, DateTime fromdate, DateTime todate, string location, Int32 isUpdated, string cat1, string cat2, string cat3, string document)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadHeaderPCUpdateDocWareHouseUserNew(type, fromdate, todate, location, isUpdated, cat1, cat2, cat3, document);
        }
        //Nuwan 2017.09.09 for PDA SRN
        public RequestApprovalHeader getApprovedRequestDetails(string invNo, out string error)
        {
            RequestApprovalHeader hdr = new RequestApprovalHeader();
            error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                hdr = _inventoryDAL.getApprovedRequestDetails(invNo);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return hdr;
        }
        public List<RequestApprovalDetail> getApprovedRequestItemDetails(string reqno, out string error)
        {
            List<RequestApprovalDetail> dtl = new List<RequestApprovalDetail>();
            error = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                dtl = _inventoryDAL.getApprovedRequestItemDetails(reqno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return dtl;
        }

        //By Akila - 2017/09/12
        public Int16 UpdateScanSerailItemDetails(ReptPickSerials _pickSerials, ReptPickItems _pickItems, bool _isNewLine, out string _message)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            _message = null;
            Int16 effects = 0;
            try
            {
                if (_pickSerials != null)
                {
                    if (_isNewLine)
                    {
                        //save serial
                        if (string.IsNullOrEmpty(_pickSerials.Tus_pkg_uom_tp))
                        {
                            effects = _inventoryRepDAL.SavePickedItemSerials(_pickSerials);
                        }
                        else
                        {
                            effects = _inventoryRepDAL.SavePickedItemSerialsMac(_pickSerials);
                        }
                    }
                    else
                    {
                        //update serail
                        effects = _inventoryRepDAL.UpdatePickedItemSerials(_pickSerials);
                    }
                    //update pick item
                    if (effects > 0)
                    {
                        _inventoryRepDAL.SavePickedItems(_pickItems);
                    }
                    if (effects > 0)
                    {
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryRepDAL.ConnectionClose();
                    }
                    else
                    {
                        effects = -1;
                        _message = "Data not saved successfully ! ";
                        _inventoryDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception ex)
            {
                effects = -1;
                _message = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
            return effects;
        }

        public Int32 update_InventoryDoShedule(List<InventoryDoShedule> _InventoryDoSheduleList)
        {
            Int32 effect = 0;
            string _message = null;
            //string error = string.Empty;

            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                foreach (var InvDoShedule in _InventoryDoSheduleList)
                {
                    effect = _inventoryDAL.update_InventoryDoShedule(InvDoShedule);

                }

                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {

                _inventoryDAL.TransactionRollback();
                //error = ex.Message.ToString();
                return -1;
            }
            return effect;
        }
        //Add by Lakshan 18Sep2017
        public DataTable GetItemInventoryBalanceStatus_RESNew(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalanceStatus_RESNew(_company, _location, _item, _status);
        }
        //Add by Lakshan 19Sep2017
        public List<InventoryBatchN> Get_Scm_Int_Batch(string _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Scm_Int_Batch(_doc);
        }

        //akila 2017/09/20
        public DataTable GetRootSchedules(string _comCode, string locCode, DateTime _schDate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRootSchedules(_comCode, locCode, _schDate);
        }
        //Nuwan 2017.9.22
        public InvoiceHeader GetInvoiceDetailForPdaSrn(string invoiceNo, string pc, string com, out string error)
        {
            error = string.Empty;
            InvoiceHeader invHed = new InvoiceHeader();
            try
            {
                _inventoryDAL = new InventoryDAL();
                invHed = _inventoryDAL.GetInvoiceDetailForPdaSrn(invoiceNo, pc, com);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return invHed;
        }
        public List<InvoiceItem> GetInvoiceItemDetailForPdaSrn(string invoiceNo, string pc, string com, out string error)
        {
            error = string.Empty;
            List<InvoiceItem> invHed = new List<InvoiceItem>();
            try
            {
                _inventoryDAL = new InventoryDAL();
                invHed = _inventoryDAL.GetInvoiceItemDetailForPdaSrn(invoiceNo, pc, com);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return invHed;
        }
        //Added By Udaya 21.09.2017
        public List<InventoryRequest> GET_SOA_REQ_DATA_FOR_DO(string _com, string _type, string _do)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_SOA_REQ_DATA_FOR_DO(_com, _type, _do);
        }
        public DataTable GetBOQDetails(string _boqNo, DateTime p_from_date, DateTime p_to_date, string p_proCnt, string p_customer, string p_subContractor, string p_com, bool _def)
        {
            DataTable _proDtl = new DataTable();
            _inventoryDAL = new InventoryDAL();
            if (_def)
            {
                DataTable _aodDtl = new DataTable();
                DataRow _dr;
                bool _chkOther = false;
                _proDtl.Columns.Add("SPHNO", typeof(string));
                _proDtl.Columns.Add("ITEM", typeof(string));
                _proDtl.Columns.Add("ITM_DESC", typeof(string));
                _proDtl.Columns.Add("MODEL", typeof(string));
                _proDtl.Columns.Add("UOM", typeof(string));
                _proDtl.Columns.Add("BOQ_QTY", typeof(decimal));
                _proDtl.Columns.Add("AOD_QTY", typeof(decimal));
                _proDtl.Columns.Add("AOD_COST", typeof(decimal));
                _proDtl.Columns.Add("ADD_AOD_QTY", typeof(decimal));
                _proDtl.Columns.Add("ADD_AOD_COST", typeof(decimal));
                //_dr = _proDtl.NewRow();

                _proDtl = _inventoryDAL.GetBOQDetails(_boqNo, p_from_date, p_to_date, p_proCnt, p_customer, p_subContractor, p_com);
                List<DataRow> _proDtl_list = _proDtl.AsEnumerable().ToList();
                foreach (DataRow dr in _proDtl_list)//_proDtl.Rows    
                {
                    _aodDtl = _inventoryDAL.GetBOQBaseAOD(dr["SPHNO"].ToString());
                    if (_aodDtl.Rows.Count > 0)
                    {
                        //dr["ITEM"].ToString() == (from DataRow row in _aodDtl.Rows select row["itb_itm_cd"]).Any().ToString()
                        foreach (DataRow drBatch in _aodDtl.Rows)
                        {
                            if (dr["ITEM"].ToString() == drBatch["itb_itm_cd"].ToString())
                            {
                                //(from DataRow row in _aodDtl.Rows select row["itb_qty"]).FirstOrDefault()
                                dr["AOD_QTY"] = Convert.ToDecimal(drBatch["itb_qty"]);
                                dr["AOD_COST"] = Convert.ToDecimal(drBatch["itb_unit_cost"]);
                                _chkOther = true;
                            }
                            else
                            {
                                if (_chkOther)
                                {
                                    _dr = _proDtl.NewRow();
                                    _dr["SPHNO"] = dr["SPHNO"].ToString();
                                    _dr["ITEM"] = dr["ITEM"].ToString();
                                    _dr["ITM_DESC"] = dr["ITM_DESC"].ToString();
                                    _dr["MODEL"] = dr["MODEL"].ToString();
                                    _dr["UOM"] = dr["UOM"].ToString();
                                    _dr["BOQ_QTY"] = Convert.ToDecimal(dr["BOQ_QTY"].ToString());
                                    _dr["AOD_QTY"] = 0.00;
                                    _dr["AOD_COST"] = 0.00;
                                    _dr["ADD_AOD_QTY"] = Convert.ToDecimal(drBatch["itb_qty"]);
                                    _dr["ADD_AOD_COST"] = Convert.ToDecimal(drBatch["itb_unit_cost"]);
                                    _proDtl.Rows.Add(_dr);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                _proDtl = _inventoryDAL.GetBOQDetails_Temp(_boqNo, p_from_date, p_to_date, p_proCnt, p_customer, p_subContractor, p_com);
            }
            return _proDtl;
        }
        //Nuwan 2017.09.23
        public InvoiceHeader GetInvoiceDetailForPdaDO(string docno, string company, out string error)
        {
            error = string.Empty;
            InvoiceHeader invHed = new InvoiceHeader();
            try
            {
                _inventoryDAL = new InventoryDAL();
                invHed = _inventoryDAL.GetInvoiceDetailForPdaDO(docno, company);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return invHed;
        }
        //Add by lakshan 25Sep2017
        public List<InventoryLocation> GetItemInventoryBalanceRes(string _company, string _location, string _item, string _status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemInventoryBalanceRes(_company, _location, _item, _status);
        }
        //nuwan 2017.09.26
        public DataTable getSRNItemLineno(Int32 userseq, string itmCd, string stus, out string error)
        {
            error = "";
            DataTable res = new DataTable();
            try
            {
                _inventoryDAL = new InventoryDAL();
                return _inventoryDAL.getSRNItemLineno(userseq, itmCd, stus);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public DataTable Get_canibaliseData(string _docNo, string _comCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_canibaliseData(_docNo, _comCode);
        }
        public DataTable get_PickPlan_InrBatchData(string in_Company, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_PickPlan_InrBatchData(in_Company, _loc);
        }
        //Add by Lakshan 09Oct2017
        public List<MasterItem> GetItemListByModel(string _model)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemListByModel(_model);
        }
        public List<SatProjectDetails> GET_SAT_PRO_DET_DATA(SatProjectDetails _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_SAT_PRO_DET_DATA(_obj);
        }
        public SatProjectHeader GET_SAT_PRO_HDR_DATA(string COM, string DOC)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_SAT_PRO_HDR_DATA(COM, DOC);
        }

        //tHARANGA 2017/10/07
        public DataTable GetRCCbyNoTableNEW(string _rcc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRCCbyNoTableNEW(_rcc);
        }
        public DataTable getDocumentDetails(string docno, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getDocumentDetails(docno, doctp);
        }
        //Lakshan 19Oct2017
        public List<ReptPickSerials> SearchSerialForJobItemAOD(string _com, string _loc, string _itm, string _itmSts, string _jobNo, int _jobLine)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SearchSerialForJobItemAOD(_com, _loc, _itm, _itmSts, _jobNo, _jobLine);
        }
        public InventoryHeader GetINTHDR_Details(String Com, String Doc, String Inv)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetINTHDR_Details(Com, Doc, Inv);
        }
        public decimal get_buffer_qty(string p_itm, string p_chnl, string p_grade, Int32 p_date, Int32 p_mont)// add by tharanga 2017/10/26
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_buffer_qty(p_itm, p_chnl, p_grade, p_date, p_mont);
        }
        //Add by Lakshan 30Oct2017
        public List<DisposalHeader> GET_DISPOSAL_JOBS_DATA(DisposalHeader oFilter)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISPOSAL_JOBS_DATA(oFilter);
        }
        //Add by Lakshan 30Oct2017
        public Int32 SAVE_DISPOSAL_ITEMS_WEB(List<DisposalItem> dispItm, out string _err)
        {
            _err = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            int effect = 0;
            try
            {
                foreach (DisposalItem item in dispItm)
                {
                    effect = _inventoryDAL.SAVE_DISPOSAL_ITEMS_WEB(item);
                }
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _err = "Disposal item data not saved correctly !";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }
        // add by tharanga 2017/10/30
        public DataTable GET_shpmnet_Hdr(string p_com, DateTime p_frmdate, DateTime P_todate, string p_type, string p_stus, string doc_no)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_shpmnet_Hdr(p_com, p_frmdate, P_todate, p_type, p_stus, doc_no);
        }
        // add by tharanga 2017/10/30
        public DataTable GET_shpmnet_Detail(string p_doc_no)
        {

            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_shpmnet_Detail(p_doc_no);
        }
        // add by tharanga 2017/10/31
        public decimal GET_ICE_ACTL_RT(Int32 p_seq, Int32 p_ref_line)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_ICE_ACTL_RT(p_seq, p_ref_line);
        }
        //Add by lakshan 02Nov2017
        public Int32 DisposalAdjustmentWeb(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, List<DisposalHeader> _dispHdrList, out string _docNo, out string err)
        {
            Int32 result = 0;
            err = string.Empty;
            _docNo = string.Empty;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                if (_reptPickSerials != null && _reptPickSerials.Count > 0)
                {
                    decimal _dispQty = _reptPickSerials.Sum(c => c.Tus_qty);
                    //_inventoryMovementHeader.Ith_job_no = oDisposalHeader.Dh_doc_no;
                    result = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _inventoryDAL, false);
                    result = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //if (oDisposalHeader.Dh_stus == "F")
                    //{
                    //    int outSeqNo = 0;
                    //    _inventoryDAL.Save_Disposal_Header(oDisposalHeader, out outSeqNo);
                    //}
                    #region disposal data update
                    foreach (var _dHdr in _dispHdrList)
                    {
                        foreach (var item in _dHdr.DispItemList)
                        {
                            if (item.TMP_idd_res_qty > 0)
                            {
                                _inventoryDAL.UPDATE_DISPOSAL_ITEMS_WEB(item);
                            }
                        }
                    }
                    #endregion

                    #region delete temp pick ser
                    foreach (int seqno in _reptPickSerials.Select(x => x.Tus_usrseq_no).Distinct().ToList()) _inventoryRepDAL.DeleteTempPickObjs(seqno);
                    #endregion
                    #region add validation
                    decimal _intBatchQty = 0;
                    decimal _intBatchQtyForIntSer = 0;
                    decimal _intSerQty = 0;
                    List<InventorySerialN> _intSerSaved = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                    List<InventoryBatchRefN> _inrBatchSaved = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);

                    _intBatchQty = _intBatchSaved.Sum(c => c.Itb_bal_qty1);
                    _intBatchQtyForIntSer = _intBatchSaved.Where(c => c.Tmp_is_serialized != -1).ToList().Sum(c => c.Itb_bal_qty1);
                    _intSerQty = _intSerSaved.Count;
                    if (_intBatchQtyForIntSer != _intSerQty)
                    {
                        err = "Process Terminated ! Inventory Balance mismatch [Ser Vs Batch]";
                        result = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return result;
                    }
                    if (_intBatchQty != _dispQty)
                    {
                        err = "Process Terminated ! Inventory Balance mismatch [PickQty Vs Batch]";
                        result = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return result;
                    }
                    #endregion

                }
                if (result > 0)
                {
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    result = 1;
                }
                else
                {
                    result = -1;
                    err = "Precess Terminated !";
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                }
            }
            catch (Exception ex)
            {
                result = -1;
                err = "ERROR : " + ex.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return result;
        }
        //Add by Lakshan 30Oct2017
        public Int32 UpdateGrnIsInProgress(string _poNo, string _user, Int32 _isOnWp, out string _err)
        {
            _err = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            int effect = 0;
            try
            {
                effect = _inventoryDAL.UpdateGrnIsInProgress(_poNo, _user, _isOnWp);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _err = "DData not saved correctly !";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }

        //Add by lakshan 07Nov2017
        public PurchaseOrder GET_PUR_HDR_DATA(string _com, string _doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_PUR_HDR_DATA(_com, _doc);
        }
        public DataTable GetWarrRangeRmk(string com, string item, string _sup)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetWarrRangeRmk(com, item, _sup);
        }
        public List<GRAN_ALWSTUS> GET_GRAN_ALWSTUS(string p_com, string p_cat, string p_stus, string p_new_stus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GRAN_ALWSTUS(p_com, p_cat, p_stus, p_new_stus);
        }
        // public List<GRAN_ALWSTUS> GET_GRAN_ALWSTUS( string p_com,string p_cat,string p_stus)
        //add by tharanga 2017/11/11
        public DataTable SPGETLOCTMCAT(string mli_com, string mli_loc_cd, string mli_cat_1, string mli_itm_stus, string mli_tp, string _frmstus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.SPGETLOCTMCAT(mli_com, mli_loc_cd, mli_cat_1, mli_itm_stus, mli_tp, _frmstus);
        }
        public DataTable Getser_inr_sermst(string _ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Getser_inr_sermst(_ser);
        }

        //Akila 2017/11/16
        public decimal GetSerialUnitCostForExchange(string _docNo, string _itemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialUnitCostForExchange(_docNo, _itemCode);
        }
        public int SaveInventoryADJRequestData(InventoryRequest _inventoryRequest, MasterAutoNumber _mastAutoNo, out string _docNo)
        {
            int result = 0;
            int resultR = 0;
            int seqno = 0;
            int itmballine = 1;
            string _errro = "";
            _docNo = "";
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            InventoryRequest _inventoryRequest_R = new InventoryRequest();
            _securityDAL = new SecurityDAL();
            if (_mastAutoNo != null) //Insert new record.
            {
                #region New Entry

                try
                {
                    //using (TransactionScope scope = new TransactionScope())
                    //{
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    //Save InventoryRequest details to DB.

                    //_inventoryRequest.Itr_seq_no = _inventoryDAL.GetSerialID();
                    //_inventoryRequest.Itr_req_no = Convert.ToString(_inventoryRequest.Itr_seq_no);
                    result = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);
                    //result = _inventoryRequest.Itr_seq_no;

                    //Save InventoryRequest Item details.
                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            _inventoryRequestItem.Itri_seq_no = result;
                            _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);

                            //kapila 7/6/2017
                            itmballine = 1;
                            if (_inventoryRequest.Itr_tp == "MRN")
                            {
                                DataTable _dtItmBal = _inventoryDAL.GetRootBalances(_inventoryRequest.Itr_com, _inventoryRequest.Itr_loc, _inventoryRequestItem.Itri_itm_cd);
                                foreach (DataRow r in _dtItmBal.Rows)
                                {
                                    InventoryReqItemBal _reqItmBal = new InventoryReqItemBal();
                                    _reqItmBal.IRB_ITM = _inventoryRequestItem.Itri_itm_cd;
                                    _reqItmBal.IRB_LINE = itmballine;
                                    _reqItmBal.IRB_LOC = r["inl_loc"].ToString();
                                    _reqItmBal.IRB_QTY = Convert.ToInt32(r["inl_qty"]);
                                    _reqItmBal.IRB_REQ_LINE = _inventoryRequestItem.Itri_line_no;
                                    _reqItmBal.IRB_RT_CD = r["frs_cd"].ToString(); ;
                                    _reqItmBal.IRB_SEQ = result;
                                    _reqItmBal.IRB_STUS = r["inl_itm_stus"].ToString(); ;
                                    itmballine = itmballine + 1;
                                    _inventoryDAL.SaveInventoryRequestItmBal(_reqItmBal);
                                }
                            }
                        }
                        //ADDED BY SACHITH
                        //2012/08/16
                        //SAVE INS_REQ_SER
                        if (_inventoryRequest.InventoryRequestSerialsList != null)
                        {
                            foreach (InventoryRequestSerials _inventoryRequestSerial in _inventoryRequest.InventoryRequestSerialsList)
                            {
                                _inventoryRequestSerial.Itrs_seq_no = result;
                                _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestSerial);
                            }
                        }
                        //END
                    }


                nx:
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    string _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                    //Check Save Req No
                    if (_inventoryDAL.CheckInventoryNo("sp_getreqno", "p_req_no", _documentNo) == 1)
                    {
                        goto nx;
                    }
                    // Update document no in Request Header table.
                    _inventoryDAL.UpdateInventoryRequestDocNo(result, _documentNo);
                    _docNo = _documentNo;

                    DataTable _detFound = _inventoryDAL.GetInventoryRequestItemsBySeqNo(result.ToString());
                    #region add reservation log update 07 Nov 2016 Lakshan
                    if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                    {
                        foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                        {
                            #region update reservation det and log add by Lakshan 28 Oct 2016
                            if (_inventoryRequest.Itr_system_module == "MRN" && _inventoryRequest.Temp_is_res_request == true)
                            {
                                // string _errro = "";
                                if (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no))
                                {
                                    int _res = 0;
                                    _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                        IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                        IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                        IRD_RES_BQTY = _inventoryRequestItem.Itri_qty
                                    });

                                    if (_res > 0)
                                    {
                                        _res = 0;
                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                        {
                                            IRL_CURT_COM = _inventoryRequest.Itr_com,
                                            IRL_CURT_LOC = _inventoryRequest.Itr_issue_from,
                                            IRL_ORIG_DOC_TP = "INV",
                                            IRL_ORIG_DOC_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                            IRL_CURT_DOC_TP = _inventoryRequest.Itr_tp,
                                            IRL_CURT_DOC_NO = _documentNo,
                                            IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                            IRL_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus,
                                            IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                            IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_MOD_DT = DateTime.Now,
                                            IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                            IRL_CRE_DT = DateTime.Now,
                                            IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                            IRL_RES_QTY = _inventoryRequestItem.Itri_qty
                                        }, 0, _inventoryDAL, out _errro);
                                    }
                                    if (_res < 1)
                                    {
                                        _docNo = _errro;
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        return result;
                                    }
                                    if (_res > 0)
                                    {
                                        List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA(new INR_RES_DET()
                                        {
                                            IRD_RES_NO = _inventoryRequestItem.Itri_res_no,
                                            IRD_ITM_CD = _inventoryRequestItem.Itri_itm_cd,
                                            IRD_ITM_STUS = _inventoryRequestItem.Itri_itm_stus
                                        });
                                        decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                        if (_resBal == 0)
                                        {
                                            _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                            {
                                                IRS_RES_NO = _inventoryRequestItem.Itri_res_no,
                                                IRS_STUS = "F"
                                            });
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    #endregion


                    if (_detFound == null)
                    {
                        _docNo = "Item list not saved";
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    if (_detFound.Rows.Count <= 0)
                    {
                        _docNo = "Item list not saved";
                        result = -1;
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    if (result > 0)
                    {
                        if (_inventoryRequest.Itr_sub_tp == "BOQ" && _inventoryRequest.Itr_tp == "MRN")
                        {
                            #region add by lakshan 20Aug2017
                            foreach (InventoryRequestItem _reItm in _inventoryRequest.InventoryRequestItemList)
                            {
                                _inventoryDAL.UpdateBowMrnQty(_reItm.Itri_base_req_no, _reItm.Itri_base_req_line, _reItm.Itri_qty);
                            }
                            List<SatProjectDetails> _boqList = _inventoryDAL.GET_SAT_PRO_DET_DATA(new SatProjectDetails() { SPD_NO = _inventoryRequest.Itr_job_no, SPD_ACTVE = 1 });
                            _boqList = _boqList.Where(c => c.SPD_MRN_BAL > 0).ToList();
                            bool _isFinish = true;
                            if (_boqList != null)
                            {
                                if (_boqList.Count > 0)
                                {
                                    _isFinish = false;
                                }
                            }
                            if (_isFinish)
                            {
                                _inventoryDAL.UPDATE_PROJECT(_inventoryRequest.Itr_job_no, "U");
                            }
                            #endregion
                        }
                        else if (_inventoryRequest.Itr_sub_tp == "ADBOQ" && _inventoryRequest.Itr_tp == "MRN")
                        {

                        }
                        else
                        {
                            _inventoryDAL.UPDATE_PROJECT(_inventoryRequest.Itr_job_no, "U");
                        }

                    }
                    _inventoryDAL.TransactionCommit();
                    result = 1;

                }
                catch (Exception ex)
                {
                    result = -1;
                    _inventoryDAL.TransactionRollback();
                    _docNo = ex.Message;

                }
                #endregion
            }
            return result;

        }

        public int InventoryADJRequestDataprocess(InventoryRequest _inputInvReq,
        InventoryHeader _invOutHeader, List<ReptPickSerials> _reptPickSerialsOut, List<ReptPickSerialsSub> _reptPickSerialsSubOut, MasterAutoNumber _autonoMinus, out string _docMines,
        InventoryHeader _invINHeader, List<ReptPickSerials> _reptPickSerialsIn, List<ReptPickSerialsSub> _reptPickINSerialsSubIn, MasterAutoNumber _autonoPlus, out string _docPlus,
         out string _assDoc, out string _error)
        {
            Int16 effect = 0;
            Int32 eff = 0;
            _docMines = "";
            _docPlus = "";
            //_aodInDoc = "";
            //_aodOutDoc = "";
            _assDoc = "";
            _error = "";

            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _financialDAL =new FinancialDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
              
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                   _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                eff = _inventoryDAL.updateInventoryRequest(_inputInvReq);

                Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                _invOutHeader.Ith_seq_no = UserSeqNo;
                _invOutHeader.Ith_doc_no = Convert.ToString(UserSeqNo);

                #region ADJ PLUS AND MINES
                if (_invOutHeader.Ith_is_ADJ == true)
                {
                    _invOutHeader.Ith_direct = false;
                    effect = SaveOutwardScanSerial(_invOutHeader, _reptPickSerialsOut, _reptPickSerialsSubOut, null, false);
                    Int32 ef = 0;
                    #region remove res qty
                    //var _reserveItem = from _pickSerials in _reptPickSerialsOut
                    //                   where _pickSerials.Tus_seq_no == _pickSerials.Tus_seq_no &&
                    //                         _pickSerials.Tus_com == _pickSerials.Tus_com &&
                    //                         _pickSerials.Tus_loc == _pickSerials.Tus_loc// && 
                    //                   //  _pickSerials.Tus_resqty > 0 
                    //                   group _pickSerials by
                    //                   new
                    //                   {
                    //                       _pickSerials.Tus_itm_cd,
                    //                       _pickSerials.Tus_itm_stus
                    //                   } into itm
                    //                   select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };
                    //if (_reserveItem != null && _reserveItem.Count() > 0)
                    //{
                    //    foreach (var _one in _reserveItem)
                    //    {
                    //        ef = _inventoryDAL.UpdateLocationResRevers(_invOutHeader.Ith_com, _invOutHeader.Ith_loc, _one.itemcode, _one.itemstatus, _invOutHeader.Ith_cre_by, _one.itemqty);
                    //        if (ef == 0)
                    //        {
                    //            throw new System.ArgumentException("not updated location qty" + _one.itemcode + " "  + _one.itemstatus, "Location");
                    //        }
                    //    }
                    //}
                    //foreach (ReptPickSerials item in _reptPickSerialsOut)
                    //{
                    //    Boolean neff = _inventoryDAL.Update_serialID_INS_AVAILABLE(_invOutHeader.Ith_com, _invOutHeader.Ith_loc, item.Tus_itm_cd, item.Tus_ser_id, 1);
                    //    if (neff == false)
                    //    {
                    //        throw new System.ArgumentException("not updated item avilable statues" + item.Tus_itm_cd + " " + item.Tus_ser_id, "Location");
                    //    }
                    //}
                    #endregion
                    effect = UpdateInventoryAutoNumber(_invOutHeader, _autonoMinus, "-", out _docMines);
                    if (_invINHeader.Ith_is_ADJ == true)
                    {
                        List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_invOutHeader.Ith_seq_no);
                        if (_intBatchSavedSerialised.Count > 0)
                        {
                            foreach (ReptPickSerials item in _reptPickSerialsIn)
                            {
                                MasterItem _itemdetail = new MasterItem();
                                _itemdetail = _inventoryDAL.GetItem(item.Tus_com, item.Tus_itm_cd);

                                if (_itemdetail.Mi_is_ser1 != -1)
                                {
                                    item.Tus_base_doc_no = _intBatchSavedSerialised.Where(r => r.Inb_base_itmline == item.Tus_itm_line).FirstOrDefault().Inb_doc_no;
                                    item.Tus_base_itm_line = _intBatchSavedSerialised.Where(r => r.Inb_base_itmline == item.Tus_itm_line).FirstOrDefault().Inb_itm_line;
                                    item.Tus_doc_no = _docMines;
                                    item.Tus_batch_line = _intBatchSavedSerialised.Where(r => r.Inb_base_itmline == item.Tus_itm_line).FirstOrDefault().Inb_batch_line;
                                    item.Tus_itm_line = _intBatchSavedSerialised.Where(r => r.Inb_base_itmline == item.Tus_itm_line).FirstOrDefault().Inb_itm_line;
                                }
                                else
                                {

                                    item.Tus_base_doc_no = _intBatchSavedSerialised.Where(r => r.Inb_itm_cd == item.Tus_old_itm_cd).FirstOrDefault().Inb_doc_no;
                                    item.Tus_base_itm_line = _intBatchSavedSerialised.Where(r => r.Inb_itm_cd == item.Tus_old_itm_cd).FirstOrDefault().Inb_itm_line;
                                    item.Tus_doc_no = _docMines;
                                    item.Tus_batch_line = _intBatchSavedSerialised.Where(r => r.Inb_itm_cd == item.Tus_old_itm_cd).FirstOrDefault().Inb_batch_line;
                                    item.Tus_itm_line = _intBatchSavedSerialised.Where(r => r.Inb_itm_cd == item.Tus_old_itm_cd).FirstOrDefault().Inb_itm_line;
                                    item.Tus_unit_cost = _intBatchSavedSerialised.Where(r => r.Inb_itm_cd == item.Tus_old_itm_cd).FirstOrDefault().Inb_unit_cost;
                                }
                            }

                        }
                    }
                }
               
                if (_invINHeader.Ith_is_ADJ == true)
                {
                    _invINHeader.Ith_direct = true;
                    _invINHeader.Ith_oth_docno = _docMines;
                    effect = SaveInwardScanSerial(_invINHeader, _reptPickSerialsIn, _reptPickINSerialsSubIn);
                    effect = UpdateInventoryAutoNumber(_invINHeader, _autonoPlus, "+", out _docPlus);
                }

                #endregion

                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _error = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                 _financialDAL.TransactionRollback();
            }
            return effect;
        }

        public DataTable Getser_int_ser(string _com, string _loc, string _itm_cd, string _itm_ser)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Getser_int_ser(_com, _loc, _itm_cd, _itm_ser);
        }

        //Tharindu 2017-11-24
        public Int32 SaveWarehouseItem(List<WarehseItemSetup> _lstWarehouse, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryDAL.SaveWarehouseItem(_lstWarehouse);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }





        //Tharindu 2017-11-27
        public DataTable Get_WarehouseItem(string profcenter, string loc, string itmcat1, string brand, string deftype)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_WarehouseItem(profcenter, loc, itmcat1, brand, deftype);
        }

        //Tharindu 2017-12-05
        public DataTable Get_Description(string code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Description(code);
        }

        //Tharindu 2017-12-05
        public DataTable Get_Product_refernce(string code, string cat1, string cat2, string cat3, string profcenter, int id)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_Product_refernce(code, cat1, cat2, cat3, profcenter, id);
        }

        //Tharindu 2017-12-05
        public Int32 SaveProductRefernce(List<Production_ref> _lstProductref, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryDAL.SaveProductRefernce(_lstProductref);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }


        public List<InventoryBatchRefN> getItemBalanceQty(string company, string location, string itmcode, string status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemBalanceQty(company, location, itmcode, status);
        }
        public Int32 SaveAdjItemSerials(List<ReptPickSerials> _SerialsLst, out string error)
        {
            error = "";
            Int32 ret = -1;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                foreach (ReptPickSerials rpt in _SerialsLst)
                {
                    ret = _inventoryDAL.SavePickedItemSerialsAdjExcel(rpt);
                }
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                error = ex.Message.ToString();
                ret = -1;
            }
            return ret;
        }
        public MasterItemBlock GetBlockedItmBrand(string _company, string _profit, string _item_brand, int _pricetype, string _catTp, string _mib_cat1, string _mib_cat2)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBlockedItmBrand(_company, _profit, _item_brand, _pricetype, _catTp, _mib_cat1, _mib_cat2);
        }
        public List<GRAN_ALWSTUS> GET_GRAN_ALWSTUS_MORE_CON(string p_com, string p_cat, string p_stus, string p_new_stus, string p_cat1, string p_cat2, string p_cat3)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_GRAN_ALWSTUS_MORE_CON(p_com, p_cat, p_stus, p_new_stus, p_cat1, p_cat2, p_cat3);
        }
        public string CheackSerialIsAvailableInCompany(List<ReptPickSerials> _serialList)
        {
            _inventoryDAL = new InventoryDAL();
            string _foundserial = string.Empty;
            DataTable _tbl = new DataTable();
            if (_serialList != null)
            {
                if (_serialList.Count > 0)
                {
                    foreach (ReptPickSerials _obj in _serialList)
                    {
                        MasterItem _mstItm = _inventoryDAL.GetItem(_obj.Tus_com, _obj.Tus_itm_cd);
                        if (_mstItm.Mi_is_ser1 == 1)
                        {
                            _tbl = _inventoryDAL.CHECKSERILA_COM(_obj.Tus_com, _obj.Tus_itm_cd, _obj.Tus_ser_1);
                            if (_tbl.Rows.Count > 0)
                            {
                                return _foundserial = "Serial no already available or use -" + _obj.Tus_ser_1;

                            }
                        }


                    }
                }

            }
            return _foundserial;
        }
        //subodana
        public string GetCaniMainItem(string DOC, string LOC)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCaniMainItem(DOC, LOC);
        }
        //subodana
        public string GetCaniMainSer(string DOC, string LOC)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetCaniMainSer(DOC, LOC);
        }
        //tharanga 2018/01/18
        public bool check_sat_qty_inv_balance(string p_job_no, string p_com, string p_loc, string p_pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.check_sat_qty_inv_balance(p_job_no, p_com, p_loc, p_pc);
        }

        public Int32 SaveStockVerification_EXCLE(List<PhysicalStockVerificationHdr> _stockhdr, out string jobs_no, out string _message, List<AuditMemebers> _auditMemebers = null)
        {
            //,List<ProductionFinGood> _finItem
            Int32 _effect = 0;
            Int32 seq = 0;
            string doc = string.Empty;
            jobs_no = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (_stockhdr != null)
                {
                    foreach (PhysicalStockVerificationHdr hdr in _stockhdr)
                    {
                        List<AuditMemebers> _auditMemebersnew = new List<AuditMemebers>();
                        MasterAutoNumber masterAuto = new MasterAutoNumber();
                        masterAuto.Aut_cate_tp = "LOC";
                        masterAuto.Aut_cate_cd = hdr.AUSH_LOC;  // string.IsNullOrEmpty(Session["UserDefLoca"].ToString()) ? Session["UserDefProf"].ToString() : Session["UserDefLoca"].ToString();
                        masterAuto.Aut_direction = null;
                        masterAuto.Aut_modify_dt = null;
                        masterAuto.Aut_moduleid = "MTJO";
                        masterAuto.Aut_number = 0;
                        masterAuto.Aut_start_char = "MTJO";
                        masterAuto.Aut_year = DateTime.Today.Year;

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                        doc = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + "-" + hdr.AUSH_DIPARTMENT + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        hdr.AUSH_JOB = doc;
                        _effect = _inventoryDAL.UpdateAutoNumber(masterAuto);
                        seq = _inventoryDAL.SavePhysicalStockVerificationHdr(hdr);
                        jobs_no = jobs_no + "," + doc;
                        if (seq > 0)
                        {
                            if (_auditMemebers != null)
                            {
                                //_auditMemebers.ForEach(x => x.AJM_RECORD_COUNT = hdr.AUSH_RECORD_COUNT);

                                _auditMemebersnew = _auditMemebers.Where(c => c.AJM_RECORD_COUNT == hdr.AUSH_RECORD_COUNT).ToList();
                                _auditMemebersnew.ForEach(x => x.Ajm_Job_no = hdr.AUSH_JOB);
                                foreach (AuditMemebers _member in _auditMemebersnew)
                                {
                                    int _rowEffects = _inventoryDAL.SaveAuditMemebers(_member);
                                    if (_rowEffects <= 0)
                                    {
                                        throw new Exception("Couldn't save audit member details");
                                    }
                                }
                            }




                            PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                            if (hdr.IsNewJob)
                            {
                                _main.Ausm_Subjob_Status = "P";
                            } //Pending job, the default value is p-pending (at thime job is created) 
                            else
                            {
                                if (hdr.AUSH_STUS == "P")
                                {
                                    _main.Ausm_Subjob_Status = "S";
                                    _main.Ausm_Subjob_Strdt = DateTime.Now;
                                }
                                else if (hdr.AUSH_STUS == "F")
                                {
                                    _main.Ausm_Subjob_Status = "F";
                                    _main.Ausm_Subjob_Enddt = DateTime.Now; ;
                                }
                            }

                            if (hdr.AUSH_NO_JOB == 0)
                            {
                                int _seq = _inventoryDAL.GetSerialID();
                                // PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                                _main.Ausm_cre_by = hdr.AUSH_CRE_BY;
                                _main.Ausm_cre_dt = DateTime.Now;
                                _main.Ausm_dt = hdr.AUSH_DT;
                                _main.Ausm_loc = hdr.AUSH_LOC;
                                _main.Ausm_stus = true;
                                _main.Ausm_seq = _seq;
                                _main.Ausm_job = doc;
                                _main.Ausm_com = hdr.AUSH_COM;
                                _main.Ausm_main_job = doc;

                                //Add by akila 2017/02/21
                                _main.Ausm_Subjob_Status = "P"; //When create a new job this status is - Pending
                                _main.Ausm_Subjob_Strdt = null;
                                _main.Ausm_Subjob_Enddt = null;
                                _main.Ausm_Mod_By = hdr.AUSH_MOD_BY;
                                _main.Ausm_Session_Id = hdr.AUSH_SESSION_ID;

                                _inventoryDAL.SavePhysicalStockVerificationMain(_main);
                            }
                            else if (hdr.AUSH_NO_JOB > 0)
                            {
                                MasterAutoNumber masterAutoSub = new MasterAutoNumber();
                                masterAutoSub.Aut_cate_tp = "LOC";
                                masterAutoSub.Aut_cate_cd = hdr.AUSH_LOC;  // string.IsNullOrEmpty(Session["UserDefLoca"].ToString()) ? Session["UserDefProf"].ToString() : Session["UserDefLoca"].ToString();
                                masterAutoSub.Aut_direction = null;
                                masterAutoSub.Aut_modify_dt = null;
                                masterAutoSub.Aut_moduleid = "STJO";
                                masterAutoSub.Aut_number = 0;
                                masterAutoSub.Aut_start_char = "STJO";
                                masterAutoSub.Aut_year = Convert.ToDateTime(hdr.AUSH_DT).Year;
                                string subjob = string.Empty;
                                for (int i = 0; i <= hdr.AUSH_NO_JOB; i++)
                                {
                                    int _seq = _inventoryDAL.GetSerialID();//cannot generated seq 
                                    if (i == 0)
                                    {
                                        //PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                                        _main.Ausm_cre_by = hdr.AUSH_CRE_BY;
                                        _main.Ausm_cre_dt = DateTime.Now;
                                        _main.Ausm_dt = hdr.AUSH_DT;
                                        _main.Ausm_loc = hdr.AUSH_LOC;
                                        _main.Ausm_stus = true;
                                        _main.Ausm_seq = _seq;
                                        _main.Ausm_job = doc;
                                        _main.Ausm_com = hdr.AUSH_COM;
                                        _main.Ausm_main_job = doc;
                                        _main.Ausm_Mod_By = hdr.AUSH_MOD_BY;
                                        _main.Ausm_Session_Id = hdr.AUSH_SESSION_ID;
                                        _inventoryDAL.SavePhysicalStockVerificationMain(_main);
                                    }
                                    else
                                    {
                                        subjob = masterAutoSub.Aut_cate_cd + "-" + masterAutoSub.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + i.ToString("00000", CultureInfo.InvariantCulture);
                                        //Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAutoSub.Aut_moduleid, masterAutoSub.Aut_direction, masterAutoSub.Aut_start_char, masterAutoSub.Aut_cate_tp, masterAutoSub.Aut_cate_cd, masterAutoSub.Aut_modify_dt, masterAutoSub.Aut_year).Aut_number;
                                        //subjob = masterAutoSub.Aut_cate_cd + "-" + masterAutoSub.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        //_effect = _inventoryDAL.UpdateAutoNumber(masterAutoSub);

                                        //PhsicalStockVerificationMain _main = new PhsicalStockVerificationMain();
                                        _main.Ausm_cre_by = hdr.AUSH_CRE_BY;
                                        _main.Ausm_cre_dt = DateTime.Now;
                                        _main.Ausm_dt = hdr.AUSH_DT;
                                        _main.Ausm_loc = hdr.AUSH_LOC;
                                        _main.Ausm_stus = true;
                                        _main.Ausm_seq = _seq;
                                        _main.Ausm_job = subjob;
                                        _main.Ausm_com = hdr.AUSH_COM;
                                        _main.Ausm_main_job = doc;
                                        _main.Ausm_Mod_By = hdr.AUSH_MOD_BY;
                                        _main.Ausm_Session_Id = hdr.AUSH_SESSION_ID;
                                        _inventoryDAL.SavePhysicalStockVerificationMain(_main);
                                    }

                                }
                            }
                            else
                            {
                                _message = null;
                                _effect = 0;
                            }
                        }
                    }
                }

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                _message = null;
                _effect = 1;
            }
            catch (Exception ex)
            {
                doc = null;
                jobs_no = null;
                _message = ex.Message;
                _effect = 0;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }


            return _effect;
        }



        //Akila 2018/01/04
        public List<MasterItemSimilar> GetSimilerItemDetailsNew(string _itemCode, string _company, string _profitCenter, DateTime _date)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSimilerItemDetailsNew(_itemCode, _company, _profitCenter, _date);
        }
        public DataTable dtServiceAgent(string _com, string _code)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.dtServiceAgent(_com, _code);
        }
        //Lakshan 30Jan2018
        public List<InventoryBatchRefN> GET_INR_BATCH_BY_JOB_NO_PRO_ISSU(InventoryBatchRefN _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_INR_BATCH_BY_JOB_NO_PRO_ISSU(_obj);
        }
        public DataTable Get_ADD_Req_by_seq(string _company, string _user, string _reqTp, string _stus, DateTime _frmDt, DateTime _toDt, string _subTp, Int32 _seq)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_ADD_Req_by_seq(_company, _user, _reqTp, _stus, _frmDt, _toDt, _subTp, _seq);
        }
        //add by tharanga 2018/02/07
        public List<ReptPickSerials> GetSerialForExchange(string _company, string _location, string _user, string _session, string _defBin, string _invoice, int _baseRefline)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSerialForExchange(_company, _location, _user, _session, _defBin, _invoice, _baseRefline);
        }
        public DataTable getAllSerialDetails(string com, string loc, string ser1, string ser2, string ser3, out string error)
        {
            error = "";
            DataTable serdt = new DataTable("tbl");
            try
            {
                _inventoryDAL = new InventoryDAL();
                serdt = _inventoryDAL.getAllSerialDetails(com, loc, ser1, ser2, ser3);

            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return serdt;
        }
        //Nuwan 2018.02.12
        public DataTable getBondDocJobNo(string itmcd, string com, string stus, Int32 lineno, string req, string docno, out string error)
        {
            error = "";
            DataTable det = new DataTable("tbl");
            try
            {
                _inventoryDAL = new InventoryDAL();
                det = _inventoryDAL.getBondDocJobNo(itmcd, com, stus, lineno, req, docno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return det;
        }
        //Add by lakshan 13Feb2018
        public DataTable GET_TEMP_DOC_PARTIAL(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _from, DateTime _To)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_TEMP_DOC_PARTIAL(_initialSearchParams, _searchCatergory, _searchText, _from, _To);
        }
        //Add by lakshan 13Feb2018
        public List<ReptPickSerials> GetAllScanSerialsListPartial(string _company, string _location, string _user, Int32 _userseqno, string _doctype)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GetAllScanSerialsListPartial(_company, _location, _user, _userseqno, _doctype);
        }
        //Add by lakshan 14Feb2018
        public Int32 IsExistInTempPickSerialPartial(string _companyCode, string _userSeqNo, string _itemCode, string _serialNo1)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.IsExistInTempPickSerialPartial(_companyCode, _userSeqNo, _itemCode, _serialNo1);
        }
        //Add by lakshan 14Feb2018
        public Int16 SaveAllScanSerialsPartial(ReptPickSerials _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerials != null)
            {
                if (string.IsNullOrEmpty(_reptPickSerials.Tus_pkg_uom_tp))
                {
                    effect = _inventoryRepDAL.SavePickedItemSerialsPartial(_reptPickSerials);
                }
                else
                {
                    effect = _inventoryRepDAL.SavePickedItemSerialsMacPartial(_reptPickSerials);
                }
            }
            //if (_reptPickSerialsSub != null)
            //{
            //    _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            //}
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            return effect;
        }
        //Add by lakshan 14Feb2018
        public List<ReptPickSerials> GET_TEMP_PICK_SER_DATA_PARTIAL(ReptPickSerials _repPickSer)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_SER_DATA_PARTIAL(_repPickSer);
        }
        //Add by lakshan 14Feb2018
        public List<ReptPickItems> GET_TEMP_PICK_ITM_DATA_PARTIAL(ReptPickItems _repTemItm)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_ITM_DATA_PARTIAL(_repTemItm);
        }
        //Add by lakshan 14Feb2018
        public List<ReptPickHeader> GET_TEMP_PICK_HDR_DATA_PARTIAL(ReptPickHeader _repHdr)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.GET_TEMP_PICK_HDR_DATA_PARTIAL(_repHdr);
        }
        //Add by lakshan 14Feb2018
        public Int32 DocumentFinishPartially(string _com, string docno, string doctyp, Int32 status, string _user, out string error)
        {
            Int32 eff = 0;
            error = "";
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            try
            {
                List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                ReptPickHeader _pickHdrData = _inventoryRepDAL.GET_TEMP_PICK_HDR_DATA(new ReptPickHeader()
                {
                    Tuh_usr_com = _com,
                    Tuh_doc_no = docno
                }).FirstOrDefault();
                if (_pickHdrData == null)
                {
                    _pickHdrData = _inventoryRepDAL.GET_TEMP_PICK_HDR_DATA_PARTIAL(new ReptPickHeader()
                    {
                        Tuh_usr_com = _com,
                        Tuh_doc_no = docno
                    }).FirstOrDefault();
                    if (_pickHdrData != null)
                    {
                        _inventoryRepDAL.SaveDocumentHdrFromPartially(docno, doctyp);
                    }
                }
                bool _serDataAva = false;
                if (_pickHdrData != null)
                {
                    _serList = _inventoryRepDAL.GET_TEMP_PICK_SER_DATA(new ReptPickSerials() { Tus_usrseq_no = _pickHdrData.Tuh_usrseq_no });
                    if (_serList != null)
                    {
                        if (_serList.Count > 0)
                        {
                            _serDataAva = true;
                        }
                    }
                }
                if (!_serDataAva)
                {
                    eff = _inventoryRepDAL.DocumentFinishPartially(docno, doctyp, status, _user);
                    if (eff == 1)
                    {
                        eff = 1;
                        _inventoryRepDAL.TransactionCommit();
                        _inventoryRepDAL.ConnectionClose();
                        return eff;
                    }
                    else
                    {
                        eff = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryRepDAL.ConnectionClose();
                        error = "Unable to finish document";
                        return eff;
                    }
                }
                else
                {
                    eff = -2;
                    error = "Document " + docno + " is already finished  by the user : " + _serList[0].Tus_cre_by;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    return eff;
                }
            }
            catch (Exception ex)
            {
                eff = -1;
                error = ex.Message;
                _inventoryRepDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
                return eff;
            }
        }
        public List<AUD_CHARGES> get_AUD_CHARGES(string _aud_com_cd, string _aud_tp, string _aud_reason, string _aud_itm_stus, string _aud_remarks, string _aud_charge_base_on, string _aud_value, Decimal _aud_charge, string _aud_price_book, string _aud_p_level, DateTime _aud_valid_from, DateTime _aud_valid_to,
                              String _aud_effect_to, Int32 _aud_charge_amend, string _aud_stock_adjuestment_type, string _aud_item_cd, string _aud_item_cat1, string _aud_item_brand)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_AUD_CHARGES(_aud_com_cd, _aud_tp, _aud_reason, _aud_itm_stus, _aud_remarks, _aud_charge_base_on, _aud_value, _aud_charge, _aud_price_book, _aud_p_level, _aud_valid_from, _aud_valid_to,
                                _aud_effect_to, _aud_charge_amend, _aud_stock_adjuestment_type, _aud_item_cd, _aud_item_cat1, _aud_item_brand);
        }
        //Add by lakshan 14Feb2018
        public Int32 SaveDocumentHdrFromPartially(string docno, string doctyp, out string error)
        {
            Int32 eff = 0;
            error = "";
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            try
            {
                eff = _inventoryRepDAL.SaveDocumentHdrFromPartially(docno, doctyp);
                if (eff == 1)
                {
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryRepDAL.ConnectionClose();
                    return eff;
                }
                else
                {
                    eff = -1;
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    error = "Unable to finish document";
                    return eff;
                }
            }
            catch (Exception ex)
            {
                eff = -1;
                error = ex.Message;
                _inventoryRepDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
                return eff;
            }
            _inventoryRepDAL = new ReptCommonDAL();
            return eff;
        }
        //Add by lakshan 17Feb2018
        public Int16 UpdateAllScanSerialsPartial(ReptPickSerials _reptPickSerials, out string error)
        {
            Int16 effect = 0;
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            try
            {
                if (_reptPickSerials != null)
                {
                    effect = _inventoryRepDAL.UpdatePickedItemSerialsPartial(_reptPickSerials);
                }
                if (effect > 0)
                {
                    effect = 1;
                    error = "";
                    _inventoryRepDAL.TransactionCommit();
                    _inventoryRepDAL.ConnectionClose();
                    return effect;
                }
                else
                {
                    effect = -1;
                    error = "";
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryRepDAL.ConnectionClose();
                    return effect;
                }
            }
            catch (Exception ex)
            {
                effect = -1;
                error = ex.Message;
                _inventoryRepDAL.TransactionRollback();
                _inventoryRepDAL.ConnectionClose();
                return effect;
            }
        }
        //add by tharanga 2018/02/19
        public void updateAuditJobSerails_charhes(List<AuditJobSerial> _auditNotes, out string _message)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            _message = null;

            try
            {
                if (_auditNotes.Count > 0)
                {
                    foreach (AuditJobSerial _note in _auditNotes)
                    {
                        _inventoryDAL.updateAuditJobSerails_charhes(_note);
                    }
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
        }
        public DataTable getBinDetailsSerPic(string company, string location, string pgeNum, string pgeSize, string searchFld, string searchVal, out string error)
        {
            error = "";
            DataTable res = new DataTable("tbl");
            try
            {
                _inventoryDAL = new InventoryDAL();
                res = _inventoryDAL.getBinDetailsSerPic(company, location, pgeNum, pgeSize, searchFld, searchVal);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public DataTable getSer1DetailsSerPic(string company, string location, string itemcd, string pgeNum, string pgeSize, string searchFld, string searchVal, out string error)
        {
            error = "";
            DataTable res = new DataTable("tbl");
            try
            {
                _inventoryDAL = new InventoryDAL();
                res = _inventoryDAL.getSer1DetailsSerPic(company, location, itemcd, pgeNum, pgeSize, searchFld, searchVal);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public DataTable get_audit_itm_charges_sum(string _audjs_job, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_audit_itm_charges_sum(_audjs_job, _com);
        }
        public List<AuditJobSerial> GetProcessedJobSerials_all(string _subJobNo, Int32 _startIndex, Int32 _endIndex, Int32 _status, string _com)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetProcessedJobSerials_all(_subJobNo, _startIndex, _endIndex, _status, _com);
        }
        public Int16 Updatei_JOB_Hdr_appby(string _AUSH_JOB, string _AUSH_COM, string _AUSH_MOD_BY, Int32 _AUSH_STUS, Int32 _ADJ_REQ, out string error)
        {
            Int16 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                effect = _inventoryDAL.Updatei_JOB_Hdr_appby(_AUSH_JOB, _AUSH_COM, _AUSH_MOD_BY, _AUSH_STUS, _ADJ_REQ);


                if (effect > 0)
                {
                    effect = 1;
                    error = "";
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return effect;
                }
                else
                {
                    effect = -1;
                    error = "";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    return effect;
                }
            }
            catch (Exception ex)
            {
                effect = -1;
                error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                return effect;
            }
        }

        public int SaveInventoryRequestData_ADUIT(List<InventoryRequest> _inventoryRequest, List<InventoryRequestItem> _InventoryRequestItem, List<InventoryRequestSerials> _InventoryRequestSerials, MasterAutoNumber _mastAutoNo)
        {
            int result = 0;
            int eff = 0;
            int resultR = 0;
            int seqno = 0;
            int itmballine = 1;
            string _errro = "";
            InventoryRequest _inrReqDataTmp = new InventoryRequest();
            InventoryRequest _inventoryRequest_R = new InventoryRequest();
            _securityDAL = new SecurityDAL();


            List<string> _documentNolist = new List<string>();
            List<InventoryRequest> _InventoryRequestlist = new List<InventoryRequest>();
            List<InventoryRequestItem> ScanItemList = new List<InventoryRequestItem>();
            List<InventoryRequestSerials> _InventoryRSerialsList = new List<InventoryRequestSerials>();

            if (_mastAutoNo != null) //Insert new record.
            {
                #region New Entry

                try
                {
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _custServiceDAL = new CustServiceDAL();
                    _custServiceDAL.ConnectionOpen();
                    _custServiceDAL.BeginTransaction();

                    CommonSearchBLL _commonBLL = new CommonSearchBLL();

                    foreach (InventoryRequest item in _inventoryRequest)
                    {
                        ScanItemList = _InventoryRequestItem.Where(r => r.Itri_seq_no == item.Itr_seq_no).ToList();
                        _InventoryRSerialsList = _InventoryRequestSerials.Where(r => r.Itrs_seq_no == item.Itr_seq_no).ToList();

                        result = _inventoryDAL.SaveInventoryRequest(item);


                        foreach (InventoryRequestItem _ScanItemList in ScanItemList)
                        {
                            _ScanItemList.Itri_seq_no = result;
                            eff = _inventoryDAL.SaveInventoryRequestItem(_ScanItemList);
                        }
                        if (eff > 0)
                        {
                            foreach (InventoryRequestSerials reqser in _InventoryRSerialsList)
                            {
                                eff = 0;
                                reqser.Itrs_seq_no = result;
                                eff = _inventoryDAL.SaveInventoryRequestSerials(reqser);
                                _inventoryDAL.Update_serialID_INS_AVAILABLE(item.Itr_com, item.Itr_loc, reqser.Itrs_itm_cd, reqser.Itrs_ser_id, -1);
                            }
                        }

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                        string _documentNo = _inventoryRequest.FirstOrDefault().Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                        // Update document no in Request Header table.
                        _inventoryDAL.UpdateInventoryRequestDocNo(result, _documentNo);
                        _documentNolist.Add(_documentNo);
                    }

                    if (eff > 0)
                    {
                        string _returnMessage = "";
                        Int16 effnew = _inventoryDAL.Updatei_JOB_Hdr_appby(_inventoryRequest.FirstOrDefault().Itr_anal1, _inventoryRequest.FirstOrDefault().Itr_com, _inventoryRequest.FirstOrDefault().Itr_cre_by, 1, 1);
                        #region send mail
                        string reqst = string.Join<string>(" , ", _documentNolist);

                        string email = "";

                        string model = "";
                        string qty = "";
                        DataTable pc = new DataTable();
                        //pc = CHNLSVC.CustService.get_profitcenter(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                        pc = _custServiceDAL.get_msg_info_MAIL(_inventoryRequest.FirstOrDefault().Itr_com, _inventoryRequest.FirstOrDefault().Itr_loc, "AUD"); //define mail and ph no
                        foreach (DataRow dr in pc.Rows)
                        {
                            email = dr["MMI_EMAIL"].ToString();

                            if (IsValidEmail(email))
                            {

                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();
                                _generalDAL = new GeneralDAL();
                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = " Dear Sir/Madam, \n\n" + _email;
                                _email += " Audit process request location : " + _inventoryRequest.FirstOrDefault().Itr_com + " - " + _inventoryRequest.FirstOrDefault().Itr_loc + " \n";
                                _email += "\n requested numbers are : " + reqst + " \n";
                                //_email += "\n Excutive code : " + _SalesOrder.SOH_SALES_EX_CD + " \n";
                                //_email += "\n SO # : " + _SalesOrder.SOH_SO_NO + "\n";
                                //_email += "\n Approve Date : " + _SalesOrder.SOH_MOD_WHEN + " \n";

                                //_email += _generalDAL.GetMailFooterMsg();
                                _email += " \n Thank You, \n ** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** \n ** IT Department **";
                                message.To.Add(email);
                                message.Subject = "Exchange adjustment request on audit process ";
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                smtpClient.Send(message);
                            }
                        }
                        #endregion

                        //eff = 1;
                        //error = "";
                        if (effnew > 0)
                        {
                            eff = 1;
                            _inventoryDAL.TransactionCommit();
                            _inventoryDAL.ConnectionClose();
                            
                        }
                       
                        return eff;
                    }
                }
                catch (Exception ex)
                {
                    result = -1;
                    _inventoryDAL.TransactionRollback();
                }
                #endregion
            }
            return result;
        }
        //Dulaj 2018/02/19
        public Int32 CheckItemUnitsIsDecimal(string mi_cd)
        {
            Int32 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            effect = _inventoryDAL.CheckItemUnitsIsDecimal(mi_cd);
            _inventoryDAL.ConnectionClose();
            return effect;
        }

        public Decimal Get_def_price_from_pc(string _pbook, string _plevel, string _itmcd, DateTime _date)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_def_price_from_pc(_pbook, _plevel, _itmcd, _date);
        }
        public bool IsValidEmail(string email)
        {
            string pattern = @"^[a-z][a-z|0-9|]*([_][a-z|0-9]+)*([.][a-z|0-9]+([_][a-z|0-9]+)*)?@[a-z][a-z|0-9|]*\.([a-z][a-z|0-9]*(\.[a-z][a-z|0-9]*)?)$";

            System.Text.RegularExpressions.Match match = Regex.Match(email.Trim(), pattern, RegexOptions.IgnoreCase);
            if (match.Success)
                return true;
            else
                return false;
        }
        public bool ValidateMobileNo(string num)//add by tharanga
        {
            int intNum = 0;
            //check only contain degits
            //if (!int.TryParse(num, out intNum))       //comented by kapila on 10/9/2015 coz +94 messages will not be sent
            //    return false;
            ////check for length
            //else
            //{
            if (num.Length < 10)
            {
                return false;
            }
            //check for first three chars
            else
            {
                string firstChar = num.Substring(0, 3);
                string firstChar_94 = num.Substring(0, 5);
                if (firstChar != "070" && firstChar != "071" && firstChar != "071" && firstChar != "077" && firstChar != "078" && firstChar != "072" && firstChar != "075" && firstChar != "076" && firstChar != "074" &&
                     firstChar_94 != "+9470" && firstChar_94 != "+9471" && firstChar_94 != "+9477" && firstChar_94 != "+9478" && firstChar_94 != "+9472" && firstChar_94 != "+9475" && firstChar_94 != "+9476" && firstChar_94 != "+9474")
                {
                return false;
        }
            }
            //}
            return true;
        }
        public bool reopenTempDocumentGRN(string docnum, string doctp, string seqno, string userid, out string error)
        {
            error = "";
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {

                Int32 eff = 0;
                eff = _inventoryDAL.reopenTempDocumentGRN(seqno, doctp, userid);
                if (eff > 0)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return true;
                }
                else
                {
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    error = "Unable to reopen document";
                    return false;
                }
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                error = ex.Message.ToString();
                return false;
            }

        }
        public DataTable getUserScanFinishedSerial(string seq, string userid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getUserScanFinishedSerial(seq, userid);
        }
        //Added By Dulaj 2018/MAR/15
        public DataTable GetItemConditionsByDate(string _com, DateTime _from_date, DateTime _to_date, string _otherLoc, string _loc, string user)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemConditionsByDate(_com, _from_date, _to_date, _otherLoc, _loc, user);
        }
        //Nuwan 2018.03.21
        public DataTable getSerialDetailsStatus(string ser1, string ser2, string com, out string error)
        {
            DataTable result = new DataTable();
            error = "";
            try
            {
                _inventoryDAL = new InventoryDAL();
                //result=_inventoryDAL.getSerialDetailsStatus(com, ser1, ser2);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }
        //Addd By Dulaj 2018-Mar-21
        public Int32 CheckExessQty(string _tp, string _cd, DateTime _grnDate, string _pty_cd)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.CheckExessQty(_tp, _cd, _grnDate, _pty_cd);
        }
        //ADD BY THARNGA 2018/03/28
        public List<AuditRemarkValue> GetPhicalStockRemark_FILTER(string p_ausv_job, Int32 p_ausv_line, Int32 p_ausv_job_seq, string p_ausv_itm, string p_ausv_itm_stus, Int32 p_ausv_ser_id, string p_ausv_rpt_stus)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetPhicalStockRemark_FILTER(p_ausv_job, p_ausv_line, p_ausv_job_seq, p_ausv_itm, p_ausv_itm_stus, p_ausv_ser_id, p_ausv_rpt_stus);
        }
        //Add By Dulaj 2018/Mar/29
        public bool SendSms(string mobileNo, string message, string customerName, string sender, string company)
        {
           
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            Int32 _saved = 0;
            string _errMsg = "";
            //string _message = string.Format("Reminder!{0}Please collect your item from {1} showroom within {2} {3} from this day, {4} will not hold responsibility for any loss, damage or disposal of the item.", Environment.NewLine, _locDesc, _period.ToString(), _periodControl, _comDesc);
            try
            {
                if (string.IsNullOrEmpty(mobileNo))
                {
                    _errMsg = "Receiver mobile number not found !";
                }
                else if (string.IsNullOrEmpty(message))
                {
                    _errMsg = "SMS body is empty !";
                }
                else if (mobileNo.Length >= 9)
                {
                    OutSMS _out = new OutSMS();
                    _out.Msg = message;
                    _out.Msgstatus = 0;
                    _out.Msgtype = "S";
                    _out.Receivedtime = DateTime.Now;
                    _out.Receiver = customerName; //customer name or code
                    //_out._deletedtime = DateTime.Now;
                    //_out._deliveredtime = DateTime.Now;
                    //_out._downloadtime = DateTime.Now;
                    //_out._msgid = "";
                    //_out.Seqno = 1;
                    //_out._receivedtime = DateTime.Now;

                    if (mobileNo.Length == 10)
                    {
                        _out.Receiverphno = "+94" + mobileNo.Substring(1, 9);
                        _out.Senderphno = "+94" + mobileNo.Substring(1, 9); //mobile number
                    }
                    if (mobileNo.Length == 9)
                    {
                        _out.Receiverphno = "+94" + mobileNo;
                        _out.Senderphno = "+94" + mobileNo;
                    }

                    _out.Refdocno = "";
                    _out.Sender = sender; //send by 
                    _out.Createtime = DateTime.Now;
                    _out.comcode = company;
                    _out.Msgid = "";
             
                    _saved = _generalDAL.SaveSMSOut(_out);
                }
                else
                {
                    _errMsg = "Invalid mobile number !";
                }
                if (_saved > 0)
                {
                    _generalDAL.TransactionCommit();
                    _generalDAL.ConnectionClose();
                    return true;
                }
                else
                {
                    _generalDAL.TransactionCommit();
                    _generalDAL.TransactionRollback();
                    return false;
                }
            }
            catch (Exception ex)
            {
                _generalDAL.TransactionCommit();
                _generalDAL.TransactionRollback();
                return false;
            }
        }
        public DataTable Get_pending_DIN(string _in_item, string in_serial, Int32 _in_ser_id)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.Get_pending_DIN(_in_item, in_serial, _in_ser_id);
    
        }
        public string GetBinCodeForNonSeralizeItem(string _itemCode, string _loc, string _com, string status)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBinCodeForNonSeralizeItem(_itemCode, _loc, _com, status);
        }

        #region add by tharanga 2018/03/19 get price to gvo creation
        public decimal FigureRoundUp(decimal value, bool _isFinal)
        {
            if (IsSaleFigureRoundUp && _isFinal) return RoundUpForPlace(Math.Round(value), 2);
            //else return RoundUpForPlace(value, 2);
            else return Math.Round(value, 2);
        }
        //public static string FormatToCurrency(string _value)
        //{
        //    string _format = System.Configuration.ConfigurationManager.AppSettings["FormatToCurrency"].ToString();
        //    return String.Format(_format, Convert.ToDecimal(_value));
        //}
        public static decimal RoundUpForPlace(decimal input, int places)
        {
            double multiplier = Math.Pow(10, Convert.ToDouble(places));
            return Math.Ceiling(input * Convert.ToDecimal(multiplier)) / Convert.ToDecimal(multiplier);
        }
        private decimal TaxCalculation(string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, decimal _disRate, bool _isTaxfaction, string p_book, string p_level, string p_com)
        {
            decimal _returnValValue = 0;
            SecurityBLL newSecurityBLL = new SecurityBLL();
            DateTime _serverDt = newSecurityBLL.GetServerDateTime().Date;
            //PriceBookLevelRef _priceBookLevelRef = new PriceBookLevelRef();
            GeneralBLL General = new GeneralBLL();
            SalesBLL Sales = new SalesBLL();
            InventoryBLL Inventory = new InventoryBLL();
            Boolean _isStrucBaseTax = false;
            _priceBookLevelRef = Sales.GetPriceLevel(p_com, p_book, p_level);
            MasterCompany _masterComp = null;
            _masterComp = General.GetCompByCode(p_com);

            if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

            if (_priceBookLevelRef != null)
                if (_priceBookLevelRef.Sapl_vat_calc)
                {
                    bool _isVATInvoice = false;
                    if (DateTime.Now.Date == _serverDt)
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                        if (_isTaxfaction == false)
                        {
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = Inventory.GetItem(p_com, _item);
                                _taxs = Sales.GetTax_strucbase(p_com, _item, _status, null, null, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = Sales.GetTax(p_com, _item, _status);
                        }
                        else
                        {
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = Inventory.GetItem(p_com, _item);
                                _taxs = Sales.GetItemTax_strucbase(p_com, _item, _status, string.Empty, "VAT", _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = Sales.GetItemTax(p_com, _item, _status, string.Empty, "VAT");
                        }
                        var _Tax = from _itm in _taxs
                                   select _itm;
                        foreach (MasterItemTax _one in _Tax)
                        {
                            if (_isTaxfaction == false)
                                if (_isStrucBaseTax == true)   //kapila 9/2/2017
                                    _returnValValue = _pbUnitPrice;
                                else
                                    _returnValValue += _pbUnitPrice * _one.Mict_tax_rate;

                            else
                                if (_isVATInvoice)
                                {
                                    _discount = (_pbUnitPrice * _qty) * _disRate / 100;
                                    _returnValValue += (((_pbUnitPrice - _discount / _qty) + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;

                                }
                                else
                                    _returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;

                        }
                    }
                    else
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                        if (_isTaxfaction == false)
                            _taxs = Sales.GetTaxEffDt(p_com, _item, _status, DateTime.Now.Date);
                        else
                            _taxs = Sales.GetItemTaxEffDt(p_com, _item, _status, string.Empty, "VAT", DateTime.Now.Date);

                        var _Tax = from _itm in _taxs
                                   select _itm;
                        if (_taxs.Count > 0)
                        {
                            foreach (MasterItemTax _one in _Tax)
                            {
                                if (_isTaxfaction == false)
                                    if (_isStrucBaseTax == true)   //kapila 9/2/2017
                                        _returnValValue = _pbUnitPrice;
                                    else
                                        _returnValValue += _pbUnitPrice * _one.Mict_tax_rate;
                                else
                                    if (_isVATInvoice)
                                    {
                                        _discount = (_pbUnitPrice * _qty) * _disRate / 100;
                                        _returnValValue += (((_pbUnitPrice - _discount / _qty) + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;

                                    }
                                    else
                                        _returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                            if (_isTaxfaction == false)
                                _taxsEffDt = Sales.GetTaxLog(p_com, _item, _status, DateTime.Now.Date);
                            else
                                _taxsEffDt = Sales.GetItemTaxLog(p_com, _item, _status, string.Empty, "VAT", DateTime.Now.Date);

                            var _TaxEffDt = from _itm in _taxsEffDt
                                            select _itm;
                            foreach (LogMasterItemTax _one in _TaxEffDt)
                            {
                                if (_isTaxfaction == false)
                                    if (_isStrucBaseTax == true)    //kapila 9/2/2017
                                        _returnValValue = _pbUnitPrice;
                                    else
                                        _returnValValue += _pbUnitPrice * _one.Lict_tax_rate;
                                else
                                    if (_isVATInvoice)
                                    {
                                        _discount = (_pbUnitPrice * _qty) * _disRate / 100;
                                        _returnValValue += (((_pbUnitPrice - _discount / _qty) + _returnValValue) * _one.Lict_tax_rate / 100) * _qty;

                                    }
                                    else
                                        _returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Lict_tax_rate / 100) * _qty;
                            }
                        }
                    }
                }
                else
                {
                    _returnValValue = _pbUnitPrice;
                    if (_isTaxfaction) _returnValValue = 0;
                }


            return _returnValValue;
        }
        #endregion

        public DataTable Get_alladj_Req(string _company, string _user, string _reqTp, string _stus, DateTime _frmDt, DateTime _toDt, string _subTp)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_alladj_Req(_company, _user, _reqTp, _stus, _frmDt, _toDt, _subTp);
        }
        public DataTable Get_Delivery_det_by_ser(string _company, string _item, string _serial, string _loc, string _doc_tp)
        { 
             _inventoryDAL = new InventoryDAL();
             return _inventoryDAL.Get_Delivery_det_by_ser(_company, _item, _serial, _loc, _doc_tp);

            
        }
        public Int16 update_adj_req_itm_status(Int32 itri_seq_no, Int32 itri_line_no, string _itri_itm_cd, string itri_itm_stus, string tri_note, out string error)
        {
            Int16 effect = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {

                effect = _inventoryDAL.update_adj_req_itm_status(itri_seq_no, itri_line_no, _itri_itm_cd, itri_itm_stus, tri_note);

                if (effect > 0)
                {
                    effect = 1;
                    error = "";
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    return effect;
                }
                else
                {
                    effect = -1;
                    error = "";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    return effect;
                }
            }
            catch (Exception ex)
            {
                effect = -1;
                error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                return effect;
            }
        }
        //add by tharanga 2018/05/18
        public DataTable Get_get_fixed_asset(string _com, string _loc, string _pc, string _ser, string _itm)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.Get_get_fixed_asset(_com, _loc, _pc, _ser, _itm);

        }

        public DataTable GetDepreciationMethods(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetDepreciationMethods(_company);
        }
        //Dulaj 2018/May/03
        public Int32 SaveMasterAssetPrameter(MasterAssetParameter Msp)
        {
            Int32 _effect = 0;
            try
            {
            
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _effect = _inventoryDAL.SaveMasterAssetPrameter(Msp);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        //Dulaj 2018/May/04
        public DataTable GetAssetParameters(string _company)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetAssetParameters(_company);
        }
        //Dulaj 2018/May/11
        public Int32 UpdateMasterAssetPrameter(MasterAssetParameter Msp)
        {
            Int32 _effect = 0;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _effect = _inventoryDAL.UpdateMasterAssetPrameter(Msp);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        //Dulaj 2018/Jun/04
        //Dulaj 2018/Jun/04
        public DataTable Check_Already_savedMethods(string cat01, string cat02, string status)
        {
            DataTable _effect = new DataTable();
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _effect = _inventoryDAL.Check_Already_savedMethods(cat01, cat02, status);
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = null;
            }
            return _effect;
        }

        //add by Rangika 2018/05/21
        public DataTable getExelUploadResig(string _userId)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getExelUploadResig(_userId);

        }

        //Rangika (2018/04/26)
        public Int32 Updateecxelbulk(List<User_Resign_Bulk> _User_Resign_Bulk, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryDAL.Updateecxelbulk(_User_Resign_Bulk);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }

        public DataTable GET_TEMP_PICK_SER_BY_SER(string _ser_1, string _ser_2)
        {
            ReptCommonDAL rcd = new ReptCommonDAL();
            return rcd.GET_TEMP_PICK_SER_BY_SER(_ser_1, _ser_2);
        }


        public Int16 SaveInwardScanSerial_FIXA(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;

            Int16 itmLine = 1;
            Int16 batchLine = 1;
            Int16 serLine = 1;
            //Added By Prabhath on 31/10/2012
            string _scm2LocCategory = string.Empty;
            string _scmLocCategory = string.Empty;
            string _scm2LocType = string.Empty;
            string _companycostmethod = string.Empty;
            string _company = _inventoryMovementHeader.Ith_com;
            string _documentType = _inventoryMovementHeader.Ith_doc_tp;
            bool _isAvgType = false;
            _companycostmethod = _fixassetDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;

            //added by dilshan on 26/04/2018 for rev status change
            string _statusRev = _inventoryMovementHeader.Ith_doc_tp;

            //#region Update List for the New Ageing Process
            //_reptPickSerials.ForEach(x => { x.Tus_exist_grncom = _inventoryMovementHeader.Ith_com; x.Tus_exist_grnno = _inventoryMovementHeader.Ith_doc_no; x.Tus_exist_grndt = _inventoryMovementHeader.Ith_doc_date; x.Tus_exist_supp = _inventoryMovementHeader.Ith_loc; });
            //#endregion

            Int32 reptSeqNo = 0;

            List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
            PickSerials = _reptPickSerials;

            #region Set default values for null values :: Chamal 25/10/2012
            foreach (ReptPickSerials pickserials in PickSerials)
            {
                if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
                {
                    pickserials.Tus_base_doc_no = "N/A";
                }
            }
            #endregion Set default values for null values :: Chamal 25/10/2012

            #region Rukshan for serial ID zero (0) GRN in SCM Web 30-Mar-2016
            List<ReptPickSerials> _nonserialitem = new List<ReptPickSerials>();
            List<ReptPickSerials> _serialitem = new List<ReptPickSerials>();
            _nonserialitem = _reptPickSerials.Where(x => x.Tus_ser_id == 0).ToList();
            _serialitem = _reptPickSerials.Where(x => x.Tus_ser_id != 0).ToList();
            if (_nonserialitem != null)
            {
                int _isserialMaintan = 0;
                //CHECK SERIAL MAINTANCE LOCATION
                MasterLocationNew _objloc = new MasterLocationNew();
                _objloc.Ml_loc_cd = _inventoryMovementHeader.Ith_loc;
                _objloc.Ml_act = 1;
                // _objloc.Ml_com_cd=Session["UserCompanyCode"].ToString();
                List<MasterLocationNew> _LOC = GetMasterLocations(_objloc);
                if (_LOC.Count > 0)
                {
                    _isserialMaintan = _LOC.First().Ml_is_serial;

                }
                foreach (ReptPickSerials _nserial in _nonserialitem)
                {

                    int i = _serialitem.Count;
                    MasterItem msitem = _fixassetDAL.GetItem(_nserial.Tus_com, _nserial.Tus_itm_cd);
                    if (_isserialMaintan == 0)
                    {
                        if (msitem.Mi_is_ser1 != -1)
                        {
                            msitem.Mi_is_ser1 = 0;
                        }
                    }
                    if (msitem.Mi_is_ser1 == 0)
                    {
                        List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();

                        int j = 0;
                        int qty = Convert.ToInt32(_nserial.Tus_qty);
                        while (j < qty)
                        {
                            #region pickserial
                            ReptPickSerials _test = new ReptPickSerials();
                            _test.ItemType = _nserial.ItemType;
                            _test.Mis_desc = _nserial.Mis_desc;
                            _test.Tus_ageloc = _nserial.Tus_ageloc;
                            _test.Tus_ageloc_dt = _nserial.Tus_ageloc_dt;
                            _test.Tus_appstatus = _nserial.Tus_appstatus;
                            _test.Tus_base_doc_no = _nserial.Tus_base_doc_no;
                            _test.Tus_base_itm_line = _nserial.Tus_base_itm_line;
                            _test.Tus_batch_line = _nserial.Tus_batch_line;
                            _test.Tus_batch_no = _nserial.Tus_batch_no;
                            _test.Tus_bin = _nserial.Tus_bin;
                            _test.Tus_com = _nserial.Tus_com;
                            _test.Tus_cre_by = _nserial.Tus_cre_by;
                            _test.Tus_cre_dt = _nserial.Tus_cre_dt;
                            _test.Tus_cross_batchline = _nserial.Tus_cross_batchline;
                            _test.Tus_cross_itemline = _nserial.Tus_cross_itemline;
                            _test.Tus_cross_seqno = _nserial.Tus_cross_seqno;
                            _test.Tus_cross_serline = _nserial.Tus_cross_serline;
                            _test.Tus_doc_dt = _nserial.Tus_doc_dt;
                            _test.Tus_doc_no = _nserial.Tus_doc_no;
                            _test.Tus_ed_pg = _nserial.Tus_ed_pg;
                            _test.Tus_exist_grncom = _nserial.Tus_exist_grncom;
                            _test.Tus_exist_grndt = _nserial.Tus_exist_grndt;
                            _test.Tus_exist_grnno = _nserial.Tus_exist_grnno;
                            _test.Tus_exist_supp = _nserial.Tus_exist_supp;
                            _test.Tus_exp_dt = _nserial.Tus_exp_dt;
                            _test.Tus_is_pgs = _nserial.Tus_is_pgs;
                            _test.Tus_isapp = _nserial.Tus_isapp;
                            _test.Tus_iscovernote = _nserial.Tus_iscovernote;
                            _test.Tus_isownmrn = _nserial.Tus_isownmrn;
                            _test.Tus_itm_brand = _nserial.Tus_itm_brand;
                            _test.Tus_itm_cd = _nserial.Tus_itm_cd;
                            _test.Tus_itm_desc = _nserial.Tus_itm_desc;
                            _test.Tus_itm_line = _nserial.Tus_itm_line;
                            _test.Tus_itm_model = _nserial.Tus_itm_model;
                            _test.Tus_itm_stus = _nserial.Tus_itm_stus;
                            _test.Tus_job_line = _nserial.Tus_job_line;
                            _test.Tus_job_no = _nserial.Tus_job_no;
                            _test.Tus_loc = _nserial.Tus_loc;
                            _test.Tus_manufac_dt = _nserial.Tus_manufac_dt;
                            _test.Tus_new_itm_cd = _nserial.Tus_new_itm_cd;
                            _test.Tus_new_remarks = _nserial.Tus_new_remarks;
                            _test.Tus_new_status = _nserial.Tus_new_status;
                            _test.Tus_orig_grncom = _nserial.Tus_orig_grncom;
                            _test.Tus_orig_grnno = _nserial.Tus_orig_grnno;
                            _test.Tus_orig_supp = _nserial.Tus_orig_supp;
                            _test.Tus_out_date = _nserial.Tus_out_date;
                            _test.Tus_pgs_count = _nserial.Tus_pgs_count;
                            _test.Tus_pgs_prefix = _nserial.Tus_pgs_prefix;
                            _test.Tus_res_line = _nserial.Tus_res_line;
                            _test.Tus_res_no = _nserial.Tus_res_no;
                            _test.Tus_resqty = _nserial.Tus_resqty;
                            _test.Tus_seq_no = _nserial.Tus_seq_no;
                            _test.Tus_orig_supp = _nserial.Tus_orig_supp;
                            _test.Tus_orig_grndt = _nserial.Tus_orig_grndt;
                            _test.Tus_ser_1 = _nserial.Tus_ser_1;
                            _test.Tus_ser_2 = _nserial.Tus_ser_2;
                            _test.Tus_ser_3 = _nserial.Tus_ser_3;
                            _test.Tus_ser_4 = _nserial.Tus_ser_4;
                            _test.Tus_ser_line = _nserial.Tus_ser_line;
                            _test.Tus_serial_id = _nserial.Tus_serial_id;
                            _test.Tus_session_id = _nserial.Tus_session_id;
                            _test.Tus_st_pg = _nserial.Tus_st_pg;
                            _test.Tus_unit_cost = _nserial.Tus_unit_cost;
                            _test.Tus_unit_price = _nserial.Tus_unit_price;
                            _test.Tus_usrseq_no = _nserial.Tus_usrseq_no;




                            _test.Tus_warr_no = _nserial.Tus_warr_no;
                            _test.Tus_warr_period = _nserial.Tus_warr_period;

                            _test.Tus_qty = 1;
                            _test.Tus_ser_id = _fixassetDAL.GetSerialID();
                            string _warrantyno = string.Empty;
                            _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _test.Tus_ser_id.ToString();
                            _nserial.Tus_warr_no = _warrantyno;
                            #endregion
                            //_serialitem.Add(_serialObj);
                            _serialitem.Insert(i, _test);
                            i++;
                            j++;
                        }

                    }
                    if (msitem.Mi_is_ser1 == -1)
                    {
                        _serialitem.Add(_nserial);
                    }

                }


                PickSerials = _serialitem;
                _reptPickSerials = _serialitem;

            }

            #endregion

            int _isSerial = 1;
            DataTable dt_location = _fixassetDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            foreach (DataRow rw in dt_location.Rows)
            {
                _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
                _inventoryMovementHeader.Ith_channel = Convert.ToString(rw["ML_CATE_2"]); //Channel Code
                _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
                _scm2LocType = (string)rw["ML_LOC_TP"];//Location Type
                _isSerial = (Int16)rw["ML_IS_SERIAL"];//Is Serial Maintain
            }

            if (_scm2LocCategory == "DF") { _scmLocCategory = "DUTY FREE"; }
            else { _scmLocCategory = "DUTY PAID"; }
            //Chamal 13-Nov-2015 // 30-11-2015 testing completed
            if (_scm2LocType != "SERC")
            {
                if (_isSerial == 1) //Chamal 06-Apr-2016 for Web SCM-II
                {
                    if (_inventoryMovementHeader.Ith_gen_frm == "SCMWEB" && _scm2LocCategory == "DFS")
                    {
                        #region add by lakshan 11Oct2017
                        //Job no not replace when serial maintain and DFS category locations
                        #endregion
                    }
                    else
                    {
                        DataTable _loctype = _fixassetDAL.GetLocTypes(_scm2LocType);
                        if (_loctype.Rows.Count > 0)
                        {
                            string _Isjobbase = _loctype.Rows[0][3].ToString();
                            if (!string.IsNullOrEmpty(_Isjobbase))
                            {
                                int value = Convert.ToInt32(_Isjobbase);
                                if (value == 0)
                                {
                                    PickSerials.ForEach(x => x.Tus_job_no = null);
                                    PickSerials.ForEach(x => x.Tus_job_line = 0);
                                }
                            }
                            else
                            {
                                PickSerials.ForEach(x => x.Tus_job_no = null);
                                PickSerials.ForEach(x => x.Tus_job_line = 0);
                            }
                        }
                    }
                }
            }
            #region job number update as production number
            if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB" && _inventoryMovementHeader.Tmp_update_job_no)
            {
                InventoryRequest _tmpReq = _fixassetDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryMovementHeader.Ith_entry_no }).FirstOrDefault();
                if (_tmpReq != null)
                {
                    if (_tmpReq.Itr_sub_tp == "PRO")
                    {
                        PickSerials.ForEach(x => x.Tus_job_no = _tmpReq.Itr_job_no);
                        PickSerials.ForEach(x => x.Tus_job_line = 0);
                    }
                }
            }
            #endregion
            //Added By Prabhath on 1/11/2012 --------------------AVG COST--------------------------------------------------
            #region Avarage Cost Calculation

            //switch (_documentType)
            //{
            //    case "GRN":
            //        _isAvgType = true;
            //        break;
            //    case "AOD":
            //        if (_scm2LocCategory == "DFS")
            //            _isAvgType = true;
            //        else
            //            _isAvgType = false;
            //        break;
            //    case "ADJ":
            //        _isAvgType = true;
            //        break;
            //    case "SRN":
            //        _isAvgType = true;
            //        break;
            //    default:
            //        _isAvgType = false;
            //        break;
            //}

            //if (!string.IsNullOrEmpty(_companycostmethod))
            //    if (_companycostmethod == "AVG" && _isAvgType)
            //    {
            //        var _ItemAvg = (from i in PickSerials
            //                        group i by new { i.Tus_itm_cd, i.Tus_itm_stus } into batch
            //                        select new { Tus_itm_cd = batch.Key.Tus_itm_cd, Tus_itm_stus = batch.Key.Tus_itm_stus, Tus_cost = batch.Sum(p => p.Tus_qty * p.Tus_unit_cost) }).ToList();

            //        foreach (var _itm in _ItemAvg)
            //        {
            //            string _itmCode = _itm.Tus_itm_cd;

            //            decimal _scm2TotBalanceCost = 0;
            //            decimal _scm2BalQty = 0;
            //            decimal _scmTotBalanceCost = 0;
            //            decimal _scmBalQty = 0;

            //            decimal _scm2TotCurrentCost = 0;
            //            decimal _scm2CurrentQty = 0;

            //            string _scm2Status = _itm.Tus_itm_stus; ;
            //            string _scmStatus = string.Empty;
            //            DataTable _tblStus = _fixassetDAL.GetItemStatusMaster(_scm2Status, string.Empty);
            //            if (_tblStus != null)
            //                if (_tblStus.Rows.Count > 0)
            //                {
            //                    foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
            //                }

            //            //Get SCM2 Balance Cost
            //            DataTable _scm2baltbl = _fixassetDAL.GetItemBalanceAvg(_company, _scm2LocCategory, _itmCode, _scm2Status);
            //            if (_scm2baltbl != null)
            //                if (_scm2baltbl.Rows.Count > 0)
            //                {
            //                    _scm2TotBalanceCost = 0;
            //                    foreach (DataRow _r in _scm2baltbl.Rows)
            //                    {
            //                        _scm2TotBalanceCost += Convert.ToDecimal(_r["inl_qty"]) * Convert.ToDecimal(_r["inl_avg_cost"]);
            //                        _scm2BalQty += Convert.ToDecimal(_r["inl_qty"]);
            //                    }
            //                }

            //            //Get SCM Balance Cost
            //            DataTable _scmbaltbl = _ScmCommonDAL.GetItemBalanceAvg(_company, _scmLocCategory, _itmCode, _scmStatus);
            //            if (_scmbaltbl != null)
            //                if (_scmbaltbl.Rows.Count > 0)
            //                {
            //                    _scmTotBalanceCost = 0;
            //                    foreach (DataRow _r in _scmbaltbl.Rows)
            //                    {
            //                        _scmTotBalanceCost += Convert.ToDecimal(_r["qty_in_hand"]) * Convert.ToDecimal(_r["avg_cost"]);
            //                        _scmBalQty += Convert.ToDecimal(_r["qty_in_hand"]);
            //                    }
            //                }

            //            //Get SCM2 Current Entry
            //            _scm2TotCurrentCost = _itm.Tus_cost;
            //            _scm2CurrentQty = PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).Sum(y => y.Tus_qty);

            //            // Calculation
            //            //------------
            //            // Avg Cost = [(Balance Weighted Cost) + (Currecnt Weighted Cost)] / (Total Qty)
            //            // In simplify;
            //            // Avg Cost = [(SCM2 Balance + SCM Balance) + (SCM2 Current Entry)]/(SCM2 Balance Qty + SCM Balance Qty + SCM2 Current Entry Qty)

            //            decimal _newAvgCost = (_scm2TotBalanceCost + _scmTotBalanceCost + _scm2TotCurrentCost) / (_scm2BalQty + _scmBalQty + _scm2CurrentQty);

            //            //Update Entry List
            //            PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).ToList().ForEach(y => y.Tus_new_status = Convert.ToString(Math.Round(_newAvgCost, 4)));

            //        }

            //    }
            #endregion Avarage Cost Calculation

            #region Avarage Cost Calculation add by Lakshan 03Jul2017
            List<INR_AVG_COST> _inrCstList = new List<INR_AVG_COST>();
            if (!_inventoryMovementHeader.Tmp_avg_cost_calc)
            {
                switch (_documentType)
                {
                    case "GRN":
                        _isAvgType = true;
                        break;
                    case "AOD":
                        {
                            string _locCat = "";
                            DataTable _dtTmpLoc = _fixassetDAL.Get_location_by_code(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc, 1);
                            foreach (DataRow rw in _dtTmpLoc.Rows)
                            {
                                _locCat = (string)rw["ML_CATE_1"];//Location Categry Code
                            }
                            if (_locCat == "DFS")
                            {
                                _isAvgType = true;
                            }
                            else
                            {
                                _isAvgType = false;
                            }
                            //if (_scm2LocCategory == "DFS")
                            //    _isAvgType = true;
                            //else
                            //    _isAvgType = false;

                            break;
                        }
                    case "ADJ":
                        _isAvgType = true;
                        break;
                    case "SRN":
                        _isAvgType = true;
                        break;
                    default:
                        _isAvgType = false;
                        break;
                }
                if (!string.IsNullOrEmpty(_companycostmethod))
                {
                    if (_companycostmethod == "AVG" && _isAvgType)
                    {
                        #region save avg cost summery to inr_avg_cst_mth add by lakshan 07Jul2017
                        DateTime _docDt = _inventoryMovementHeader.Ith_doc_date;
                        //DateTime _prevMthEnd = new DateTime(_docDt.Year,_docDt.Month,01).AddMonths(1).AddDays(-1);
                        decimal _lastMonthDataAva = _fixassetDAL.GetInrAvgCostMthDataAva(_docDt);
                        if (_lastMonthDataAva == 0)
                        {
                            _fixassetDAL.UpdateInrMnthlyCostData(_inventoryMovementHeader.Ith_cre_by);
                        }
                        #endregion
                        decimal _avgCst = 0;
                        decimal _noOfUnit = 0;
                        INR_AVG_COST _tmpInrAvgCst = new INR_AVG_COST();
                        INR_AVG_COST_GIT _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                        INR_AVG_COST _saveAvgCst = new INR_AVG_COST();
                        INR_AVG_COST _inrAvgCstAva = new INR_AVG_COST();
                        INR_AVG_COST_GIT _inrAvgCstAvaGit = new INR_AVG_COST_GIT();
                        MasterLocation _mstLocIn = _fixassetDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                        List<INR_AVG_COST> _listAvgData = new List<INR_AVG_COST>();
                        INR_AVG_COST _avgData = new INR_AVG_COST();
                        foreach (var _pSer in _reptPickSerials)
                        {
                            _avgData = new INR_AVG_COST();
                            _avgData.Iac_itm_cd = _pSer.Tus_itm_cd;
                            _avgData.Iac_itm_stus = _pSer.Tus_itm_stus;
                            _avgData.Iac_avg_qty = _pSer.Tus_qty;
                            _avgData.Iac_avg_cost = _pSer.Tus_unit_cost;
                            _avgData.Tmp_mult_cost = _pSer.Tus_qty * _pSer.Tus_unit_cost;
                            _listAvgData.Add(_avgData);
                        }

                        var _itmList = _listAvgData.GroupBy(x => new { x.Iac_itm_cd, x.Iac_itm_stus }).Select(group =>
                            new { Peo = group.Key, docQty = group.Sum(o => o.Iac_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                        foreach (var item in _itmList)
                        {
                            _tmpInrAvgCst = new INR_AVG_COST();
                            _tmpInrAvgCst.Iac_com = _inventoryMovementHeader.Ith_com;
                            _tmpInrAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAva = _fixassetDAL.GET_INR_AVG_COST_DATA(_tmpInrAvgCst);
                            _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
                            _tmpInrAvgCstGit.Iacg_com = _inventoryMovementHeader.Ith_com;
                            _tmpInrAvgCstGit.Iacg_itm_cd = item.Peo.Iac_itm_cd;
                            _tmpInrAvgCstGit.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                            _tmpInrAvgCstGit.Iacg_itm_stus = item.Peo.Iac_itm_stus;
                            _inrAvgCstAvaGit = _fixassetDAL.GET_INR_AVG_GIT_BY_LOC_TP(_tmpInrAvgCstGit);
                            decimal _gitBal = 0;
                            if (_inrAvgCstAvaGit != null)
                            {
                                _gitBal = _inrAvgCstAvaGit.Iacg_avg_qty;
                            }
                            decimal _invBal = _fixassetDAL.GetInrBalanceForAvgCost(_inventoryMovementHeader.Ith_com, item.Peo.Iac_itm_cd, item.Peo.Iac_itm_stus, _mstLocIn.Ml_cate_1);
                            _invBal = _invBal + _gitBal;
                            if (_documentType == "SRN")
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (_inrAvgCstAva.Iac_avg_cost * item.docQty)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            else
                            {
                                if (_inrAvgCstAva != null && _invBal > 0)
                                {
                                    _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (item.docCst)) / (_invBal + item.docQty);
                                    _noOfUnit = _invBal + item.docQty;
                                }
                                else
                                {
                                    _avgCst = item.docCst / item.docQty;
                                    _noOfUnit = item.docQty;
                                }
                            }
                            _saveAvgCst = new INR_AVG_COST();
                            _saveAvgCst.Iac_com = _inventoryMovementHeader.Ith_com;
                            _saveAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
                            _saveAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
                            _saveAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
                            _saveAvgCst.Iac_avg_dt = DateTime.Now;
                            _saveAvgCst.Iac_avg_cost = Math.Round(_avgCst, 4);
                            _saveAvgCst.Iac_avg_qty = _noOfUnit;
                            _saveAvgCst.Iac_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _saveAvgCst.Iac_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                            _saveAvgCst.Iac_mod_by = _inventoryMovementHeader.Ith_mod_by;
                            _saveAvgCst.Iac_mod_dt = _inventoryMovementHeader.Ith_mod_when;
                            //_saveAvgCst.Iac_anal_1 = "";
                            //_saveAvgCst.Iac_anal_2 = "";
                            //_saveAvgCst.Iac_anal_3 = "";
                            //_saveAvgCst.Iac_anal_4 = "";
                            //_saveAvgCst.Iac_anal_5 = "";
                            //_saveAvgCst.Iac_costofsale = "";
                            //_saveAvgCst.Iac_tot_inv_rate = "";
                            //_saveAvgCst.Iac_sold_qty = "";
                            //_saveAvgCst.Iac_sold_qty_intr_com = "";
                            //_saveAvgCst.Iac_avg_inv_days = "";
                            _inrCstList.Add(_saveAvgCst);
                            _fixassetDAL.UpdateInrCostData(_saveAvgCst);
                        }
                    }
                }
            }
            #endregion
            //End of AVG COST ---------------------------------------------------------------------------------------------

            //Int32 _docSeqNo = _fixassetDAL.GetSerialID(); emoved by chamal 12-05-2013
            if (_inventoryMovementHeader.Ith_seq_no == 0)
            {
                _inventoryMovementHeader.Ith_seq_no = _fixassetDAL.GetSerialID();
            }
            _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

            if (_inventoryMovementHeader != null)
                _fixassetDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

            var _tbitems =
                from _pickSerials in _reptPickSerials
                group _pickSerials by new
                {
                    _pickSerials.Tus_bin,
                    _pickSerials.Tus_itm_cd,
                    _pickSerials.Tus_itm_stus
                } into itm
                select new
                {
                    bincode = itm.Key.Tus_bin,
                    itemcode = itm.Key.Tus_itm_cd,
                    itemstatus = itm.Key.Tus_itm_stus,
                    itemqty = itm.Sum(p => p.Tus_qty)
                };

            //If line no issue please consider below LINQ statement. (Prabhath on 21/02/2014)
            //var _tbitems =
            //    (from _pickSerials in _reptPickSerials
            //     group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
            //     select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);

            //dilshan *********************************
            if (_statusRev == "SRN" && _inventoryMovementHeader.Ith_gen_frm == "SCMWEB")
            {
                foreach (var items in _tbitems)
                {
                    InventoryItem invItem = new InventoryItem();
                    invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invItem.Iti_item_line = itmLine;
                    invItem.Iti_bin_code = items.bincode;
                    invItem.Iti_item_code = items.itemcode;
                    invItem.Iti_item_status = items.itemstatus;
                    invItem.Iti_qty = items.itemqty;
                    invItem.Iti_bal_qty = items.itemqty;
                    invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                    // INSERT/UPDATE INT_ITM TABLE
                    _fixassetDAL.UpdateInventoryItem(invItem);

                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation
                    //decimal _particulerAvgCost = 0;
                    //if (_companycostmethod == "AVG" && _isAvgType)
                    //{
                    //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    //    foreach (string _h in _avgcost)
                    //        _particulerAvgCost = Convert.ToDecimal(_h);
                    //}
                    #endregion Avarage Cost Calculation
                    //Added By Prabhath on 1/11/2012

                    batchLine = 1;
                    //added by dilshan revesal
                    var _tbbatchs =
                       from _pickSerials in PickSerials
                       where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                       group _pickSerials by new
                       {
                           _pickSerials.Tus_bin,
                           _pickSerials.Tus_itm_cd,
                           //_pickSerials.Tus_itm_stus,  //commented by dilshan
                           _pickSerials.Tus_appstatus, //added by dilshan revesal
                           _pickSerials.Tus_unit_cost,
                           _pickSerials.Tus_unit_price,
                           _pickSerials.Tus_base_doc_no,
                           _pickSerials.Tus_doc_no,
                           _pickSerials.Tus_base_itm_line,
                           _pickSerials.Tus_itm_line,
                           _pickSerials.Tus_batch_line,
                           _pickSerials.Tus_job_no,
                           _pickSerials.Tus_job_line,
                           _pickSerials.Tus_res_no,
                           _pickSerials.Tus_res_line,
                           _pickSerials.Tus_batch_no,
                           _pickSerials.Tus_exp_dt,
                           _pickSerials.Tus_manufac_dt,
                           _pickSerials.Tus_pgs_prefix,
                           _pickSerials.Tus_new_itm_cd
                       } into batch
                       select new
                       {
                           bincode = batch.Key.Tus_bin,
                           itemcode = batch.Key.Tus_itm_cd,
                           //itemstatus = batch.Key.Tus_itm_stus,//commented by dilshan
                           itemstatus = batch.Key.Tus_appstatus,//added by dilshan
                           unitcost = batch.Key.Tus_unit_cost,
                           unitprice = batch.Key.Tus_unit_price,
                           basedocno = batch.Key.Tus_base_doc_no,
                           baseitmline = batch.Key.Tus_base_itm_line,
                           outdocno = batch.Key.Tus_doc_no,
                           outitmline = batch.Key.Tus_itm_line,
                           outbatchline = batch.Key.Tus_batch_line,
                           jobno = batch.Key.Tus_job_no,
                           jobline = batch.Key.Tus_job_line,
                           resNo = batch.Key.Tus_res_no,  //Add by Lakshan 21 Oct 2016
                           resline = batch.Key.Tus_res_line,  //Add by Lakshan 21 Oct 2016
                           batchno = batch.Key.Tus_batch_no,
                           expdate = batch.Key.Tus_exp_dt,
                           manufacdate = batch.Key.Tus_manufac_dt,
                           mainitemcode = batch.Key.Tus_pgs_prefix,
                           baseitem = batch.Key.Tus_new_itm_cd,
                           itemqty = batch.Sum(p => p.Tus_qty)
                       };
                    //added by dilshan revesal               
                    foreach (var batchs in _tbbatchs)
                    {
                        InventoryBatchN invBatch = new InventoryBatchN();
                        invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                        invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                        invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                        invBatch.Inb_itm_line = itmLine;
                        invBatch.Inb_batch_line = batchLine;
                        invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                        invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                        invBatch.Inb_bin = batchs.bincode;
                        invBatch.Inb_itm_cd = batchs.itemcode;
                        invBatch.Inb_itm_stus = batchs.itemstatus;
                        invBatch.Inb_qty = batchs.itemqty;
                        invBatch.Inb_unit_cost = batchs.unitcost;
                        invBatch.Itb_bal_qty1 = batchs.itemqty;
                        invBatch.Itb_bal_qty2 = batchs.itemqty;
                        invBatch.Inb_unit_price = batchs.unitprice;
                        invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)                        
                        invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                        invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                        invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        if (string.IsNullOrEmpty(batchs.baseitem))
                        {
                            invBatch.Inb_base_itmcd = batchs.itemcode;
                        }
                        else
                        {
                            invBatch.Inb_base_itmcd = batchs.baseitem;//batchs.itemcode;
                        }
                        invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                        invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                        invBatch.Inb_base_itmstus = batchs.itemstatus;
                        invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                        invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                        invBatch.Itb_git_ignore = false;
                        invBatch.Itb_git_ignore_by = null;
                        invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                        invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                        invBatch.Inb_res_no = null;
                        invBatch.Inb_res_lineno = 0;
                        if (!string.IsNullOrEmpty(batchs.resNo) && batchs.resNo != "N/A")
                        {
                            invBatch.Inb_res_no = batchs.resNo;  //Add by Lakshan 21 Oct 2016
                            invBatch.Inb_res_lineno = batchs.resline;  //Add by Lakshan 21 Oct 2016
                        }
                        invBatch.Inb_base_doc_no1 = null;
                        invBatch.Inb_base_doc_no2 = null;
                        invBatch.Inb_base_doc_no3 = null;
                        invBatch.Inb_cur_cd = null;
                        invBatch.Inb_grup_cur_cd = null;
                        invBatch.Inb_free_qty = batchs.itemqty;
                        invBatch.Inb_manufac_dt = batchs.manufacdate;
                        invBatch.Inb_mitm_cd = batchs.mainitemcode;

                        // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
                        _fixassetDAL.UpdateInventoryBatch(invBatch);
                        #region Avarage Cost Calculation add by Lakshan 06Jul2017
                        if (!string.IsNullOrEmpty(_companycostmethod))
                        {
                            if (_companycostmethod == "AVG" && _isAvgType)
                            {
                                var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
                                if (v != null)
                                {
                                    invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                    invBatch.Inb_unit_cost = v.Iac_avg_cost;
                                }
                            }
                        }
                        #endregion Avarage Cost Calculation
                        //Added By Prabhath on 1/11/2012
                        _fixassetDAL.UpdateInventoryBatchRef(invBatch, 1);
                        //added by dilshan revesal
                        serLine = 1;
                        var _tbsers =
                            (from _pickSerials in PickSerials
                             where
                             _pickSerials.Tus_bin == batchs.bincode
                             && _pickSerials.Tus_itm_cd == batchs.itemcode
                                 //&& _pickSerials.Tus_itm_stus == batchs.itemstatus  //commented by dilshan
                             && _pickSerials.Tus_appstatus == batchs.itemstatus  //added by dilshan
                             && _pickSerials.Tus_unit_cost == batchs.unitcost
                             && _pickSerials.Tus_unit_price == batchs.unitprice
                             && _pickSerials.Tus_base_doc_no == batchs.basedocno
                             && _pickSerials.Tus_doc_no == batchs.outdocno
                             && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                             && _pickSerials.Tus_itm_line == batchs.outitmline
                             && _pickSerials.Tus_batch_line == batchs.outbatchline
                             && _pickSerials.Tus_job_no == batchs.jobno
                             && _pickSerials.Tus_job_line == batchs.jobline
                             && _pickSerials.Tus_batch_no == batchs.batchno
                             && _pickSerials.Tus_exp_dt == batchs.expdate
                             && _pickSerials.Tus_manufac_dt == batchs.manufacdate
                             && _pickSerials.Tus_pgs_prefix == batchs.mainitemcode
                             select _pickSerials).Distinct();
                        foreach (var sers in _tbsers.Distinct())
                        {
                            reptSeqNo = sers.Tus_usrseq_no;

                            InventorySerialN invSerials = new InventorySerialN();
                            invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                            invSerials.Ins_itm_line = itmLine;
                            invSerials.Ins_batch_line = batchLine;
                            invSerials.Ins_ser_line = serLine;
                            invSerials.Ins_direct = true;
                            invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                            invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                            invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                            invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                            invSerials.Ins_bin = sers.Tus_bin;
                            invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                            //invSerials.Ins_itm_stus = sers.Tus_itm_stus; //commented by dilshan on 12/04/2018 //added by dilshan revesal
                            invSerials.Ins_itm_stus = sers.Tus_appstatus; // added by dilshan on 12/04/2018
                            invSerials.Ins_unit_cost = sers.Tus_unit_cost;
                            invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _fixassetDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                            invSerials.Ins_ser_1 = sers.Tus_ser_1;
                            invSerials.Ins_ser_2 = sers.Tus_ser_2;
                            invSerials.Ins_ser_3 = sers.Tus_ser_3;
                            invSerials.Ins_ser_4 = sers.Tus_ser_4;
                            invSerials.Ins_warr_no = sers.Tus_warr_no;
                            invSerials.Ins_warr_period = sers.Tus_warr_period;
                            invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                            invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                            invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                            invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                            invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                            invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                            invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                            invSerials.Ins_exist_supp = sers.Tus_exist_supp;

                            //updated by akila 2017/07/27
                            invSerials.Ins_cross_itmline = sers.Tus_base_itm_line;
                            invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                            invSerials.Ins_cross_serline = sers.Tus_ser_line;

                            //invSerials.Ins_cross_seqno = null;
                            //invSerials.Ins_cross_itmline = null;
                            //invSerials.Ins_cross_batchline = null;
                            //invSerials.Ins_cross_serline = null;
                            //invSerials.Ins_issue_dt = sers.Tus_out_date;
                            invSerials.Ins_available = 1;
                            invSerials.Ins_ageloc = sers.Tus_ageloc;
                            invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                            invSerials.Ins_isownmrn = sers.Tus_isownmrn;

                            //add rukshan on 01/Jun/2016
                            invSerials.Ins_is_pgs = sers.Tus_is_pgs;
                            invSerials.Ins_pgs_count = sers.Tus_pgs_count;
                            invSerials.Ins_pg_prefix = sers.Tus_pgs_prefix;
                            invSerials.Ins_st_pg = sers.Tus_st_pg;
                            invSerials.Ins_ed_pg = sers.Tus_ed_pg;


                            //Add Prabhath on 19/04/2012
                            InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                            _invWarraDetail.Irsm_acc_no = null;
                            _invWarraDetail.Irsm_anal_1 = null;
                            _invWarraDetail.Irsm_anal_2 = null;
                            _invWarraDetail.Irsm_anal_3 = null;
                            _invWarraDetail.Irsm_anal_4 = null;
                            _invWarraDetail.Irsm_anal_5 = null;
                            _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                            _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                            _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _invWarraDetail.Irsm_cre_when = DateTime.Now;
                            _invWarraDetail.Irsm_cust_addr = null;
                            _invWarraDetail.Irsm_cust_cd = null;
                            _invWarraDetail.Irsm_cust_del_addr = null;
                            _invWarraDetail.Irsm_cust_email = null;
                            _invWarraDetail.Irsm_cust_fax = null;
                            _invWarraDetail.Irsm_cust_mobile = null;
                            _invWarraDetail.Irsm_cust_name = null;
                            _invWarraDetail.Irsm_cust_prefix = null;
                            _invWarraDetail.Irsm_cust_tel = null;
                            _invWarraDetail.Irsm_cust_town = null;
                            _invWarraDetail.Irsm_cust_vat_no = null;
                            _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                            _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                            _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                            _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                            _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                            _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                            _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                            _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                            _invWarraDetail.Irsm_invoice_no = null;
                            _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                            _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                            _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                            _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                            //_invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus; //commented by dilshan //added by dilshan revesal
                            _invWarraDetail.Irsm_itm_stus = sers.Tus_appstatus; //added by dilshan
                            _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                            _invWarraDetail.Irsm_loc_desc = null;
                            _invWarraDetail.Irsm_mfc = null;
                            _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _invWarraDetail.Irsm_mod_when = DateTime.Now;
                            _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                            _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                            _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                            _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                            _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                            _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                            _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                            _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                            _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                            _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                            _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                            _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                            _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                            _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                            _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                            _invWarraDetail.Irsm_warr_rem = null;
                            _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                            _invWarraDetail.Irsm_warr_stus = null;


                            //Sahan 24 Feb 2016
                            _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                            _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                            _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                            _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                            _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                            _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;

                            #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
                            if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
                            {
                                _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
                            }
                            if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
                            {
                                _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
                            }
                            if (_invWarraDetail.Irsm_warr_period == 0)
                            {
                                MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                if (_warPer != null)
                                {
                                    if (_warPer.Mwp_val != 0)
                                    {
                                        _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
                                        invSerials.Ins_warr_period = _warPer.Mwp_val;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
                                        invSerials.Ins_warr_period = 12;
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
                            {
                                MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                if (_warPer != null)
                                {
                                    if (_warPer.Mwp_val != 0)
                                    {
                                        _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
                                    }
                                }
                            }
                            string _tmpWar = string.Empty;
                            if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            else if (_invWarraDetail.Irsm_warr_no == "N/A")
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            #endregion

                            // decimal allow none-serialized items are not saved in serial related tables
                            if (sers.Tus_ser_id != 0)
                            {
                                bool _isUpdWarrSts = false;
                                if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
                                {
                                    _invWarraDetail.Irsm_warr_stus = "N";
                                    _isUpdWarrSts = true;
                                }
                                if (_inventoryMovementHeader._warrNotupdate != true)//add by tharanga ravent and revet reale inrsermast not update value pass from client side
                                {
                                    if (_isUpdWarrSts)
                                    {
                                        #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                                        _fixassetDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                                        #endregion
                                    }
                                    else
                                    {
                                        _fixassetDAL.SaveWarrantyDetail(_invWarraDetail);
                                    }
                                }
                                _fixassetDAL.SaveInventorySerial(invSerials, 1);
                                #region Avarage Cost Calculation add by Lakshan 06Jul2017
                                if (!string.IsNullOrEmpty(_companycostmethod))
                                {
                                    if (_companycostmethod == "AVG" && _isAvgType)
                                    {
                                        var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
                                        if (v != null)
                                        {
                                            invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                            invSerials.Ins_unit_cost = v.Iac_avg_cost;
                                        }
                                    }
                                }
                                #endregion Avarage Cost Calculation
                                //Added By Prabhath on 1/11/2012

                                try
                                {
                                    _fixassetDAL.SaveInventorySerialRef(invSerials, 1);
                                }
                                catch (Exception ex)
                                {

                                    if (ex.Message.Contains("EMS.DUPLICATE_SERIALS_FOUND"))
                                    {
                                        effect = -2;
                                        return -2;

                                        // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                                    }
                                }
                                //Edit Chamal 18-10-2012
                                //_fixassetDAL.UpdateOutCrossRef(sers.Tus_base_doc_no, sers.Tus_ser_id, sers.Tus_doc_dt.Date, invSerials.Ins_seq_no, invSerials.Ins_itm_line, invSerials.Ins_batch_line, invSerials.Ins_ser_line);

                                //Tharaka 2015-12-30
                                Int32 result = InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, "", _inventoryMovementHeader.Ith_seq_no, 1);
                                serLine += 1;

                                #region
                                //Edit by Rukshan 04-sep-2015
                                int _line = 0;
                                if (_reptPickSerialsSub != null)
                                {

                                    foreach (ReptPickSerialsSub _Sub in _reptPickSerialsSub)
                                    {
                                        InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
                                        if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
                                        {
                                            _invSubDetail.Irsms_act = true;
                                            _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
                                            _invSubDetail.Irsms_ser_line = _line;
                                            _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
                                            _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
                                            _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
                                            _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
                                            _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
                                            _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
                                            _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
                                            _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
                                            _invSubDetail.Mi_act = true;
                                            // _invSubDetail.Irsms_qty = _1;
                                            // CustServiceDAL _CustServiceDAL = new CustServiceDAL();
                                            //_CustServiceDAL.ConnectionOpen();
                                            // _CustServiceDAL.BeginTransaction();
                                            _fixassetDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
                                            // _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);                                      
                                            // _CustServiceDAL.TransactionCommit();
                                            // _CustServiceDAL.ConnectionClose();
                                            _line++;
                                        }

                                    }
                                }

                                #endregion
                            }
                        }

                        batchLine += 1;
                    }

                    itmLine += 1;
                }
            }
            //*****************************************
            else
            {
                foreach (var items in _tbitems)
                {
                    InventoryItem invItem = new InventoryItem();
                    invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
                    invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                    invItem.Iti_item_line = itmLine;
                    invItem.Iti_bin_code = items.bincode;
                    invItem.Iti_item_code = items.itemcode;
                    invItem.Iti_item_status = items.itemstatus;
                    invItem.Iti_qty = items.itemqty;
                    invItem.Iti_bal_qty = items.itemqty;
                    invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
                    // INSERT/UPDATE INT_ITM TABLE
                    _fixassetDAL.UpdateInventoryItem(invItem);

                    //Added By Prabhath on 1/11/2012
                    #region Avarage Cost Calculation
                    //decimal _particulerAvgCost = 0;
                    //if (_companycostmethod == "AVG" && _isAvgType)
                    //{
                    //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_new_status).Distinct();
                    //    foreach (string _h in _avgcost)
                    //        _particulerAvgCost = Convert.ToDecimal(_h);
                    //}
                    #endregion Avarage Cost Calculation
                    //Added By Prabhath on 1/11/2012

                    batchLine = 1;
                    //added by dilshan revesal
                    var _tbbatchs =
                        from _pickSerials in PickSerials
                        where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
                        group _pickSerials by new
                        {
                            _pickSerials.Tus_bin,
                            _pickSerials.Tus_itm_cd,
                            _pickSerials.Tus_itm_stus,  //commented by dilshan
                            //_pickSerials.Tus_appstatus, //added by dilshan revesal
                            _pickSerials.Tus_unit_cost,
                            _pickSerials.Tus_unit_price,
                            _pickSerials.Tus_base_doc_no,
                            _pickSerials.Tus_doc_no,
                            _pickSerials.Tus_base_itm_line,
                            _pickSerials.Tus_itm_line,
                            _pickSerials.Tus_batch_line,
                            _pickSerials.Tus_job_no,
                            _pickSerials.Tus_job_line,
                            _pickSerials.Tus_res_no,
                            _pickSerials.Tus_res_line,
                            _pickSerials.Tus_batch_no,
                            _pickSerials.Tus_exp_dt,
                            _pickSerials.Tus_manufac_dt,
                            _pickSerials.Tus_pgs_prefix,
                            _pickSerials.Tus_new_itm_cd
                        } into batch
                        select new
                        {
                            bincode = batch.Key.Tus_bin,
                            itemcode = batch.Key.Tus_itm_cd,
                            itemstatus = batch.Key.Tus_itm_stus,//commented by dilshan
                            //itemstatus = batch.Key.Tus_appstatus,//added by dilshan
                            unitcost = batch.Key.Tus_unit_cost,
                            unitprice = batch.Key.Tus_unit_price,
                            basedocno = batch.Key.Tus_base_doc_no,
                            baseitmline = batch.Key.Tus_base_itm_line,
                            outdocno = batch.Key.Tus_doc_no,
                            outitmline = batch.Key.Tus_itm_line,
                            outbatchline = batch.Key.Tus_batch_line,
                            jobno = batch.Key.Tus_job_no,
                            jobline = batch.Key.Tus_job_line,
                            resNo = batch.Key.Tus_res_no,  //Add by Lakshan 21 Oct 2016
                            resline = batch.Key.Tus_res_line,  //Add by Lakshan 21 Oct 2016
                            batchno = batch.Key.Tus_batch_no,
                            expdate = batch.Key.Tus_exp_dt,
                            manufacdate = batch.Key.Tus_manufac_dt,
                            mainitemcode = batch.Key.Tus_pgs_prefix,
                            baseitem = batch.Key.Tus_new_itm_cd,
                            itemqty = batch.Sum(p => p.Tus_qty)
                        };
                    //added by dilshan revesal               
                    foreach (var batchs in _tbbatchs)
                    {
                        InventoryBatchN invBatch = new InventoryBatchN();
                        invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
                        invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
                        invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
                        invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
                        invBatch.Inb_itm_line = itmLine;
                        invBatch.Inb_batch_line = batchLine;
                        invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
                        invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
                        invBatch.Inb_bin = batchs.bincode;
                        invBatch.Inb_itm_cd = batchs.itemcode;
                        invBatch.Inb_itm_stus = batchs.itemstatus;
                        invBatch.Inb_qty = batchs.itemqty;
                        invBatch.Inb_unit_cost = batchs.unitcost;
                        invBatch.Itb_bal_qty1 = batchs.itemqty;
                        invBatch.Itb_bal_qty2 = batchs.itemqty;
                        invBatch.Inb_unit_price = batchs.unitprice;
                        invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)
                        invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
                        invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
                        invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                        if (string.IsNullOrEmpty(batchs.baseitem))
                        {
                            invBatch.Inb_base_itmcd = batchs.itemcode;
                        }
                        else
                        {
                            invBatch.Inb_base_itmcd = batchs.baseitem;//batchs.itemcode;
                        }
                        invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
                        invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
                        invBatch.Inb_base_itmstus = batchs.itemstatus;
                        invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                        invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
                        invBatch.Itb_git_ignore = false;
                        invBatch.Itb_git_ignore_by = null;
                        invBatch.Itb_git_ignore_dt = DateTime.MinValue;
                        invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
                        invBatch.Inb_res_no = null;
                        invBatch.Inb_res_lineno = 0;
                        if (!string.IsNullOrEmpty(batchs.resNo) && batchs.resNo != "N/A")
                        {
                            invBatch.Inb_res_no = batchs.resNo;  //Add by Lakshan 21 Oct 2016
                            invBatch.Inb_res_lineno = batchs.resline;  //Add by Lakshan 21 Oct 2016
                        }
                        invBatch.Inb_base_doc_no1 = null;
                        invBatch.Inb_base_doc_no2 = null;
                        invBatch.Inb_base_doc_no3 = null;
                        invBatch.Inb_cur_cd = null;
                        invBatch.Inb_grup_cur_cd = null;
                        invBatch.Inb_free_qty = batchs.itemqty;
                        invBatch.Inb_manufac_dt = batchs.manufacdate;
                        invBatch.Inb_mitm_cd = batchs.mainitemcode;

                        // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
                        _fixassetDAL.UpdateInventoryBatch(invBatch);
                        #region Avarage Cost Calculation add by Lakshan 06Jul2017
                        if (!string.IsNullOrEmpty(_companycostmethod))
                        {
                            if (_companycostmethod == "AVG" && _isAvgType)
                            {
                                var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
                                if (v != null)
                                {
                                    invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
                                    invBatch.Inb_unit_cost = v.Iac_avg_cost;
                                }
                            }
                        }
                        #endregion Avarage Cost Calculation
                        //Added By Prabhath on 1/11/2012
                        _fixassetDAL.UpdateInventoryBatchRef(invBatch, 1);
                        //added by dilshan revesal
                        serLine = 1;
                        var _tbsers =
                            (from _pickSerials in PickSerials
                             where
                             _pickSerials.Tus_bin == batchs.bincode
                             && _pickSerials.Tus_itm_cd == batchs.itemcode
                             && _pickSerials.Tus_itm_stus == batchs.itemstatus  //commented by dilshan
                                 //&& _pickSerials.Tus_appstatus == batchs.itemstatus  //added by dilshan
                             && _pickSerials.Tus_unit_cost == batchs.unitcost
                             && _pickSerials.Tus_unit_price == batchs.unitprice
                             && _pickSerials.Tus_base_doc_no == batchs.basedocno
                             && _pickSerials.Tus_doc_no == batchs.outdocno
                             && _pickSerials.Tus_base_itm_line == batchs.baseitmline
                             && _pickSerials.Tus_itm_line == batchs.outitmline
                             && _pickSerials.Tus_batch_line == batchs.outbatchline
                             && _pickSerials.Tus_job_no == batchs.jobno
                             && _pickSerials.Tus_job_line == batchs.jobline
                             && _pickSerials.Tus_batch_no == batchs.batchno
                             && _pickSerials.Tus_exp_dt == batchs.expdate
                             && _pickSerials.Tus_manufac_dt == batchs.manufacdate
                             && _pickSerials.Tus_pgs_prefix == batchs.mainitemcode
                             select _pickSerials).Distinct();
                        foreach (var sers in _tbsers.Distinct())
                        {
                            reptSeqNo = sers.Tus_usrseq_no;

                            InventorySerialN invSerials = new InventorySerialN();
                            invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
                            invSerials.Ins_itm_line = itmLine;
                            invSerials.Ins_batch_line = batchLine;
                            invSerials.Ins_ser_line = serLine;
                            invSerials.Ins_direct = true;
                            invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
                            invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
                            invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
                            invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
                            invSerials.Ins_bin = sers.Tus_bin;
                            invSerials.Ins_itm_cd = sers.Tus_itm_cd;
                            invSerials.Ins_itm_stus = sers.Tus_itm_stus; //commented by dilshan on 12/04/2018 //added by dilshan revesal
                            //invSerials.Ins_itm_stus = sers.Tus_appstatus; // added by dilshan on 12/04/2018
                            invSerials.Ins_unit_cost = sers.Tus_unit_cost;

                            if (sers.Tus_itm_stus == "RVT")
                            {
                                //  invSerials.Ins_unit_price = sers.Tus_unit_price; // Add by Tharindu to check 2018-02-14

                                invSerials.Ins_unit_price = sers.Tus_Cap_Amt;
                            }


                            invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _fixassetDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
                            invSerials.Ins_ser_1 = sers.Tus_ser_1;
                            invSerials.Ins_ser_2 = sers.Tus_ser_2;
                            invSerials.Ins_ser_3 = sers.Tus_ser_3;
                            invSerials.Ins_ser_4 = sers.Tus_ser_4;
                            invSerials.Ins_warr_no = sers.Tus_warr_no;
                            invSerials.Ins_warr_period = sers.Tus_warr_period;
                            invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
                            invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
                            invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
                            invSerials.Ins_orig_supp = sers.Tus_orig_supp;
                            invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
                            invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
                            invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
                            invSerials.Ins_exist_supp = sers.Tus_exist_supp;

                            //updated by akila 2017/07/27
                            invSerials.Ins_cross_itmline = sers.Tus_base_itm_line;
                            invSerials.Ins_cross_batchline = sers.Tus_batch_line;
                            invSerials.Ins_cross_serline = sers.Tus_ser_line;

                            //invSerials.Ins_cross_seqno = null;
                            //invSerials.Ins_cross_itmline = null;
                            //invSerials.Ins_cross_batchline = null;
                            //invSerials.Ins_cross_serline = null;
                            //invSerials.Ins_issue_dt = sers.Tus_out_date;
                            invSerials.Ins_available = 1;
                            invSerials.Ins_ageloc = sers.Tus_ageloc;
                            invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
                            invSerials.Ins_isownmrn = sers.Tus_isownmrn;

                            //add rukshan on 01/Jun/2016
                            invSerials.Ins_is_pgs = sers.Tus_is_pgs;
                            invSerials.Ins_pgs_count = sers.Tus_pgs_count;
                            invSerials.Ins_pg_prefix = sers.Tus_pgs_prefix;
                            invSerials.Ins_st_pg = sers.Tus_st_pg;
                            invSerials.Ins_ed_pg = sers.Tus_ed_pg;


                            //Add Prabhath on 19/04/2012
                            InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
                            _invWarraDetail.Irsm_acc_no = null;
                            _invWarraDetail.Irsm_anal_1 = null;
                            _invWarraDetail.Irsm_anal_2 = null;
                            _invWarraDetail.Irsm_anal_3 = null;
                            _invWarraDetail.Irsm_anal_4 = null;
                            _invWarraDetail.Irsm_anal_5 = null;
                            _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
                            _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
                            _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
                            _invWarraDetail.Irsm_cre_when = DateTime.Now;
                            _invWarraDetail.Irsm_cust_addr = null;
                            _invWarraDetail.Irsm_cust_cd = null;
                            _invWarraDetail.Irsm_cust_del_addr = null;
                            _invWarraDetail.Irsm_cust_email = null;
                            _invWarraDetail.Irsm_cust_fax = null;
                            _invWarraDetail.Irsm_cust_mobile = null;
                            _invWarraDetail.Irsm_cust_name = null;
                            _invWarraDetail.Irsm_cust_prefix = null;
                            _invWarraDetail.Irsm_cust_tel = null;
                            _invWarraDetail.Irsm_cust_town = null;
                            _invWarraDetail.Irsm_cust_vat_no = null;
                            _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
                            _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
                            _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
                            _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
                            _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
                            _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
                            _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
                            _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
                            _invWarraDetail.Irsm_invoice_no = null;
                            _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
                            _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
                            _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
                            _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
                            _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus; //commented by dilshan //added by dilshan revesal
                            //_invWarraDetail.Irsm_itm_stus = sers.Tus_appstatus; //added by dilshan
                            _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
                            _invWarraDetail.Irsm_loc_desc = null;
                            _invWarraDetail.Irsm_mfc = null;
                            _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
                            _invWarraDetail.Irsm_mod_when = DateTime.Now;
                            _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
                            _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
                            _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
                            _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
                            _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
                            _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
                            _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
                            _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
                            _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
                            _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
                            _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
                            _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
                            _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
                            _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
                            _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
                            _invWarraDetail.Irsm_warr_rem = null;
                            _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
                            _invWarraDetail.Irsm_warr_stus = null;


                            //Sahan 24 Feb 2016
                            _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
                            _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
                            _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
                            _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
                            _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
                            _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;

                            #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
                            if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
                            {
                                _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
                            }
                            if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
                            {
                                _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
                            }
                            if (_invWarraDetail.Irsm_warr_period == 0)
                            {
                                MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                if (_warPer != null)
                                {
                                    if (_warPer.Mwp_val != 0)
                                    {
                                        _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
                                        invSerials.Ins_warr_period = _warPer.Mwp_val;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
                                        invSerials.Ins_warr_period = 12;
                                    }
                                }
                            }
                            if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
                            {
                                MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
                                if (_warPer != null)
                                {
                                    if (_warPer.Mwp_val != 0)
                                    {
                                        _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
                                    }
                                    else
                                    {
                                        _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
                                    }
                                }
                            }
                            string _tmpWar = string.Empty;
                            if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            else if (_invWarraDetail.Irsm_warr_no == "N/A")
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
                            {
                                _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
                                    "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
                                _invWarraDetail.Irsm_warr_no = _tmpWar;
                                invSerials.Ins_warr_no = _tmpWar;
                            }
                            #endregion

                            // decimal allow none-serialized items are not saved in serial related tables
                            if (sers.Tus_ser_id != 0)
                            {
                                bool _isUpdWarrSts = false;
                                if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
                                {
                                    _invWarraDetail.Irsm_warr_stus = "N";
                                    _isUpdWarrSts = true;
                                }
                                if (_inventoryMovementHeader._warrNotupdate != true)//add by tharanga ravent and revet reale inrsermast not update value pass from client side
                                {
                                    if (_isUpdWarrSts)
                                    {
                                        #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
                                        _fixassetDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
                                        #endregion
                                    }
                                    else
                                    {
                                        _fixassetDAL.SaveWarrantyDetail(_invWarraDetail);
                                    }
                                }
                                _fixassetDAL.SaveInventorySerial(invSerials, 1);
                                #region Avarage Cost Calculation add by Lakshan 06Jul2017
                                if (!string.IsNullOrEmpty(_companycostmethod))
                                {
                                    if (_companycostmethod == "AVG" && _isAvgType)
                                    {
                                        var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
                                        if (v != null)
                                        {
                                            invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
                                            invSerials.Ins_unit_cost = v.Iac_avg_cost;
                                        }
                                    }
                                }
                                #endregion Avarage Cost Calculation
                                //Added By Prabhath on 1/11/2012
                                try
                                {
                                    _fixassetDAL.SaveInventorySerialRef(invSerials, 1);
                                }
                                catch (Exception ex)
                                {

                                    if (ex.Message.Contains("EMS.DUPLICATE_SERIALS_FOUND"))
                                    {
                                        effect = -2;
                                        return -2;

                                        // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                                    }
                                }

                                //Edit Chamal 18-10-2012
                                //_fixassetDAL.UpdateOutCrossRef(sers.Tus_base_doc_no, sers.Tus_ser_id, sers.Tus_doc_dt.Date, invSerials.Ins_seq_no, invSerials.Ins_itm_line, invSerials.Ins_batch_line, invSerials.Ins_ser_line);

                                //Tharaka 2015-12-30
                                Int32 result = InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, "", _inventoryMovementHeader.Ith_seq_no, 1);
                                serLine += 1;

                                #region
                                //Edit by Rukshan 04-sep-2015
                                int _line = 0;
                                if (_reptPickSerialsSub != null)
                                {

                                    foreach (ReptPickSerialsSub _Sub in _reptPickSerialsSub)
                                    {
                                        InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
                                        if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
                                        {
                                            _invSubDetail.Irsms_act = true;
                                            _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
                                            _invSubDetail.Irsms_ser_line = _line;
                                            _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
                                            _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
                                            _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
                                            _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
                                            _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
                                            _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
                                            _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
                                            _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
                                            _invSubDetail.Mi_act = true;
                                            // _invSubDetail.Irsms_qty = _1;
                                            // CustServiceDAL _CustServiceDAL = new CustServiceDAL();
                                            //_CustServiceDAL.ConnectionOpen();
                                            // _CustServiceDAL.BeginTransaction();
                                            _fixassetDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
                                            // _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);                                      
                                            // _CustServiceDAL.TransactionCommit();
                                            // _CustServiceDAL.ConnectionClose();
                                            _line++;
                                        }

                                    }
                                }

                                #endregion
                            }
                        }

                        batchLine += 1;
                    }

                    itmLine += 1;
                }
            }
            _fixassetDAL.UpdateOutDocStatus(_inventoryMovementHeader.Ith_oth_docno);

            // Update location inventory
            var _tblocainv =
                from _pickSerials in PickSerials
                group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

            foreach (var locaitems in _tblocainv)
            {
                //Added By Prabhath on 1/11/2012
                #region Avarage Cost Calculation
                //string _scmStatus = string.Empty;
                //DataTable _tblStus = _fixassetDAL.GetItemStatusMaster(locaitems.itemstatus, string.Empty);
                //if (_tblStus != null)
                //    if (_tblStus.Rows.Count > 0)
                //    {
                //        foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
                //    }

                //decimal _particulerAvgCost = 0;
                //if (_companycostmethod == "AVG" && _isAvgType)
                //{
                //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == locaitems.itemcode && y.Tus_itm_stus == locaitems.itemstatus).Select(s => s.Tus_new_status).Distinct();
                //    foreach (string _h in _avgcost)
                //        _particulerAvgCost = Convert.ToDecimal(_h);
                //    _fixassetDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, locaitems.itemstatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
                //    _ScmCommonDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, _scmStatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
                //}
                #endregion Avarage Cost Calculation
                //Added By Prabhath on 1/11/2012

                InventoryLocation invLocation = new InventoryLocation();
                invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
                invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
                invLocation.Inl_itm_cd = locaitems.itemcode;
                invLocation.Inl_itm_stus = locaitems.itemstatus;
                invLocation.Inl_qty = locaitems.itemqty;
                invLocation.Inl_free_qty = locaitems.itemqty;
                invLocation.Inl_res_qty = 0;
                invLocation.Inl_isu_qty = locaitems.itemqty;
                invLocation.Inl_bl_qty = 0;
                invLocation.Inl_eo_qty = 0;
                invLocation.Inl_ro_qty = 0;
                invLocation.Inl_cre_by = null;

                _fixassetDAL.UpdateInventoryLocation(invLocation, 1);
            }
            if (reptSeqNo != 0)
            {
                _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
            }
            #region avg cost git maintain 14Jul2017 Lakshan
            if (_inventoryMovementHeader.Ith_doc_tp == "AOD" && _inventoryMovementHeader.Ith_direct && !_inventoryMovementHeader.Tmp_avg_cost_calc)
            {
                decimal _avgCst = 0;
                decimal _noOfUnit = 0;
                INR_AVG_COST_GIT _tmpInrAvgCst = new INR_AVG_COST_GIT();
                INR_AVG_COST_GIT _saveAvgCst = new INR_AVG_COST_GIT();
                INR_AVG_COST_GIT _inrAvgCstAva = new INR_AVG_COST_GIT();
                MasterLocation _mstLocIn = _fixassetDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
                {
                    _mstLocIn = _fixassetDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Tmp_err_loc);
                }
                if (_mstLocIn == null) { throw new Exception("Location details not found"); }

                List<InventoryBatchN> _tmpInvBatList = _fixassetDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
                List<INR_AVG_COST_GIT> _listAvgData = new List<INR_AVG_COST_GIT>();
                INR_AVG_COST_GIT _avgData = new INR_AVG_COST_GIT();
                foreach (var _pBat in _tmpInvBatList)
                {
                    _avgData = new INR_AVG_COST_GIT();
                    _avgData.Iacg_itm_cd = _pBat.Inb_itm_cd;
                    _avgData.Iacg_itm_stus = _pBat.Inb_itm_stus;
                    _avgData.Iacg_avg_qty = _pBat.Inb_qty;
                    _avgData.Iacg_avg_cost = _pBat.Inb_unit_cost;
                    _avgData.Tmp_mult_cost = _pBat.Inb_qty * _pBat.Inb_unit_cost;
                    _listAvgData.Add(_avgData);
                }
                var _invBatList = _listAvgData.GroupBy(x => new { x.Iacg_itm_cd, x.Iacg_itm_stus }).Select(group =>
                         new { Peo = group.Key, docQty = group.Sum(o => o.Iacg_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
                foreach (var item in _invBatList)
                {
                    //_tmpInrAvgCst = new INR_AVG_COST_GIT();
                    //_tmpInrAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
                    //_tmpInrAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
                    //_tmpInrAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                    //_tmpInrAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
                    //_inrAvgCstAva = _fixassetDAL.GET_INR_AVG_COST_GIT_DATA(_tmpInrAvgCst);
                    //if (_inrAvgCstAva != null)
                    //{
                    //    _avgCst = ((_inrAvgCstAva.Iacg_avg_cost * _inrAvgCstAva.Iacg_avg_qty) - item.docCst) / (_inrAvgCstAva.Iacg_avg_qty - item.docQty);
                    //    _noOfUnit = _inrAvgCstAva.Iacg_avg_qty - item.docQty;
                    //}
                    //else
                    //{
                    //    _avgCst = item.docCst / item.docQty;
                    //    _noOfUnit = item.docQty;
                    //}
                    _avgCst = item.docCst;
                    _noOfUnit = item.docQty;
                    _saveAvgCst = new INR_AVG_COST_GIT();
                    _saveAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
                    _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Ith_loc;
                    if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
                    {
                        _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Tmp_err_loc;
                    }
                    _saveAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
                    _saveAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
                    _saveAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
                    _saveAvgCst.Iacg_avg_dt = DateTime.Now;
                    _saveAvgCst.Iacg_avg_cost = Math.Round(_avgCst, 4);
                    _saveAvgCst.Iacg_avg_qty = _noOfUnit;
                    _saveAvgCst.Iacg_cre_by = _inventoryMovementHeader.Ith_cre_by;
                    _saveAvgCst.Iacg_cre_dt = _inventoryMovementHeader.Ith_cre_when;
                    _saveAvgCst.Iacg_mod_by = _inventoryMovementHeader.Ith_mod_by;
                    _saveAvgCst.Iacg_mod_dt = _inventoryMovementHeader.Ith_mod_when;
                    _saveAvgCst.Iacg_in_qty = item.docQty;
                    _saveAvgCst.Iacg_mod_doc = _inventoryMovementHeader.Ith_seq_no.ToString();
                    _saveAvgCst.Iacg_direction = true;
                    _fixassetDAL.UpdateInrCostDataGit(_saveAvgCst);
                }
            }
            #endregion

            effect = 1;

            return effect;
        }

        public Int16 UpdateInventoryAutoNumber_FIXA(InventoryHeader _inventoryMovementHeader, MasterAutoNumber _masterAutoNumber, String _locaSeparater, out string _docNo)
        {
            Int16 effect = 0;
        nx:
            Int32 _autoNo = _fixassetDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
            string _documentNo = _inventoryMovementHeader.Ith_loc + _locaSeparater + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
            effect = _fixassetDAL.UpdateAutoNumber(_masterAutoNumber);

            if (_fixassetDAL.CheckInventoryNo("sp_getmovno", "p_doc_no", _documentNo) == 1)
            {
                //Check Save Movement Document No :: Code by Chamal De Silva 31/01/2013
                goto nx;
            }

            effect = _fixassetDAL.UpdateMovementDocNo(_inventoryMovementHeader.Ith_seq_no, _documentNo);
            _docNo = _documentNo;
            return effect;
        }

        //public Int16 ADJPlus_FIXA(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false, bool Isfixdb = false)
        //{
        //    Int16 effect = 0;
        //    try
        //    {
        //        _inventoryRepDAL = new ReptCommonDAL();

        //        _ScmCommonDAL = new SCMCommonDAL();

        //        _fixassetDAL = new FIXA_InventoryDAL();

        //        _fixassetDAL.ConnectionOpen();
        //        _fixassetDAL.BeginTransaction();

        //        _inventoryRepDAL.ConnectionOpen();
        //        _inventoryRepDAL.BeginTransaction();

        //        _ScmCommonDAL.ConnectionOpen();
        //        _ScmCommonDAL.BeginTransaction();


        //        if (IsTemp == true)
        //        {
        //            effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

        //            // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

        //            _fixassetDAL.TransactionCommit();


        //            effect = 1;
        //        }
        //        else
        //        {

        //            #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
        //            List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
        //            TmpValidation _tmpLocBalVal = new TmpValidation();
        //            InventoryLocation _tmpLocBal = new InventoryLocation();
        //            if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
        //            {
        //                var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
        //                foreach (var _outSer in _serialItemData)
        //                {
        //                    _tmpLocBalVal = new TmpValidation();
        //                    _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
        //                    _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
        //                    _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
        //                    _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
        //                    _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
        //                    _tmpLocBal = _fixassetDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
        //                    {
        //                        Inl_com = _inventoryMovementHeader.Ith_com,
        //                        Inl_loc = _inventoryMovementHeader.Ith_loc,
        //                        Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
        //                        Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
        //                    });
        //                    _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
        //                    _locBalanceDataList.Add(_tmpLocBalVal);
        //                }
        //            }
        //            #endregion
        //            effect = SaveInwardScanSerial_FIXA(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
        //            effect = UpdateInventoryAutoNumber_FIXA(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
        //            //comented by kapila 17/7/2015
        //            //_fixassetDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);

        //            if (_inventoryMovementHeader.Ith_sub_tp != null)
        //            {
        //                if (_inventoryMovementHeader.Ith_sub_tp == "QUO")
        //                {
        //                    _fixassetDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "R", _inventoryMovementHeader.Ith_mod_by);
        //                }
        //            }
        //            #region Validate Aod Save by Lakshan 06/Sep/2016
        //            #region Cheak Batch
        //            if (effect != -1)
        //            {
        //                List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
        //                _BATCH = _fixassetDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
        //                bool _count = _fixassetDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
        //                if (_BATCH.Count == 0)
        //                {
        //                    effect = -1;
        //                    _docNo = "Process Terminated ! Inventory Balance not updated ";
        //                }
        //                if (effect != -1)
        //                {
        //                    if (_count == false)
        //                    {
        //                        bool _chkBatch = true;
        //                        MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
        //                        if (_mstLocation != null)
        //                        {
        //                            if (!_mstLocation.Ml_is_serial)
        //                            {
        //                                if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
        //                                {
        //                                    _chkBatch = false;
        //                                }
        //                            }
        //                        }
        //                        if (_chkBatch)
        //                        {
        //                            effect = -1;
        //                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
        //                        }
        //                    }
        //                }
        //            }
        //            #endregion
        //            #region Cheak int Itm
        //            if (effect != -1)
        //            {
        //                bool _intItmErr = _fixassetDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
        //                if (_intItmErr == false)
        //                {
        //                    effect = -1;
        //                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
        //                }
        //            }
        //            #endregion

        //            #region Check Serials
        //            if (effect == 1)
        //            {
        //                //Added by Chamal to check serial ID duplicate 05-Sep-2016
        //                List<ReptPickSerials> _serList = new List<ReptPickSerials>();
        //                _serList = _fixassetDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

        //                var _varSer = from c in _serList
        //                              group c by c.Tus_ser_id into grp
        //                              where grp.Count() > 1
        //                              select new { SerialID = grp.Key, Count = grp.Count() };
        //                if (_varSer != null && _varSer.Count() > 0)
        //                {
        //                    string _errorSerialID = string.Empty;
        //                    foreach (var item in _varSer)
        //                    {
        //                        if (string.IsNullOrEmpty(_errorSerialID))
        //                        {
        //                            _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
        //                        }
        //                        else
        //                        {
        //                            _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
        //                        }
        //                    }
        //                    effect = -1;
        //                    _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
        //                }
        //            }
        //            #endregion

        //            #region validate serial count and batch count
        //            #region set var data 19 oct 2016
        //            decimal _updatedQty = 0;
        //            decimal _batchQty = 0;
        //            decimal _serQty = 0;
        //            List<InventoryBatchN> _invBatchData = _fixassetDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
        //            if (_invBatchData != null)
        //            {
        //                if (_invBatchData.Count > 0)
        //                {
        //                    _batchQty = _invBatchData.Sum(c => c.Inb_qty);
        //                    _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
        //                }
        //            }
        //            #endregion
        //            if (_batchQty != _serQty)
        //            {
        //                effect = -1;
        //                _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
        //            }
        //            #endregion

        //            #region validate location balance update correctly 27 Nov 2016
        //            if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
        //            {
        //                foreach (var _itemVal in _locBalanceDataList)
        //                {
        //                    _tmpLocBal = _fixassetDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
        //                    {
        //                        Inl_com = _itemVal.Inl_com,
        //                        Inl_loc = _itemVal.Inl_loc,
        //                        Inl_itm_cd = _itemVal.Inl_itm_cd,
        //                        Inl_itm_stus = _itemVal.Inl_itm_stus
        //                    });
        //                    _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
        //                    _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_aft_save - _itemVal.Inl_qty_bef_save;
        //                    if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
        //                    {
        //                        _itemVal.Inl_err_ava = 1;
        //                    }
        //                }
        //                var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
        //                if (_balUpdteErr != null)
        //                {
        //                    if (_balUpdteErr.Count > 0)
        //                    {
        //                        effect = -1;
        //                        _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
        //                    }
        //                }
        //            }
        //            #endregion

        //            #endregion

        //            if (effect == 1)
        //            {
        //                _inventoryRepDAL.TransactionCommit();


        //                _fixassetDAL.TransactionCommit();

        //                _ScmCommonDAL.TransactionCommit();

        //                if (_inventoryMovementHeader.Ith_anal_10 == true)
        //                {
        //                    _fixassetDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
        //                }
        //                effect = 1;
        //            }
        //            else
        //            {
        //                effect = -1;
        //                _docNo = "Process Terminated ! Inventory data not updated.";
        //                _inventoryRepDAL.TransactionRollback();
        //                _fixassetDAL.TransactionRollback();
        //                _ScmCommonDAL.TransactionRollback();
        //                _fixassetDAL.TransactionRollback();
        //            }
        //        }
        //    }
        //    catch (Exception err)
        //    {
        //        effect = -1;
        //        _docNo = "ERROR : " + err.Message.ToString();
        //        _inventoryRepDAL.TransactionRollback();
        //        _fixassetDAL.TransactionRollback();
        //        _ScmCommonDAL.TransactionRollback();
        //        _fixassetDAL.TransactionRollback();
        //    }
        //    return effect;
        //}

        public Int16 SaveAdjMinAdjplus(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, InventoryHeader _invMovtHeaderFix,out string _adjno, bool IsTemp = false, bool Isfixdb = false)
        {
            Int16 effect = 0;
            Int16 effect1 = 0;
            _adjno = "";
            string AdjNumber = string.Empty;
            string AdjPlusNumber = string.Empty;
            string Errormsg = string.Empty;
            string Erroradjplus = string.Empty;

            
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _fixassetDAL = new FIXA_InventoryDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _fixassetDAL.ConnectionOpen();
                _fixassetDAL.BeginTransaction();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                effect = ADJMinus_FIXA(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out AdjNumber, _inventoryRepDAL, _inventoryDAL, _fixassetDAL,out Errormsg,false);
                // AdjNumber = AdjNumber;

                DataTable dt1 = _fixassetDAL.GetBinlocationFixasset(_invMovtHeaderFix.Ith_com, _invMovtHeaderFix.Ith_loc);

                MasterCompany _company = new MasterCompany();
                _company = _inventoryDAL.GetCompByCode(_invMovtHeaderFix.Ith_com);

                if (dt1 != null || dt1.Rows.Count > 0)
                {
                    foreach (ReptPickSerials rps in _reptPickSerials)
                    {
                        rps.Tus_bin = dt1.Rows[0][0].ToString();
                        rps.Tus_com = _company.mc_fixa_com;

                    }
                }

                

                _invMovtHeaderFix.Ith_com = _company.mc_fixa_com;

                if (effect == 1 && Errormsg == "")
                {
                    effect1 = ADJPlus_FIXA_TEST(_invMovtHeaderFix, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out AdjNumber, _inventoryRepDAL, _inventoryDAL, _fixassetDAL, out Erroradjplus, false, true);
                       AdjPlusNumber = AdjNumber;

                    if (effect1 == 1 && Erroradjplus == "")
                    {
                        _inventoryDAL.TransactionCommit();
                        _inventoryRepDAL.TransactionCommit();
                        _fixassetDAL.TransactionCommit();
                        _ScmCommonDAL.TransactionCommit();
                        _fixassetDAL.TransactionCommit();
                        _adjno = AdjNumber;
                        effect = 1;
                    }
                    else
                    {
                        effect = -1;
                        _inventoryDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _fixassetDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        _fixassetDAL.TransactionRollback();
                    }
                }
                else
                {
                    effect = -1;
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _fixassetDAL.TransactionRollback();
                    _ScmCommonDAL.TransactionRollback();
                    _fixassetDAL.TransactionRollback();
                }


            }
            catch (Exception err)
            {
                effect = -1;
                  AdjNumber = "ERROR : " + err.Message.ToString();
                //    _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _fixassetDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _fixassetDAL.TransactionRollback();
            }

            return effect;


        }

        public Int16 ADJMinus_FIXA(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, ReptCommonDAL _inventoryRepDAL, InventoryDAL _inventoryDAL, FIXA_InventoryDAL _fixassetDAL, out string Erromsg,bool IsTemp = false)
        {
            Int16 effect = 0;
            Erromsg = "";
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {

                #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                TmpValidation _tmpLocBalVal = new TmpValidation();
                InventoryLocation _tmpLocBal = new InventoryLocation();
                if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
                {
                    var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                    foreach (var _outSer in _serialItemData)
                    {
                        _tmpLocBalVal = new TmpValidation();
                        _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                        _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                        _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                        _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                        _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                        {
                            Inl_com = _inventoryMovementHeader.Ith_com,
                            Inl_loc = _inventoryMovementHeader.Ith_loc,
                            Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                            Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                        });
                        _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                        _locBalanceDataList.Add(_tmpLocBalVal);
                    }
                }
                #endregion
                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);



                    effect = 1;
                }
                else
                {
                    effect = SaveOutwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, null, false);

                    if (effect == 0)
                    {
                        effect = -1;
                        _docNo = "Didn't Update Items!!! Please Check ";
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return effect;
        }

                    effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    //kapila 19/11/2014
                    if (_inventoryMovementHeader.Ith_doc_tp == "ADJ" && (_inventoryMovementHeader.Ith_cate_tp == "FGAP" || _inventoryMovementHeader.Ith_cate_tp == "FIXED"))
                        UpdateTempWaraByFGAP(_reptPickSerials, _docNo, _inventoryMovementHeader.Ith_doc_date);

                    //Rukshan 10/oct/2015
                    if (_inventoryMovementHeader.Ith_sub_tp == "IS")
                    {
                        foreach (ReptPickSerials _serial in _reptPickSerials)
                        {
                            // decimal Issesqty = _serial.Tus_qty + _serial.Tus_isqty;
                            decimal Issesqty = _serial.Tus_isqty;
                            _inventoryDAL.UpdatePoRequest_Iss(_inventoryMovementHeader.Ith_com, _serial.Tus_base_doc_no, _serial.Tus_base_itm_line, _serial.Tus_itm_cd, Issesqty);
                        }

                    }
                    #region Validate Aod Save by Lakshan 06/Sep/2016
                    #region Cheak Batch
                    if (effect != -1)
                    {
                        List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                        _BATCH = _inventoryDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                        bool _count = _inventoryDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                        if (_BATCH.Count == 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated ";
                        }
                        if (effect != -1)
                        {
                            if (_count == false)
                            {
                                bool _chkBatch = true;
                                MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                if (_mstLocation != null)
                                {
                                    if (!_mstLocation.Ml_is_serial)
                                    {
                                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                        {
                                            _chkBatch = false;
                                        }
                                    }
                                }
                                if (_chkBatch)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                    }
                    #endregion
                    #region Cheak int Itm
                    if (effect != -1)
                    {
                        bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                        if (_intItmErr == false)
                        {
                            effect = -1;
                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        }
                    }
                    #endregion

                    #region Check Serials
                    if (effect == 1)
                    {
                        //Added by Chamal to check serial ID duplicate 05-Sep-2016
                        List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                        _serList = _inventoryDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                        var _varSer = from c in _serList
                                      group c by c.Tus_ser_id into grp
                                      where grp.Count() > 1
                                      select new { SerialID = grp.Key, Count = grp.Count() };
                        if (_varSer != null && _varSer.Count() > 0)
                        {
                            string _errorSerialID = string.Empty;
                            foreach (var item in _varSer)
                            {
                                if (string.IsNullOrEmpty(_errorSerialID))
                                {
                                    _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                                else
                                {
                                    _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                            }
                            effect = -1;
                            _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        }
                    }
                    #endregion

                    #region validate serial count and batch count
                    #region set var data 19 oct 2016
                    decimal _updatedQty = 0;
                    decimal _batchQty = 0;
                    decimal _serQty = 0;
                    List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                    if (_invBatchData != null)
                    {
                        if (_invBatchData.Count > 0)
                        {
                            _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                            _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                        }
                    }
                    #endregion
                    if (_batchQty != _serQty)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                    }
                    #endregion

                    #region validate location balance update correctly 27 Nov 2016
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                    {
                        foreach (var _itemVal in _locBalanceDataList)
                        {
                            _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _itemVal.Inl_com,
                                Inl_loc = _itemVal.Inl_loc,
                                Inl_itm_cd = _itemVal.Inl_itm_cd,
                                Inl_itm_stus = _itemVal.Inl_itm_stus
                            });
                            _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                            _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_bef_save - _itemVal.Inl_qty_aft_save;
                            if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                            {
                                _itemVal.Inl_err_ava = 1;
                            }
                        }
                        var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                        if (_balUpdteErr != null)
                        {
                            if (_balUpdteErr.Count > 0)
                            {
                                string s = "";
                                foreach (var item in _balUpdteErr)
                                {
                                    s = s + "/" + item.Inl_itm_cd;
                                }
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                            }
                        }
                    }
                    #endregion

                    #endregion
                    if (effect == 1)
                    {


                        //_inventoryRepDAL.ConnectionClose();
                        //_inventoryDAL.ConnectionClose();
                        //_tr.Complete();
                        //}
                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _inventoryDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                    }
                    else
                    {
                        effect = -1;
                        if (string.IsNullOrEmpty(_docNo))
                        {
                            _docNo = "Data not update correctly";
                        }
                        _inventoryRepDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return effect;
                    }
                    effect = 1;
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                Erromsg = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        public Int16 ADJPlus_FIXA_TEST(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, ReptCommonDAL _inventoryRepDAL, InventoryDAL _inventoryDAL, FIXA_InventoryDAL _fixassetDAL, out string Erromsg,bool IsTemp = false, bool Isfixdb = false)
        {
            Int16 effect = 0;
            Erromsg = "";
            try
            {

                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);




                    effect = 1;
                }
                else
                {

                    #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                    List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                    TmpValidation _tmpLocBalVal = new TmpValidation();
                    InventoryLocation _tmpLocBal = new InventoryLocation();
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
                    {
                        var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                        foreach (var _outSer in _serialItemData)
                        {
                            _tmpLocBalVal = new TmpValidation();
                            _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                            _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                            _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                            _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                            _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                            _tmpLocBal = _fixassetDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _inventoryMovementHeader.Ith_com,
                                Inl_loc = _inventoryMovementHeader.Ith_loc,
                                Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                                Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                            });
                            _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                            _locBalanceDataList.Add(_tmpLocBalVal);
                        }
                    }
                    #endregion
                    effect = SaveInwardScanSerial_FIXA(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber_FIXA(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    //comented by kapila 17/7/2015
                    //_fixassetDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);

                    if (_inventoryMovementHeader.Ith_sub_tp != null)
                    {
                        if (_inventoryMovementHeader.Ith_sub_tp == "QUO")
                        {
                            _fixassetDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "R", _inventoryMovementHeader.Ith_mod_by);
                        }
                    }
                    #region Validate Aod Save by Lakshan 06/Sep/2016
                    #region Cheak Batch
                    if (effect != -1)
                    {
                        List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                        _BATCH = _fixassetDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                        bool _count = _fixassetDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                        if (_BATCH.Count == 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated ";
                        }
                        if (effect != -1)
                        {
                            if (_count == false)
                            {
                                bool _chkBatch = true;
                                MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                if (_mstLocation != null)
                                {
                                    if (!_mstLocation.Ml_is_serial)
                                    {
                                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                        {
                                            _chkBatch = false;
                                        }
                                    }
                                }
                                if (_chkBatch)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                    }
                    #endregion
                    #region Cheak int Itm
                    if (effect != -1)
                    {
                        bool _intItmErr = _fixassetDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                        if (_intItmErr == false)
                        {
                            effect = -1;
                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        }
                    }
                    #endregion

                    #region Check Serials
                    if (effect == 1)
                    {
                        //Added by Chamal to check serial ID duplicate 05-Sep-2016
                        List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                        _serList = _fixassetDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                        var _varSer = from c in _serList
                                      group c by c.Tus_ser_id into grp
                                      where grp.Count() > 1
                                      select new { SerialID = grp.Key, Count = grp.Count() };
                        if (_varSer != null && _varSer.Count() > 0)
                        {
                            string _errorSerialID = string.Empty;
                            foreach (var item in _varSer)
                            {
                                if (string.IsNullOrEmpty(_errorSerialID))
                                {
                                    _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                                else
                                {
                                    _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                            }
                            effect = -1;
                            _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        }
                    }
                    #endregion

                    #region validate serial count and batch count
                    #region set var data 19 oct 2016
                    decimal _updatedQty = 0;
                    decimal _batchQty = 0;
                    decimal _serQty = 0;
                    List<InventoryBatchN> _invBatchData = _fixassetDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                    if (_invBatchData != null)
                    {
                        if (_invBatchData.Count > 0)
                        {
                            _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                            _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                        }
                    }
                    #endregion
                    if (_batchQty != _serQty)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                    }
                    #endregion

                    #region validate location balance update correctly 27 Nov 2016
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                    {
                        foreach (var _itemVal in _locBalanceDataList)
                        {
                            _tmpLocBal = _fixassetDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _itemVal.Inl_com,
                                Inl_loc = _itemVal.Inl_loc,
                                Inl_itm_cd = _itemVal.Inl_itm_cd,
                                Inl_itm_stus = _itemVal.Inl_itm_stus
                            });
                            _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                            _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_aft_save - _itemVal.Inl_qty_bef_save;
                            if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                            {
                                _itemVal.Inl_err_ava = 1;
                            }
                        }
                        var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                        if (_balUpdteErr != null)
                        {
                            if (_balUpdteErr.Count > 0)
                            {
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                            }
                        }
                    }
                    #endregion

                    #endregion

                    if (effect == 1)
                    {

                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _fixassetDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                        effect = 1;
                    }
                    else
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory data not updated.";
                        _inventoryRepDAL.TransactionRollback();
                        _fixassetDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        _fixassetDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                Erromsg = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _fixassetDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _fixassetDAL.TransactionRollback();
            }
            return effect;
        }


     

        //public Int16 SaveInwardScanSerial_FIXA(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        //{
        //    Int16 effect = 0;

        //    Int16 itmLine = 1;
        //    Int16 batchLine = 1;
        //    Int16 serLine = 1;
        //    //Added By Prabhath on 31/10/2012
        //    string _scm2LocCategory = string.Empty;
        //    string _scmLocCategory = string.Empty;
        //    string _scm2LocType = string.Empty;
        //    string _companycostmethod = string.Empty;
        //    string _company = _inventoryMovementHeader.Ith_com;
        //    string _documentType = _inventoryMovementHeader.Ith_doc_tp;
        //    bool _isAvgType = false;
        //    _companycostmethod = _fixassetDAL.GetCompByCode(_inventoryMovementHeader.Ith_com).Mc_val_method;

        //    //added by dilshan on 26/04/2018 for rev status change
        //    string _statusRev = _inventoryMovementHeader.Ith_doc_tp;

        //    //#region Update List for the New Ageing Process
        //    //_reptPickSerials.ForEach(x => { x.Tus_exist_grncom = _inventoryMovementHeader.Ith_com; x.Tus_exist_grnno = _inventoryMovementHeader.Ith_doc_no; x.Tus_exist_grndt = _inventoryMovementHeader.Ith_doc_date; x.Tus_exist_supp = _inventoryMovementHeader.Ith_loc; });
        //    //#endregion

        //    #region Get AOD-OUT Details :: Wimal 04/Jun/2018
        //    List<InventoryBatchN> _tmpBatchDt = new List<InventoryBatchN>();
        //    if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
        //    {
        //        _tmpBatchDt = _fixassetDAL.GET_INT_BATCH_DATA_NEW(new InventoryBatchN() { Inb_doc_no = _inventoryMovementHeader.Ith_oth_docno });
        //    }
        //    #endregion

        //    Int32 reptSeqNo = 0;


        //    List<ReptPickSerials> PickSerials = new List<ReptPickSerials>();
        //    PickSerials = _reptPickSerials;

        //    #region Set default values for null values :: Chamal 25/10/2012
        //    foreach (ReptPickSerials pickserials in PickSerials)
        //    {
        //        if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
        //        {
        //            pickserials.Tus_base_doc_no = "N/A";
        //        }
        //    }
        //    #endregion Set default values for null values :: Chamal 25/10/2012

        //    #region Rukshan for serial ID zero (0) GRN in SCM Web 30-Mar-2016
        //    List<ReptPickSerials> _nonserialitem = new List<ReptPickSerials>();
        //    List<ReptPickSerials> _serialitem = new List<ReptPickSerials>();
        //    _nonserialitem = _reptPickSerials.Where(x => x.Tus_ser_id == 0).ToList();
        //    _serialitem = _reptPickSerials.Where(x => x.Tus_ser_id != 0).ToList();
        //    if (_nonserialitem != null)
        //    {
        //        int _isserialMaintan = 0;
        //        //CHECK SERIAL MAINTANCE LOCATION
        //        MasterLocationNew _objloc = new MasterLocationNew();
        //        _objloc.Ml_loc_cd = _inventoryMovementHeader.Ith_loc;
        //        _objloc.Ml_act = 1;
        //        // _objloc.Ml_com_cd=Session["UserCompanyCode"].ToString();
        //        List<MasterLocationNew> _LOC = GetMasterLocations(_objloc);
        //        if (_LOC.Count > 0)
        //        {
        //            _isserialMaintan = _LOC.First().Ml_is_serial;

        //        }
        //        foreach (ReptPickSerials _nserial in _nonserialitem)
        //        {

        //            int i = _serialitem.Count;
        //            MasterItem msitem = _fixassetDAL.GetItem(_nserial.Tus_com, _nserial.Tus_itm_cd);
        //            if (_isserialMaintan == 0)
        //            {
        //                if (msitem.Mi_is_ser1 != -1)
        //                {
        //                    msitem.Mi_is_ser1 = 0;
        //                }
        //            }
        //            if (msitem.Mi_is_ser1 == 0)
        //            {
        //                List<ReptPickSerials> _nonSerialsFifo = new List<ReptPickSerials>();

        //                int j = 0;
        //                int qty = Convert.ToInt32(_nserial.Tus_qty);
        //                while (j < qty)
        //                {
        //                    #region pickserial
        //                    ReptPickSerials _test = new ReptPickSerials();
        //                    _test.ItemType = _nserial.ItemType;
        //                    _test.Mis_desc = _nserial.Mis_desc;
        //                    _test.Tus_ageloc = _nserial.Tus_ageloc;
        //                    _test.Tus_ageloc_dt = _nserial.Tus_ageloc_dt;
        //                    _test.Tus_appstatus = _nserial.Tus_appstatus;
        //                    _test.Tus_base_doc_no = _nserial.Tus_base_doc_no;
        //                    _test.Tus_base_itm_line = _nserial.Tus_base_itm_line;
        //                    _test.Tus_batch_line = _nserial.Tus_batch_line;
        //                    _test.Tus_batch_no = _nserial.Tus_batch_no;
        //                    _test.Tus_bin = _nserial.Tus_bin;
        //                    _test.Tus_com = _nserial.Tus_com;
        //                    _test.Tus_cre_by = _nserial.Tus_cre_by;
        //                    _test.Tus_cre_dt = _nserial.Tus_cre_dt;
        //                    _test.Tus_cross_batchline = _nserial.Tus_cross_batchline;
        //                    _test.Tus_cross_itemline = _nserial.Tus_cross_itemline;
        //                    _test.Tus_cross_seqno = _nserial.Tus_cross_seqno;
        //                    _test.Tus_cross_serline = _nserial.Tus_cross_serline;
        //                    _test.Tus_doc_dt = _nserial.Tus_doc_dt;
        //                    _test.Tus_doc_no = _nserial.Tus_doc_no;
        //                    _test.Tus_ed_pg = _nserial.Tus_ed_pg;
        //                    _test.Tus_exist_grncom = _nserial.Tus_exist_grncom;
        //                    _test.Tus_exist_grndt = _nserial.Tus_exist_grndt;
        //                    _test.Tus_exist_grnno = _nserial.Tus_exist_grnno;
        //                    _test.Tus_exist_supp = _nserial.Tus_exist_supp;
        //                    _test.Tus_exp_dt = _nserial.Tus_exp_dt;
        //                    _test.Tus_is_pgs = _nserial.Tus_is_pgs;
        //                    _test.Tus_isapp = _nserial.Tus_isapp;
        //                    _test.Tus_iscovernote = _nserial.Tus_iscovernote;
        //                    _test.Tus_isownmrn = _nserial.Tus_isownmrn;
        //                    _test.Tus_itm_brand = _nserial.Tus_itm_brand;
        //                    _test.Tus_itm_cd = _nserial.Tus_itm_cd;
        //                    _test.Tus_itm_desc = _nserial.Tus_itm_desc;
        //                    _test.Tus_itm_line = _nserial.Tus_itm_line;
        //                    _test.Tus_itm_model = _nserial.Tus_itm_model;
        //                    _test.Tus_itm_stus = _nserial.Tus_itm_stus;
        //                    _test.Tus_job_line = _nserial.Tus_job_line;
        //                    _test.Tus_job_no = _nserial.Tus_job_no;
        //                    _test.Tus_loc = _nserial.Tus_loc;
        //                    _test.Tus_manufac_dt = _nserial.Tus_manufac_dt;
        //                    _test.Tus_new_itm_cd = _nserial.Tus_new_itm_cd;
        //                    _test.Tus_new_remarks = _nserial.Tus_new_remarks;
        //                    _test.Tus_new_status = _nserial.Tus_new_status;
        //                    _test.Tus_orig_grncom = _nserial.Tus_orig_grncom;
        //                    _test.Tus_orig_grnno = _nserial.Tus_orig_grnno;
        //                    _test.Tus_orig_supp = _nserial.Tus_orig_supp;
        //                    _test.Tus_out_date = _nserial.Tus_out_date;
        //                    _test.Tus_pgs_count = _nserial.Tus_pgs_count;
        //                    _test.Tus_pgs_prefix = _nserial.Tus_pgs_prefix;
        //                    _test.Tus_res_line = _nserial.Tus_res_line;
        //                    _test.Tus_res_no = _nserial.Tus_res_no;
        //                    _test.Tus_resqty = _nserial.Tus_resqty;
        //                    _test.Tus_seq_no = _nserial.Tus_seq_no;
        //                    _test.Tus_orig_supp = _nserial.Tus_orig_supp;
        //                    _test.Tus_orig_grndt = _nserial.Tus_orig_grndt;
        //                    _test.Tus_ser_1 = _nserial.Tus_ser_1;
        //                    _test.Tus_ser_2 = _nserial.Tus_ser_2;
        //                    _test.Tus_ser_3 = _nserial.Tus_ser_3;
        //                    _test.Tus_ser_4 = _nserial.Tus_ser_4;
        //                    _test.Tus_ser_line = _nserial.Tus_ser_line;
        //                    _test.Tus_serial_id = _nserial.Tus_serial_id;
        //                    _test.Tus_session_id = _nserial.Tus_session_id;
        //                    _test.Tus_st_pg = _nserial.Tus_st_pg;
        //                    _test.Tus_unit_cost = _nserial.Tus_unit_cost;
        //                    _test.Tus_unit_price = _nserial.Tus_unit_price;
        //                    _test.Tus_usrseq_no = _nserial.Tus_usrseq_no;




        //                    _test.Tus_warr_no = _nserial.Tus_warr_no;
        //                    _test.Tus_warr_period = _nserial.Tus_warr_period;

        //                    _test.Tus_qty = 1;
        //                    _test.Tus_ser_id = _fixassetDAL.GetSerialID();
        //                    string _warrantyno = string.Empty;
        //                    _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _test.Tus_ser_id.ToString();
        //                    _nserial.Tus_warr_no = _warrantyno;
        //                    #endregion
        //                    //_serialitem.Add(_serialObj);
        //                    _serialitem.Insert(i, _test);
        //                    i++;
        //                    j++;
        //                }

        //            }
        //            if (msitem.Mi_is_ser1 == -1)
        //            {
        //                _serialitem.Add(_nserial);
        //            }

        //        }


        //        PickSerials = _serialitem;
        //        _reptPickSerials = _serialitem;

        //    }

        //    #endregion

        //    int _isSerial = 1;
        //    DataTable dt_location = _fixassetDAL.Get_location_by_code(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
        //    foreach (DataRow rw in dt_location.Rows)
        //    {
        //        _inventoryMovementHeader.Ith_sbu = (string)rw["ML_OPE_CD"]; //Operation Admin Team
        //        _inventoryMovementHeader.Ith_channel = Convert.ToString(rw["ML_CATE_2"]); //Channel Code
        //        _scm2LocCategory = (string)rw["ML_CATE_1"];//Location Categry Code
        //        _scm2LocType = (string)rw["ML_LOC_TP"];//Location Type
        //        _isSerial = (Int16)rw["ML_IS_SERIAL"];//Is Serial Maintain
        //    }

        //    if (_scm2LocCategory == "DF") { _scmLocCategory = "DUTY FREE"; }
        //    else { _scmLocCategory = "DUTY PAID"; }
        //    //Chamal 13-Nov-2015 // 30-11-2015 testing completed
        //    if (_scm2LocType != "SERC")
        //    {
        //        if (_isSerial == 1) //Chamal 06-Apr-2016 for Web SCM-II
        //        {
        //            if (_inventoryMovementHeader.Ith_gen_frm == "SCMWEB" && _scm2LocCategory == "DFS")
        //            {
        //                #region add by lakshan 11Oct2017
        //                //Job no not replace when serial maintain and DFS category locations
        //                #endregion
        //            }
        //            else
        //            {
        //                DataTable _loctype = _fixassetDAL.GetLocTypes(_scm2LocType);
        //                if (_loctype.Rows.Count > 0)
        //                {
        //                    string _Isjobbase = _loctype.Rows[0][3].ToString();
        //                    if (!string.IsNullOrEmpty(_Isjobbase))
        //                    {
        //                        int value = Convert.ToInt32(_Isjobbase);
        //                        if (value == 0)
        //                        {
        //                            PickSerials.ForEach(x => x.Tus_job_no = null);
        //                            PickSerials.ForEach(x => x.Tus_job_line = 0);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        PickSerials.ForEach(x => x.Tus_job_no = null);
        //                        PickSerials.ForEach(x => x.Tus_job_line = 0);
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    #region job number update as production number
        //    if (_inventoryMovementHeader.Ith_acc_no == "SCMWEB" && _inventoryMovementHeader.Tmp_update_job_no)
        //    {
        //        InventoryRequest _tmpReq = _fixassetDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _inventoryMovementHeader.Ith_entry_no }).FirstOrDefault();
        //        if (_tmpReq != null)
        //        {
        //            if (_tmpReq.Itr_sub_tp == "PRO")
        //            {
        //                PickSerials.ForEach(x => x.Tus_job_no = _tmpReq.Itr_job_no);
        //                PickSerials.ForEach(x => x.Tus_job_line = 0);
        //            }
        //        }
        //    }
        //    #endregion
        //    //Added By Prabhath on 1/11/2012 --------------------AVG COST--------------------------------------------------
        //    #region Avarage Cost Calculation

        //    //switch (_documentType)
        //    //{
        //    //    case "GRN":
        //    //        _isAvgType = true;
        //    //        break;
        //    //    case "AOD":
        //    //        if (_scm2LocCategory == "DFS")
        //    //            _isAvgType = true;
        //    //        else
        //    //            _isAvgType = false;
        //    //        break;
        //    //    case "ADJ":
        //    //        _isAvgType = true;
        //    //        break;
        //    //    case "SRN":
        //    //        _isAvgType = true;
        //    //        break;
        //    //    default:
        //    //        _isAvgType = false;
        //    //        break;
        //    //}

        //    //if (!string.IsNullOrEmpty(_companycostmethod))
        //    //    if (_companycostmethod == "AVG" && _isAvgType)
        //    //    {
        //    //        var _ItemAvg = (from i in PickSerials
        //    //                        group i by new { i.Tus_itm_cd, i.Tus_itm_stus } into batch
        //    //                        select new { Tus_itm_cd = batch.Key.Tus_itm_cd, Tus_itm_stus = batch.Key.Tus_itm_stus, Tus_cost = batch.Sum(p => p.Tus_qty * p.Tus_unit_cost) }).ToList();

        //    //        foreach (var _itm in _ItemAvg)
        //    //        {
        //    //            string _itmCode = _itm.Tus_itm_cd;

        //    //            decimal _scm2TotBalanceCost = 0;
        //    //            decimal _scm2BalQty = 0;
        //    //            decimal _scmTotBalanceCost = 0;
        //    //            decimal _scmBalQty = 0;

        //    //            decimal _scm2TotCurrentCost = 0;
        //    //            decimal _scm2CurrentQty = 0;

        //    //            string _scm2Status = _itm.Tus_itm_stus; ;
        //    //            string _scmStatus = string.Empty;
        //    //            DataTable _tblStus = _fixassetDAL.GetItemStatusMaster(_scm2Status, string.Empty);
        //    //            if (_tblStus != null)
        //    //                if (_tblStus.Rows.Count > 0)
        //    //                {
        //    //                    foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
        //    //                }

        //    //            //Get SCM2 Balance Cost
        //    //            DataTable _scm2baltbl = _fixassetDAL.GetItemBalanceAvg(_company, _scm2LocCategory, _itmCode, _scm2Status);
        //    //            if (_scm2baltbl != null)
        //    //                if (_scm2baltbl.Rows.Count > 0)
        //    //                {
        //    //                    _scm2TotBalanceCost = 0;
        //    //                    foreach (DataRow _r in _scm2baltbl.Rows)
        //    //                    {
        //    //                        _scm2TotBalanceCost += Convert.ToDecimal(_r["inl_qty"]) * Convert.ToDecimal(_r["inl_avg_cost"]);
        //    //                        _scm2BalQty += Convert.ToDecimal(_r["inl_qty"]);
        //    //                    }
        //    //                }

        //    //            //Get SCM Balance Cost
        //    //            DataTable _scmbaltbl = _ScmCommonDAL.GetItemBalanceAvg(_company, _scmLocCategory, _itmCode, _scmStatus);
        //    //            if (_scmbaltbl != null)
        //    //                if (_scmbaltbl.Rows.Count > 0)
        //    //                {
        //    //                    _scmTotBalanceCost = 0;
        //    //                    foreach (DataRow _r in _scmbaltbl.Rows)
        //    //                    {
        //    //                        _scmTotBalanceCost += Convert.ToDecimal(_r["qty_in_hand"]) * Convert.ToDecimal(_r["avg_cost"]);
        //    //                        _scmBalQty += Convert.ToDecimal(_r["qty_in_hand"]);
        //    //                    }
        //    //                }

        //    //            //Get SCM2 Current Entry
        //    //            _scm2TotCurrentCost = _itm.Tus_cost;
        //    //            _scm2CurrentQty = PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).Sum(y => y.Tus_qty);

        //    //            // Calculation
        //    //            //------------
        //    //            // Avg Cost = [(Balance Weighted Cost) + (Currecnt Weighted Cost)] / (Total Qty)
        //    //            // In simplify;
        //    //            // Avg Cost = [(SCM2 Balance + SCM Balance) + (SCM2 Current Entry)]/(SCM2 Balance Qty + SCM Balance Qty + SCM2 Current Entry Qty)

        //    //            decimal _newAvgCost = (_scm2TotBalanceCost + _scmTotBalanceCost + _scm2TotCurrentCost) / (_scm2BalQty + _scmBalQty + _scm2CurrentQty);

        //    //            //Update Entry List
        //    //            PickSerials.Where(x => x.Tus_itm_cd == _itmCode && x.Tus_itm_stus == _scm2Status).ToList().ForEach(y => y.Tus_new_status = Convert.ToString(Math.Round(_newAvgCost, 4)));

        //    //        }

        //    //    }
        //    #endregion Avarage Cost Calculation

        //    #region Avarage Cost Calculation add by Lakshan 03Jul2017
        //    List<INR_AVG_COST> _inrCstList = new List<INR_AVG_COST>();
        //    if (!_inventoryMovementHeader.Tmp_avg_cost_calc)
        //    {
        //        switch (_documentType)
        //        {
        //            case "GRN":
        //                _isAvgType = true;
        //                break;
        //            case "AOD":
        //                {
        //                    string _locCat = "";
        //                    DataTable _dtTmpLoc = _fixassetDAL.Get_location_by_code(_inventoryMovementHeader.Ith_oth_com, _inventoryMovementHeader.Ith_oth_loc, 1);
        //                    foreach (DataRow rw in _dtTmpLoc.Rows)
        //                    {
        //                        _locCat = (string)rw["ML_CATE_1"];//Location Categry Code
        //                    }
        //                    if (_locCat == "DFS")
        //                    {
        //                        _isAvgType = true;
        //                    }
        //                    else
        //                    {
        //                        _isAvgType = false;
        //                    }
        //                    //if (_scm2LocCategory == "DFS")
        //                    //    _isAvgType = true;
        //                    //else
        //                    //    _isAvgType = false;

        //                    break;
        //                }
        //            case "ADJ":
        //                _isAvgType = true;
        //                break;
        //            case "SRN":
        //                _isAvgType = true;
        //                break;
        //            default:
        //                _isAvgType = false;
        //                break;
        //        }
        //        if (!string.IsNullOrEmpty(_companycostmethod))
        //        {
        //            if (_companycostmethod == "AVG" && _isAvgType)
        //            {
        //                #region save avg cost summery to inr_avg_cst_mth add by lakshan 07Jul2017
        //                DateTime _docDt = _inventoryMovementHeader.Ith_doc_date;
        //                //DateTime _prevMthEnd = new DateTime(_docDt.Year,_docDt.Month,01).AddMonths(1).AddDays(-1);
        //                decimal _lastMonthDataAva = _fixassetDAL.GetInrAvgCostMthDataAva(_docDt);
        //                if (_lastMonthDataAva == 0)
        //                {
        //                    _fixassetDAL.UpdateInrMnthlyCostData(_inventoryMovementHeader.Ith_cre_by);
        //                }
        //                #endregion
        //                decimal _avgCst = 0;
        //                decimal _noOfUnit = 0;
        //                INR_AVG_COST _tmpInrAvgCst = new INR_AVG_COST();
        //                INR_AVG_COST_GIT _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
        //                INR_AVG_COST _saveAvgCst = new INR_AVG_COST();
        //                INR_AVG_COST _inrAvgCstAva = new INR_AVG_COST();
        //                INR_AVG_COST_GIT _inrAvgCstAvaGit = new INR_AVG_COST_GIT();
        //                MasterLocation _mstLocIn = _fixassetDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
        //                List<INR_AVG_COST> _listAvgData = new List<INR_AVG_COST>();
        //                INR_AVG_COST _avgData = new INR_AVG_COST();
        //                foreach (var _pSer in _reptPickSerials)
        //                {
        //                    _avgData = new INR_AVG_COST();
        //                    _avgData.Iac_itm_cd = _pSer.Tus_itm_cd;
        //                    _avgData.Iac_itm_stus = _pSer.Tus_itm_stus;
        //                    _avgData.Iac_avg_qty = _pSer.Tus_qty;
        //                    _avgData.Iac_avg_cost = _pSer.Tus_unit_cost;
        //                    _avgData.Tmp_mult_cost = _pSer.Tus_qty * _pSer.Tus_unit_cost;
        //                    _listAvgData.Add(_avgData);
        //                }

        //                var _itmList = _listAvgData.GroupBy(x => new { x.Iac_itm_cd, x.Iac_itm_stus }).Select(group =>
        //                    new { Peo = group.Key, docQty = group.Sum(o => o.Iac_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
        //                foreach (var item in _itmList)
        //                {
        //                    _tmpInrAvgCst = new INR_AVG_COST();
        //                    _tmpInrAvgCst.Iac_com = _inventoryMovementHeader.Ith_com;
        //                    _tmpInrAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
        //                    _tmpInrAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
        //                    _tmpInrAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
        //                    _inrAvgCstAva = _fixassetDAL.GET_INR_AVG_COST_DATA(_tmpInrAvgCst);
        //                    _tmpInrAvgCstGit = new INR_AVG_COST_GIT();
        //                    _tmpInrAvgCstGit.Iacg_com = _inventoryMovementHeader.Ith_com;
        //                    _tmpInrAvgCstGit.Iacg_itm_cd = item.Peo.Iac_itm_cd;
        //                    _tmpInrAvgCstGit.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
        //                    _tmpInrAvgCstGit.Iacg_itm_stus = item.Peo.Iac_itm_stus;
        //                    _inrAvgCstAvaGit = _fixassetDAL.GET_INR_AVG_GIT_BY_LOC_TP(_tmpInrAvgCstGit);
        //                    decimal _gitBal = 0;
        //                    if (_inrAvgCstAvaGit != null)
        //                    {
        //                        _gitBal = _inrAvgCstAvaGit.Iacg_avg_qty;
        //                    }
        //                    decimal _invBal = _fixassetDAL.GetInrBalanceForAvgCost(_inventoryMovementHeader.Ith_com, item.Peo.Iac_itm_cd, item.Peo.Iac_itm_stus, _mstLocIn.Ml_cate_1);
        //                    _invBal = _invBal + _gitBal;
        //                    if (_documentType == "SRN")
        //                    {
        //                        if (_inrAvgCstAva != null && _invBal > 0)
        //                        {
        //                            _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (_inrAvgCstAva.Iac_avg_cost * item.docQty)) / (_invBal + item.docQty);
        //                            _noOfUnit = _invBal + item.docQty;
        //                        }
        //                        else
        //                        {
        //                            _avgCst = item.docCst / item.docQty;
        //                            _noOfUnit = item.docQty;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (_inrAvgCstAva != null && _invBal > 0)
        //                        {
        //                            _avgCst = ((_inrAvgCstAva.Iac_avg_cost * _invBal) + (item.docCst)) / (_invBal + item.docQty);
        //                            _noOfUnit = _invBal + item.docQty;
        //                        }
        //                        else
        //                        {
        //                            _avgCst = item.docCst / item.docQty;
        //                            _noOfUnit = item.docQty;
        //                        }
        //                    }
        //                    _saveAvgCst = new INR_AVG_COST();
        //                    _saveAvgCst.Iac_com = _inventoryMovementHeader.Ith_com;
        //                    _saveAvgCst.Iac_loc_tp = _mstLocIn.Ml_cate_1;
        //                    _saveAvgCst.Iac_itm_cd = item.Peo.Iac_itm_cd;
        //                    _saveAvgCst.Iac_itm_stus = item.Peo.Iac_itm_stus;
        //                    _saveAvgCst.Iac_avg_dt = DateTime.Now;
        //                    _saveAvgCst.Iac_avg_cost = Math.Round(_avgCst, 4);
        //                    _saveAvgCst.Iac_avg_qty = _noOfUnit;
        //                    _saveAvgCst.Iac_cre_by = _inventoryMovementHeader.Ith_cre_by;
        //                    _saveAvgCst.Iac_cre_dt = _inventoryMovementHeader.Ith_cre_when;
        //                    _saveAvgCst.Iac_mod_by = _inventoryMovementHeader.Ith_mod_by;
        //                    _saveAvgCst.Iac_mod_dt = _inventoryMovementHeader.Ith_mod_when;
        //                    //_saveAvgCst.Iac_anal_1 = "";
        //                    //_saveAvgCst.Iac_anal_2 = "";
        //                    //_saveAvgCst.Iac_anal_3 = "";
        //                    //_saveAvgCst.Iac_anal_4 = "";
        //                    //_saveAvgCst.Iac_anal_5 = "";
        //                    //_saveAvgCst.Iac_costofsale = "";
        //                    //_saveAvgCst.Iac_tot_inv_rate = "";
        //                    //_saveAvgCst.Iac_sold_qty = "";
        //                    //_saveAvgCst.Iac_sold_qty_intr_com = "";
        //                    //_saveAvgCst.Iac_avg_inv_days = "";
        //                    _inrCstList.Add(_saveAvgCst);
        //                    _fixassetDAL.UpdateInrCostData(_saveAvgCst);
        //                }
        //            }
        //        }
        //    }
        //    #endregion
        //    //End of AVG COST ---------------------------------------------------------------------------------------------

        //    //Int32 _docSeqNo = _fixassetDAL.GetSerialID(); emoved by chamal 12-05-2013
        //    if (_inventoryMovementHeader.Ith_seq_no == 0)
        //    {
        //        _inventoryMovementHeader.Ith_seq_no = _fixassetDAL.GetSerialID();
        //    }
        //    _inventoryMovementHeader.Ith_doc_no = Convert.ToString(_inventoryMovementHeader.Ith_seq_no);

        //    if (_inventoryMovementHeader != null)
        //        _fixassetDAL.SaveInvnetoryHeader(_inventoryMovementHeader);

        //    var _tbitems =
        //        from _pickSerials in _reptPickSerials
        //        group _pickSerials by new
        //        {
        //            _pickSerials.Tus_bin,
        //            _pickSerials.Tus_itm_cd,
        //            _pickSerials.Tus_itm_stus
        //        } into itm
        //        select new
        //        {
        //            bincode = itm.Key.Tus_bin,
        //            itemcode = itm.Key.Tus_itm_cd,
        //            itemstatus = itm.Key.Tus_itm_stus,
        //            itemqty = itm.Sum(p => p.Tus_qty)
        //        };

        //    //If line no issue please consider below LINQ statement. (Prabhath on 21/02/2014)
        //    //var _tbitems =
        //    //    (from _pickSerials in _reptPickSerials
        //    //     group _pickSerials by new { _pickSerials.Tus_bin, _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
        //    //     select new { bincode = itm.Key.Tus_bin, itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) }).ToList().OrderBy(x => x.itemstatus).OrderBy(x => x.itemcode);

        //    //dilshan *********************************
        //    if (_statusRev == "SRN" && _inventoryMovementHeader.Ith_gen_frm == "SCMWEB")
        //    {
        //        foreach (var items in _tbitems)
        //        {
        //            InventoryItem invItem = new InventoryItem();
        //            invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
        //            invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
        //            invItem.Iti_item_line = itmLine;
        //            invItem.Iti_bin_code = items.bincode;
        //            invItem.Iti_item_code = items.itemcode;
        //            invItem.Iti_item_status = items.itemstatus;
        //            invItem.Iti_qty = items.itemqty;
        //            invItem.Iti_bal_qty = items.itemqty;
        //            invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
        //            // INSERT/UPDATE INT_ITM TABLE
        //            _fixassetDAL.UpdateInventoryItem(invItem);

        //            //Added By Prabhath on 1/11/2012
        //            #region Avarage Cost Calculation
        //            //decimal _particulerAvgCost = 0;
        //            //if (_companycostmethod == "AVG" && _isAvgType)
        //            //{
        //            //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_new_status).Distinct();
        //            //    foreach (string _h in _avgcost)
        //            //        _particulerAvgCost = Convert.ToDecimal(_h);
        //            //}
        //            #endregion Avarage Cost Calculation
        //            //Added By Prabhath on 1/11/2012

        //            batchLine = 1;
        //            //added by dilshan revesal
        //            var _tbbatchs =
        //               from _pickSerials in PickSerials
        //               where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
        //               group _pickSerials by new
        //               {
        //                   _pickSerials.Tus_bin,
        //                   _pickSerials.Tus_itm_cd,
        //                   //_pickSerials.Tus_itm_stus,  //commented by dilshan
        //                   _pickSerials.Tus_appstatus, //added by dilshan revesal
        //                   _pickSerials.Tus_unit_cost,
        //                   _pickSerials.Tus_unit_price,
        //                   _pickSerials.Tus_base_doc_no,
        //                   _pickSerials.Tus_doc_no,
        //                   _pickSerials.Tus_base_itm_line,
        //                   _pickSerials.Tus_itm_line,
        //                   _pickSerials.Tus_batch_line,
        //                   _pickSerials.Tus_job_no,
        //                   _pickSerials.Tus_job_line,
        //                   _pickSerials.Tus_res_no,
        //                   _pickSerials.Tus_res_line,
        //                   _pickSerials.Tus_batch_no,
        //                   _pickSerials.Tus_exp_dt,
        //                   _pickSerials.Tus_manufac_dt,
        //                   _pickSerials.Tus_pgs_prefix,
        //                   _pickSerials.Tus_new_itm_cd,
        //                   //_pickSerials.Tus_batch_dt,
        //                   //_pickSerials.Tus_orig_cost
        //               } into batch
        //               select new
        //               {
        //                   bincode = batch.Key.Tus_bin,
        //                   itemcode = batch.Key.Tus_itm_cd,
        //                   //itemstatus = batch.Key.Tus_itm_stus,//commented by dilshan
        //                   itemstatus = batch.Key.Tus_appstatus,//added by dilshan
        //                   unitcost = batch.Key.Tus_unit_cost,
        //                   unitprice = batch.Key.Tus_unit_price,
        //                   basedocno = batch.Key.Tus_base_doc_no,
        //                   baseitmline = batch.Key.Tus_base_itm_line,
        //                   outdocno = batch.Key.Tus_doc_no,
        //                   outitmline = batch.Key.Tus_itm_line,
        //                   outbatchline = batch.Key.Tus_batch_line,
        //                   jobno = batch.Key.Tus_job_no,
        //                   jobline = batch.Key.Tus_job_line,
        //                   resNo = batch.Key.Tus_res_no,  //Add by Lakshan 21 Oct 2016
        //                   resline = batch.Key.Tus_res_line,  //Add by Lakshan 21 Oct 2016
        //                   batchno = batch.Key.Tus_batch_no,
        //                   expdate = batch.Key.Tus_exp_dt,
        //                   manufacdate = batch.Key.Tus_manufac_dt,
        //                   mainitemcode = batch.Key.Tus_pgs_prefix,
        //                   baseitem = batch.Key.Tus_new_itm_cd,
        //                   //batchdate = batch.Key.Tus_batch_dt, //Wimal 03/May/2018
        //                   //origcost = batch.Key.Tus_orig_cost, //Wimal 03/June/2018                           
        //                   itemqty = batch.Sum(p => p.Tus_qty)
        //               };
        //            //added by dilshan revesal               
        //            foreach (var batchs in _tbbatchs)
        //            {
        //                InventoryBatchN invBatch = new InventoryBatchN();
        //                invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
        //                invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
        //                invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
        //                invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
        //                invBatch.Inb_itm_line = itmLine;
        //                invBatch.Inb_batch_line = batchLine;
        //                invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
        //                invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
        //                invBatch.Inb_bin = batchs.bincode;
        //                invBatch.Inb_itm_cd = batchs.itemcode;
        //                invBatch.Inb_itm_stus = batchs.itemstatus;
        //                invBatch.Inb_qty = batchs.itemqty;
        //                invBatch.Inb_unit_cost = batchs.unitcost;
        //                invBatch.Itb_bal_qty1 = batchs.itemqty;
        //                invBatch.Itb_bal_qty2 = batchs.itemqty;
        //                invBatch.Inb_unit_price = batchs.unitprice;
        //                invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company)                        
        //                invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
        //                invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
        //                invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
        //                if (string.IsNullOrEmpty(batchs.baseitem))
        //                {
        //                    invBatch.Inb_base_itmcd = batchs.itemcode;
        //                }
        //                else
        //                {
        //                    invBatch.Inb_base_itmcd = batchs.baseitem;//batchs.itemcode;
        //                }
        //                invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
        //                invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
        //                invBatch.Inb_base_itmstus = batchs.itemstatus;
        //                invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
        //                invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
        //                invBatch.Itb_git_ignore = false;
        //                invBatch.Itb_git_ignore_by = null;
        //                invBatch.Itb_git_ignore_dt = DateTime.MinValue;
        //                invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
        //                invBatch.Inb_res_no = null;
        //                invBatch.Inb_res_lineno = 0;
        //                if (!string.IsNullOrEmpty(batchs.resNo) && batchs.resNo != "N/A")
        //                {
        //                    invBatch.Inb_res_no = batchs.resNo;  //Add by Lakshan 21 Oct 2016
        //                    invBatch.Inb_res_lineno = batchs.resline;  //Add by Lakshan 21 Oct 2016
        //                }
        //                invBatch.Inb_base_doc_no1 = null;
        //                invBatch.Inb_base_doc_no2 = null;
        //                invBatch.Inb_base_doc_no3 = null;
        //                invBatch.Inb_cur_cd = null;
        //                invBatch.Inb_grup_cur_cd = null;
        //                invBatch.Inb_free_qty = batchs.itemqty;
        //                invBatch.Inb_manufac_dt = batchs.manufacdate;
        //                invBatch.Inb_mitm_cd = batchs.mainitemcode;
        //                //invBatch.Inb_batch_dt = batchs.batchdate; //Wimal 03/May/2018
        //                //invBatch.Inb_orig_cost = batchs.origcost; //Wimal 03/June/2018                                                       

        //                if (_inventoryMovementHeader.Ith_doc_tp != "AOD")
        //                {
        //                    invBatch.Inb_batch_dt = _inventoryMovementHeader.Ith_doc_date;    //Wimal 03/May/2018
        //                    invBatch.Inb_orig_cost = batchs.unitcost;        //Wimal 03/June/2018
        //                }
        //                else
        //                {
        //                    //Get AOD out details--- Wimal 04/Jun/2018
        //                    var batdts = from r in _tmpBatchDt
        //                                 where r.Inb_batch_line == batchs.outbatchline
        //                                 && r.Inb_itm_line == batchs.outitmline
        //                                 select r;
        //                    foreach (var item in batdts)
        //                    {
        //                        invBatch.Inb_batch_dt = item.Inb_batch_dt; //Wimal 03/May/2018
        //                        invBatch.Inb_orig_cost = item.Inb_orig_cost; //Wimal 03/June/2018
        //                    }
        //                }

        //                // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
        //                _fixassetDAL.UpdateInventoryBatch(invBatch);
        //                #region Avarage Cost Calculation add by Lakshan 06Jul2017
        //                if (!string.IsNullOrEmpty(_companycostmethod))
        //                {
        //                    if (_companycostmethod == "AVG" && _isAvgType)
        //                    {
        //                        var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
        //                        if (v != null)
        //                        {
        //                            invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
        //                            invBatch.Inb_unit_cost = v.Iac_avg_cost;
        //                        }
        //                    }
        //                }
        //                #endregion Avarage Cost Calculation
        //                //Added By Prabhath on 1/11/2012
        //                _fixassetDAL.UpdateInventoryBatchRef(invBatch, 1);
        //                //added by dilshan revesal
        //                serLine = 1;
        //                var _tbsers =
        //                    (from _pickSerials in PickSerials
        //                     where
        //                     _pickSerials.Tus_bin == batchs.bincode
        //                     && _pickSerials.Tus_itm_cd == batchs.itemcode
        //                         //&& _pickSerials.Tus_itm_stus == batchs.itemstatus  //commented by dilshan
        //                     && _pickSerials.Tus_appstatus == batchs.itemstatus  //added by dilshan
        //                     && _pickSerials.Tus_unit_cost == batchs.unitcost
        //                     && _pickSerials.Tus_unit_price == batchs.unitprice
        //                     && _pickSerials.Tus_base_doc_no == batchs.basedocno
        //                     && _pickSerials.Tus_doc_no == batchs.outdocno
        //                     && _pickSerials.Tus_base_itm_line == batchs.baseitmline
        //                     && _pickSerials.Tus_itm_line == batchs.outitmline
        //                     && _pickSerials.Tus_batch_line == batchs.outbatchline
        //                     && _pickSerials.Tus_job_no == batchs.jobno
        //                     && _pickSerials.Tus_job_line == batchs.jobline
        //                     && _pickSerials.Tus_batch_no == batchs.batchno
        //                     && _pickSerials.Tus_exp_dt == batchs.expdate
        //                     && _pickSerials.Tus_manufac_dt == batchs.manufacdate
        //                     && _pickSerials.Tus_pgs_prefix == batchs.mainitemcode
        //                     select _pickSerials).Distinct();
        //                foreach (var sers in _tbsers.Distinct())
        //                {
        //                    reptSeqNo = sers.Tus_usrseq_no;

        //                    InventorySerialN invSerials = new InventorySerialN();
        //                    invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
        //                    invSerials.Ins_itm_line = itmLine;
        //                    invSerials.Ins_batch_line = batchLine;
        //                    invSerials.Ins_ser_line = serLine;
        //                    invSerials.Ins_direct = true;
        //                    invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
        //                    invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
        //                    invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
        //                    invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
        //                    invSerials.Ins_bin = sers.Tus_bin;
        //                    invSerials.Ins_itm_cd = sers.Tus_itm_cd;
        //                    //invSerials.Ins_itm_stus = sers.Tus_itm_stus; //commented by dilshan on 12/04/2018 //added by dilshan revesal
        //                    invSerials.Ins_itm_stus = sers.Tus_appstatus; // added by dilshan on 12/04/2018
        //                    invSerials.Ins_unit_cost = sers.Tus_unit_cost;
        //                    invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _fixassetDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
        //                    invSerials.Ins_ser_1 = sers.Tus_ser_1;
        //                    invSerials.Ins_ser_2 = sers.Tus_ser_2;
        //                    invSerials.Ins_ser_3 = sers.Tus_ser_3;
        //                    invSerials.Ins_ser_4 = sers.Tus_ser_4;
        //                    invSerials.Ins_warr_no = sers.Tus_warr_no;
        //                    invSerials.Ins_warr_period = sers.Tus_warr_period;
        //                    invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
        //                    invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
        //                    invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
        //                    invSerials.Ins_orig_supp = sers.Tus_orig_supp;
        //                    invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
        //                    invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
        //                    invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
        //                    invSerials.Ins_exist_supp = sers.Tus_exist_supp;

        //                    //updated by akila 2017/07/27
        //                    invSerials.Ins_cross_itmline = sers.Tus_base_itm_line;
        //                    invSerials.Ins_cross_batchline = sers.Tus_batch_line;
        //                    invSerials.Ins_cross_serline = sers.Tus_ser_line;

        //                    //invSerials.Ins_cross_seqno = null;
        //                    //invSerials.Ins_cross_itmline = null;
        //                    //invSerials.Ins_cross_batchline = null;
        //                    //invSerials.Ins_cross_serline = null;
        //                    //invSerials.Ins_issue_dt = sers.Tus_out_date;
        //                    invSerials.Ins_available = 1;
        //                    invSerials.Ins_ageloc = sers.Tus_ageloc;
        //                    invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
        //                    invSerials.Ins_isownmrn = sers.Tus_isownmrn;

        //                    //add rukshan on 01/Jun/2016
        //                    invSerials.Ins_is_pgs = sers.Tus_is_pgs;
        //                    invSerials.Ins_pgs_count = sers.Tus_pgs_count;
        //                    invSerials.Ins_pg_prefix = sers.Tus_pgs_prefix;
        //                    invSerials.Ins_st_pg = sers.Tus_st_pg;
        //                    invSerials.Ins_ed_pg = sers.Tus_ed_pg;


        //                    //Add Prabhath on 19/04/2012
        //                    InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
        //                    _invWarraDetail.Irsm_acc_no = null;
        //                    _invWarraDetail.Irsm_anal_1 = null;
        //                    _invWarraDetail.Irsm_anal_2 = null;
        //                    _invWarraDetail.Irsm_anal_3 = null;
        //                    _invWarraDetail.Irsm_anal_4 = null;
        //                    _invWarraDetail.Irsm_anal_5 = null;
        //                    _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
        //                    _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
        //                    _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
        //                    _invWarraDetail.Irsm_cre_when = DateTime.Now;
        //                    _invWarraDetail.Irsm_cust_addr = null;
        //                    _invWarraDetail.Irsm_cust_cd = null;
        //                    _invWarraDetail.Irsm_cust_del_addr = null;
        //                    _invWarraDetail.Irsm_cust_email = null;
        //                    _invWarraDetail.Irsm_cust_fax = null;
        //                    _invWarraDetail.Irsm_cust_mobile = null;
        //                    _invWarraDetail.Irsm_cust_name = null;
        //                    _invWarraDetail.Irsm_cust_prefix = null;
        //                    _invWarraDetail.Irsm_cust_tel = null;
        //                    _invWarraDetail.Irsm_cust_town = null;
        //                    _invWarraDetail.Irsm_cust_vat_no = null;
        //                    _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
        //                    _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
        //                    _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
        //                    _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
        //                    _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
        //                    _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
        //                    _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
        //                    _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
        //                    _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
        //                    _invWarraDetail.Irsm_invoice_no = null;
        //                    _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
        //                    _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
        //                    _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
        //                    _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
        //                    //_invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus; //commented by dilshan //added by dilshan revesal
        //                    _invWarraDetail.Irsm_itm_stus = sers.Tus_appstatus; //added by dilshan
        //                    _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
        //                    _invWarraDetail.Irsm_loc_desc = null;
        //                    _invWarraDetail.Irsm_mfc = null;
        //                    _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
        //                    _invWarraDetail.Irsm_mod_when = DateTime.Now;
        //                    _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
        //                    _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
        //                    _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
        //                    _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
        //                    _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
        //                    _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
        //                    _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
        //                    _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
        //                    _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
        //                    _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
        //                    _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
        //                    _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
        //                    _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
        //                    _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
        //                    _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
        //                    _invWarraDetail.Irsm_warr_rem = null;
        //                    _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
        //                    _invWarraDetail.Irsm_warr_stus = null;


        //                    //Sahan 24 Feb 2016
        //                    _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
        //                    _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
        //                    _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
        //                    _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
        //                    _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
        //                    _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;

        //                    #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
        //                    if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
        //                    {
        //                        _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
        //                    }
        //                    if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
        //                    {
        //                        _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
        //                    }
        //                    if (_invWarraDetail.Irsm_warr_period == 0)
        //                    {
        //                        MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
        //                        if (_warPer != null)
        //                        {
        //                            if (_warPer.Mwp_val != 0)
        //                            {
        //                                _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
        //                                invSerials.Ins_warr_period = _warPer.Mwp_val;
        //                            }
        //                            else
        //                            {
        //                                _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
        //                                invSerials.Ins_warr_period = 12;
        //                            }
        //                        }
        //                    }
        //                    if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
        //                    {
        //                        MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
        //                        if (_warPer != null)
        //                        {
        //                            if (_warPer.Mwp_val != 0)
        //                            {
        //                                _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
        //                            }
        //                            else
        //                            {
        //                                _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
        //                            }
        //                        }
        //                    }
        //                    string _tmpWar = string.Empty;
        //                    if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
        //                    {
        //                        _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
        //                            "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
        //                        _invWarraDetail.Irsm_warr_no = _tmpWar;
        //                        invSerials.Ins_warr_no = _tmpWar;
        //                    }
        //                    else if (_invWarraDetail.Irsm_warr_no == "N/A")
        //                    {
        //                        _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
        //                            "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
        //                        _invWarraDetail.Irsm_warr_no = _tmpWar;
        //                        invSerials.Ins_warr_no = _tmpWar;
        //                    }
        //                    else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
        //                    {
        //                        _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
        //                            "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
        //                        _invWarraDetail.Irsm_warr_no = _tmpWar;
        //                        invSerials.Ins_warr_no = _tmpWar;
        //                    }
        //                    #endregion

        //                    // decimal allow none-serialized items are not saved in serial related tables
        //                    if (sers.Tus_ser_id != 0)
        //                    {
        //                        bool _isUpdWarrSts = false;
        //                        if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
        //                        {
        //                            _invWarraDetail.Irsm_warr_stus = "N";
        //                            _isUpdWarrSts = true;
        //                        }
        //                        if (_inventoryMovementHeader._warrNotupdate != true)//add by tharanga ravent and revet reale inrsermast not update value pass from client side
        //                        {
        //                            if (_isUpdWarrSts)
        //                            {
        //                                #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
        //                                _fixassetDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
        //                                #endregion
        //                            }
        //                            else
        //                            {
        //                                _fixassetDAL.SaveWarrantyDetail(_invWarraDetail);
        //                            }
        //                        }
        //                        _fixassetDAL.SaveInventorySerial(invSerials, 1);
        //                        #region Avarage Cost Calculation add by Lakshan 06Jul2017
        //                        if (!string.IsNullOrEmpty(_companycostmethod))
        //                        {
        //                            if (_companycostmethod == "AVG" && _isAvgType)
        //                            {
        //                                var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
        //                                if (v != null)
        //                                {
        //                                    invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
        //                                    invSerials.Ins_unit_cost = v.Iac_avg_cost;
        //                                }
        //                            }
        //                        }
        //                        #endregion Avarage Cost Calculation
        //                        //Added By Prabhath on 1/11/2012

        //                        try
        //                        {
        //                            _fixassetDAL.SaveInventorySerialRef(invSerials, 1);
        //                        }
        //                        catch (Exception ex)
        //                        {

        //                            if (ex.Message.Contains("EMS.DUPLICATE_SERIALS_FOUND"))
        //                            {
        //                                effect = -2;
        //                                return -2;

        //                                // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
        //                            }
        //                        }
        //                        //Edit Chamal 18-10-2012
        //                        //_fixassetDAL.UpdateOutCrossRef(sers.Tus_base_doc_no, sers.Tus_ser_id, sers.Tus_doc_dt.Date, invSerials.Ins_seq_no, invSerials.Ins_itm_line, invSerials.Ins_batch_line, invSerials.Ins_ser_line);

        //                        //Tharaka 2015-12-30
        //                        Int32 result = FIXA_InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, "", _inventoryMovementHeader.Ith_seq_no, 1);
        //                        serLine += 1;

        //                        #region
        //                        //Edit by Rukshan 04-sep-2015
        //                        int _line = 0;
        //                        if (_reptPickSerialsSub != null)
        //                        {

        //                            foreach (ReptPickSerialsSub _Sub in _reptPickSerialsSub)
        //                            {
        //                                InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
        //                                if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
        //                                {
        //                                    _invSubDetail.Irsms_act = true;
        //                                    _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
        //                                    _invSubDetail.Irsms_ser_line = _line;
        //                                    _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
        //                                    _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
        //                                    _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
        //                                    _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
        //                                    _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
        //                                    _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
        //                                    _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
        //                                    _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
        //                                    _invSubDetail.Mi_act = true;
        //                                    // _invSubDetail.Irsms_qty = _1;
        //                                    // CustServiceDAL _CustServiceDAL = new CustServiceDAL();
        //                                    //_CustServiceDAL.ConnectionOpen();
        //                                    // _CustServiceDAL.BeginTransaction();
        //                                    _fixassetDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
        //                                    // _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);                                      
        //                                    // _CustServiceDAL.TransactionCommit();
        //                                    // _CustServiceDAL.ConnectionClose();
        //                                    _line++;
        //                                }

        //                            }
        //                        }

        //                        #endregion
        //                    }
        //                }

        //                batchLine += 1;
        //            }

        //            itmLine += 1;
        //        }
        //    }
        //    //*****************************************
        //    else
        //    {
        //        foreach (var items in _tbitems)
        //        {
        //            InventoryItem invItem = new InventoryItem();
        //            invItem.Iti_seq_no = _inventoryMovementHeader.Ith_seq_no;
        //            invItem.Iti_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
        //            invItem.Iti_item_line = itmLine;
        //            invItem.Iti_bin_code = items.bincode;
        //            invItem.Iti_item_code = items.itemcode;
        //            invItem.Iti_item_status = items.itemstatus;
        //            invItem.Iti_qty = items.itemqty;
        //            invItem.Iti_bal_qty = items.itemqty;
        //            invItem.Iti_year = _inventoryMovementHeader.Ith_doc_year;
        //            // INSERT/UPDATE INT_ITM TABLE
        //            _fixassetDAL.UpdateInventoryItem(invItem);

        //            //Added By Prabhath on 1/11/2012
        //            #region Avarage Cost Calculation
        //            //decimal _particulerAvgCost = 0;
        //            //if (_companycostmethod == "AVG" && _isAvgType)
        //            //{
        //            //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == items.itemcode && y.Tus_itm_stus == items.itemstatus).Select(s => s.Tus_new_status).Distinct();
        //            //    foreach (string _h in _avgcost)
        //            //        _particulerAvgCost = Convert.ToDecimal(_h);
        //            //}
        //            #endregion Avarage Cost Calculation
        //            //Added By Prabhath on 1/11/2012

        //            batchLine = 1;
        //            //added by dilshan revesal
        //            var _tbbatchs =
        //                from _pickSerials in PickSerials
        //                where _pickSerials.Tus_bin == items.bincode && _pickSerials.Tus_itm_cd == items.itemcode && _pickSerials.Tus_itm_stus == items.itemstatus
        //                group _pickSerials by new
        //                {
        //                    _pickSerials.Tus_bin,
        //                    _pickSerials.Tus_itm_cd,
        //                    _pickSerials.Tus_itm_stus,  //commented by dilshan
        //                    //_pickSerials.Tus_appstatus, //added by dilshan revesal
        //                    _pickSerials.Tus_unit_cost,
        //                    _pickSerials.Tus_unit_price,
        //                    _pickSerials.Tus_base_doc_no,
        //                    _pickSerials.Tus_doc_no,
        //                    _pickSerials.Tus_base_itm_line,
        //                    _pickSerials.Tus_itm_line,
        //                    _pickSerials.Tus_batch_line,
        //                    _pickSerials.Tus_job_no,
        //                    _pickSerials.Tus_job_line,
        //                    _pickSerials.Tus_res_no,
        //                    _pickSerials.Tus_res_line,
        //                    _pickSerials.Tus_batch_no,
        //                    _pickSerials.Tus_exp_dt,
        //                    _pickSerials.Tus_manufac_dt,
        //                    _pickSerials.Tus_pgs_prefix,
        //                    _pickSerials.Tus_new_itm_cd
        //                    //_pickSerials.Tus_batch_dt, //Wimal 03/May/2018
        //                    //_pickSerials.Tus_orig_cost //Wimal 03/June/2018
        //                } into batch
        //                select new
        //                {
        //                    bincode = batch.Key.Tus_bin,
        //                    itemcode = batch.Key.Tus_itm_cd,
        //                    itemstatus = batch.Key.Tus_itm_stus,//commented by dilshan
        //                    //itemstatus = batch.Key.Tus_appstatus,//added by dilshan
        //                    unitcost = batch.Key.Tus_unit_cost,
        //                    unitprice = batch.Key.Tus_unit_price,
        //                    basedocno = batch.Key.Tus_base_doc_no,
        //                    baseitmline = batch.Key.Tus_base_itm_line,
        //                    outdocno = batch.Key.Tus_doc_no,
        //                    outitmline = batch.Key.Tus_itm_line,
        //                    outbatchline = batch.Key.Tus_batch_line,
        //                    jobno = batch.Key.Tus_job_no,
        //                    jobline = batch.Key.Tus_job_line,
        //                    resNo = batch.Key.Tus_res_no,  //Add by Lakshan 21 Oct 2016
        //                    resline = batch.Key.Tus_res_line,  //Add by Lakshan 21 Oct 2016
        //                    batchno = batch.Key.Tus_batch_no,
        //                    expdate = batch.Key.Tus_exp_dt,
        //                    manufacdate = batch.Key.Tus_manufac_dt,
        //                    mainitemcode = batch.Key.Tus_pgs_prefix,
        //                    baseitem = batch.Key.Tus_new_itm_cd,
        //                    itemqty = batch.Sum(p => p.Tus_qty)
        //                    //batch_dt = batch.Key.Tus_batch_dt,
        //                    //orig_cost = batch.Key.Tus_orig_cost
        //                };
        //            //added by dilshan revesal               
        //            foreach (var batchs in _tbbatchs)
        //            {
        //                InventoryBatchN invBatch = new InventoryBatchN();
        //                invBatch.Inb_seq_no = _inventoryMovementHeader.Ith_seq_no;
        //                invBatch.Inb_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString();
        //                invBatch.Inb_com = _inventoryMovementHeader.Ith_com;
        //                invBatch.Inb_loc = _inventoryMovementHeader.Ith_loc;
        //                invBatch.Inb_itm_line = itmLine;
        //                invBatch.Inb_batch_line = batchLine;
        //                invBatch.Inb_batch_no = batchs.batchno;  // kapila 4/7/2015 string.Empty;
        //                invBatch.Inb_exp_dt = batchs.expdate;   // kapila 4/7/2015
        //                invBatch.Inb_bin = batchs.bincode;
        //                invBatch.Inb_itm_cd = batchs.itemcode;
        //                invBatch.Inb_itm_stus = batchs.itemstatus;
        //                invBatch.Inb_qty = batchs.itemqty;
        //                invBatch.Inb_unit_cost = batchs.unitcost;
        //                invBatch.Itb_bal_qty1 = batchs.itemqty;
        //                invBatch.Itb_bal_qty2 = batchs.itemqty;
        //                invBatch.Inb_unit_price = batchs.unitprice;
        //                //invBatch.Inb_base_doc_no = batchs.outdocno;                     //Outward Document (Inter-company) //remove by WImal @ 03/May/2018 to update base doc no
        //                invBatch.Inb_base_doc_no = _inventoryMovementHeader.Ith_oth_docno;                                      //added by WImal @ 03/May/2018  to update base doc no 
        //                invBatch.Inb_base_ref_no = batchs.basedocno; // (Like PO No)
        //                invBatch.Inb_base_refline = batchs.baseitmline; // (Like PO Line No)
        //                invBatch.Inb_doc_dt = _inventoryMovementHeader.Ith_doc_date;
        //                if (string.IsNullOrEmpty(batchs.baseitem))
        //                {
        //                    invBatch.Inb_base_itmcd = batchs.itemcode;
        //                }
        //                else
        //                {
        //                    invBatch.Inb_base_itmcd = batchs.baseitem;//batchs.itemcode;
        //                }
        //                invBatch.Inb_base_itmline = batchs.outitmline;                  //Outward Document Item Line (Inter-company)
        //                invBatch.Itb_base_batchline = batchs.outbatchline;              //Outward Document Batch Line (Inter-company)
        //                invBatch.Inb_base_itmstus = batchs.itemstatus;
        //                invBatch.Inb_job_no = batchs.jobno; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
        //                invBatch.Inb_job_line = batchs.jobline; // Add by Chamal/Nadeeka 16-01-2014 if any issue responsibility by Nadeeka
        //                invBatch.Itb_git_ignore = false;
        //                invBatch.Itb_git_ignore_by = null;
        //                invBatch.Itb_git_ignore_dt = DateTime.MinValue;
        //                invBatch.Itb_git_ignore_effdt = DateTime.MinValue;
        //                invBatch.Inb_res_no = null;
        //                invBatch.Inb_res_lineno = 0;
        //                if (!string.IsNullOrEmpty(batchs.resNo) && batchs.resNo != "N/A")
        //                {
        //                    invBatch.Inb_res_no = batchs.resNo;  //Add by Lakshan 21 Oct 2016
        //                    invBatch.Inb_res_lineno = batchs.resline;  //Add by Lakshan 21 Oct 2016
        //                }
        //                invBatch.Inb_base_doc_no1 = null;
        //                invBatch.Inb_base_doc_no2 = null;
        //                invBatch.Inb_base_doc_no3 = null;
        //                invBatch.Inb_cur_cd = null;
        //                invBatch.Inb_grup_cur_cd = null;
        //                invBatch.Inb_free_qty = batchs.itemqty;
        //                invBatch.Inb_manufac_dt = batchs.manufacdate;
        //                invBatch.Inb_mitm_cd = batchs.mainitemcode;

        //                //invBatch.Inb_batch_dt = batchs.batch_dt;        //Wimal 03/May/2018
        //                //invBatch.Inb_orig_cost = batchs.orig_cost;        //Wimal 03/June/2018

        //                if (_inventoryMovementHeader.Ith_doc_tp != "AOD")
        //                {
        //                    invBatch.Inb_batch_dt = _inventoryMovementHeader.Ith_doc_date;    //Wimal 03/May/2018
        //                    invBatch.Inb_orig_cost = batchs.unitcost;        //Wimal 03/June/2018
        //                }
        //                else
        //                {
        //                    //Get AOD out details--- Wimal 04/Jun/2018
        //                    var batdts = from r in _tmpBatchDt
        //                                 where r.Inb_batch_line == batchs.outbatchline
        //                                 && r.Inb_itm_line == batchs.outitmline
        //                                 select r;
        //                    foreach (var item in batdts)
        //                    {
        //                        invBatch.Inb_batch_dt = item.Inb_batch_dt; //Wimal 03/May/2018
        //                        invBatch.Inb_orig_cost = item.Inb_orig_cost; //Wimal 03/June/2018
        //                    }
        //                }

        //                // INSERT/UPDATE INT_BATCH AND INR_BATCH TABLES
        //                _fixassetDAL.UpdateInventoryBatch(invBatch);
        //                #region Avarage Cost Calculation add by Lakshan 06Jul2017
        //                if (!string.IsNullOrEmpty(_companycostmethod))
        //                {
        //                    if (_companycostmethod == "AVG" && _isAvgType)
        //                    {
        //                        var v = _inrCstList.Where(c => c.Iac_itm_cd == invBatch.Inb_itm_cd && c.Iac_itm_stus == invBatch.Inb_itm_stus).FirstOrDefault();
        //                        if (v != null)
        //                        {
        //                            invBatch.Inb_unit_price = invBatch.Inb_unit_cost;
        //                            invBatch.Inb_unit_cost = v.Iac_avg_cost;
        //                        }
        //                    }
        //                }
        //                #endregion Avarage Cost Calculation
        //                //Added By Prabhath on 1/11/2012
        //                _fixassetDAL.UpdateInventoryBatchRef(invBatch, 1);
        //                //added by dilshan revesal
        //                serLine = 1;
        //                var _tbsers =
        //                    (from _pickSerials in PickSerials
        //                     where
        //                     _pickSerials.Tus_bin == batchs.bincode
        //                     && _pickSerials.Tus_itm_cd == batchs.itemcode
        //                     && _pickSerials.Tus_itm_stus == batchs.itemstatus  //commented by dilshan
        //                         //&& _pickSerials.Tus_appstatus == batchs.itemstatus  //added by dilshan
        //                     && _pickSerials.Tus_unit_cost == batchs.unitcost
        //                     && _pickSerials.Tus_unit_price == batchs.unitprice
        //                     && _pickSerials.Tus_base_doc_no == batchs.basedocno
        //                     && _pickSerials.Tus_doc_no == batchs.outdocno
        //                     && _pickSerials.Tus_base_itm_line == batchs.baseitmline
        //                     && _pickSerials.Tus_itm_line == batchs.outitmline
        //                     && _pickSerials.Tus_batch_line == batchs.outbatchline
        //                     && _pickSerials.Tus_job_no == batchs.jobno
        //                     && _pickSerials.Tus_job_line == batchs.jobline
        //                     && _pickSerials.Tus_batch_no == batchs.batchno
        //                     && _pickSerials.Tus_exp_dt == batchs.expdate
        //                     && _pickSerials.Tus_manufac_dt == batchs.manufacdate
        //                     && _pickSerials.Tus_pgs_prefix == batchs.mainitemcode
        //                     select _pickSerials).Distinct();
        //                foreach (var sers in _tbsers.Distinct())
        //                {
        //                    reptSeqNo = sers.Tus_usrseq_no;

        //                    InventorySerialN invSerials = new InventorySerialN();
        //                    invSerials.Ins_seq_no = _inventoryMovementHeader.Ith_seq_no;
        //                    invSerials.Ins_itm_line = itmLine;
        //                    invSerials.Ins_batch_line = batchLine;
        //                    invSerials.Ins_ser_line = serLine;
        //                    invSerials.Ins_direct = true;
        //                    invSerials.Ins_doc_no = _inventoryMovementHeader.Ith_seq_no.ToString(); // Pls check this object
        //                    invSerials.Ins_doc_dt = _inventoryMovementHeader.Ith_doc_date;
        //                    invSerials.Ins_com = _inventoryMovementHeader.Ith_com;
        //                    invSerials.Ins_loc = _inventoryMovementHeader.Ith_loc;
        //                    invSerials.Ins_bin = sers.Tus_bin;
        //                    invSerials.Ins_itm_cd = sers.Tus_itm_cd;
        //                    invSerials.Ins_itm_stus = sers.Tus_itm_stus; //commented by dilshan on 12/04/2018 //added by dilshan revesal
        //                    //invSerials.Ins_itm_stus = sers.Tus_appstatus; // added by dilshan on 12/04/2018
        //                    invSerials.Ins_unit_cost = sers.Tus_unit_cost;

        //                    if (sers.Tus_itm_stus == "RVT")
        //                    {
        //                        //  invSerials.Ins_unit_price = sers.Tus_unit_price; // Add by Tharindu to check 2018-02-14

        //                        invSerials.Ins_unit_price = sers.Tus_Cap_Amt;
        //                    }


        //                    invSerials.Ins_ser_id = sers.Tus_ser_id;//== 0 ? _fixassetDAL.GetSerialID() : sers.Tus_ser_id; //need to generate serial ID
        //                    invSerials.Ins_ser_1 = sers.Tus_ser_1;
        //                    invSerials.Ins_ser_2 = sers.Tus_ser_2;
        //                    invSerials.Ins_ser_3 = sers.Tus_ser_3;
        //                    invSerials.Ins_ser_4 = sers.Tus_ser_4;
        //                    invSerials.Ins_warr_no = sers.Tus_warr_no;
        //                    invSerials.Ins_warr_period = sers.Tus_warr_period;
        //                    invSerials.Ins_orig_grncom = sers.Tus_orig_grncom;
        //                    invSerials.Ins_orig_grnno = sers.Tus_orig_grnno;
        //                    invSerials.Ins_orig_grndt = sers.Tus_orig_grndt;
        //                    invSerials.Ins_orig_supp = sers.Tus_orig_supp;
        //                    invSerials.Ins_exist_grncom = sers.Tus_exist_grncom;
        //                    invSerials.Ins_exist_grnno = sers.Tus_exist_grnno;
        //                    invSerials.Ins_exist_grndt = sers.Tus_exist_grndt;
        //                    invSerials.Ins_exist_supp = sers.Tus_exist_supp;

        //                    //updated by akila 2017/07/27
        //                    invSerials.Ins_cross_itmline = sers.Tus_base_itm_line;
        //                    invSerials.Ins_cross_batchline = sers.Tus_batch_line;
        //                    invSerials.Ins_cross_serline = sers.Tus_ser_line;

        //                    //invSerials.Ins_cross_seqno = null;
        //                    //invSerials.Ins_cross_itmline = null;
        //                    //invSerials.Ins_cross_batchline = null;
        //                    //invSerials.Ins_cross_serline = null;
        //                    //invSerials.Ins_issue_dt = sers.Tus_out_date;
        //                    invSerials.Ins_available = 1;
        //                    invSerials.Ins_ageloc = sers.Tus_ageloc;
        //                    invSerials.Ins_ageloc_dt = sers.Tus_ageloc_dt.Date;
        //                    invSerials.Ins_isownmrn = sers.Tus_isownmrn;

        //                    //add rukshan on 01/Jun/2016
        //                    invSerials.Ins_is_pgs = sers.Tus_is_pgs;
        //                    invSerials.Ins_pgs_count = sers.Tus_pgs_count;
        //                    invSerials.Ins_pg_prefix = sers.Tus_pgs_prefix;
        //                    invSerials.Ins_st_pg = sers.Tus_st_pg;
        //                    invSerials.Ins_ed_pg = sers.Tus_ed_pg;


        //                    //Add Prabhath on 19/04/2012
        //                    InventoryWarrantyDetail _invWarraDetail = new InventoryWarrantyDetail(); //TODO : Changed need
        //                    _invWarraDetail.Irsm_acc_no = null;
        //                    _invWarraDetail.Irsm_anal_1 = null;
        //                    _invWarraDetail.Irsm_anal_2 = null;
        //                    _invWarraDetail.Irsm_anal_3 = null;
        //                    _invWarraDetail.Irsm_anal_4 = null;
        //                    _invWarraDetail.Irsm_anal_5 = null;
        //                    _invWarraDetail.Irsm_channel = _inventoryMovementHeader.Ith_channel;
        //                    _invWarraDetail.Irsm_com = _inventoryMovementHeader.Ith_com;
        //                    _invWarraDetail.Irsm_cre_by = _inventoryMovementHeader.Ith_cre_by;
        //                    _invWarraDetail.Irsm_cre_when = DateTime.Now;
        //                    _invWarraDetail.Irsm_cust_addr = null;
        //                    _invWarraDetail.Irsm_cust_cd = null;
        //                    _invWarraDetail.Irsm_cust_del_addr = null;
        //                    _invWarraDetail.Irsm_cust_email = null;
        //                    _invWarraDetail.Irsm_cust_fax = null;
        //                    _invWarraDetail.Irsm_cust_mobile = null;
        //                    _invWarraDetail.Irsm_cust_name = null;
        //                    _invWarraDetail.Irsm_cust_prefix = null;
        //                    _invWarraDetail.Irsm_cust_tel = null;
        //                    _invWarraDetail.Irsm_cust_town = null;
        //                    _invWarraDetail.Irsm_cust_vat_no = null;
        //                    _invWarraDetail.Irsm_direct = _inventoryMovementHeader.Ith_direct.ToString();
        //                    _invWarraDetail.Irsm_doc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
        //                    _invWarraDetail.Irsm_doc_no = _inventoryMovementHeader.Ith_doc_no;
        //                    _invWarraDetail.Irsm_doc_year = _inventoryMovementHeader.Ith_doc_date;
        //                    _invWarraDetail.Irsm_exist_grn_com = sers.Tus_exist_grncom;
        //                    _invWarraDetail.Irsm_exist_grn_dt = sers.Tus_exist_grndt.Date;
        //                    _invWarraDetail.Irsm_exist_grn_no = sers.Tus_exist_grnno;
        //                    _invWarraDetail.Irsm_exist_supp = sers.Tus_exist_supp;
        //                    _invWarraDetail.Irsm_invoice_dt = DateTime.MinValue;
        //                    _invWarraDetail.Irsm_invoice_no = null;
        //                    _invWarraDetail.Irsm_itm_brand = sers.Tus_itm_brand;
        //                    _invWarraDetail.Irsm_itm_cd = sers.Tus_itm_cd;
        //                    _invWarraDetail.Irsm_itm_desc = sers.Tus_itm_desc;
        //                    _invWarraDetail.Irsm_itm_model = sers.Tus_itm_model;
        //                    _invWarraDetail.Irsm_itm_stus = sers.Tus_itm_stus; //commented by dilshan //added by dilshan revesal
        //                    //_invWarraDetail.Irsm_itm_stus = sers.Tus_appstatus; //added by dilshan
        //                    _invWarraDetail.Irsm_loc = _inventoryMovementHeader.Ith_loc;
        //                    _invWarraDetail.Irsm_loc_desc = null;
        //                    _invWarraDetail.Irsm_mfc = null;
        //                    _invWarraDetail.Irsm_mod_by = _inventoryMovementHeader.Ith_cre_by;
        //                    _invWarraDetail.Irsm_mod_when = DateTime.Now;
        //                    _invWarraDetail.Irsm_orig_grn_com = sers.Tus_orig_grncom;
        //                    _invWarraDetail.Irsm_orig_grn_dt = sers.Tus_orig_grndt.Date;
        //                    _invWarraDetail.Irsm_orig_grn_no = sers.Tus_orig_grnno;
        //                    _invWarraDetail.Irsm_orig_supp = sers.Tus_orig_supp;
        //                    _invWarraDetail.Irsm_sbu = _inventoryMovementHeader.Ith_sbu;
        //                    _invWarraDetail.Irsm_ser_1 = sers.Tus_ser_1;
        //                    _invWarraDetail.Irsm_ser_2 = sers.Tus_ser_2;
        //                    _invWarraDetail.Irsm_ser_3 = sers.Tus_ser_3;
        //                    _invWarraDetail.Irsm_ser_4 = sers.Tus_ser_4;
        //                    _invWarraDetail.Irsm_ser_id = sers.Tus_ser_id;
        //                    _invWarraDetail.Irsm_session_id = _inventoryMovementHeader.Ith_session_id;
        //                    _invWarraDetail.Irsm_unit_cost = sers.Tus_unit_cost;
        //                    _invWarraDetail.Irsm_unit_price = sers.Tus_unit_price;
        //                    _invWarraDetail.Irsm_warr_no = string.IsNullOrEmpty(sers.Tus_warr_no) ? Convert.ToString(sers.Tus_ser_id) : sers.Tus_warr_no;
        //                    _invWarraDetail.Irsm_warr_period = sers.Tus_warr_period;
        //                    _invWarraDetail.Irsm_warr_rem = null;
        //                    _invWarraDetail.Irsm_warr_start_dt = DateTime.MinValue;
        //                    _invWarraDetail.Irsm_warr_stus = null;


        //                    //Sahan 24 Feb 2016
        //                    _invWarraDetail.IRSM_SYS_BLNO = sers.IRSM_SYS_BLNO;
        //                    _invWarraDetail.IRSM_BLNO = sers.IRSM_BLNO;
        //                    _invWarraDetail.IRSM_BL_DT = sers.IRSM_BL_DT;
        //                    _invWarraDetail.IRSM_SYS_FIN_NO = sers.IRSM_SYS_FIN_NO;
        //                    _invWarraDetail.IRSM_FIN_NO = sers.IRSM_FIN_NO;
        //                    _invWarraDetail.IRSM_FIN_DT = sers.IRSM_FIN_DT;

        //                    #region issue fix warr start date/period/remark 04Dec2017 by lakshan as per the chamal/darshana
        //                    if (_invWarraDetail.Irsm_warr_start_dt == DateTime.MinValue)
        //                    {
        //                        _invWarraDetail.Irsm_warr_start_dt = _inventoryMovementHeader.Ith_doc_date;
        //                    }
        //                    if (_invWarraDetail.Irsm_invoice_dt == DateTime.MinValue)
        //                    {
        //                        _invWarraDetail.Irsm_invoice_dt = _inventoryMovementHeader.Ith_doc_date;
        //                    }
        //                    if (_invWarraDetail.Irsm_warr_period == 0)
        //                    {
        //                        MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
        //                        if (_warPer != null)
        //                        {
        //                            if (_warPer.Mwp_val != 0)
        //                            {
        //                                _invWarraDetail.Irsm_warr_period = _warPer.Mwp_val;
        //                                invSerials.Ins_warr_period = _warPer.Mwp_val;
        //                            }
        //                            else
        //                            {
        //                                _invWarraDetail.Irsm_warr_period = 12; //as per the dharshana
        //                                invSerials.Ins_warr_period = 12;
        //                            }
        //                        }
        //                    }
        //                    if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_rem))
        //                    {
        //                        MasterItemWarrantyPeriod _warPer = _fixassetDAL.GetItemWarrantyDetail(invSerials.Ins_itm_cd, invSerials.Ins_itm_stus);
        //                        if (_warPer != null)
        //                        {
        //                            if (_warPer.Mwp_val != 0)
        //                            {
        //                                _invWarraDetail.Irsm_warr_rem = string.IsNullOrEmpty(_warPer.Mwp_rmk) ? "N/A" : _warPer.Mwp_rmk;
        //                            }
        //                            else
        //                            {
        //                                _invWarraDetail.Irsm_warr_rem = "N/A"; //as per the dharshana
        //                            }
        //                        }
        //                    }
        //                    string _tmpWar = string.Empty;
        //                    if (string.IsNullOrEmpty(_invWarraDetail.Irsm_warr_no))
        //                    {
        //                        _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
        //                            "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
        //                        _invWarraDetail.Irsm_warr_no = _tmpWar;
        //                        invSerials.Ins_warr_no = _tmpWar;
        //                    }
        //                    else if (_invWarraDetail.Irsm_warr_no == "N/A")
        //                    {
        //                        _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
        //                            "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
        //                        _invWarraDetail.Irsm_warr_no = _tmpWar;
        //                        invSerials.Ins_warr_no = _tmpWar;
        //                    }
        //                    else if (_invWarraDetail.Irsm_warr_no == _invWarraDetail.Irsm_ser_id.ToString())
        //                    {
        //                        _tmpWar = String.Format("{0:dd}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:MM}", _inventoryMovementHeader.Ith_doc_date.Date) + String.Format("{0:yy}", _inventoryMovementHeader.Ith_doc_date.Date) +
        //                            "-" + _inventoryMovementHeader.Ith_loc + "-P01-" + _invWarraDetail.Irsm_ser_id.ToString();
        //                        _invWarraDetail.Irsm_warr_no = _tmpWar;
        //                        invSerials.Ins_warr_no = _tmpWar;
        //                    }
        //                    #endregion

        //                    // decimal allow none-serialized items are not saved in serial related tables
        //                    if (sers.Tus_ser_id != 0)
        //                    {
        //                        bool _isUpdWarrSts = false;
        //                        if (_inventoryMovementHeader.Ith_doc_tp == "SRN")
        //                        {
        //                            _invWarraDetail.Irsm_warr_stus = "N";
        //                            _isUpdWarrSts = true;
        //                        }
        //                        if (_inventoryMovementHeader._warrNotupdate != true)//add by tharanga ravent and revet reale inrsermast not update value pass from client side
        //                        {
        //                            if (_isUpdWarrSts)
        //                            {
        //                                #region add by lakshan as per the dharshana/sanjeewa/Lakshan 23Oct2017
        //                                _fixassetDAL.SaveWarrantyDetailWithWarrSts(_invWarraDetail);
        //                                #endregion
        //                            }
        //                            else
        //                            {
        //                                _fixassetDAL.SaveWarrantyDetail(_invWarraDetail);
        //                            }
        //                        }
        //                        _fixassetDAL.SaveInventorySerial(invSerials, 1);
        //                        #region Avarage Cost Calculation add by Lakshan 06Jul2017
        //                        if (!string.IsNullOrEmpty(_companycostmethod))
        //                        {
        //                            if (_companycostmethod == "AVG" && _isAvgType)
        //                            {
        //                                var v = _inrCstList.Where(c => c.Iac_itm_cd == invSerials.Ins_itm_cd && c.Iac_itm_stus == invSerials.Ins_itm_stus).FirstOrDefault();
        //                                if (v != null)
        //                                {
        //                                    invSerials.Ins_unit_price = invSerials.Ins_unit_cost;
        //                                    invSerials.Ins_unit_cost = v.Iac_avg_cost;
        //                                }
        //                            }
        //                        }
        //                        #endregion Avarage Cost Calculation
        //                        //Added By Prabhath on 1/11/2012
        //                        try
        //                        {
        //                            _fixassetDAL.SaveInventorySerialRef(invSerials, 1);
        //                        }
        //                        catch (Exception ex)
        //                        {

        //                            if (ex.Message.Contains("EMS.DUPLICATE_SERIALS_FOUND"))
        //                            {
        //                                effect = -2;
        //                                return -2;

        //                                // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
        //                            }
        //                        }

        //                        //Edit Chamal 18-10-2012
        //                        //_fixassetDAL.UpdateOutCrossRef(sers.Tus_base_doc_no, sers.Tus_ser_id, sers.Tus_doc_dt.Date, invSerials.Ins_seq_no, invSerials.Ins_itm_line, invSerials.Ins_batch_line, invSerials.Ins_ser_line);

        //                        //Tharaka 2015-12-30
        //                        Int32 result = FIXA_InventryCostCalculation(invBatch, invSerials, _inventoryMovementHeader.Ith_cre_by, _inventoryMovementHeader.Ith_session_id, "", _inventoryMovementHeader.Ith_seq_no, 1);
        //                        serLine += 1;

        //                        #region
        //                        //Edit by Rukshan 04-sep-2015
        //                        int _line = 0;
        //                        if (_reptPickSerialsSub != null)
        //                        {

        //                            foreach (ReptPickSerialsSub _Sub in _reptPickSerialsSub)
        //                            {
        //                                InventoryWarrantySubDetail _invSubDetail = new InventoryWarrantySubDetail();
        //                                if ((sers.Tus_itm_cd == _Sub.Tpss_m_itm_cd) && (sers.Tus_ser_1 == _Sub.Tpss_m_ser))
        //                                {
        //                                    _invSubDetail.Irsms_act = true;
        //                                    _invSubDetail.Irsms_ser_id = sers.Tus_ser_id;
        //                                    _invSubDetail.Irsms_ser_line = _line;
        //                                    _invSubDetail.Irsms_warr_no = _Sub.Tpss_warr_no;
        //                                    _invSubDetail.Irsms_itm_cd = _Sub.Tpss_itm_cd;
        //                                    _invSubDetail.Irsms_itm_stus = _Sub.Tpss_itm_stus;
        //                                    _invSubDetail.Irsms_sub_ser = _Sub.Tpss_sub_ser;
        //                                    _invSubDetail.Irsms_mfc = _Sub.Tpss_mfc;
        //                                    _invSubDetail.Irsms_tp = _Sub.Tpss_tp;
        //                                    _invSubDetail.Irsms_warr_period = _Sub.Tpss_warr_period;
        //                                    _invSubDetail.Irsms_warr_rem = _Sub.Tpss_warr_rem;
        //                                    _invSubDetail.Mi_act = true;
        //                                    // _invSubDetail.Irsms_qty = _1;
        //                                    // CustServiceDAL _CustServiceDAL = new CustServiceDAL();
        //                                    //_CustServiceDAL.ConnectionOpen();
        //                                    // _CustServiceDAL.BeginTransaction();
        //                                    _fixassetDAL.SAVE_INR_SERMSTSUB(_invSubDetail);
        //                                    // _CustServiceDAL.SAVE_INR_SERMSTSUB(_invSubDetail);                                      
        //                                    // _CustServiceDAL.TransactionCommit();
        //                                    // _CustServiceDAL.ConnectionClose();
        //                                    _line++;
        //                                }

        //                            }
        //                        }

        //                        #endregion
        //                    }
        //                }

        //                batchLine += 1;
        //            }

        //            itmLine += 1;
        //        }
        //    }
        //    _fixassetDAL.UpdateOutDocStatus(_inventoryMovementHeader.Ith_oth_docno);

        //    // Update location inventory
        //    var _tblocainv =
        //        from _pickSerials in PickSerials
        //        group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
        //        select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

        //    foreach (var locaitems in _tblocainv)
        //    {
        //        //Added By Prabhath on 1/11/2012
        //        #region Avarage Cost Calculation
        //        //string _scmStatus = string.Empty;
        //        //DataTable _tblStus = _fixassetDAL.GetItemStatusMaster(locaitems.itemstatus, string.Empty);
        //        //if (_tblStus != null)
        //        //    if (_tblStus.Rows.Count > 0)
        //        //    {
        //        //        foreach (DataRow _rs in _tblStus.Rows) { _scmStatus = Convert.ToString(_rs["mis_old_cd"]); break; }
        //        //    }

        //        //decimal _particulerAvgCost = 0;
        //        //if (_companycostmethod == "AVG" && _isAvgType)
        //        //{
        //        //    var _avgcost = PickSerials.Where(y => y.Tus_itm_cd == locaitems.itemcode && y.Tus_itm_stus == locaitems.itemstatus).Select(s => s.Tus_new_status).Distinct();
        //        //    foreach (string _h in _avgcost)
        //        //        _particulerAvgCost = Convert.ToDecimal(_h);
        //        //    _fixassetDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, locaitems.itemstatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
        //        //    _ScmCommonDAL.UpdateAvgCost(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _scm2LocCategory, locaitems.itemcode, _scmStatus, _inventoryMovementHeader.Ith_cre_by, _particulerAvgCost);
        //        //}
        //        #endregion Avarage Cost Calculation
        //        //Added By Prabhath on 1/11/2012

        //        InventoryLocation invLocation = new InventoryLocation();
        //        invLocation.Inl_com = _inventoryMovementHeader.Ith_com;
        //        invLocation.Inl_loc = _inventoryMovementHeader.Ith_loc;
        //        invLocation.Inl_itm_cd = locaitems.itemcode;
        //        invLocation.Inl_itm_stus = locaitems.itemstatus;
        //        invLocation.Inl_qty = locaitems.itemqty;
        //        invLocation.Inl_free_qty = locaitems.itemqty;
        //        invLocation.Inl_res_qty = 0;
        //        invLocation.Inl_isu_qty = locaitems.itemqty;
        //        invLocation.Inl_bl_qty = 0;
        //        invLocation.Inl_eo_qty = 0;
        //        invLocation.Inl_ro_qty = 0;
        //        invLocation.Inl_cre_by = null;

        //        _fixassetDAL.UpdateInventoryLocation(invLocation, 1);
        //    }
        //    if (reptSeqNo != 0)
        //    {
        //        _inventoryRepDAL.DeleteTempPickObjs(reptSeqNo);
        //    }
        //    #region avg cost git maintain 14Jul2017 Lakshan
        //    if (_inventoryMovementHeader.Ith_doc_tp == "AOD" && _inventoryMovementHeader.Ith_direct && !_inventoryMovementHeader.Tmp_avg_cost_calc)
        //    {
        //        decimal _avgCst = 0;
        //        decimal _noOfUnit = 0;
        //        INR_AVG_COST_GIT _tmpInrAvgCst = new INR_AVG_COST_GIT();
        //        INR_AVG_COST_GIT _saveAvgCst = new INR_AVG_COST_GIT();
        //        INR_AVG_COST_GIT _inrAvgCstAva = new INR_AVG_COST_GIT();
        //        MasterLocation _mstLocIn = _fixassetDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
        //        if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
        //        {
        //            _mstLocIn = _fixassetDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Tmp_err_loc);
        //        }
        //        if (_mstLocIn == null) { throw new Exception("Location details not found"); }

        //        List<InventoryBatchN> _tmpInvBatList = _fixassetDAL.GET_INT_BATCH_BY_SEQNO(_inventoryMovementHeader.Ith_seq_no);
        //        List<INR_AVG_COST_GIT> _listAvgData = new List<INR_AVG_COST_GIT>();
        //        INR_AVG_COST_GIT _avgData = new INR_AVG_COST_GIT();
        //        foreach (var _pBat in _tmpInvBatList)
        //        {
        //            _avgData = new INR_AVG_COST_GIT();
        //            _avgData.Iacg_itm_cd = _pBat.Inb_itm_cd;
        //            _avgData.Iacg_itm_stus = _pBat.Inb_itm_stus;
        //            _avgData.Iacg_avg_qty = _pBat.Inb_qty;
        //            _avgData.Iacg_avg_cost = _pBat.Inb_unit_cost;
        //            _avgData.Tmp_mult_cost = _pBat.Inb_qty * _pBat.Inb_unit_cost;
        //            _listAvgData.Add(_avgData);
        //        }
        //        var _invBatList = _listAvgData.GroupBy(x => new { x.Iacg_itm_cd, x.Iacg_itm_stus }).Select(group =>
        //                 new { Peo = group.Key, docQty = group.Sum(o => o.Iacg_avg_qty), docCst = group.Sum(o => o.Tmp_mult_cost) });
        //        foreach (var item in _invBatList)
        //        {
        //            //_tmpInrAvgCst = new INR_AVG_COST_GIT();
        //            //_tmpInrAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
        //            //_tmpInrAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
        //            //_tmpInrAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
        //            //_tmpInrAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
        //            //_inrAvgCstAva = _fixassetDAL.GET_INR_AVG_COST_GIT_DATA(_tmpInrAvgCst);
        //            //if (_inrAvgCstAva != null)
        //            //{
        //            //    _avgCst = ((_inrAvgCstAva.Iacg_avg_cost * _inrAvgCstAva.Iacg_avg_qty) - item.docCst) / (_inrAvgCstAva.Iacg_avg_qty - item.docQty);
        //            //    _noOfUnit = _inrAvgCstAva.Iacg_avg_qty - item.docQty;
        //            //}
        //            //else
        //            //{
        //            //    _avgCst = item.docCst / item.docQty;
        //            //    _noOfUnit = item.docQty;
        //            //}
        //            _avgCst = item.docCst;
        //            _noOfUnit = item.docQty;
        //            _saveAvgCst = new INR_AVG_COST_GIT();
        //            _saveAvgCst.Iacg_com = _inventoryMovementHeader.Ith_com;
        //            _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Ith_loc;
        //            if (_inventoryMovementHeader.Ith_anal_1 == "ERR_AOD")
        //            {
        //                _saveAvgCst.Iacg_loc = _inventoryMovementHeader.Tmp_err_loc;
        //            }
        //            _saveAvgCst.Iacg_loc_tp = _mstLocIn.Ml_cate_1;
        //            _saveAvgCst.Iacg_itm_cd = item.Peo.Iacg_itm_cd;
        //            _saveAvgCst.Iacg_itm_stus = item.Peo.Iacg_itm_stus;
        //            _saveAvgCst.Iacg_avg_dt = DateTime.Now;
        //            _saveAvgCst.Iacg_avg_cost = Math.Round(_avgCst, 4);
        //            _saveAvgCst.Iacg_avg_qty = _noOfUnit;
        //            _saveAvgCst.Iacg_cre_by = _inventoryMovementHeader.Ith_cre_by;
        //            _saveAvgCst.Iacg_cre_dt = _inventoryMovementHeader.Ith_cre_when;
        //            _saveAvgCst.Iacg_mod_by = _inventoryMovementHeader.Ith_mod_by;
        //            _saveAvgCst.Iacg_mod_dt = _inventoryMovementHeader.Ith_mod_when;
        //            _saveAvgCst.Iacg_in_qty = item.docQty;
        //            _saveAvgCst.Iacg_mod_doc = _inventoryMovementHeader.Ith_seq_no.ToString();
        //            _saveAvgCst.Iacg_direction = true;
        //            _fixassetDAL.UpdateInrCostDataGit(_saveAvgCst);
        //        }
        //    }
        //    #endregion

        //    effect = 1;

        //    return effect;

        //}

        //public Int16 UpdateInventoryAutoNumber_FIXA(InventoryHeader _inventoryMovementHeader, MasterAutoNumber _masterAutoNumber, String _locaSeparater, out string _docNo)
        //{
        //    Int16 effect = 0;
        //nx:
        //    Int32 _autoNo = _fixassetDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
        //    string _documentNo = _inventoryMovementHeader.Ith_loc + _locaSeparater + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
        //    effect = _fixassetDAL.UpdateAutoNumber(_masterAutoNumber);

        //    if (_fixassetDAL.CheckInventoryNo("sp_getmovno", "p_doc_no", _documentNo) == 1)
        //    {
        //        //Check Save Movement Document No :: Code by Chamal De Silva 31/01/2013
        //        goto nx;
        //    }

        //    effect = _fixassetDAL.UpdateMovementDocNo(_inventoryMovementHeader.Ith_seq_no, _documentNo);
        //    _docNo = _documentNo;
        //    return effect;
        //}

        private Int32 FIXA_InventryCostCalculation(InventoryBatchN invSerials, InventorySerialN oSerials, String UserID, string SessionID, string BaseDocument, Int32 SeqNumber, Int32 direction)
        {
            Int32 Result = 0;
            if (_generalDAL == null)
            {
                _generalDAL = new GeneralDAL();
            }
            if (invSerials == null || oSerials == null)
            {
                return Result;
            }
            MasterItem oItem = _fixassetDAL.GetItem(invSerials.Inb_com, invSerials.Inb_itm_cd);
            MasterLocation oLocation = _generalDAL.GetLocationInfor(invSerials.Inb_com, invSerials.Inb_loc);
            String ItemBaseUOM = oItem.Mi_anal2.ToString();
            WarehouseBin oWarehouseBin = _fixassetDAL.GET_BIN_BY_CODE(invSerials.Inb_com, invSerials.Inb_loc, invSerials.Inb_bin);
            decimal TotalDays = 0;
            InventoryHeader oBaseDocument = null;
            if (direction == 0)
            {
                oBaseDocument = _fixassetDAL.Get_Int_Hdr(oSerials.Ins_cross_doc_no);

                //Modified Sahan for Consignment Return Note
                if (oBaseDocument == null)
                {
                    oBaseDocument = _fixassetDAL.Get_Int_Hdr(oSerials.Ins_fifo_doc_no);
                }
                //
                if (oBaseDocument != null)
                {
                    TotalDays = (decimal)(invSerials.Inb_doc_dt - oBaseDocument.Ith_doc_date).TotalDays;
                }
            }

            _securityDAL = new SecurityDAL();
            DataTable dtSBU = _securityDAL.GetSBU_User(invSerials.Inb_com, UserID, null);
            string SBU = "";
            foreach (DataRow dr in dtSBU.Rows)
            {
                int value = Convert.ToInt32(dr[2].ToString());
                if (value == 1)
                {
                    SBU = dr[1].ToString();
                }
            }

            String BaseDodumet = invSerials.Inb_base_doc_no;

            if (oWarehouseBin != null && !string.IsNullOrEmpty(oWarehouseBin.Ibn_tp) && !string.IsNullOrEmpty(oItem.Mi_anal2))
            {
                List<MST_COM_LOGI_COST> oLogiCosts = _fixassetDAL.GET_LOGI_COST(invSerials.Inb_com, ItemBaseUOM, oWarehouseBin.Ibn_tp, direction);
                if (oLogiCosts != null)
                {
                    foreach (MST_COM_LOGI_COST oCostItem in oLogiCosts)
                    {
                        decimal CostValue = 0;
                        if (oItem.Mi_anal2 == "W")
                        {
                            CostValue = oCostItem.Mclc_per_rt * 1 * TotalDays;
                        }
                        else if (oItem.Mi_anal2 == "V")
                        {
                            CostValue = oItem.Mi_dim_height * oItem.Mi_dim_length * oItem.Mi_dim_width * oCostItem.Mclc_per_rt * TotalDays;
                        }

                        INT_BATCHLOGICOST oBatchCost = new INT_BATCHLOGICOST();
                        oBatchCost.Itbc_seq_no = invSerials.Inb_seq_no;
                        oBatchCost.Itbc_itm_line = invSerials.Inb_itm_line;
                        oBatchCost.Itbc_batch_line = invSerials.Inb_batch_line;
                        oBatchCost.Itbc_cost_line = oLogiCosts.IndexOf(oCostItem) + 1;
                        oBatchCost.Itbc_batch_no = invSerials.Inb_batch_no;
                        oBatchCost.Itbc_doc_no = invSerials.Inb_doc_no;
                        oBatchCost.Itbc_doc_dt = invSerials.Inb_doc_dt;
                        oBatchCost.Itbc_com = invSerials.Inb_com;
                        oBatchCost.Itbc_sbu = SBU;
                        oBatchCost.Itbc_channel = oLocation.Ml_cate_2;
                        oBatchCost.Itbc_loc = invSerials.Inb_loc;
                        oBatchCost.Itbc_bin = invSerials.Inb_bin;
                        oBatchCost.Itbc_itm_cd = invSerials.Inb_itm_cd;
                        oBatchCost.Itbc_itm_stus = invSerials.Inb_itm_stus;
                        oBatchCost.Itbc_qty = 1;
                        oBatchCost.Itbc_unit_cost = invSerials.Inb_unit_cost;
                        oBatchCost.Itbc_cost_cat = oCostItem.Mclc_cost_cat;
                        oBatchCost.Itbc_cost_tp = oCostItem.Mclc_cost_tp;
                        oBatchCost.Itbc_cost_ele = oCostItem.Mclc_cost_ele;
                        oBatchCost.Itbc_logi_cost = CostValue;
                        oBatchCost.Itbc_direct = direction;
                        if (direction == 0 && oBaseDocument != null)
                        {
                            oBatchCost.Itbc_no_of = TotalDays;
                            oBatchCost.Itbc_indoc_no = oBaseDocument.Ith_doc_no;
                            oBatchCost.Itbc_indoc_dt = oBaseDocument.Ith_doc_date;
                        }
                        oBatchCost.Itbc_act = 1;
                        oBatchCost.Itbc_cre_by = UserID;
                        oBatchCost.Itbc_cre_dt = DateTime.Now;
                        oBatchCost.Itbc_cre_session = SessionID;
                        oBatchCost.Itbc_mod_by = UserID;
                        oBatchCost.Itbc_mod_dt = DateTime.Now;
                        oBatchCost.Itbc_mod_session = SessionID;

                        Result = _fixassetDAL.SaveIntBatchLogiCost(oBatchCost);

                        //foreach (ReptPickSerials oSerialItem in oSerials)
                        if (invSerials != null)
                        {
                            INR_SERMSTCOST oCostSearial = new INR_SERMSTCOST();
                            oCostSearial.Irsmc_seq = invSerials.Inb_seq_no;
                            oCostSearial.Irsmc_ser_id = oSerials.Ins_ser_id;
                            oCostSearial.Irsmc_com = oSerials.Ins_com;
                            oCostSearial.Irsmc_sbu = SBU;
                            oCostSearial.Irsmc_channel = oLocation.Ml_cate_2;
                            oCostSearial.Irsmc_loc = oSerials.Ins_loc;
                            oCostSearial.Irsmc_cost_cat = oCostItem.Mclc_cost_cat;
                            oCostSearial.Irsmc_cost_tp = oCostItem.Mclc_cost_tp;
                            oCostSearial.Irsmc_cost_ele = oCostItem.Mclc_cost_ele;
                            oCostSearial.Irsmc_cost = CostValue;
                            oCostSearial.Irsmc_direct = direction;
                            oCostSearial.Irsmc_doc_no = invSerials.Inb_doc_no;
                            oCostSearial.Irsmc_doc_dt = invSerials.Inb_doc_dt;
                            oCostSearial.Irsmc_unit_cost = invSerials.Inb_unit_cost;
                            oCostSearial.Irsmc_no_of = (Int32)TotalDays;
                            if (direction == 0 && oBaseDocument != null)
                            {
                                oCostSearial.Irsmc_indoc_no = BaseDocument;
                                oCostSearial.Irsmc_indoc_dt = oBaseDocument.Ith_doc_date;
                            }
                            oCostSearial.Irsmc_act = 1;
                            oCostSearial.Irsmc_cre_by = UserID;
                            oCostSearial.Irsmc_cre_dt = DateTime.Now;
                            oCostSearial.Irsmc_cre_session = SessionID;
                            oCostSearial.Irsmc_mod_by = UserID;
                            oCostSearial.Irsmc_mod_dt = DateTime.Now;
                            oCostSearial.Irsmc_mod_session = SessionID;

                            Result = _fixassetDAL.SaveInrSermstCost(oCostSearial);
                        }
                    }
                }
            }
            return Result;
        }

        public Int16 ADJPlus_FIXA(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo, bool IsTemp = false, bool Isfixdb = false)
        {
            Int16 effect = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();

                _ScmCommonDAL = new SCMCommonDAL();

                _fixassetDAL = new FIXA_InventoryDAL();

                _fixassetDAL.ConnectionOpen();
                _fixassetDAL.BeginTransaction();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();


                if (IsTemp == true)
                {
                    effect = SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    // effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "-", out _docNo);

                    _fixassetDAL.TransactionCommit();


                    effect = 1;
                }
                else
                {

                    #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                    List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                    TmpValidation _tmpLocBalVal = new TmpValidation();
                    InventoryLocation _tmpLocBal = new InventoryLocation();
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL)
                    {
                        var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                        foreach (var _outSer in _serialItemData)
                        {
                            _tmpLocBalVal = new TmpValidation();
                            _tmpLocBalVal.Inl_com = _inventoryMovementHeader.Ith_com;
                            _tmpLocBalVal.Inl_loc = _inventoryMovementHeader.Ith_loc;
                            _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                            _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                            _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                            _tmpLocBal = _fixassetDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _inventoryMovementHeader.Ith_com,
                                Inl_loc = _inventoryMovementHeader.Ith_loc,
                                Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                                Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                            });
                            _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                            _locBalanceDataList.Add(_tmpLocBalVal);
                        }
                    }
                    #endregion
                    effect = SaveInwardScanSerial_FIXA(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
                    effect = UpdateInventoryAutoNumber_FIXA(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);
                    //comented by kapila 17/7/2015
                    //_fixassetDAL.UpdateMovementDocNo_Other(_inventoryMovementHeader.Ith_seq_no, _docNo);

                    if (_inventoryMovementHeader.Ith_sub_tp != null)
                    {
                        if (_inventoryMovementHeader.Ith_sub_tp == "QUO")
                        {
                            _fixassetDAL.UpdateMovementStatus(_inventoryMovementHeader.Ith_oth_docno, "R", _inventoryMovementHeader.Ith_mod_by);
                        }
                    }
                    #region Validate Aod Save by Lakshan 06/Sep/2016
                    #region Cheak Batch
                    if (effect != -1)
                    {
                        List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                        _BATCH = _fixassetDAL.GETInventorybatch(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_seq_no.ToString());
                        bool _count = _fixassetDAL.checkBatch_ser(_inventoryMovementHeader.Ith_seq_no);
                        if (_BATCH.Count == 0)
                        {
                            effect = -1;
                            _docNo = "Process Terminated ! Inventory Balance not updated ";
                        }
                        if (effect != -1)
                        {
                            if (_count == false)
                            {
                                bool _chkBatch = true;
                                MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
                                if (_mstLocation != null)
                                {
                                    if (!_mstLocation.Ml_is_serial)
                                    {
                                        if (string.IsNullOrEmpty(_inventoryMovementHeader.Ith_loading_point) || _inventoryMovementHeader.Ith_loading_point == "N/A")
                                        {
                                            _chkBatch = false;
                                        }
                                    }
                                }
                                if (_chkBatch)
                                {
                                    effect = -1;
                                    _docNo = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                                }
                            }
                        }
                    }
                    #endregion
                    #region Cheak int Itm
                    if (effect != -1)
                    {
                        bool _intItmErr = _fixassetDAL.check_int_itm(_inventoryMovementHeader.Ith_seq_no);
                        if (_intItmErr == false)
                        {
                            effect = -1;
                            _docNo = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                        }
                    }
                    #endregion

                    #region Check Serials
                    if (effect == 1)
                    {
                        //Added by Chamal to check serial ID duplicate 05-Sep-2016
                        List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                        _serList = _fixassetDAL.GetSerialsByDocument(_inventoryMovementHeader.Ith_seq_no, null);

                        var _varSer = from c in _serList
                                      group c by c.Tus_ser_id into grp
                                      where grp.Count() > 1
                                      select new { SerialID = grp.Key, Count = grp.Count() };
                        if (_varSer != null && _varSer.Count() > 0)
                        {
                            string _errorSerialID = string.Empty;
                            foreach (var item in _varSer)
                            {
                                if (string.IsNullOrEmpty(_errorSerialID))
                                {
                                    _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                                else
                                {
                                    _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                                }
                            }
                            effect = -1;
                            _docNo = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        }
                    }
                    #endregion

                    #region validate serial count and batch count
                    #region set var data 19 oct 2016
                    decimal _updatedQty = 0;
                    decimal _batchQty = 0;
                    decimal _serQty = 0;
                    List<InventoryBatchN> _invBatchData = _fixassetDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
                    if (_invBatchData != null)
                    {
                        if (_invBatchData.Count > 0)
                        {
                            _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                            _serQty = _reptPickSerials.Sum(c => c.Tus_qty);
                        }
                    }
                    #endregion
                    if (_batchQty != _serQty)
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                    }
                    #endregion

                    #region validate location balance update correctly 27 Nov 2016
                    if (_inventoryMovementHeader.TMP_CHK_LOC_BAL && effect == 1)
                    {
                        foreach (var _itemVal in _locBalanceDataList)
                        {
                            _tmpLocBal = _fixassetDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                            {
                                Inl_com = _itemVal.Inl_com,
                                Inl_loc = _itemVal.Inl_loc,
                                Inl_itm_cd = _itemVal.Inl_itm_cd,
                                Inl_itm_stus = _itemVal.Inl_itm_stus
                            });
                            _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                            _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_aft_save - _itemVal.Inl_qty_bef_save;
                            if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                            {
                                _itemVal.Inl_err_ava = 1;
                            }
                        }
                        var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                        if (_balUpdteErr != null)
                        {
                            if (_balUpdteErr.Count > 0)
                            {
                                effect = -1;
                                _docNo = "Process Terminated ! Inventory Balance not updated [LOC]";
                            }
                        }
                    }
                    #endregion

                    #endregion

                    if (effect == 1)
                    {
                        _inventoryRepDAL.TransactionCommit();


                        _fixassetDAL.TransactionCommit();

                        _ScmCommonDAL.TransactionCommit();

                        if (_inventoryMovementHeader.Ith_anal_10 == true)
                        {
                            _fixassetDAL.UpdateINT_TempObjs(_inventoryMovementHeader.Ith_anal_2);
                        }
                        effect = 1;
                    }
                    else
                    {
                        effect = -1;
                        _docNo = "Process Terminated ! Inventory data not updated.";
                        _inventoryRepDAL.TransactionRollback();
                        _fixassetDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        _fixassetDAL.TransactionRollback();
                    }
                }
            }
            catch (Exception err)
            {
                effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _inventoryRepDAL.TransactionRollback();
                _fixassetDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _fixassetDAL.TransactionRollback();
            }
            return effect;
        }

        //Pasindu 2018/06/12
        public DataTable getBinLocation(string p_com, string p_loc)
        {
            _fixassetDAL = new FIXA_InventoryDAL();
            return _fixassetDAL.getBinLocation(p_com, p_loc);
        }


        //Rangika (2018/04/26)
        public Int32 SaveItemStatusChangeDef(List<ItemStatus_Change_def> _ItemStatus_Change_def, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                effect = _inventoryDAL.SaveItemStatusChangeDef(_ItemStatus_Change_def);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }
        //add by tharanga 2018/07/06
        public Int16 SaveAllScanSerials_NEW(ReptPickSerials _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub)
        {
            Int16 effect = 0;
            GeneralDAL _generalDAL = new GeneralDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();
            if (_reptPickSerials != null)
            {
                if (string.IsNullOrEmpty(_reptPickSerials.Tus_pkg_uom_tp))
                {
                    MasterItem _mstItem = _generalDAL.GetItemMaster(_reptPickSerials.Tus_itm_cd);
                    if (_mstItem.Mi_is_ser1 == -1)
                    {
                        effect = _inventoryRepDAL.SavePickedItemSerialsnew(_reptPickSerials);
                    }
                    else
                    {
                        effect = _inventoryRepDAL.SavePickedItemSerials(_reptPickSerials);
                    }
                }
                else
                {
                    effect = _inventoryRepDAL.SavePickedItemSerialsMac(_reptPickSerials);
                }
            }
            if (_reptPickSerialsSub != null)
            {
                _inventoryRepDAL.SavePickedSubItemSerials(_reptPickSerialsSub);
            }
            _inventoryRepDAL.TransactionCommit();
            _inventoryRepDAL.ConnectionClose();
            return effect;
        }

        public Int32 SAVE_REF_DATRERANGE(DateTime frm_date, DateTime todare, string user_id)
        {
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            DateTime lastdate = todare;
            DateTime satrtdt = frm_date;
            DateTime endrtdt = todare;
            _effect = _inventoryDAL.delete_REF_DATRERANGE(user_id);
            //if (frm_date.Month == todare.Month && frm_date.Year == todare.Year) 
            if (frm_date.Year == todare.Year)
            {
                _effect = _inventoryDAL.SAVE_REF_DATRERANGE(frm_date, todare, user_id);
            }
            else
            {
                if (frm_date < todare)
                {
                Found:
                    DateTime daytwo = new DateTime(satrtdt.AddMonths(6).Year, satrtdt.AddMonths(6).Month, 1);
                    endrtdt = daytwo;
                    if (endrtdt >= todare)
                    {
                        endrtdt = todare;
                    }

                    //endrtdt = GetLastDayOfMonth(satrtdt);
                    if (endrtdt > todare)
                    {
                        endrtdt = todare;
                    }

                    _effect = _inventoryDAL.SAVE_REF_DATRERANGE(satrtdt, endrtdt, user_id);
                    if (endrtdt == todare)
                    {
                        goto Final;
                    }
                    endrtdt.AddDays(1);
                    frm_date.AddMonths(1);
                    DateTime dayone = new DateTime(endrtdt.AddDays(1).Year, endrtdt.AddDays(1).Month, 2);

                    satrtdt = dayone;

                    if (satrtdt < todare)
                    {
                        frm_date = satrtdt;
                        goto Found;
                    }


                }

                //ADD BY MNTH BY MONTH

                //if (frm_date < todare)
                //{
                //Found:

                //    endrtdt = GetLastDayOfMonth(satrtdt);
                //    if (endrtdt > todare)
                //    {
                //        endrtdt = todare;
                //    }

                //    _effect = _inventoryDAL.SAVE_REF_DATRERANGE(satrtdt, endrtdt, user_id);
                //    if (endrtdt == todare)
                //    {
                //        goto Final;
                //    }
                //    endrtdt.AddDays(1);
                //    frm_date.AddMonths(1);
                //    DateTime dayone = new DateTime(endrtdt.AddDays(1).Year, endrtdt.AddDays(1).Month, 1);
                //    satrtdt = dayone;
                //    if (satrtdt < todare)
                //    {
                //        frm_date = satrtdt;
                //        goto Found;
                //    }


                //}
            }
        Final:

            _inventoryDAL.TransactionCommit();
            return _effect;

        }
        //add by tharanga 2018/07/06
        public static DateTime GetLastDayOfMonth(DateTime dateTime)
        {
            return new DateTime(dateTime.Year, dateTime.Month, DateTime.DaysInMonth(dateTime.Year, dateTime.Month));
        }
        public bool MRN_VALIDATION(string _Reservation, string _Item, string _Status, string ComCode, string loc_cd, string chvl_cd, DateTime _date, decimal _Qty, string DispatchRequried, out string _rtnMSG, out Int32 _autoAppr, out Int32 _mainAutoAppr, out bool ins, Boolean _isSubItemHavenew, out bool Check_MRN_Item_exceed, decimal currentCost_Loc, decimal Ins_value, decimal TotalGIT, out Boolean _isResvNo)
        {
            Boolean condition = false;
            string _MSG = string.Empty;
            bool insnew = false;
            _inventoryDAL = new InventoryDAL();
            GeneralBLL General = new GeneralBLL();
            CommonSearchDAL _commonSearchDAL = new CommonSearchDAL();
            _autoAppr = 1;
            _mainAutoAppr = 0;
            Int32 _autoApproval = 0;
            Boolean _isFoundSys_Param;
            string _mainItemCode = "";
            Boolean _isSubItemHave = _isSubItemHavenew;
            Check_MRN_Item_exceed = false;
            _isResvNo=true;
            #region Auto app
            _isFoundSys_Param = Is_Found_Mst_Sys_Para(ComCode, loc_cd, "MRNAUTOAPP");
            if (_isFoundSys_Param == true)
            {
                _autoAppr = 1;
                _mainAutoAppr = 1;
                _autoApproval = 1;
            }
            else
            {
                _isFoundSys_Param = Is_Found_Mst_Sys_Para(ComCode, loc_cd, "QTYINHAND");
                if (_isFoundSys_Param == false)
                {
                    _autoAppr = 0;
                    _mainAutoAppr = 0;
                }
                else
                {
                    _autoAppr = 1;
                    _mainAutoAppr = 1;
                }
            }
            #endregion
            #region _Reservation validation
            if (!string.IsNullOrEmpty(_Reservation))
            { // Nadeeka 28-05-2015
                DataTable _dt = _inventoryDAL.GetReservationDet(ComCode, _Reservation, _Item, _Status);
                if (_dt.Rows.Count == 0)
                {

                    _rtnMSG = "Invalid Reservation #. ";
                    condition = false;
                    ins = insnew;
                    Check_MRN_Item_exceed = false;
                    _isResvNo = false;
                    return condition;

                }
               

            }

            if (!string.IsNullOrEmpty(_Reservation))
            {
                INR_RES_DET _inrRes = _inventoryDAL.GET_INR_RES_DET_DATA_NEW(new INR_RES_DET()
                {
                    IRD_RES_NO = _Reservation,
                    IRD_ITM_CD = _Item,
                    IRD_ITM_STUS = _Status
                }).FirstOrDefault();
                if (_inrRes == null)
                {
                    _rtnMSG = "Reservation balance not available !";
                    condition = false;
                    ins = insnew;
                    Check_MRN_Item_exceed = false;
                    return condition;
                }
                if (Convert.ToDecimal(_Qty) > _inrRes.IRD_MRN_AVA_BAL)
                {


                    _rtnMSG = "Reservation balance not available !";
                    condition = false;
                    ins = insnew;
                    Check_MRN_Item_exceed = false;
                    return condition;

                }
            }
            #endregion

            #region check the GIT is exceeded
            MasterItem _itemMas = _inventoryDAL.GetItem(ComCode, _Item);
            DataTable _dtMax = General.GetStockRequest("GIT", loc_cd, chvl_cd, ComCode, _date, _Item, _itemMas.Mi_brand, _itemMas.Mi_cate_1, _itemMas.Mi_cate_2, _itemMas.Mi_cate_3, _itemMas.Mi_cate_4, _itemMas.Mi_cate_5);
            if (_dtMax.Rows.Count > 0)
            {
                DataTable _dtGit = General.GetItemGIT(ComCode, loc_cd, _dtMax.Rows[0]["mrq_itm_cd"].ToString(), _dtMax.Rows[0]["mrq_brd"].ToString(), _dtMax.Rows[0]["mrq_cat1"].ToString(), _dtMax.Rows[0]["mrq_cat2"].ToString(), _dtMax.Rows[0]["mrq_cat3"].ToString(), _dtMax.Rows[0]["mrq_cat4"].ToString(), _dtMax.Rows[0]["mrq_cat5"].ToString(), Convert.ToDecimal(_dtMax.Rows[0]["mrq_days"]));//, Convert.ToDecimal(_dtMax.Rows[0]["mrq_wsdays"]), Convert.ToDecimal(_dtMax.Rows[0]["mrq_ssdays"]));
                if (_dtGit.Rows.Count > 0)
                {
                    if (_autoAppr == 0)
                    {
                        if (Convert.ToDecimal(_dtMax.Rows[0]["mrq_qty"]) > 0)
                        {
                            if (Convert.ToDecimal(_dtGit.Rows[0]["iti_qty"]) + Convert.ToDecimal(_Qty) > Convert.ToDecimal(_dtMax.Rows[0]["mrq_qty"]))
                            {
                                condition = false;
                                _rtnMSG = "GIT available.You are exceeding allowable quantity ";
                                condition = false;
                                ins = insnew;
                                Check_MRN_Item_exceed = false;
                                return condition;

                            }
                        }
                        else
                        {
                            condition = false;
                            _rtnMSG = "GIT available.You are exceeding allowable days ";
                            condition = false;
                            ins = insnew;
                            Check_MRN_Item_exceed = false;
                            return condition;

                        }
                    }
                }
                else
                {
                    if ((Convert.ToDecimal(_dtMax.Rows[0]["mrq_qty"]) <= 0) && (Convert.ToDecimal(_dtMax.Rows[0]["mrq_days"]) <= 0))
                    {
                        condition = false;
                        _rtnMSG = "Permission to requesting this item has been blocked by inventory department ";
                        condition = false;
                        ins = insnew;
                        Check_MRN_Item_exceed = false;
                        return condition;

                    }

                }
                DataTable _dtGitWH = General.GetItemGITWH(ComCode, DispatchRequried, _dtMax.Rows[0]["mrq_itm_cd"].ToString(), _dtMax.Rows[0]["mrq_brd"].ToString(), _dtMax.Rows[0]["mrq_cat1"].ToString(), _dtMax.Rows[0]["mrq_cat2"].ToString(), _dtMax.Rows[0]["mrq_cat3"].ToString(), _dtMax.Rows[0]["mrq_cat4"].ToString(), _dtMax.Rows[0]["mrq_cat5"].ToString(), Convert.ToDecimal(_dtMax.Rows[0]["mrq_wsdays"]), loc_cd);//, Convert.ToDecimal(_dtMax.Rows[0]["mrq_wsdays"]), Convert.ToDecimal(_dtMax.Rows[0]["mrq_ssdays"]));
                if (_dtGitWH.Rows.Count > 0)
                {
                    if (Convert.ToDecimal(_dtMax.Rows[0]["mrq_qty"]) > 0)
                    {
                        if (Convert.ToDecimal(_dtGitWH.Rows[0]["iti_qty"]) + Convert.ToDecimal(_Qty) > Convert.ToDecimal(_dtMax.Rows[0]["mrq_qty"]))
                        {

                            condition = false;
                            _rtnMSG = "GIT available.You are exceeding allowable quantity ";
                            condition = false;
                            ins = insnew;
                            Check_MRN_Item_exceed = false;
                            return condition;

                        }
                    }
                    else
                    {

                        condition = false;
                        _rtnMSG = "GIT available.You are exceeding allowable days ";
                        condition = false;
                        ins = insnew;
                        Check_MRN_Item_exceed = false;
                        return condition;


                    }
                }
                else
                {

                    if ((Convert.ToDecimal(_dtMax.Rows[0]["mrq_qty"]) <= 0) && (Convert.ToDecimal(_dtMax.Rows[0]["mrq_wsdays"]) <= 0))
                    {

                        condition = false;
                        _rtnMSG = "Permission to requesting this item has been blocked by inventory department";
                        condition = false;
                        ins = insnew;
                        Check_MRN_Item_exceed = false;
                        return condition;

                    }

                }

            }
            #endregion
            #region valdatrion

            _mainItemCode = _Item.Trim().ToUpper();
            string _itemStatus = _Status.ToString();
            string _reservationNo = string.IsNullOrEmpty(_Reservation) ? string.Empty : _Reservation;
            decimal _mainItemQty = _Qty;
            //string _remarksText = string.IsNullOrEmpty(txtItmRemark.Text.Trim()) ? string.Empty : txtItmRemark.Text.Trim();
            //bool _isSubItemHave = (string.IsNullOrEmpty(lblItemSubStatus.Text)) ? false : lblItemSubStatus.Text.Trim() == "Sub Item Status : Available" ? true : false;

            if (_isFoundSys_Param == true)
            {
                DataTable _result = null;
            Outer1:
                if (_isSubItemHave)
                {
                    //Get the relevant sub items.
                    List<MasterItemComponent> _itemComponentList = _inventoryDAL.GetItemComponents(_mainItemCode);

                    if (_itemComponentList == null)
                    {
                        _isSubItemHave = false;
                        goto Outer1;
                    }

                    if ((_itemComponentList != null) && (_itemComponentList.Count > 0))
                    {
                        //Update qty for existing items.
                        foreach (MasterItemComponent _itemCompo in _itemComponentList)
                        {
                            string abc = ComCode + '|' + _mainItemCode;

                            _result = _commonSearchDAL.GetPreferLocSearchData(abc, null, null);
                            var _manname = _result.AsEnumerable().Where(X => X.Field<String>("location") == DispatchRequried).ToList();
                            if (_manname == null || _manname.Count == 0)
                            {
                                if (_autoAppr == 0)
                                {

                                    condition = false;
                                    _rtnMSG = "Please select valid dispatch location.";
                                    condition = false;
                                    ins = insnew;
                                    Check_MRN_Item_exceed = false;
                                    return condition;

                                }
                            }
                        }
                    }
                }
                else
                {
                    string abc = ComCode + '|' + _mainItemCode;

                    _result = _commonSearchDAL.GetPreferLocSearchData(abc, null, null);
                    var _manname = _result.AsEnumerable().Where(X => X.Field<String>("location") == DispatchRequried).ToList();
                    if (_manname == null || _manname.Count == 0)
                    {
                        if (_autoAppr == 0)
                        {
                            condition = false;
                            _rtnMSG = "Please select valid dispatch location.";
                            condition = false;
                            ins = insnew;
                            Check_MRN_Item_exceed = false;
                            return condition;

                        }
                    }
                }
            }
            #endregion

            #region MRN Insurance auto app

            Check_MRN_Item_exceed = Is_Found_Mst_Sys_Para(ComCode, loc_cd, "CHKLOCINSU");
            if (Check_MRN_Item_exceed == true)
            {


                List<InventoryRequestItem> _tempnew = new List<InventoryRequestItem>();
                InventoryRequestItem _InventoryRequestItem = new InventoryRequestItem();
                _InventoryRequestItem.Itri_itm_cd = _Item;
                _InventoryRequestItem.Itri_qty = Convert.ToInt32(_Qty);
                _tempnew.Add(_InventoryRequestItem);
                insnew = Check_MRN_Item_exceed_Ins_new(_tempnew, ComCode, loc_cd, _date,currentCost_Loc,Ins_value,TotalGIT);
              
                if (insnew == true)
                {
                    _mainAutoAppr = 1;
                }
                else
                {
                    _mainAutoAppr = 0;
                }


            }

            #endregion

            _rtnMSG = _MSG;
            ins = insnew;

            return condition;

        }

        public List<InventoryBatchN> Get_Int_Batch_by_itm(string _doc, string _itmcd, string status)
        {
            _inventoryDAL = new InventoryDAL();

            return _inventoryDAL.Get_Int_Batch_by_itm(_doc, _itmcd, status);
        }
        //Dulaj 2018-Jul-31
        public DataTable GetItemPricePc(string pb, string pl, string itm, DateTime dt,string pc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemPriceWithPc(pb, pl, itm, dt,pc);
        }
        //Dulaj 2018-Aug-01
        public DataTable GetItemsByBin(string com, string itemCode, string loc, string bin, string itemStatus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemsByBin(com, itemCode, loc, bin, itemStatus);
        }
        public DataTable GetItems_git_get(string com, string loc, Int32 ser_id, string itemStatus)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItems_git_get(com, loc, ser_id, itemStatus);
        }
        public DataTable getMstSysPara_new(string _com, string _pty_tp, string _pty_cd, string _rest_tp, string _dir_pry_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getMstSysPara_new(_com, _pty_tp, _pty_cd, _rest_tp, _dir_pry_cd);
        }
        //add by tharanga 2018/08/15
        public bool Check_MRN_Item_exceed_Ins_new(List<InventoryRequestItem> _Item, string _com, string _loc, DateTime _now, decimal currentCost_Loc, decimal Ins_value, decimal TotalGIT)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            // _inventoryDAL.BeginTransaction();


            decimal MRNTotalcost = 0;
         //   decimal currentCost_Loc = 0;
            decimal Current_Value__location = 0;
            //decimal TotalGIT = 0;
            //decimal Ins_value = 0;
            decimal qty = 0;
            //Ins_value = _inventoryDAL.GET_INSVALUE_BYLOC(_com, _loc); ********************************************************
            foreach (InventoryRequestItem _itm in _Item)
            {
                qty = _itm.Itri_qty;
                decimal _cost = _inventoryDAL.GetLatestCost(_com, _loc, _itm.Itri_itm_cd, "GOD");
                MRNTotalcost = MRNTotalcost + (_cost * qty);
            }
            //currentCost_Loc = _inventoryDAL.GetLatestCost_Loc(_com, _loc);*****************************************************


            //if (Ins_value > 0) ************************************************
            //{
            //    _securityDAL = new SecurityDAL();
            //    if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
                DataTable _git = _inventoryDAL.Get_GIT_Details(_now, _com, _loc, null, null, null, null, null, null, null, null, null);
            //    TotalGIT = _git.AsEnumerable().Sum(x => x.Field<decimal>("Item Total Cost"));
            //}
            Current_Value__location = currentCost_Loc + TotalGIT;
            decimal Total = (MRNTotalcost + Current_Value__location);
            if (Total > Ins_value)
            {
                // _inventoryDAL.TransactionCommit();
                return false;

            }
            else
            {
                // _inventoryDAL.TransactionCommit();
                return true;
            }

        }
        public decimal GET_INSVALUE_BYLOC(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GET_INSVALUE_BYLOC(_company, _location);
        }
        public decimal GetLatestCost_Loc(string _company, string _location)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.GetLatestCost_Loc(_company, _location);
        }
        public DataTable Get_GIT_Detailsnew(DateTime _asat, string _com, string _loc, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
           string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.Get_GIT_Details(_asat, _com, _loc, null, null, null, null, null, null, null, null, null);

            //DataTable _git = _inventoryDAL.Get_GIT_Details(_asat, _com, _loc, null, null, null, null, null, null, null, null, null);
        }
        //add by tharanga 2018/08/24
        public Int16 UpdateInventoryLocation(InventoryLocation _invLoca, Int16 _invDirect)
        {
            Int16 _effect = 0;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _effect = _inventoryDAL.UpdateInventoryLocation(_invLoca, _invDirect);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;

        }
        //add by tharanga 2018/08/24
        public Int32 UpdateLocationRes(string _company, string _location, string _item, string _stus, string _user, decimal _qty)
        {
            Int32 _effect = 0;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _effect = _inventoryDAL.UpdateLocationRes(_company, _location, _item, _stus, _user, _qty);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        //add by tharanga 2018/08/24
        public Int32 UpdateLocationResRevers(string _company, string _location, string _item, string _stus, string _user, decimal _qty)
        {
            Int32 _effect = 0;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _effect = _inventoryDAL.UpdateLocationResRevers(_company, _location, _item, _stus, _user, _qty);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        public DataTable Getmovsubtp(string _maintype)
        {

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            return _inventoryDAL.Getmovsubtp(_maintype);
        }
        //Dulaj 04 Sep 2018
        public DataTable LoadCusdecDatabyDoc(string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.LoadCusdecDatabyDoc(doc);
        }


        public DataTable GetBinBalbyitm(string p_com, string p_itm_code, string p_inb_loc, string p_inb_bin)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetBinBalbyitm(p_com, p_itm_code, p_inb_loc, p_inb_bin);
        }
        public Decimal GetBufferLevelInrLocation(string com, string itmCd, string loc)
        {
            _inventoryDAL = new InventoryDAL();
            decimal buffreLvl = 0;
            buffreLvl = _inventoryDAL.GetBufferLevelInrLocation(com, itmCd, loc);
            return buffreLvl;
        }
        public DataTable getCustomerInvoiceData(string company, string customer, string item, string model, string catgory, string invno, out string error)
        {
            error = "";
            DataTable tbl = new DataTable("res");
            try
            {
                _inventoryDAL = new InventoryDAL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("CustSalesJobAdvanceSrch") == true) _securityDAL.ConnectionOpen_DR();

                tbl = _inventoryDAL.getCustomerInvoiceData(company, customer, item, model, catgory, invno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return tbl;
        }
        public DataTable getCustomerJobHistoryData(string company, string customer, string item, string model, string catgory, string serial, string invno, out string error)
        {
            error = "";
            DataTable tbl = new DataTable("res");
            try
            {
                _inventoryDAL = new InventoryDAL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("CustSalesJobAdvanceSrch") == true) _securityDAL.ConnectionOpen_DR();

                tbl = _inventoryDAL.getCustomerJobHistoryData(company, customer, item, model, catgory, serial, invno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return tbl;
        }
        public DataTable getSerialDoDetails(string serial, string com, out string error)
        {
            error = "";
            DataTable tbl = new DataTable("res");
            try
            {
                _inventoryDAL = new InventoryDAL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("CustSalesJobAdvanceSrch") == true) _securityDAL.ConnectionOpen_DR();

                tbl = _inventoryDAL.getSerialDoDetails(com, serial);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return tbl;
        }
        public DataTable getInvoiceDetails(string invno, string com, out string error)
        {
            error = "";
            DataTable tbl = new DataTable("res");
            try
            {
                _inventoryDAL = new InventoryDAL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("CustSalesJobAdvanceSrch") == true) _securityDAL.ConnectionOpen_DR();

                tbl = _inventoryDAL.getInvoiceDetails(com, invno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return tbl;
        }
        public DataTable check_ser_in_by_srn(string com, string invno, string itm, string ser,string serid, out string error)
        {
            error = "";
            DataTable tbl = new DataTable("res");
            try
            {
                _inventoryDAL = new InventoryDAL();


                tbl = _inventoryDAL.check_ser_in_by_srn(com, invno, itm, ser, serid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return tbl;
        }
        public DataTable GetQRMethod(string com, Int32 method)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetQRMethod(com, method);
        }
        public Mst_Movsubtp get_sub_type(string _maintype, string _subtype, out string _err)
        {
            _err = "";
            Mst_Movsubtp _list = null;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _list = _inventoryDAL.get_sub_type(_maintype, _subtype);
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();
            }
            return _list;
        }

        public Int32 SaveCommonOutWardEntry_comm(string _fromCompany, string _fromProfit, string _toCompany, string _requestNo, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, InvoiceHeader _invoiceHeader, MasterAutoNumber _invoiceAuto, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, out string _genMessage, out string _genSalesDocument, out string _genInventoryDocument, bool _isGRAN, bool _isGRNFromDIN, List<Transport> _traList = null, Boolean withcoonection = false,
            InventoryDAL _InventoryDAL = null, CustServiceDAL _CustServiDAL = null, ReptCommonDAL _ReptCommonDAL = null, GeneralDAL _GeneralDAL = null, SCMCommonDAL _SCMCommonDAL = null, FMS_InventoryDAL _FMS_InventoryDAL=null,SalesDAL _salesDALN=null)
        {
            string _salesDocument = string.Empty;
            string _inventoryDocument = string.Empty;
            Int32 _effect = 0;
            string _tempSalesDoc = "";
            string _tempInventoryDoc = "";
            string _genInvDoc = "";
            string _genSalDoc = "";
            string _message = string.Empty;
            _genMessage = string.Empty;
            Boolean _isStrucBaseTax = false;
            string _trlocation = _inventoryHeader.Ith_loc;
            try
            {
                //added by Wimal @ 07/Aug/2018
                //if (_genInvDal == null)
                //{
                //    _inventoryDAL = new InventoryDAL();
                //}
                //else
                //{
                //    _inventoryDAL = _genInvDal;
                //}
                if (withcoonection == false)
                {


                    _inventoryDAL = new InventoryDAL();
                    _custServiceDAL = new CustServiceDAL();
                    _salesDAL = new SalesDAL();
                    _inventoryRepDAL = new ReptCommonDAL();
                    _generalDAL = new GeneralDAL();
                    _ScmCommonDAL = new SCMCommonDAL();
                    _FMSinventoryDAL = new FMS_InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();
                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryRepDAL.BeginTransaction();
                    _generalDAL.ConnectionOpen();
                    _generalDAL.BeginTransaction();
                    _custServiceDAL.ConnectionOpen();
                    _custServiceDAL.BeginTransaction();
                    _FMSinventoryDAL.ConnectionOpen();
                    _FMSinventoryDAL.BeginTransaction();
                }
                else
                {
                    

                    _inventoryDAL = _InventoryDAL;
                    _custServiceDAL = _CustServiDAL;
                    _salesDAL = _salesDALN;
                    _inventoryRepDAL = _ReptCommonDAL;
                    _generalDAL = _GeneralDAL;
                    _ScmCommonDAL = _SCMCommonDAL;
                    _FMSinventoryDAL = _FMS_InventoryDAL;
                }
                #region make ADJ+ and ADJ- for Hero Production issue 26Jan2017
                if (_inventoryHeader.Tmp_itm_conv_to_fg)
                {
                    string _HEAdjOutDocNo = "", _HEAdjInDocNo = "";
                    MasterLocation _mstHEOut = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
                    MasterLocation _mstHEIn = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_oth_loc);
                    MasterItem _HEMstItem = new MasterItem();
                    MasterItem _HEFgMstItem = new MasterItem();
                    List<InventorySerialN> _HEIntSerAdjOutList = new List<InventorySerialN>();
                    InventorySerialN _HEIntSerAdjOut = new InventorySerialN();
                    List<InventoryBatchN> _HEIntBatchAdjOutList = new List<InventoryBatchN>();
                    InventoryBatchN _HEIntBatchAdjOut = new InventoryBatchN();
                    List<InventorySerialN> _HEAdjInInrSerList = new List<InventorySerialN>();
                    List<InventorySerialN> _TmpHEAdjInInrSerList = new List<InventorySerialN>();
                    InventorySerialN _HEAdjInInrSer = new InventorySerialN();
                    List<InventoryBatchRefN> _HEAdjInInrBatchList = new List<InventoryBatchRefN>();
                    InventoryBatchRefN _HEAdjInInrBatch = new InventoryBatchRefN();
                    string _tmpErrMsg = "";
                    Int32 _HEEff = 0;
                    #region make ADJ out
                    MasterAutoNumber _KDAutoNoAdjOut = MasterAutoNumber.CreateNewObject(_inventoryAuto);
                    _KDAutoNoAdjOut.Aut_cate_cd = _inventoryHeader.Ith_loc;
                    _KDAutoNoAdjOut.Aut_cate_tp = "LOC";
                    _KDAutoNoAdjOut.Aut_direction = null;
                    _KDAutoNoAdjOut.Aut_modify_dt = null;
                    _KDAutoNoAdjOut.Aut_moduleid = "ADJ";
                    _KDAutoNoAdjOut.Aut_number = 5;//what is Aut_number
                    _KDAutoNoAdjOut.Aut_start_char = "ADJ";
                    _KDAutoNoAdjOut.Aut_year = null;
                    InventoryHeader _KDInvHdrAdjOut = InventoryHeader.CreateNewObject(_inventoryHeader);
                    _KDInvHdrAdjOut.Ith_direct = false;
                    _KDInvHdrAdjOut.Ith_doc_tp = "ADJ";
                    _KDInvHdrAdjOut.Ith_oth_loc = "";
                    _KDInvHdrAdjOut.Ith_cate_tp = "PO"; _KDInvHdrAdjOut.Ith_sub_tp = "NOR";
                    _KDInvHdrAdjOut.Ith_entry_tp = "NOR"; _KDInvHdrAdjOut.Ith_gen_frm = "SCMWEBAODAS";
                    _HEEff = SaveOutwardScanSerial(_KDInvHdrAdjOut, _reptPickSerials, _reptPickSerialsSub, null, false);
                    if (_HEEff != 1)
                    {
                        #region if error rollback
                        _tmpErrMsg = "Process Terminated ! ADJ- not update correctly !";
                        _genMessage = _tmpErrMsg; _genInventoryDocument = _tmpErrMsg; _genSalesDocument = _tmpErrMsg;
                        _effect = -1;
                        _inventoryDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                        _custServiceDAL.TransactionRollback();
                        _FMSinventoryDAL.TransactionRollback();
                        return _effect;
                        #endregion
                    }
                    _HEEff = UpdateInventoryAutoNumber(_KDInvHdrAdjOut, _KDAutoNoAdjOut, "-", out _HEAdjOutDocNo);
                    #endregion
                    ReptPickSerials _HEPickSer = new ReptPickSerials();
                    List<ReptPickSerials> _KDPickSerialsAdjOut = new List<ReptPickSerials>();
                    _HEIntSerAdjOutList = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(_KDInvHdrAdjOut.Ith_seq_no);
                    _HEIntBatchAdjOutList = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(_KDInvHdrAdjOut.Ith_seq_no);
                    foreach (var _heIntSer in _HEIntSerAdjOutList)
                    {
                        _heIntSer.Ins_pick = 0;
                    }
                    foreach (var _ser in _reptPickSerials)
                    {
                        bool _HEIsCorrItm = false;
                        _HEMstItem = _inventoryDAL.GetItemMaster(_ser.Tus_itm_cd);
                        if (_HEMstItem != null)
                        {
                            #region validate fg item data
                            if (_HEMstItem.Mi_itm_stus == "R")
                            {
                                if (!string.IsNullOrEmpty(_HEMstItem.Mi_fgitm_cd))
                                {
                                    _HEFgMstItem = _inventoryDAL.GetItemMaster(_HEMstItem.Mi_fgitm_cd);
                                    if (_HEFgMstItem != null)
                                    {
                                        if (_HEFgMstItem.Mi_act)
                                        {
                                            if (_HEMstItem.Mi_is_ser1 == _HEFgMstItem.Mi_is_ser1)
                                            {
                                                _HEIsCorrItm = true;
                                            }
                                            else
                                            {
                                                _tmpErrMsg = "Different item types found [Serialized] !";
                                            }
                                        }
                                        else
                                        {
                                            _tmpErrMsg = "Invalid finished item !";
                                        }
                                    }
                                    else
                                    {
                                        _tmpErrMsg = "Invalid finished item !";
                                    }
                                }
                                else
                                {
                                    _tmpErrMsg = "Invalid finished item !";
                                }
                            }
                            else
                            {
                                _tmpErrMsg = "Invalid item status !";
                            }
                            #endregion
                        }
                        if (!_HEIsCorrItm)
                        {
                            #region if error rollback
                            _genMessage = _tmpErrMsg; _genInventoryDocument = _tmpErrMsg; _genSalesDocument = _tmpErrMsg;
                            _effect = -1;
                            _inventoryDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _inventoryRepDAL.TransactionRollback();
                            _generalDAL.TransactionRollback();
                            _custServiceDAL.TransactionRollback();
                            _FMSinventoryDAL.TransactionRollback();
                            return _effect;
                            #endregion
                        }
                        else
                        {
                            #region serial object resetup
                            if (_HEFgMstItem.Mi_is_ser1 == 1)
                            {
                                _HEIntSerAdjOut = _HEIntSerAdjOutList.Where(c => c.Ins_com == _ser.Tus_com && c.Ins_loc == _ser.Tus_loc && c.Ins_itm_cd == _ser.Tus_itm_cd
                                    && c.Ins_itm_stus == _ser.Tus_itm_stus && c.Ins_ser_1 == _ser.Tus_ser_1).FirstOrDefault();
                                if (_HEIntSerAdjOut != null)
                                {

                                    _HEPickSer = ReptPickSerials.CreateNewObject(_ser);
                                    _HEPickSer.Tus_doc_no = _HEAdjOutDocNo;
                                    _HEPickSer.Tus_orig_supp = _HEIntSerAdjOut.Ins_orig_supp;
                                    _HEPickSer.Tus_exist_supp = _HEIntSerAdjOut.Ins_exist_supp;
                                    _HEPickSer.Tus_itm_line = _HEIntSerAdjOut.Ins_itm_line;
                                    _HEPickSer.Tus_itm_cd = _HEMstItem.Mi_fgitm_cd;
                                    _HEPickSer.Tus_itm_desc = _HEMstItem.Mi_longdesc;
                                    _HEPickSer.Tus_itm_model = _HEMstItem.Mi_model;
                                    _HEPickSer.Tus_unit_cost = _HEIntSerAdjOut.Ins_unit_cost + _HEMstItem.Mi_itmtot_cost;
                                    _KDPickSerialsAdjOut.Add(_HEPickSer);
                                }
                            }
                            else if (_HEFgMstItem.Mi_is_ser1 == 0)
                            {
                                _HEIntSerAdjOut = _HEIntSerAdjOutList.Where(c => c.Ins_com == _ser.Tus_com && c.Ins_loc == _ser.Tus_loc && c.Ins_itm_cd == _ser.Tus_itm_cd
                                    && c.Ins_itm_stus == _ser.Tus_itm_stus && c.Ins_ser_1 == "N/A" && c.Ins_pick == 0).FirstOrDefault();
                                if (_HEPickSer != null)
                                {
                                    _HEPickSer = ReptPickSerials.CreateNewObject(_ser);
                                    _HEIntSerAdjOut.Ins_pick = 1;
                                    _HEPickSer.Tus_doc_no = _HEAdjOutDocNo;
                                    _HEPickSer.Tus_orig_supp = _HEIntSerAdjOut.Ins_orig_supp;
                                    _HEPickSer.Tus_exist_supp = _HEIntSerAdjOut.Ins_exist_supp;
                                    _HEPickSer.Tus_itm_line = _HEIntSerAdjOut.Ins_itm_line;
                                    _HEPickSer.Tus_itm_cd = _HEMstItem.Mi_fgitm_cd;
                                    _HEPickSer.Tus_itm_desc = _HEMstItem.Mi_longdesc;
                                    _HEPickSer.Tus_itm_model = _HEMstItem.Mi_model;
                                    _HEPickSer.Tus_unit_cost = _HEIntSerAdjOut.Ins_unit_cost + _HEMstItem.Mi_itmtot_cost;
                                    _KDPickSerialsAdjOut.Add(_HEPickSer);
                                }
                            }
                            else
                            {
                                _HEIntBatchAdjOut = _HEIntBatchAdjOutList.Where(c => c.Inb_com == _ser.Tus_com && c.Inb_loc == _ser.Tus_loc && c.Inb_itm_cd == _ser.Tus_itm_cd
                                    && c.Inb_itm_stus == _ser.Tus_itm_stus).FirstOrDefault();
                                _HEPickSer = ReptPickSerials.CreateNewObject(_ser);
                                _HEPickSer.Tus_doc_no = _HEAdjOutDocNo;
                                _HEPickSer.Tus_itm_line = _HEIntSerAdjOut.Ins_itm_line;
                                _HEPickSer.Tus_itm_cd = _HEMstItem.Mi_fgitm_cd;
                                _HEPickSer.Tus_itm_desc = _HEMstItem.Mi_longdesc;
                                _HEPickSer.Tus_itm_model = _HEMstItem.Mi_model;
                                _HEPickSer.Tus_unit_cost = _HEIntBatchAdjOut.Inb_unit_cost + _HEMstItem.Mi_itmtot_cost;
                                _KDPickSerialsAdjOut.Add(_HEPickSer);
                            }
                            #endregion
                        }
                    }

                    #region make Adj IN
                    MasterAutoNumber _KDAutoNoAdjIn = MasterAutoNumber.CreateNewObject(_inventoryAuto);
                    _KDAutoNoAdjIn.Aut_cate_cd = _inventoryHeader.Ith_loc;
                    _KDAutoNoAdjIn.Aut_cate_tp = "LOC";
                    _KDAutoNoAdjIn.Aut_direction = null;
                    _KDAutoNoAdjIn.Aut_modify_dt = null;
                    _KDAutoNoAdjIn.Aut_moduleid = "ADJ";
                    _KDAutoNoAdjIn.Aut_number = 5;//what is Aut_number
                    _KDAutoNoAdjIn.Aut_start_char = "ADJ";
                    _KDAutoNoAdjIn.Aut_year = null;
                    InventoryHeader _KDInvHdrAdjIn = InventoryHeader.CreateNewObject(_inventoryHeader);
                    _KDInvHdrAdjIn.Ith_direct = true;
                    _KDInvHdrAdjIn.Ith_doc_tp = "ADJ";
                    _KDInvHdrAdjIn.Ith_oth_loc = "";
                    _KDInvHdrAdjIn.Ith_cate_tp = "PI"; _KDInvHdrAdjIn.Ith_sub_tp = "NOR";
                    _KDInvHdrAdjIn.Ith_entry_tp = "NOR"; _KDInvHdrAdjIn.Ith_gen_frm = "SCMWEBAODAS";
                    _KDInvHdrAdjIn.Ith_oth_docno = _HEAdjOutDocNo;
                    _HEEff = SaveInwardScanSerial(_KDInvHdrAdjIn, _KDPickSerialsAdjOut, _reptPickSerialsSub);
                    if (_HEEff != 1)
                    {
                        #region if error rollback
                        _tmpErrMsg = "Process Terminated ! ADJ- not update correctly !";
                        _genMessage = _tmpErrMsg; _genInventoryDocument = _tmpErrMsg; _genSalesDocument = _tmpErrMsg;
                        _effect = -1;
                        _inventoryDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                        _custServiceDAL.TransactionRollback();
                        _FMSinventoryDAL.TransactionRollback();
                        return _effect;
                        #endregion
                    }
                    _HEEff = UpdateInventoryAutoNumber(_KDInvHdrAdjIn, _KDAutoNoAdjIn, "+", out _HEAdjInDocNo);
                    _inventoryHeader.Ith_oth_docno = _HEAdjInDocNo;
                    #endregion
                    #region out serial list resetup
                    _reptPickSerials = new List<ReptPickSerials>();
                    _HEAdjInInrBatchList = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(_KDInvHdrAdjIn.Ith_seq_no);
                    _HEAdjInInrSerList = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(_KDInvHdrAdjIn.Ith_seq_no);
                    #region update inr_sermst Iem code
                    foreach (var _tmpSerMst in _HEAdjInInrSerList)
                    {
                        _inventoryDAL.UpdateInrSerMstItemCode(_tmpSerMst.Ins_ser_id, _tmpSerMst.Ins_itm_cd, _KDInvHdrAdjIn.Ith_session_id, _KDInvHdrAdjIn.Ith_cre_by);
                    }
                    #endregion
                    foreach (var _inrBatch in _HEAdjInInrBatchList)
                    {
                        if (_HEFgMstItem.Mi_is_ser1 == 1)
                        {
                            _TmpHEAdjInInrSerList = _HEAdjInInrSerList.Where(c => c.Ins_itm_line == _inrBatch.Inb_itm_line && c.Ins_batch_line == _inrBatch.Inb_batch_line).ToList();
                            foreach (var tmpInrSer in _TmpHEAdjInInrSerList)
                            {
                                _HEPickSer = _inventoryDAL.GetSerialDataForDisposalEntry(tmpInrSer.Ins_com, tmpInrSer.Ins_loc, tmpInrSer.Ins_itm_cd, tmpInrSer.Ins_itm_stus, tmpInrSer.Ins_ser_1, "", tmpInrSer.Ins_ser_id).FirstOrDefault();
                                if (_HEPickSer != null)
                                {
                                    _HEPickSer.Tus_new_remarks = "AOD-OUT";
                                    _reptPickSerials.Add(_HEPickSer);
                                }
                            }
                        }
                        else if (_HEFgMstItem.Mi_is_ser1 == 0)
                        {
                            _TmpHEAdjInInrSerList = _HEAdjInInrSerList.Where(c => c.Ins_itm_line == _inrBatch.Inb_itm_line && c.Ins_batch_line == _inrBatch.Inb_batch_line).ToList();
                            foreach (var tmpInrSer in _TmpHEAdjInInrSerList)
                            {
                                _HEPickSer = _inventoryDAL.GetSerialDataForDisposalEntry(tmpInrSer.Ins_com, tmpInrSer.Ins_loc, tmpInrSer.Ins_itm_cd, tmpInrSer.Ins_itm_stus, tmpInrSer.Ins_ser_1, "", tmpInrSer.Ins_ser_id).FirstOrDefault();
                                if (_HEPickSer != null)
                                {
                                    _HEPickSer.Tus_new_remarks = "AOD-OUT";
                                    _reptPickSerials.Add(_HEPickSer);
                                }
                            }
                        }
                        else
                        {
                            _HEPickSer = new ReptPickSerials();
                            _HEPickSer.Tus_itm_desc = _HEFgMstItem.Mi_shortdesc;
                            _HEPickSer.Tus_itm_model = _HEFgMstItem.Mi_model;
                            _HEPickSer.Tus_com = _inrBatch.Inb_com;
                            _HEPickSer.Tus_loc = _inrBatch.Inb_loc;
                            _HEPickSer.Tus_bin = _inrBatch.Inb_bin;
                            _HEPickSer.Tus_itm_cd = _inrBatch.Inb_itm_cd;
                            _HEPickSer.Tus_itm_stus = _inrBatch.Inb_itm_stus;
                            _HEPickSer.Tus_qty = _inrBatch.Inb_qty;
                            _HEPickSer.Tus_ser_1 = "N/A";
                            _HEPickSer.Tus_ser_2 = "N/A";
                            _HEPickSer.Tus_ser_3 = "N/A";
                            _HEPickSer.Tus_ser_4 = "N/A";
                            _HEPickSer.Tus_ser_id = 0;
                            _HEPickSer.Tus_serial_id = "0";
                            _HEPickSer.Tus_unit_cost = 0;
                            _HEPickSer.Tus_unit_price = 0;
                            _HEPickSer.Tus_unit_price = 0;
                            _HEPickSer.Tus_new_remarks = "AOD-OUT";
                            _reptPickSerials.Add(_HEPickSer);
                        }
                    }
                    #endregion
                }
                #endregion

                //kapila 19/7/2017
                MasterCompany _masterComp = null;
                _masterComp = _generalDAL.GetCompByCode(_fromCompany);
                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                #region validate serial no available in company 27 Nov 2016
                if (_inventoryHeader.TMP_CHK_SER_IS_AVA)
                {
                    MasterLocationNew _mstOutLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                    {
                        Ml_loc_cd = _inventoryHeader.Ith_loc,
                        Ml_com_cd = _inventoryHeader.Ith_com,
                        Ml_act = 1
                    }).FirstOrDefault();
                    if (_mstOutLoc.Ml_is_serial == 0)
                    {
                        var _validateSerialList = _reptPickSerials.Where(c => c.Tus_ser_1 != "N/A").ToList();
                        string _foundserial = CHECKSERILA_COM(_validateSerialList, _inventoryDAL);
                        if (!string.IsNullOrEmpty(_foundserial))
                        {
                            _genMessage = _foundserial;
                            _genInvDoc = string.Empty;
                            _genSalDoc = string.Empty;
                            _genSalesDocument = string.Empty;
                            _genInventoryDocument = string.Empty;
                            _effect = -1;
                            _inventoryDAL.ConnectionClose();
                            _salesDAL.ConnectionClose();
                            _inventoryRepDAL.ConnectionClose();
                            _generalDAL.ConnectionClose();
                            _custServiceDAL.ConnectionClose();
                            _FMSinventoryDAL.ConnectionClose();
                            return _effect;
                        }
                    }
                    if (_mstOutLoc.Ml_cate_1 == "DFS")
                    {
                        _inventoryHeader.Ith_anal_5 = "DFS";
                    }
                }
                #endregion

                #region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                TmpValidation _tmpLocBalVal = new TmpValidation();
                InventoryLocation _tmpLocBal = new InventoryLocation();
                if (_inventoryHeader.TMP_CHK_LOC_BAL)
                {
                    var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                    foreach (var _outSer in _serialItemData)
                    {
                        _tmpLocBalVal = new TmpValidation();
                        _tmpLocBalVal.Inl_com = _inventoryHeader.Ith_com;
                        _tmpLocBalVal.Inl_loc = _inventoryHeader.Ith_loc;
                        _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                        _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                        _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                        {
                            Inl_com = _inventoryHeader.Ith_com,
                            Inl_loc = _inventoryHeader.Ith_loc,
                            Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                            Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                        });
                        _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                        _locBalanceDataList.Add(_tmpLocBalVal);
                    }
                }
                #endregion


                #region Validate Int Req Itm add by Lakshan 9/08/2016
                decimal _reqBalBefSave = 0;
                #region change get pick ser balance chg by lakshan 26Oct2016
                List<ReptPickHeader> _tempPickHdrTemp = new List<ReptPickHeader>();
                foreach (var _serData in _reptPickSerials)
                {
                    if (_tempPickHdrTemp.Count > 0)
                    {
                        var _seqNoAvailableInHdr = _tempPickHdrTemp.Where(c => c.Tuh_usrseq_no == _serData.Tus_usrseq_no).FirstOrDefault();
                        if (_seqNoAvailableInHdr == null)
                        {
                            _tempPickHdrTemp.Add(new ReptPickHeader() { Tuh_usrseq_no = _serData.Tus_usrseq_no });
                        }
                    }
                    else
                    {
                        _tempPickHdrTemp.Add(new ReptPickHeader() { Tuh_usrseq_no = _serData.Tus_usrseq_no });
                    }
                }
                foreach (var _hdrSeq in _tempPickHdrTemp)
                {
                    _reqBalBefSave = _reqBalBefSave + _inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_hdrSeq.Tuh_usrseq_no);
                }
                //Int32 _tempPickSeqNo = _reptPickSerials.FirstOrDefault().Tus_usrseq_no;
                //decimal _reqBalBefSave = _inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_tempPickSeqNo);
                #endregion

                decimal _updatedQty = 0;
                decimal _batchQty = 0;
                decimal _serQty = 0;
                bool _resUpdateErr = false;
                #endregion
                #region SaveArea
                var _document = (from _doc in _reptPickSerials select _doc.Tus_new_remarks).Distinct();
                bool _isInvalidManualDocType = false;
                if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_1)) if (_inventoryHeader.Ith_anal_1 == "1") _isInvalidManualDocType = true; else _isInvalidManualDocType = false;
                bool _isManualSelect = _inventoryHeader.Ith_is_manual;
                foreach (string _documentType in _document)
                {
                    var _serialList = (from _doc in _reptPickSerials where _doc.Tus_new_remarks == _documentType select _doc).ToList();
                    Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                    _inventoryHeader.Ith_seq_no = UserSeqNo;
                    _inventoryHeader.Ith_doc_no = Convert.ToString(UserSeqNo);
                    if (_documentType == "AOD-OUT")
                    {
                        #region aod data
                        MasterLocation _loc = _generalDAL.GetLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc);
                        bool _isOtherLocAutoIn = false;
                        if (_loc == null)     //kapila 8/5/2017
                        {
                            _genMessage = " Invalid receive location code " + _inventoryHeader.Ith_oth_loc;
                            _effect = -1;
                            break;
                        }
                        if (_loc.Ml_auto_ain && _loc.Ml_anal1 == "SCM2") _isOtherLocAutoIn = true;
                        string _defbin = _inventoryDAL.GetDefaultBinCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
                        if (_isGRAN && _isGRNFromDIN == false)
                        {
                            List<ReptPickSerials> _statuschangelist = _serialList.Where(x => x.Tus_itm_stus != x.Tus_new_status).ToList();
                            _serialList.RemoveAll(x => x.Tus_itm_stus != x.Tus_new_status);
                            InventoryHeader _minusHeader = _inventoryHeader;

                            _minusHeader.Ith_cate_tp = "NOR"; _minusHeader.Ith_is_manual = false;
                            _minusHeader.Ith_stus = "A"; _minusHeader.Ith_direct = false;
                            _minusHeader.Ith_doc_tp = "ADJ"; _minusHeader.Ith_sub_tp = "STUS";
                            _minusHeader.Ith_entry_tp = "STUS"; _minusHeader.Ith_direct = false;
                            InventoryHeader _plusHeader = _inventoryHeader;
                            _plusHeader.Ith_cate_tp = "NOR"; _plusHeader.Ith_is_manual = false;
                            _plusHeader.Ith_stus = "A"; _plusHeader.Ith_direct = true;
                            _plusHeader.Ith_doc_tp = "ADJ"; _plusHeader.Ith_sub_tp = "STUS";
                            _plusHeader.Ith_entry_tp = "STUS"; _plusHeader.Ith_direct = true;
                            MasterAutoNumber _minusAuto = new MasterAutoNumber();
                            _minusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _minusAuto.Aut_cate_tp = "LOC"; _minusAuto.Aut_direction = null;
                            _minusAuto.Aut_modify_dt = null; _minusAuto.Aut_moduleid = "ADJ";
                            _minusAuto.Aut_number = 0; _minusAuto.Aut_start_char = "ADJ";
                            _minusAuto.Aut_year = null; MasterAutoNumber _plusAuto = new MasterAutoNumber();
                            _plusAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                            _plusAuto.Aut_cate_tp = "LOC"; _plusAuto.Aut_direction = null;
                            _plusAuto.Aut_modify_dt = null; _plusAuto.Aut_moduleid = "ADJ";
                            _plusAuto.Aut_number = 0; _plusAuto.Aut_start_char = "ADJ";
                            _plusAuto.Aut_year = null; string _minusDoc = string.Empty;
                            string _plusDoc = string.Empty;
                            if (_statuschangelist != null && _statuschangelist.Count > 0) InventoryStatusChangeCommon(_minusHeader, _plusHeader, _statuschangelist, _reptPickSerialsSub, _minusAuto, _plusAuto, out _minusDoc, out _plusDoc);
                            if (!string.IsNullOrEmpty(_minusDoc))
                            { _tempInventoryDoc = _minusDoc + "," + _plusDoc; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
                            _tempInventoryDoc = string.Empty;
                            List<ReptPickSerials> _AdjPlusSerialList = new List<ReptPickSerials>();
                            foreach (ReptPickSerials _one in _statuschangelist)
                            {
                                string _serial = _one.Tus_ser_1; string _item = _one.Tus_itm_cd;
                                Int64 _serialId = _one.Tus_ser_id; MasterItem msitem = new MasterItem();
                                msitem = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _item);
                                if (msitem.Mi_is_ser1 == 1 || msitem.Mi_is_ser1 == 0)
                                {
                                    ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, string.Empty, _item, Convert.ToInt32(_serialId));
                                    _reptPickSerial_.Tus_base_doc_no = _one.Tus_base_doc_no;//add by tharanga item sts change base doc no null
                                    _AdjPlusSerialList.Add(_reptPickSerial_);

                                }
                                else
                                {

                                    ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                    _reptPickSerial_.Tus_com = _inventoryHeader.Ith_com; _reptPickSerial_.Tus_base_doc_no = _inventoryHeader.Ith_oth_docno;
                                    _reptPickSerial_.Tus_base_itm_line = _one.Tus_base_itm_line;
                                    _reptPickSerial_.Tus_bin = _defbin; _reptPickSerial_.Tus_cre_by = _inventoryHeader.Ith_cre_by;
                                    _reptPickSerial_.Tus_cre_dt = DateTime.Now; _reptPickSerial_.Tus_cross_batchline = 0; _reptPickSerial_.Tus_cross_itemline = 0;
                                    _reptPickSerial_.Tus_cross_seqno = 0; _reptPickSerial_.Tus_cross_serline = 0; _reptPickSerial_.Tus_doc_dt = _inventoryHeader.Ith_doc_date;
                                    _reptPickSerial_.Tus_doc_no = "N/A"; _reptPickSerial_.Tus_exist_grncom = "N/A"; _reptPickSerial_.Tus_isapp = 1;
                                    _reptPickSerial_.Tus_iscovernote = 1; _reptPickSerial_.Tus_itm_brand = msitem.Mi_brand; _reptPickSerial_.Tus_itm_cd = _item;
                                    _reptPickSerial_.Tus_itm_desc = msitem.Mi_longdesc; _reptPickSerial_.Tus_itm_line = 0; _reptPickSerial_.Tus_itm_model = msitem.Mi_model;
                                    _reptPickSerial_.Tus_itm_stus = _one.Tus_itm_stus;
                                    _reptPickSerial_.Tus_itm_stus = string.IsNullOrEmpty(_one.Tus_new_status) ? _one.Tus_itm_stus : _one.Tus_new_status;
                                    _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc; _reptPickSerial_.Tus_new_status = _one.Tus_new_status;
                                    _reptPickSerial_.Tus_qty = _one.Tus_qty; _reptPickSerial_.Tus_ser_1 = "N/A"; _reptPickSerial_.Tus_ser_2 = "N/A";
                                    _reptPickSerial_.Tus_ser_id = 0; _reptPickSerial_.Tus_ser_line = 0; _reptPickSerial_.Tus_session_id = _inventoryHeader.Ith_session_id;
                                    _reptPickSerial_.Tus_unit_cost = 0;
                                    _reptPickSerial_.Tus_unit_price = 0; _reptPickSerial_.Tus_usrseq_no = 1;
                                    _reptPickSerial_.Tus_warr_no = "N/A"; _reptPickSerial_.Tus_warr_period = 0; _reptPickSerial_.Tus_new_remarks = "AOD-OUT";
                                    _AdjPlusSerialList.Add(_reptPickSerial_);
                                }
                            }
                            if (_serialList != null) if (_serialList.Count > 0) _AdjPlusSerialList.AddRange(_serialList);
                            _serialList = _AdjPlusSerialList;
                        }
                        _inventoryHeader.Ith_doc_tp = "AOD"; _inventoryAuto.Aut_moduleid = "AOD"; _inventoryAuto.Aut_start_char = "AOD";
                        _inventoryAuto.Aut_direction = 0;
                        if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "AOD") _inventoryHeader.Ith_anal_1 = "0";
                        string _aodoutno = string.Empty;
                        _inventoryHeader.Ith_direct = false;
                        _inventoryHeader.Ith_seq_no = 0;
                        _inventoryHeader.Ith_is_manual = _isManualSelect;
                        #endregion
                        Int16 effect = SaveOutwardScanSerial(_inventoryHeader, _serialList, _reptPickSerialsSub, null, false);

                        if (effect == 1)
                        {
                            int _reqDataUpdate = 0;
                            #region Req Balance Update update by Lakshan 2016 Sep 08
                            MasterLocationNew _masterLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                            {
                                Ml_loc_cd = _inventoryHeader.Ith_loc,
                                Ml_com_cd = _inventoryHeader.Ith_com,
                                Ml_act = 1
                            }).FirstOrDefault();
                            if (!string.IsNullOrEmpty(_inventoryHeader.Ith_oth_docno))
                            {
                                var _byItemStatus = from l in _serialList
                                                    group l by new { l.Tus_itm_cd, l.Tus_itm_stus, l.Tus_base_doc_no, l.Tus_base_itm_line }
                                                        into item
                                                        select new
                                                        {
                                                            Tus_itm_cd = item.Key.Tus_itm_cd,
                                                            Tus_itm_stus = item.Key.Tus_itm_stus,
                                                            Tus_base_doc_no = item.Key.Tus_base_doc_no,
                                                            Tus_base_itm_line = item.Key.Tus_base_itm_line,
                                                            Tus_qty = item.Sum(p => p.Tus_qty)
                                                        };
                                if (_byItemStatus != null)
                                    if (_byItemStatus.Count() > 0)
                                    {
                                        foreach (var p in _byItemStatus)
                                        {
                                            string _requestno = p.Tus_base_doc_no;
                                            string _company = _inventoryHeader.Ith_com;
                                            string _location = _trlocation;
                                            string _itemcode = p.Tus_itm_cd;
                                            string _itemstatus = p.Tus_itm_stus;
                                            decimal _qty = p.Tus_qty;
                                            string _docstatus = "F";
                                            string _user = _inventoryHeader.Ith_cre_by;
                                            Int32 _lineNo = p.Tus_base_itm_line;
                                            if (_masterLoc.Ml_is_serial == 0 && (_inventoryHeader.Ith_sub_tp == "EX" || _inventoryHeader.Ith_sub_tp == "RE" || _inventoryHeader.Ith_sub_tp == "BOI" || _inventoryHeader.Ith_sub_tp == "EXP"))
                                            {
                                                _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalanceBond(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
                                            }
                                            else
                                            {
                                                _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalance(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
                                            }

                                        }
                                        var _docs = _byItemStatus.Select(x => x.Tus_base_doc_no).Distinct();
                                        if (_docs != null) if (_docs.Count() > 0) foreach (string _request in _docs) _inventoryDAL.UpdateRequestHeaderAodOut(_request.Trim(), _inventoryHeader.Ith_cre_by);
                                    }
                            }
                            #endregion
                        }

                        #region set var data 19 oct 2016
                        List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _inventoryHeader.Ith_doc_no });
                        if (_invBatchData != null)
                        {
                            if (_invBatchData.Count > 0)
                            {
                                _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                                _serQty = _serialList.Sum(c => c.Tus_qty);
                            }
                        }
                        #endregion
                        _updatedQty = _serialList.Sum(c => c.Tus_qty);
                        effect = UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _aodoutno);
                        var _lst = (from n in _reptPickSerials
                                    group n by new { n.Tus_itm_cd, n.Tus_base_doc_no }
                                        into r
                                        select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_base_doc_no = r.Key.Tus_base_doc_no, Tus_qty = r.Sum(p => p.Tus_qty) }).ToList();

                        #region update reservation log data 07 Nov 2016 Lakshan
                        if (effect == 1 && _inventoryHeader.TMP_IS_RES_UPDATE)
                        {
                            string _errro = "";
                            var _resList = (from n in _serialList
                                            group n by new { n.Tus_itm_cd, n.Tus_itm_stus, n.Tus_res_no }
                                                into r
                                                select new
                                                {
                                                    Tus_itm_cd = r.Key.Tus_itm_cd,
                                                    Tus_itm_stus = r.Key.Tus_itm_stus,
                                                    Tus_res_no = r.Key.Tus_res_no,
                                                    Tus_resqty = r.Sum(p => p.Tus_resqty)
                                                }).ToList();
                            foreach (var _serData in _resList)
                            {
                                if (!string.IsNullOrEmpty(_serData.Tus_res_no))
                                {
                                    if (_serData.Tus_res_no != "N/A")
                                    {
                                        Int32 _res = 0;
                                        _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                        {
                                            IRL_CURT_COM = _inventoryHeader.Ith_com,
                                            IRL_CURT_LOC = _inventoryHeader.Ith_loc,
                                            IRL_ORIG_DOC_TP = _inventoryHeader.Ith_sub_tp,
                                            IRL_ORIG_DOC_NO = _inventoryHeader.Ith_oth_docno,
                                            IRL_ORIG_DOC_DT = DateTime.Now,

                                            IRL_CURT_DOC_TP = "AOD-OUT",
                                            IRL_CURT_DOC_NO = _aodoutno,
                                            IRL_CURT_DOC_DT = _inventoryHeader.Ith_doc_date,
                                            IRL_RES_NO = _serData.Tus_res_no,
                                            IRL_ITM_CD = _serData.Tus_itm_cd,
                                            IRL_ITM_STUS = _serData.Tus_itm_stus,
                                            IRL_MOD_BY_NEW = _inventoryHeader.Ith_mod_by,
                                            IRL_MOD_SESSION = _inventoryHeader.Ith_session_id,
                                            IRL_MOD_DT = DateTime.Now,
                                            IRL_CRE_BY = _inventoryHeader.Ith_cre_by,
                                            IRL_CRE_DT = DateTime.Now,
                                            IRL_CRE_SESSION = _inventoryHeader.Ith_session_id,
                                            IRL_RES_QTY = _serData.Tus_resqty
                                        }, 0, _inventoryDAL, out _errro);
                                        if (_res <= 0)
                                        {
                                            _resUpdateErr = true;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion

                        #region update item allocation data 10 Jan 2017
                        if (_inventoryHeader.TMP_IS_ALLOCATION)
                        {
                            var _allData = _serialList.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                            InventoryRequest _tmpReqHdr = new InventoryRequest();
                            InventoryRequestItem _tmpReqItm = new InventoryRequestItem();
                            _tmpReqHdr.Itr_loc = _inventoryHeader.Ith_oth_loc;
                            _tmpReqHdr.Itr_com = _inventoryHeader.Ith_oth_com;
                            foreach (var item in _allData)
                            {
                                _tmpReqItm = new InventoryRequestItem();
                                _tmpReqItm.Itri_itm_cd = item.Peo.Tus_itm_cd;
                                _tmpReqItm.Itri_itm_stus = item.Peo.Tus_itm_stus;
                                _tmpReqItm.Itri_qty = item.theCount;
                                Int32 _rr = UpdateItemAllocationDataFIFO(_inventoryDAL, _tmpReqItm, _tmpReqHdr, _generalDAL);
                            }
                        }
                        #endregion
                        //Comment by Lakshan as per the chaml 08/Sep/2016
                        //foreach (var s in _lst)
                        //{ string _item = s.Tus_itm_cd; decimal _qty = s.Tus_qty; string _requestno = s.Tus_base_doc_no; _inventoryDAL.UpdateRequestItem(_requestno, _item, _qty); }

                        #region Othe save data
                        if (!string.IsNullOrEmpty(_aodoutno))
                        { _tempInventoryDoc = _aodoutno; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
                        _tempInventoryDoc = string.Empty;

                        #region restriction othlocation AOD in Dulaj 2018/Dec/13

                        bool restriction = false;
                        if (_isOtherLocAutoIn)
                        {
                            MasterLocation frmcom = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, 1);
                            MasterLocation tocom = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc, 1);
                            restriction = IsRestrictedAutoAodIn(_fromCompany, frmcom, tocom);
                        }
                        #endregion

                        if (_isOtherLocAutoIn && !restriction)
                        {
                            // MasterLocation _mstAodOutLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc, 1);
                            //MasterLocation _mstAodreciveLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_loc, 1);
                            MasterLocation _mstAodOutLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, 1);
                            MasterLocation _mstAodreciveLoc = _generalDAL.GetAllLocationByLocCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc, 1);
                            if (!(_mstAodOutLoc.Ml_is_serial == false && _mstAodreciveLoc.Ml_is_serial == true))
                            {
                                if (_inventoryHeader.Ith_sub_tp != "SERVICE")       //kapila 15/9/2015 no auto AOD in for RCC aod outs
                                {
                                    _inventoryHeader.Ith_acc_no = "AUTO_NO";
                                    _inventoryHeader.Ith_anal_4 = "AUTO_IN_AOD";
                                    string _otherloc = _inventoryHeader.Ith_loc;
                                    _inventoryHeader.Ith_loc = _inventoryHeader.Ith_oth_loc; _inventoryHeader.Ith_oth_loc = _otherloc;
                                    _inventoryHeader.Ith_oth_docno = _aodoutno; _inventoryHeader.Ith_direct = true;
                                    _defbin = _inventoryDAL.GetDefaultBinCode(_toCompany, _inventoryHeader.Ith_loc);
                                    MasterAutoNumber _aodinAuto = new MasterAutoNumber(); _aodinAuto.Aut_cate_cd = _inventoryHeader.Ith_loc;
                                    _aodinAuto.Aut_cate_tp = "LOC"; _aodinAuto.Aut_direction = 1;
                                    _aodinAuto.Aut_modify_dt = null; _aodinAuto.Aut_year = _inventoryHeader.Ith_doc_date.Date.Year; _aodinAuto.Aut_moduleid = "AOD";
                                    _aodinAuto.Aut_start_char = "AOD";
                                    List<ReptPickSerials> _aodinserial = PickItemforAutoIn(_serialList, _inventoryHeader, _defbin);
                                    #region 05 Dec 2016 base ref no not update correctle
                                    foreach (var _ser in _aodinserial)
                                    {
                                        _ser.Tus_doc_no = _aodoutno;
                                    }
                                    #endregion

                                    # region --------------  ADDED BY WIMAL @ 04/09/2018 - RECEIVE AUTO DUTY FREE AOD OUT -STARS

                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                    {
                                        List<ReptPickSerials> _withSerIdList = _aodinserial.Where(c => c.Tus_ser_id != 0).ToList();
                                        List<ReptPickSerials> _withotSerIdList = _aodinserial.Where(c => c.Tus_ser_id == 0).ToList();
                                        List<ReptPickSerials> _newRepTempPickSer = new List<ReptPickSerials>();

                                        #region Get INT_SERDATA For DFS Location
                                        List<InventorySerialN> _intSerList = _inventoryDAL.Get_INT_SER_DATA(new InventorySerialN()
                                        {
                                            Ins_doc_no = _inventoryHeader.Ith_oth_docno,
                                            Ins_com = _inventoryHeader.Ith_oth_com,
                                            Ins_loc = _inventoryHeader.Ith_oth_loc
                                        });
                                        Int32 _serialIdZeroDataAvailable = 0;
                                        if (_intSerList.Count > 0)
                                        {
                                            _serialIdZeroDataAvailable = _intSerList.Where(c => c.Ins_ser_id == 0).ToList().Count();
                                        }
                                        #endregion
                                        if (_intSerList.Count > 0 && _serialIdZeroDataAvailable < 1)
                                        {
                                            #region With Serial Id
                                            foreach (var _withSer in _withSerIdList)
                                            {
                                                foreach (var _intSer in _intSerList)
                                                {
                                                    if (_withSer.TmpSerPick)
                                                    {
                                                        continue;
                                                    }
                                                    if (_intSer.Ins_ser_id == _withSer.Tus_ser_id)
                                                    {
                                                        _withSer.Tus_doc_no = _intSer.Ins_doc_no;
                                                        _withSer.Tus_itm_line = _intSer.Ins_itm_line;
                                                        _withSer.Tus_batch_line = _intSer.Ins_batch_line;
                                                        _withSer.Tus_unit_cost = _intSer.Ins_unit_cost; //If out DFS take cost from cost sheet
                                                        _withSer.Tus_unit_price = _intSer.Ins_unit_price;
                                                        _withSer.Tus_ser_line = _intSer.Ins_ser_line;

                                                        #region Make grn Data 11 Oct 2016
                                                        _withSer.Tus_warr_no = _intSer.Ins_warr_no;
                                                        _withSer.Tus_warr_period = _intSer.Ins_warr_period;
                                                        _withSer.Tus_orig_grncom = _intSer.Ins_orig_grncom;
                                                        _withSer.Tus_orig_grnno = _intSer.Ins_orig_grnno;
                                                        _withSer.Tus_orig_grndt = _intSer.Ins_orig_grndt;
                                                        _withSer.Tus_orig_supp = _intSer.Ins_orig_supp;
                                                        _withSer.Tus_exist_grncom = _intSer.Ins_exist_grncom;
                                                        _withSer.Tus_exist_grnno = _intSer.Ins_exist_grnno;
                                                        _withSer.Tus_exist_grndt = _intSer.Ins_exist_grndt;
                                                        _withSer.Tus_exist_supp = _intSer.Ins_exist_supp;
                                                        #endregion

                                                        decimal _actRate = 0;
                                                        var _tmpBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                                                        {
                                                            Inb_doc_no = _intSer.Ins_doc_no,
                                                            Inb_itm_line = _intSer.Ins_itm_line,
                                                            Inb_batch_line = _intSer.Ins_batch_line
                                                        }).FirstOrDefault();
                                                        if (_tmpBatchData != null)
                                                        {
                                                            _withSer.Tus_unit_cost = _tmpBatchData.Inb_unit_cost; //If out DFS take cost from cost sheet
                                                            _withSer.Tus_unit_price = _tmpBatchData.Inb_unit_price;
                                                            _withSer.Tus_new_itm_cd = _tmpBatchData.Inb_base_itmcd;
                                                            _withSer.Tus_batch_no = _tmpBatchData.Inb_batch_no;
                                                            if (!string.IsNullOrEmpty(_tmpBatchData.Inb_res_no) && _tmpBatchData.Inb_res_no != "N/A")
                                                            {
                                                                _withSer.Tus_res_no = _tmpBatchData.Inb_res_no;
                                                                _withSer.Tus_res_line = _tmpBatchData.Inb_res_lineno;
                                                            }

                                                            if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                            {
                                                                decimal _TmpSActRt = 0;
                                                                DataTable _dt = _inventoryDAL.GetActualRateAodIn(_tmpBatchData.Inb_base_ref_no, _tmpBatchData.Inb_base_refline);
                                                                if (_dt != null)
                                                                {
                                                                    if (_dt.Rows.Count > 0)
                                                                    {
                                                                        _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                    }
                                                                }
                                                                _withSer.Tus_unit_cost = _actRate;
                                                                _withSer.Tus_unit_price = _actRate;
                                                                _withSer.Tus_base_doc_no = _tmpBatchData.Inb_base_ref_no;
                                                                _withSer.Tus_base_itm_line = _tmpBatchData.Inb_base_refline;
                                                            }
                                                        }
                                                        _withSer.TmpSerPick = true;
                                                    }
                                                }
                                                if (_withSer.TmpSerPick)
                                                {
                                                    _newRepTempPickSer.Add(_withSer);
                                                }
                                            }
                                            #endregion
                                            #region Without Serial id
                                            if (_withotSerIdList.Count > 0)
                                            {
                                                List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryHeader.Ith_oth_docno);
                                                //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                                foreach (var _ser in _withotSerIdList)
                                                {
                                                    foreach (var _batch in _batchList)
                                                    {
                                                        if (!_ser.TmpSerPick)
                                                        {
                                                            if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                                            {
                                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                if (_mstItem.Mi_is_ser1 != 0)
                                                                {
                                                                    #region is serial
                                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                                    _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                    {
                                                                        _ser.Tus_res_no = _batch.Inb_res_no;
                                                                        _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                                    _ser.Tus_itm_brand = _mstItem.Mi_brand;
                                                                    _ser.Tus_itm_cd = _mstItem.Mi_cd;
                                                                    _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                    _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                                    _ser.Tus_itm_model = _mstItem.Mi_model;
                                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                    {
                                                                        decimal _actRate = 0;
                                                                        decimal _TmpSActRt = 0;
                                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                        if (_dt != null)
                                                                        {
                                                                            if (_dt.Rows.Count > 0)
                                                                            {
                                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                            }
                                                                        }
                                                                        _ser.Tus_unit_cost = _actRate;
                                                                        _ser.Tus_unit_price = _actRate;
                                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                        // _ser.Tus_job_no = _batch.Inb_job_no;
                                                                        // _ser.Tus_job_line = _batch.Inb_job_line;
                                                                        // _ser.Tus_res_no = _batch.Inb_res_no;
                                                                        // _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                    Int32 _serLine = 0;
                                                                    if (_newRepTempPickSer.Count > 0)
                                                                    {
                                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                                        if (v != null)
                                                                        {
                                                                            if (v.Count > 0)
                                                                            {
                                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                                            }
                                                                        }
                                                                    }
                                                                    _ser.Tus_ser_line = _serLine + 1;
                                                                    _newRepTempPickSer.Add(_ser);
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region mst_itm not equal 0
                                                                    for (int i = 0; i < _ser.Tus_qty; i++)
                                                                    {
                                                                        ReptPickSerials _newPickSer = new ReptPickSerials();
                                                                        _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                                        //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                                        _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                                        _newPickSer.Tus_qty = 1;
                                                                        #region Genrate Ser ID
                                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                                        {
                                                                            Ins_doc_no = _inventoryHeader.Ith_oth_docno,
                                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                                            Ins_batch_line = _batch.Inb_batch_line
                                                                        }).FirstOrDefault();
                                                                        if (_inSerAodOutNotRes != null)
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                                            #region Make grn Data 11 Oct 2016
                                                                            _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
                                                                            _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
                                                                            _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
                                                                            _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
                                                                            _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
                                                                            _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
                                                                            _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
                                                                            _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
                                                                            _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
                                                                            _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
                                                                            #endregion
                                                                        }
                                                                        else
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                                        }
                                                                        #endregion
                                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
                                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                                        _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                        {
                                                                            _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                        {
                                                                            decimal _actRate = 0;
                                                                            decimal _TmpSActRt = 0;
                                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                            if (_dt != null)
                                                                            {
                                                                                if (_dt.Rows.Count > 0)
                                                                                {
                                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                                }
                                                                            }
                                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                                            _newPickSer.Tus_unit_price = _actRate;
                                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                            // _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                                        _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                        Int32 _serLine = 0;
                                                                        if (_newRepTempPickSer.Count > 0)
                                                                        {
                                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
                                                                                && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                            if (v != null)
                                                                            {
                                                                                if (v.Count > 0)
                                                                                {
                                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                                }
                                                                            }
                                                                        }
                                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                                        _newRepTempPickSer.Add(_newPickSer);
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                            else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                                            {
                                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                if (_mstItem.Mi_is_ser1 != 0)
                                                                {
                                                                    #region is serial equal 1
                                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                                    _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                    {
                                                                        _ser.Tus_res_no = _batch.Inb_res_no;
                                                                        _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    _ser.Tus_itm_brand = _mstItem.Mi_brand;
                                                                    _ser.Tus_itm_cd = _mstItem.Mi_cd;
                                                                    _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                    _ser.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                                    _ser.Tus_itm_model = _mstItem.Mi_model;
                                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                    {
                                                                        decimal _actRate = 0;
                                                                        decimal _TmpSActRt = 0;
                                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                        if (_dt != null)
                                                                        {
                                                                            if (_dt.Rows.Count > 0)
                                                                            {
                                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                            }
                                                                        }
                                                                        _ser.Tus_unit_cost = _actRate;
                                                                        _ser.Tus_unit_price = _actRate;
                                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                        //_ser.Tus_job_no = _batch.Inb_job_no;
                                                                        //_ser.Tus_job_line = _batch.Inb_job_line;
                                                                        //_ser.Tus_res_no = _batch.Inb_res_no;
                                                                        //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                    Int32 _serLine = 0;
                                                                    if (_newRepTempPickSer.Count > 0)
                                                                    {
                                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                                        if (v != null)
                                                                        {
                                                                            if (v.Count > 0)
                                                                            {
                                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                                            }
                                                                        }
                                                                    }
                                                                    _ser.Tus_ser_line = _serLine + 1;
                                                                    _newRepTempPickSer.Add(_ser);

                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region Mi_is_ser1 equl 0
                                                                    for (int i = 0; i < _batch.Itb_bal_qty1; i++)
                                                                    {
                                                                        ReptPickSerials _newPickSer = new ReptPickSerials();
                                                                        _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                                        // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                                        _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                                        _newPickSer.Tus_qty = 1;
                                                                        #region Genrate Ser ID
                                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                                        {
                                                                            Ins_doc_no = _inventoryHeader.Ith_oth_docno,
                                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                                            Ins_batch_line = _batch.Inb_batch_line
                                                                        }).FirstOrDefault();
                                                                        if (_inSerAodOutNotRes != null)
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                                            #region Make grn Data 11 Oct 2016
                                                                            _newPickSer.Tus_warr_no = _inSerAodOutNotRes.Ins_warr_no;
                                                                            _newPickSer.Tus_warr_period = _inSerAodOutNotRes.Ins_warr_period;
                                                                            _newPickSer.Tus_orig_grncom = _inSerAodOutNotRes.Ins_orig_grncom;
                                                                            _newPickSer.Tus_orig_grnno = _inSerAodOutNotRes.Ins_orig_grnno;
                                                                            _newPickSer.Tus_orig_grndt = _inSerAodOutNotRes.Ins_orig_grndt;
                                                                            _newPickSer.Tus_orig_supp = _inSerAodOutNotRes.Ins_orig_supp;
                                                                            _newPickSer.Tus_exist_grncom = _inSerAodOutNotRes.Ins_exist_grncom;
                                                                            _newPickSer.Tus_exist_grnno = _inSerAodOutNotRes.Ins_exist_grnno;
                                                                            _newPickSer.Tus_exist_grndt = _inSerAodOutNotRes.Ins_exist_grndt;
                                                                            _newPickSer.Tus_exist_supp = _inSerAodOutNotRes.Ins_exist_supp;
                                                                            #endregion
                                                                        }
                                                                        else
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                                        }
                                                                        #endregion
                                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                                        _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                        {
                                                                            _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                        {
                                                                            decimal _actRate = 0;
                                                                            decimal _TmpSActRt = 0;
                                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                            if (_dt != null)
                                                                            {
                                                                                if (_dt.Rows.Count > 0)
                                                                                {
                                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                                }
                                                                            }
                                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                                            _newPickSer.Tus_unit_price = _actRate;
                                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                            //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                                        _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                        Int32 _serLine = 0;
                                                                        if (_newRepTempPickSer.Count > 0)
                                                                        {
                                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                            if (v != null)
                                                                            { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                                        }
                                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                                        _newRepTempPickSer.Add(_ser);
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryHeader.Ith_oth_docno);
                                            #region WitSerial id not in int_ser
                                            if (_withSerIdList.Count > 0)
                                            {
                                                foreach (var _serId in _withSerIdList)
                                                {
                                                    foreach (var _batch in _batchList)
                                                    {
                                                        if (!_serId.TmpSerPick)
                                                        {
                                                            if (_serId.Tus_itm_cd == _batch.Inb_itm_cd && _serId.Tus_itm_stus == _batch.Inb_itm_stus && _serId.Tus_qty <= _batch.Itb_bal_qty1)
                                                            {
                                                                _serId.Tus_doc_no = _batch.Inb_doc_no;
                                                                _serId.Tus_itm_line = _batch.Inb_itm_line;
                                                                _serId.Tus_batch_line = _batch.Inb_batch_line;
                                                                _serId.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                _serId.Tus_unit_price = _batch.Inb_unit_price;
                                                                _serId.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                _serId.Tus_batch_no = _batch.Inb_batch_no;
                                                                if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                {
                                                                    _serId.Tus_res_no = _batch.Inb_res_no;
                                                                    _serId.Tus_res_line = _batch.Inb_res_lineno;
                                                                }
                                                                #region Make grn Data 11 Oct 2016
                                                                InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                                if (_invHdr != null)
                                                                {
                                                                    _serId.Tus_orig_grncom = _invHdr.Ith_com;
                                                                    _serId.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                    _serId.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                    _serId.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                    _serId.Tus_exist_grncom = _invHdr.Ith_com;
                                                                    _serId.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                    _serId.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                    _serId.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                                }
                                                                #endregion
                                                                if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                {
                                                                    decimal _actRate = 0;
                                                                    decimal _TmpSActRt = 0;
                                                                    DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                    if (_dt != null)
                                                                    {
                                                                        if (_dt.Rows.Count > 0)
                                                                        {
                                                                            _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                        }
                                                                    }
                                                                    _serId.Tus_unit_cost = _actRate;
                                                                    _serId.Tus_unit_price = _actRate;
                                                                    _serId.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                    _serId.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                    // _serId.Tus_job_no = _batch.Inb_job_no;
                                                                    // _serId.Tus_job_line = _batch.Inb_job_line;
                                                                    // _serId.Tus_res_no = _batch.Inb_res_no;
                                                                    //_serId.Tus_res_line = _batch.Inb_res_lineno;
                                                                }
                                                                _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _serId.Tus_qty;
                                                                _serId.Tus_tmp_qty_to_pick = _serId.Tus_tmp_qty_to_pick - _serId.Tus_qty;
                                                                _serId.TmpSerPick = _serId.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                Int32 _serLine = 0;
                                                                if (_newRepTempPickSer.Count > 0)
                                                                {
                                                                    var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _serId.Tus_doc_no && c.Tus_itm_line == _serId.Tus_itm_line && c.Tus_batch_line == _serId.Tus_batch_line).ToList();
                                                                    if (v != null)
                                                                    {
                                                                        if (v.Count > 0)
                                                                        {
                                                                            _serLine = v.Max(c => c.Tus_ser_line);
                                                                        }
                                                                    }
                                                                }
                                                                _serId.Tus_ser_line = _serLine + 1;
                                                                _newRepTempPickSer.Add(_serId);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                            #region Without Serial id
                                            if (_withotSerIdList.Count > 0)
                                            {
                                                //List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(_inventoryMovementHeader.Ith_oth_docno);
                                                foreach (var _ser in _withotSerIdList)
                                                {
                                                    foreach (var _batch in _batchList)
                                                    {
                                                        if (!_ser.TmpSerPick)
                                                        {
                                                            if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty <= _batch.Itb_bal_qty1)
                                                            {
                                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                if (_mstItem.Mi_is_ser1 != 0)
                                                                {
                                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                                    _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                    _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                    {
                                                                        _ser.Tus_res_no = _batch.Inb_res_no;
                                                                        _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                    {
                                                                        decimal _actRate = 0;
                                                                        decimal _TmpSActRt = 0;
                                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                        if (_dt != null)
                                                                        {
                                                                            if (_dt.Rows.Count > 0)
                                                                            {
                                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                            }
                                                                        }
                                                                        _ser.Tus_unit_cost = _actRate;
                                                                        _ser.Tus_unit_price = _actRate;
                                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                        // _ser.Tus_job_no = _batch.Inb_job_no;
                                                                        // _ser.Tus_job_line = _batch.Inb_job_line;
                                                                        // _ser.Tus_res_no = _batch.Inb_res_no;
                                                                        // _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                    Int32 _serLine = 0;
                                                                    if (_newRepTempPickSer.Count > 0)
                                                                    {
                                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                                        if (v != null)
                                                                        {
                                                                            if (v.Count > 0)
                                                                            {
                                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                                            }
                                                                        }
                                                                    }
                                                                    _ser.Tus_ser_line = _serLine + 1;
                                                                    #region Make grn Data 11 Oct 2016
                                                                    InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                                    if (_invHdr != null)
                                                                    {
                                                                        _ser.Tus_orig_grncom = _invHdr.Ith_com;
                                                                        _ser.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                        _ser.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                        _ser.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                        _ser.Tus_exist_grncom = _invHdr.Ith_com;
                                                                        _ser.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                        _ser.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                        _ser.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                                    }
                                                                    #endregion
                                                                    _newRepTempPickSer.Add(_ser);
                                                                }
                                                                else
                                                                {
                                                                    #region Equal Or Less Balance Qty
                                                                    for (int i = 0; i < _ser.Tus_qty; i++)
                                                                    {
                                                                        ReptPickSerials _newPickSer = new ReptPickSerials();
                                                                        _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                                        //  MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                                        _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                                        _newPickSer.Tus_qty = 1;
                                                                        #region Genrate Ser ID
                                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                                        {
                                                                            Ins_doc_no = _inventoryHeader.Ith_oth_docno,
                                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                                            Ins_batch_line = _batch.Inb_batch_line
                                                                        }).FirstOrDefault();
                                                                        if (_inSerAodOutNotRes != null)
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                                        }
                                                                        else
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                                        }
                                                                        #endregion
                                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;
                                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                                        _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                        {
                                                                            _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                        {
                                                                            decimal _actRate = 0;
                                                                            decimal _TmpSActRt = 0;
                                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                            if (_dt != null)
                                                                            {
                                                                                if (_dt.Rows.Count > 0)
                                                                                {
                                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                                }
                                                                            }
                                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                                            _newPickSer.Tus_unit_price = _actRate;
                                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                            // _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                                        _newPickSer.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                        Int32 _serLine = 0;
                                                                        if (_newRepTempPickSer.Count > 0)
                                                                        {
                                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line
                                                                                && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                            if (v != null)
                                                                            {
                                                                                if (v.Count > 0)
                                                                                {
                                                                                    _serLine = v.Max(c => c.Tus_ser_line);
                                                                                }
                                                                            }
                                                                        }
                                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                                        #region Make grn Data 11 Oct 2016
                                                                        InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                                        if (_invHdr != null)
                                                                        {
                                                                            _newPickSer.Tus_orig_grncom = _invHdr.Ith_com;
                                                                            _newPickSer.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                            _newPickSer.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                            _newPickSer.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                            _newPickSer.Tus_exist_grncom = _invHdr.Ith_com;
                                                                            _newPickSer.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                            _newPickSer.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                            _newPickSer.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                                        }
                                                                        #endregion
                                                                        _newRepTempPickSer.Add(_newPickSer);
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                            else if (_ser.Tus_itm_cd == _batch.Inb_itm_cd && _ser.Tus_itm_stus == _batch.Inb_itm_stus && _ser.Tus_qty > _batch.Itb_bal_qty1)
                                                            {
                                                                MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                if (_mstItem.Mi_is_ser1 != 0)
                                                                {
                                                                    _ser.Tus_doc_no = _batch.Inb_doc_no;
                                                                    _ser.Tus_itm_line = _batch.Inb_itm_line;
                                                                    _ser.Tus_batch_line = _batch.Inb_batch_line;
                                                                    _ser.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                    _ser.Tus_unit_price = _batch.Inb_unit_price;
                                                                    _ser.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                    _ser.Tus_batch_no = _batch.Inb_batch_no;
                                                                    if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                    {
                                                                        _ser.Tus_res_no = _batch.Inb_res_no;
                                                                        _ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                    {
                                                                        decimal _actRate = 0;
                                                                        decimal _TmpSActRt = 0;
                                                                        DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                        if (_dt != null)
                                                                        {
                                                                            if (_dt.Rows.Count > 0)
                                                                            {
                                                                                _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                            }
                                                                        }
                                                                        _ser.Tus_unit_cost = _actRate;
                                                                        _ser.Tus_unit_price = _actRate;
                                                                        _ser.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                        _ser.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                        //_ser.Tus_job_no = _batch.Inb_job_no;
                                                                        //_ser.Tus_job_line = _batch.Inb_job_line;
                                                                        //_ser.Tus_res_no = _batch.Inb_res_no;
                                                                        //_ser.Tus_res_line = _batch.Inb_res_lineno;
                                                                    }
                                                                    _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _ser.Tus_qty;
                                                                    _ser.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _ser.Tus_qty;
                                                                    _ser.TmpSerPick = _ser.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                    Int32 _serLine = 0;
                                                                    if (_newRepTempPickSer.Count > 0)
                                                                    {
                                                                        var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _ser.Tus_doc_no && c.Tus_itm_line == _ser.Tus_itm_line && c.Tus_batch_line == _ser.Tus_batch_line).ToList();
                                                                        if (v != null)
                                                                        {
                                                                            if (v.Count > 0)
                                                                            {
                                                                                _serLine = v.Max(c => c.Tus_ser_line);
                                                                            }
                                                                        }
                                                                    }
                                                                    _ser.Tus_ser_line = _serLine + 1;
                                                                    #region Make grn Data 11 Oct 2016
                                                                    InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                                    if (_invHdr != null)
                                                                    {
                                                                        _ser.Tus_orig_grncom = _invHdr.Ith_com;
                                                                        _ser.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                        _ser.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                        _ser.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                        _ser.Tus_exist_grncom = _invHdr.Ith_com;
                                                                        _ser.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                        _ser.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                        _ser.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                                    }
                                                                    #endregion
                                                                    _newRepTempPickSer.Add(_ser);
                                                                }
                                                                else
                                                                {
                                                                    #region Grater Than Batch Qty
                                                                    int sr = 0;

                                                                    //while(int i =int(_batch.Itb_bal_qty1); i < _batch.Itb_bal_qty1; i--)
                                                                    while (_batch.Itb_bal_qty1 > 0)
                                                                    {
                                                                        ReptPickSerials _newPickSer = new ReptPickSerials();
                                                                        _newPickSer.Tus_usrseq_no = _ser.Tus_usrseq_no;
                                                                        _newPickSer.Tus_base_doc_no = _ser.Tus_base_doc_no;
                                                                        _newPickSer.Tus_bin = _ser.Tus_bin;
                                                                        _newPickSer.Tus_com = _ser.Tus_com;
                                                                        _newPickSer.Tus_cre_by = _ser.Tus_cre_by;
                                                                        _newPickSer.Tus_cre_dt = DateTime.Now;
                                                                        _newPickSer.Tus_cross_batchline = _ser.Tus_cross_batchline;
                                                                        _newPickSer.Tus_cross_itemline = _ser.Tus_cross_itemline;
                                                                        _newPickSer.Tus_cross_seqno = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_cross_serline = _ser.Tus_cross_seqno;
                                                                        _newPickSer.Tus_doc_dt = _ser.Tus_doc_dt;
                                                                        // MasterItem _mstItem = _generalDAL.GetItemMaster(_ser.Tus_itm_cd);
                                                                        _newPickSer.Tus_itm_brand = _mstItem.Mi_brand;
                                                                        _newPickSer.Tus_itm_cd = _mstItem.Mi_cd;
                                                                        _newPickSer.Tus_itm_stus = _ser.Tus_itm_stus;
                                                                        _newPickSer.Tus_new_itm_cd = _batch.Inb_base_itmcd;
                                                                        _newPickSer.Tus_itm_desc = _mstItem.Mi_longdesc;
                                                                        _newPickSer.Tus_itm_model = _mstItem.Mi_model;
                                                                        _newPickSer.Tus_loc = _ser.Tus_loc;
                                                                        _newPickSer.Tus_out_date = DateTime.Now.Date;
                                                                        _newPickSer.Tus_seq_no = _batch.Inb_seq_no;
                                                                        _newPickSer.Tus_ser_1 = "N/A";//
                                                                        _newPickSer.Tus_ser_2 = "N/A";//
                                                                        _newPickSer.Tus_ser_3 = "N/A";//
                                                                        _newPickSer.Tus_ser_4 = "N/A";//

                                                                        _newPickSer.Tus_qty = 1;
                                                                        #region Genrate Ser ID
                                                                        InventorySerialN _inSerAodOutNotRes = _inventoryDAL.Get_INT_SER_NOT_RES_SERIAL_ID(new InventorySerialN()
                                                                        {
                                                                            Ins_doc_no = _inventoryHeader.Ith_oth_docno,
                                                                            Ins_itm_line = _batch.Inb_itm_line,
                                                                            Ins_batch_line = _batch.Inb_batch_line
                                                                        }).FirstOrDefault();
                                                                        if (_inSerAodOutNotRes != null)
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _inSerAodOutNotRes.Ins_ser_id;
                                                                            _inventoryDAL.UpdateAodOutReservedSerialId(_inSerAodOutNotRes.Ins_doc_no, _inSerAodOutNotRes.Ins_ser_id, _inSerAodOutNotRes.Ins_com);
                                                                        }
                                                                        else
                                                                        {
                                                                            _newPickSer.Tus_ser_id = _mstItem.Mi_is_ser1 == 0 ? _inventoryDAL.GetSerialID() : 0;//
                                                                        }
                                                                        #endregion
                                                                        _newPickSer.Tus_doc_no = _batch.Inb_doc_no;
                                                                        _newPickSer.Tus_itm_line = _batch.Inb_itm_line;
                                                                        _newPickSer.Tus_batch_line = _batch.Inb_batch_line;
                                                                        _newPickSer.Tus_unit_cost = _batch.Inb_unit_cost;//if out dfs cost form cost sheet, pass parameter itb_base_ref_no ,  itb_job_line 
                                                                        _newPickSer.Tus_unit_price = _batch.Inb_unit_price;
                                                                        _newPickSer.Tus_batch_no = _batch.Inb_batch_no;
                                                                        if (!string.IsNullOrEmpty(_batch.Inb_res_no) && _batch.Inb_res_no != "N/A")
                                                                        {
                                                                            _newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            _newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        if (_mstAodOutLoc.Ml_cate_1 == "DFS")
                                                                        {
                                                                            decimal _actRate = 0;
                                                                            decimal _TmpSActRt = 0;
                                                                            DataTable _dt = _inventoryDAL.GetActualRateAodIn(_batch.Inb_base_ref_no, _batch.Inb_base_refline);
                                                                            if (_dt != null)
                                                                            {
                                                                                if (_dt.Rows.Count > 0)
                                                                                {
                                                                                    _actRate = decimal.TryParse(_dt.Rows[0][0].ToString(), out _TmpSActRt) ? Convert.ToDecimal(_dt.Rows[0][0].ToString()) : 0;
                                                                                }
                                                                            }
                                                                            _newPickSer.Tus_unit_cost = _actRate;
                                                                            _newPickSer.Tus_unit_price = _actRate;
                                                                            _newPickSer.Tus_base_doc_no = _batch.Inb_base_ref_no;
                                                                            _newPickSer.Tus_base_itm_line = _batch.Inb_base_refline;
                                                                            // _newPickSer.Tus_job_no = _batch.Inb_job_no;
                                                                            //_newPickSer.Tus_job_line = _batch.Inb_job_line;
                                                                            //_newPickSer.Tus_res_no = _batch.Inb_res_no;
                                                                            //_newPickSer.Tus_res_line = _batch.Inb_res_lineno;
                                                                        }
                                                                        _batch.Itb_bal_qty1 = _batch.Itb_bal_qty1 - _newPickSer.Tus_qty;
                                                                        _newPickSer.Tus_tmp_qty_to_pick = _ser.Tus_tmp_qty_to_pick - _newPickSer.Tus_qty;
                                                                        _newPickSer.TmpSerPick = _newPickSer.Tus_tmp_qty_to_pick > 0 ? false : true;
                                                                        Int32 _serLine = 0;
                                                                        if (_newRepTempPickSer.Count > 0)
                                                                        {
                                                                            var v = _newRepTempPickSer.Where(c => c.Tus_doc_no == _newPickSer.Tus_doc_no && c.Tus_itm_line == _newPickSer.Tus_itm_line && c.Tus_batch_line == _newPickSer.Tus_batch_line).ToList();
                                                                            if (v != null)
                                                                            { if (v.Count > 0) { _serLine = v.Max(c => c.Tus_ser_line); } }
                                                                        }
                                                                        _newPickSer.Tus_ser_line = _serLine + 1;
                                                                        #region Make grn Data 11 Oct 2016
                                                                        InventoryHeader _invHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _batch.Inb_base_doc_no, Ith_com = _batch.Inb_com }).FirstOrDefault();
                                                                        if (_invHdr != null)
                                                                        {
                                                                            _newPickSer.Tus_orig_grncom = _invHdr.Ith_com;
                                                                            _newPickSer.Tus_orig_grnno = _invHdr.Ith_doc_no;
                                                                            _newPickSer.Tus_orig_grndt = _invHdr.Ith_doc_date;
                                                                            _newPickSer.Tus_orig_supp = _invHdr.Ith_bus_entity;
                                                                            _newPickSer.Tus_exist_grncom = _invHdr.Ith_com;
                                                                            _newPickSer.Tus_exist_grnno = _invHdr.Ith_doc_no;
                                                                            _newPickSer.Tus_exist_supp = _invHdr.Ith_bus_entity;
                                                                            _newPickSer.Tus_exist_grndt = _invHdr.Ith_doc_date;
                                                                        }
                                                                        #endregion
                                                                        _newRepTempPickSer.Add(_newPickSer);
                                                                    }
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                        _aodinserial = _newRepTempPickSer;
                                    }
                                    #endregion

                                    _inventoryHeader.Ith_seq_no = 0; SaveInwardScanSerial(_inventoryHeader, _aodinserial, _reptPickSerialsSub);
                                    string _aodInNo = string.Empty; effect = UpdateInventoryAutoNumber(_inventoryHeader, _aodinAuto, "+", out _aodInNo);
                                    if (!string.IsNullOrEmpty(_aodoutno))
                                    { _tempInventoryDoc = _aodInNo; if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc; }
                                    _tempInventoryDoc = string.Empty;
                                }
                            }
                        }
                        _effect = 1;
                        _inventoryHeader.Ith_is_manual = _isManualSelect;
                        if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
                        {
                            _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
                            if (_masterComp.MC_IS_SCM2_FMS == 1)
                                _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                            else
                                _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_AOD", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                        }

                        //Tharaka 2015-10-29 Genarate Purchase order

                        DataTable dtSupplier = _inventoryDAL.GET_SUPP_FOR_PO_IN_AOD(_inventoryHeader.Ith_com, _inventoryHeader.Ith_oth_com);

                        string suppCode = string.Empty;
                        if (dtSupplier != null && dtSupplier.Rows.Count > 0)
                        {
                            suppCode = dtSupplier.Rows[0]["SUPPLIER"].ToString();
                        }

                        if (_inventoryHeader.Ith_sub_tp == "CONSA")
                        {
                            MasterAutoNumber masterAuto = new MasterAutoNumber();
                            masterAuto.Aut_cate_cd = _inventoryHeader.Ith_com;
                            masterAuto.Aut_cate_tp = "COM";
                            masterAuto.Aut_direction = null;
                            masterAuto.Aut_modify_dt = null;
                            masterAuto.Aut_moduleid = "PUR";
                            masterAuto.Aut_number = 5;//what is Aut_number
                            masterAuto.Aut_start_char = "PUR";
                            masterAuto.Aut_year = null;

                            PurchaseOrder _PurchaseOrder = new PurchaseOrder();
                            _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_inventoryHeader.Ith_cre_by, "PO", 1, _inventoryHeader.Ith_com);
                            _PurchaseOrder.Poh_tp = "I";
                            _PurchaseOrder.Poh_sub_tp = "N";
                            _PurchaseOrder.Poh_doc_no = string.Empty;
                            _PurchaseOrder.Poh_com = _inventoryHeader.Ith_com;
                            _PurchaseOrder.Poh_ope = "IMPORTS";
                            _PurchaseOrder.Poh_profit_cd = _inventoryHeader.Ith_pc;
                            _PurchaseOrder.Poh_dt = DateTime.Now.Date;
                            //_PurchaseOrder.Poh_ref = txtSupRef.Text;
                            _PurchaseOrder.Poh_job_no = "IMPORTS_PO";
                            _PurchaseOrder.Poh_pay_term = "CASH";
                            _PurchaseOrder.Poh_supp = suppCode;

                            MasterCompany oCom = _generalDAL.GetCompByCode(_inventoryHeader.Ith_oth_com);
                            _PurchaseOrder.Poh_cur_cd = oCom.Mc_cur_cd;
                            MasterExchangeRate _exc1 = _salesDAL.GetExchangeRate(_inventoryHeader.Ith_com, _PurchaseOrder.Poh_cur_cd, DateTime.Now, _PurchaseOrder.Poh_cur_cd, _inventoryHeader.Ith_pc);
                            _PurchaseOrder.Poh_ex_rt = _exc1.Mer_bnkbuy_rt;
                            _PurchaseOrder.Poh_trans_term = "";
                            _PurchaseOrder.Poh_port_of_orig = "";
                            //_PurchaseOrder.Poh_cre_period = txtCreditPeriod.Text;
                            //_PurchaseOrder.Poh_frm_yer = Convert.ToDateTime(txtPoDate.Text).Year;
                            //_PurchaseOrder.Poh_frm_mon = Convert.ToDateTime(txtPoDate.Text).Month;
                            //_PurchaseOrder.Poh_to_yer = Convert.ToDateTime(txtPoDate.Text).Year;
                            //_PurchaseOrder.Poh_to_mon = Convert.ToDateTime(txtPoDate.Text).Month;
                            _PurchaseOrder.Poh_preferd_eta = DateTime.Now;
                            _PurchaseOrder.Poh_contain_kit = false;
                            _PurchaseOrder.Poh_sent_to_vendor = false;
                            _PurchaseOrder.Poh_sent_by = "";
                            _PurchaseOrder.Poh_sent_via = "";
                            _PurchaseOrder.Poh_sent_add = "";
                            _PurchaseOrder.Poh_stus = "P";
                            //_PurchaseOrder.Poh_remarks = txtRemarks.Text;
                            _PurchaseOrder.Poh_sub_tot = 0;
                            _PurchaseOrder.Poh_tax_tot = 0;
                            _PurchaseOrder.Poh_dis_rt = 0;
                            _PurchaseOrder.Poh_dis_amt = 0;
                            _PurchaseOrder.Poh_oth_tot = 0;
                            _PurchaseOrder.Poh_tot = 0;
                            _PurchaseOrder.Poh_reprint = false;
                            _PurchaseOrder.Poh_tax_chg = false;
                            _PurchaseOrder.poh_is_conspo = 0;
                            _PurchaseOrder.Poh_cre_by = _inventoryHeader.Ith_cre_by;

                            string _grnno = _inventoryHeader.Ith_acc_no;

                            List<PurchaseOrderDetail> _NewPODel = new List<PurchaseOrderDetail>();
                            Int32 _poline = 0;
                            foreach (ReptPickSerials _p in _reptPickSerials)
                            {
                                MasterItem _mIt = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _p.Tus_itm_cd);
                                DataTable _POLine = _inventoryDAL.GetPOLine(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _grnno, _p.Tus_ser_id);
                                if (_POLine != null && _POLine.Rows.Count > 0)
                                {
                                    _poline = _POLine.Rows[0].Field<Int32>("itb_base_refline");
                                }
                                else
                                    _poline += 1;
                                _p.Tus_base_itm_line = _poline;
                                PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                                POItem.Pod_act_unit_price = _p.Tus_unit_cost;
                                POItem.Pod_dis_amt = 0;
                                POItem.Pod_dis_rt = 0;
                                POItem.Pod_grn_bal = 0;
                                POItem.Pod_item_desc = _mIt.Mi_longdesc;
                                POItem.Pod_itm_cd = _p.Tus_itm_cd;
                                POItem.Pod_itm_stus = _p.Tus_itm_stus;
                                POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
                                POItem.Pod_kit_itm_cd = string.Empty;
                                POItem.Pod_kit_line_no = 0;
                                POItem.Pod_lc_bal = 0;
                                POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
                                POItem.Pod_line_no = _p.Tus_base_itm_line;
                                POItem.Pod_line_tax = 0;
                                POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
                                POItem.Pod_nbt = 0;
                                POItem.Pod_nbt_before = 0;
                                POItem.Pod_pi_bal = 0;
                                POItem.Pod_qty = _p.Tus_qty;
                                POItem.Pod_ref_no = _PurchaseOrder.Poh_seq_no.ToString();
                                POItem.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
                                POItem.Pod_si_bal = 0;
                                POItem.Pod_tot_tax_before = 0;
                                POItem.Pod_unit_price = _p.Tus_unit_cost;
                                POItem.Pod_uom = _mIt.Mi_itm_uom;
                                POItem.Pod_vat = 0;
                                POItem.Pod_vat_before = 0;
                                _NewPODel.Add(POItem);
                            }

                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                            string _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + string.Format("{0:000000}", _autoNo);
                            _inventoryDAL.UpdateAutoNumber(masterAuto);
                            _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
                            _PurchaseOrder.Poh_doc_no = _documentNo;

                            _tempSalesDoc = _PurchaseOrder.Poh_doc_no;

                            List<PurchaseOrderDelivery> _NewPODelItems = new List<PurchaseOrderDelivery>();
                            string docNUmbner = string.Empty;
                            string err = string.Empty;

                            Int32 result = SavePurchaseOrderWithoutCommit(_PurchaseOrder, _NewPODel, _NewPODelItems, masterAuto, out docNUmbner, out err);
                        }
                    }
                    if (_documentType == "DO")
                    {
                        string _invoiceNo = string.Empty; string _deliveryOrder = string.Empty;
                        string _purchaseOrder = string.Empty; _inventoryHeader.Ith_doc_tp = "DO"; _inventoryAuto.Aut_moduleid = "DO"; _inventoryAuto.Aut_start_char = "DO";
                        _inventoryAuto.Aut_direction = 0; if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "DO") _inventoryHeader.Ith_anal_1 = "0";
                        List<InvoiceItem> _invoiceItemList = new List<InvoiceItem>();
                        var _invItem = from _itm in _reptPickSerials group _itm by new { _itm.Tus_itm_cd, _itm.Tus_itm_stus } into _items select new { Tus_itm_cd = _items.Key.Tus_itm_cd, Tus_itm_stus = _items.Key.Tus_itm_stus, Tus_qty = _items.Sum(p => p.Tus_qty) };
                        DataTable _adminT = _inventoryDAL.Get_location_by_code(_fromCompany, _inventoryHeader.Ith_loc);
                        if (_adminT == null || _adminT.Rows.Count <= 0)
                        { _genMessage = "Admin team not define"; _effect = -1; _genSalesDocument = string.Empty; _genInventoryDocument = string.Empty; return _effect; }
                        string _adminTeam = _adminT.Rows[0].Field<string>("ml_ope_cd");
                        if (string.IsNullOrEmpty(_adminTeam))
                        { _genMessage = "Admin team not define"; _effect = -1; _genSalesDocument = string.Empty; _genInventoryDocument = string.Empty; return _effect; }
                        List<InterCompanySalesParameter> _priceParam = _salesDAL.GetInterCompanyParameter(_adminTeam, _fromCompany, string.Empty, _toCompany, string.Empty);
                        string _otherProfitcenter = string.Empty;
                        string _suppliercd = string.Empty;
                        if (_priceParam != null && _priceParam.Count > 0)
                        {
                            MasterBusinessEntity _intrCust = new MasterBusinessEntity();//add by Chamal 17-Apr-2015
                            _intrCust = _inventoryDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _priceParam[0].Sritc_customer, null, null, "C");

                            _invoiceHeader.Sah_pc = _priceParam[0].Sritc_frm_prof;
                            _invoiceHeader.Sah_cus_cd = _priceParam[0].Sritc_customer;
                            _invoiceHeader.Sah_d_cust_cd = _priceParam[0].Sritc_customer;
                            _otherProfitcenter = _priceParam[0].Sritc_to_prof;
                            _invoiceHeader.Sah_sales_ex_cd = "N/A";
                            _suppliercd = _priceParam[0].Sritc_sup;

                            _invoiceHeader.Sah_cus_name = _intrCust.Mbe_name;
                            _invoiceHeader.Sah_d_cust_name = _intrCust.Mbe_name;
                            _invoiceHeader.Sah_cus_add1 = _intrCust.Mbe_add1;
                            _invoiceHeader.Sah_d_cust_add1 = _intrCust.Mbe_add1;
                            _invoiceHeader.Sah_cus_add2 = _intrCust.Mbe_add2;
                            _invoiceHeader.Sah_d_cust_add2 = _intrCust.Mbe_add2;
                            _invoiceHeader.Sah_tax_inv = _intrCust.Mbe_is_tax;
                        }
                        PurchaseOrder _PurchaseOrder = new PurchaseOrder();
                        _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_inventoryHeader.Ith_cre_by, "PO", 1, _fromCompany);
                        _PurchaseOrder.Poh_tp = "L"; _PurchaseOrder.Poh_sub_tp = "N";
                        _PurchaseOrder.Poh_doc_no = "-1"; _PurchaseOrder.Poh_com = _toCompany; _PurchaseOrder.Poh_ope = "INV";
                        _PurchaseOrder.Poh_profit_cd = _otherProfitcenter; _PurchaseOrder.Poh_dt = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Date;
                        _PurchaseOrder.Poh_ref = "N/A"; _PurchaseOrder.Poh_job_no = "N/A";
                        _PurchaseOrder.Poh_pay_term = "CREDIT"; _PurchaseOrder.Poh_supp = _suppliercd;
                        _PurchaseOrder.Poh_cur_cd = "LKR"; _PurchaseOrder.Poh_ex_rt = 0;
                        _PurchaseOrder.Poh_trans_term = ""; _PurchaseOrder.Poh_port_of_orig = ""; _PurchaseOrder.Poh_cre_period = "0";
                        _PurchaseOrder.Poh_frm_yer = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year; _PurchaseOrder.Poh_frm_mon = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Month;
                        _PurchaseOrder.Poh_to_yer = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;
                        _PurchaseOrder.Poh_to_mon = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Month; _PurchaseOrder.Poh_preferd_eta = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Date;
                        _PurchaseOrder.Poh_contain_kit = false; _PurchaseOrder.Poh_sent_to_vendor = false;
                        _PurchaseOrder.Poh_sent_by = ""; _PurchaseOrder.Poh_sent_via = "";
                        _PurchaseOrder.Poh_sent_add = ""; _PurchaseOrder.Poh_stus = "F"; _PurchaseOrder.Poh_remarks = string.Empty;
                        _PurchaseOrder.Poh_sub_tot = 0; _PurchaseOrder.Poh_tax_tot = 0; _PurchaseOrder.Poh_dis_rt = 0;
                        _PurchaseOrder.Poh_dis_amt = 0; _PurchaseOrder.Poh_oth_tot = 0; _PurchaseOrder.Poh_tot = 0;
                        _PurchaseOrder.Poh_reprint = false; _PurchaseOrder.Poh_tax_chg = false; _PurchaseOrder.poh_is_conspo = 0;
                        _PurchaseOrder.Poh_cre_by = _inventoryHeader.Ith_cre_by;
                        Int32 _invoiceLine = 0;

                        MasterBusinessEntity _suppMaster = new MasterBusinessEntity();//add by Chamal 08-Sep-2015
                        _suppMaster = _inventoryDAL.GetBusinessCompanyDetail(_PurchaseOrder.Poh_com, _PurchaseOrder.Poh_supp, null, null, "S");

                        List<PurchaseOrderDetail> _POItemListSave = new List<PurchaseOrderDetail>();
                        //DataTable _lpStatus = _generalDAL.GetItemLPStatus();
                        //Edit by Chamal 06-05-2014
                        DataTable _lpStatus = _inventoryDAL.GetItemStatusMaster("ALL", "ALL");
                        foreach (var _itm in _invItem)
                        {
                            PurchaseOrderDetail _pItm = new PurchaseOrderDetail();
                            string _iItem = _itm.Tus_itm_cd; string _iStatus = _itm.Tus_itm_stus;
                            decimal _iQty = _itm.Tus_qty; DateTime _iDate = _invoiceHeader.Sah_dt.Date;
                            bool _iIsSerialized = false; string _iPriceBook = "";
                            string _iPriceLevel = "";

                            List<MasterItemTax> _tax = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)       //kapila 19/7/2017
                            {
                                MasterItem _mstItem = _inventoryDAL.GetItem(_fromCompany, _iItem);
                                _tax = _salesDAL.GetItemTax_strucbase(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _tax = _salesDAL.GetItemTax(_fromCompany, _iItem, _iStatus, string.Empty, string.Empty);
                            if (_tax == null || _tax.Count == 0)
                            {
                                _genMessage = "No tax define for the item " + _iItem + "."; _effect = -1;
                                break;
                            };
                            if (_priceParam.Count <= 0)
                            {
                                _genMessage = " no pricing parameters define.";
                                _effect = -1;
                                break;
                            };
                            if (_priceParam.Count > 0)
                                foreach (InterCompanySalesParameter _param in _priceParam)
                                {
                                    _iPriceBook = _param.Sritc_pb;
                                    _iPriceLevel = _param.Sritc_pb_lvl;
                                    _invoiceHeader.Sah_cus_cd = _param.Sritc_customer;
                                }
                            List<PriceBookLevelRef> _level = _salesDAL.GetPriceLevelList(_fromCompany, _iPriceBook, _iPriceLevel);
                            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                            List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();
                            PriceBookLevelRef _priceLevel = new PriceBookLevelRef();

                            if (_level.Count <= 0)
                            {
                                _genMessage = " no price level define.";
                                _effect = -1; break;
                            };
                            if (_level.Count > 0)
                                foreach (PriceBookLevelRef _lvl in _level)
                                {
                                    _priceLevel = _lvl;
                                    _iIsSerialized = _lvl.Sapl_is_serialized;
                                    break;
                                }
                            if (_iIsSerialized == false)
                                _priceDetailRef = _salesDAL.GetPriceDetail(_iPriceBook, _iPriceLevel, _iItem, _iQty, _iDate.Date, string.Empty);
                            else _priceSerialRef = _salesDAL.GetAllPriceSerial(_iPriceBook, _iPriceLevel, _iItem, _iDate.Date, string.Empty);
                            if (_priceDetailRef.Count <= 0)
                            {
                                _genMessage = " transfer price not define for the item " + _iItem + " against book " + _iPriceBook + " and level " + _iPriceLevel;
                                _effect = -1;
                                break;
                            };
                            _invoiceLine++;
                            foreach (PriceDetailRef _price in _priceDetailRef)
                            {
                                //Add by Chamal 16-Sep-2014
                                if (_price.Sapd_price_stus == "S") { _genMessage = " transfer price has been suspended for the item " + _iItem + " against book " + _iPriceBook + " and level " + _iPriceLevel; _effect = -1; break; }
                                decimal _AbsoulteUnitPrice = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _price.Sapd_itm_price, 0, false);
                                decimal _taxPortion = TaxCalculation(_fromCompany, _iItem, _iStatus, _iQty, _priceLevel, _AbsoulteUnitPrice, 0, true);
                                MasterItem _im = _inventoryDAL.GetItem(_fromCompany, _iItem);
                                //var _lp = _lpStatus.AsEnumerable().Where(x => x.Field<string>("mis_scm2_imp") == _iStatus).Select(x => x.Field<string>("mis_cd")).ToList();
                                //Edit by Chamal 06-05-2014
                                var _lp = _lpStatus.AsEnumerable().Where(x => x.Field<string>("mis_cd") == _iStatus).Select(x => x.Field<string>("mis_lp_cd")).ToList();
                                if (_lp == null || _lp.Count <= 0) { _genMessage = " LP status not found " + _iItem + " and " + _iStatus + "."; _effect = -1; break; }

                                if (string.IsNullOrEmpty(Convert.ToString(_lp[0]))) { _genMessage = " LP status not found " + _iItem + " and " + _iStatus + "."; _effect = -1; break; }

                                string _poLpStatus = Convert.ToString(_lp[0]);
                                List<MasterItemTax> _tx = _salesDAL.GetItemTax(_toCompany, _iItem, Convert.ToString(_lp[0]), "VAT", string.Empty);
                                bool _isLpTaxpayable = false;
                                if (_tx != null && _tx.Count > 0) _isLpTaxpayable = true; else _isLpTaxpayable = false;
                                InvoiceItem _item = new InvoiceItem();
                                _item.Sad_alt_itm_cd = string.Empty; _item.Sad_alt_itm_desc = string.Empty;
                                _item.Sad_comm_amt = 0; _item.Sad_disc_amt = 0; _item.Sad_disc_rt = 0;
                                _item.Sad_do_qty = _iQty; _item.Sad_fws_ignore_qty = 0; _item.Sad_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                                _item.Sad_is_promo = false; _item.Sad_itm_cd = _iItem;
                                _item.Sad_itm_line = _invoiceLine; _item.Sad_itm_seq = _price.Sapd_seq_no;
                                _item.Sad_itm_stus = _iStatus; _item.Sad_itm_tax_amt = _taxPortion;
                                _item.Sad_itm_tp = _im.Mi_itm_tp; _item.Sad_pb_lvl = _iPriceLevel; _item.Sad_pb_price = _AbsoulteUnitPrice;
                                _item.Sad_pbook = _iPriceBook; _item.Sad_print_stus = false;
                                _item.Sad_promo_cd = string.Empty; _item.Sad_qty = _iQty;
                                _item.Sad_seq = _price.Sapd_pb_seq; _item.Sad_seq_no = _invoiceHeader.Sah_seq_no;
                                _item.Sad_srn_qty = 0; _item.Sad_tot_amt = _AbsoulteUnitPrice * _iQty + _taxPortion;
                                _item.Sad_unit_amt = _AbsoulteUnitPrice * _iQty; _item.Sad_unit_rt = _AbsoulteUnitPrice;
                                _item.Sad_uom = _im.Mi_itm_uom; _item.Sad_warr_based = false;
                                _item.Sad_warr_period = 0; _item.Sad_warr_remarks = string.Empty; _invoiceItemList.Add(_item);
                                _pItm.Pod_act_unit_price = (_AbsoulteUnitPrice * _iQty + _taxPortion) / _iQty;
                                _pItm.Pod_dis_amt = 0; _pItm.Pod_dis_rt = 0; _pItm.Pod_grn_bal = _iQty;
                                _pItm.Pod_item_desc = _im.Mi_longdesc; _pItm.Pod_itm_cd = _iItem; _pItm.Pod_itm_stus = _poLpStatus;
                                _pItm.Pod_itm_tp = _im.Mi_itm_tp; _pItm.Pod_line_amt = _AbsoulteUnitPrice * _iQty; _pItm.Pod_line_no = _invoiceLine;
                                _pItm.Pod_line_tax = _isLpTaxpayable ? _taxPortion : 0; _pItm.Pod_line_val = _AbsoulteUnitPrice * _iQty + _taxPortion;
                                _pItm.Pod_nbt = 0; _pItm.Pod_nbt_before = 0; _pItm.Pod_pi_bal = 0;
                                _pItm.Pod_qty = _iQty; _pItm.Pod_ref_no = string.Empty; _pItm.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
                                _pItm.Pod_si_bal = 0; _pItm.Pod_tot_tax_before = 0; _pItm.Pod_unit_price = _AbsoulteUnitPrice;
                                _pItm.Pod_uom = _im.Mi_itm_uom; _pItm.Pod_vat = _taxPortion; _pItm.Pod_vat_before = 0;
                                if (_suppMaster.Mbe_cate == "VAT_C") _pItm.Pod_act_unit_price = _AbsoulteUnitPrice;   //Edit by Chamal 08-Sep-2015
                                //_pItm.Pod_itm_stus = _iStatus;
                                _POItemListSave.Add(_pItm);
                                break;
                            }
                        }
                        MasterAutoNumber masterAuto = new MasterAutoNumber();
                        masterAuto.Aut_cate_cd = _toCompany; masterAuto.Aut_cate_tp = "COM";
                        masterAuto.Aut_direction = null; masterAuto.Aut_modify_dt = null;
                        masterAuto.Aut_moduleid = "PUR"; masterAuto.Aut_number = 5;
                        masterAuto.Aut_start_char = "PUR"; masterAuto.Aut_year = null;
                        _inventoryDAL.SaveNewPO(_PurchaseOrder);
                        foreach (PurchaseOrderDetail _POItems in _POItemListSave) _inventoryDAL.SaveNewPOItem(_POItems);
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                        string _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdateAutoNumber(masterAuto);
                        _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
                        _purchaseOrder = _documentNo;
                        List<ReptPickSerials> _reptPickSerialList = _reptPickSerials;
                        List<ReptPickSerialsSub> _reptPickSerialSubList = new List<ReptPickSerialsSub>();
                        if (_effect != -1)
                        {
                            _invoiceAuto = new MasterAutoNumber(); _invoiceAuto.Aut_cate_cd = _invoiceHeader.Sah_pc;
                            _invoiceAuto.Aut_cate_tp = "PRO"; _invoiceAuto.Aut_direction = 1;
                            _invoiceAuto.Aut_modify_dt = null; _invoiceAuto.Aut_moduleid = "CRED";
                            _invoiceAuto.Aut_start_char = _invoiceHeader.Sah_pc + "-" + "CR" + "-"; _invoiceAuto.Aut_modify_dt = null;
                            _invoiceAuto.Aut_year = Convert.ToDateTime(_inventoryHeader.Ith_doc_date).Year;
                            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
                            try
                            {
                                _invoiceLine = 1;
                                DataTable _tbl = _salesDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                                string _executiveType = string.Empty;
                                foreach (DataRow _r in _tbl.Rows)
                                { _executiveType = Convert.ToString(_r["esep_cat_cd"]); }
                                List<SaleCommission> _saveCommission = new List<SaleCommission>();
                                Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                                Int32 RecieptSeqNo = -1;
                                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                                _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);
                                decimal _totalValue = _invoiceItemList.Sum(x => x.Sad_tot_amt);
                                decimal _totalReceiptAmt = 0;
                                _invoiceHeader.Sah_anal_7 = _totalValue;
                                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;
                                DataTable _tblESDEPFWHF = new DataTable();
                                _tblESDEPFWHF = _salesDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                                _invoiceHeader.Sah_esd_rt = ESD_rt;
                                _invoiceHeader.Sah_epf_rt = EPF_rt;
                                _invoiceHeader.Sah_wht_rt = WHT_rt;
                                _salesDAL.SaveSalesHeader(_invoiceHeader);
                                foreach (InvoiceItem _itm in _invoiceItemList)
                                {
                                    MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                    _itm.Sad_seq_no = InvoiceSeqNo;
                                    _invoiceLine = _itm.Sad_itm_line;
                                    _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                                    _itm.Sad_uom = _item.Mi_itm_uom;
                                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                                    if (_invoiceHeader.Sah_tax_exempted)
                                    { _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt; _itm.Sad_itm_tax_amt = 0; }
                                    _salesDAL.SaveSalesItem(_itm);
                                    _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);
                                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                                    if (_inventoryHeader.Ith_process_name == "othcomout")//add by tharanga correct othr com outward doc DO base ref line corecction
                                    {
                                        _reptPickSerials.Where(r => r.Tus_itm_cd == _itm.Sad_itm_cd && r.Tus_itm_stus == _itm.Sad_itm_stus).ToList()
                                            .ForEach(i =>
                                            {
                                                i.Tus_base_itm_line = _invoiceLine;
                                            });//itm_Lineno
                                    }
                                    foreach (MasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                            nxt1:
                                _invoiceAuto.Aut_year = null;
                                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                                _invoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                                _invoiceAuto.Aut_year = null;
                                _invoiceAuto.Aut_modify_dt = null;
                                if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invoiceNo) == 1)
                                { _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto); goto nxt1; }
                                _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                                _salesDAL.UpdateInvoiceWithTaxCommission(_invoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);
                                _inventoryHeader.Ith_oth_com = _toCompany;
                                _inventoryHeader.Ith_oth_docno = _invoiceNo;
                                _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                                _inventoryHeader.Ith_sub_docno = _purchaseOrder;
                                _reptPickSerials.ForEach(x => x.Tus_base_doc_no = _invoiceNo);
                                _inventoryHeader.Ith_direct = false;
                                _inventoryHeader.Ith_doc_tp = "DO";
                                _inventoryHeader.Ith_cate_tp = "CRED";
                                _inventoryHeader.Ith_bus_entity = _invoiceHeader.Sah_cus_cd;
                                _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                                DeliveryOrderInterCompany(_inventoryHeader, _reptPickSerials, null, _inventoryAuto, out _deliveryOrder, _inventoryRepDAL, _inventoryDAL);
                                _tempInventoryDoc = _deliveryOrder;
                                _tempSalesDoc = _invoiceNo + "," + _purchaseOrder;
                            }
                            catch (Exception ex)
                            {
                                _message += "Generated error " + ex.Message;
                                _effect = -1;
                            }
                        }
                        if (_effect != -1) _effect = 1;
                        if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true)
                        {
                            _masterComp = _generalDAL.GetCompByCode(_inventoryHeader.Ith_com);  //kapila 27/4/2016
                            if (_masterComp.MC_IS_SCM2_FMS == 1)
                                _inventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                            else
                                _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_DO", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                        }
                    }
                    if (_documentType == "PRN")
                    {
                        _inventoryHeader.Ith_cate_tp = "INTR";
                        foreach (ReptPickSerials _ser in _reptPickSerials)
                        {
                            //Updated by akila 2018/02/27 - As per the chamal & dharshanas confirmetion, orginal supplier and grn no need to updat with int ser details
                            _inventoryHeader.Ith_bus_entity = _ser.Tus_exist_supp;
                            _inventoryHeader.Ith_acc_no = _ser.Tus_exist_grnno;

                            //InventorySerialMaster _master = _inventoryDAL.GetSerialMasterDetailBySerialID(_ser.Tus_ser_id);
                            //if (_master != null && !string.IsNullOrEmpty(_master.Irsm_com))
                            //{ _inventoryHeader.Ith_bus_entity = _master.Irsm_exist_supp; _inventoryHeader.Ith_acc_no = _master.Irsm_exist_grn_no; }
                            break;
                        }
                        string _grnno = _inventoryHeader.Ith_acc_no;
                        PurchaseOrder POHeader = new PurchaseOrder();
                        List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();
                        POHeader.Poh_com = _inventoryHeader.Ith_com;
                        POHeader.Poh_contain_kit = false;
                        POHeader.Poh_cre_period = string.Empty;
                        POHeader.Poh_cur_cd = "LKR";
                        POHeader.Poh_dis_amt = 0;
                        POHeader.Poh_dis_rt = 0;
                        POHeader.Poh_doc_no = _inventoryHeader.Ith_seq_no.ToString();
                        POHeader.Poh_dt = _inventoryHeader.Ith_doc_date;
                        POHeader.Poh_ex_rt = 1;
                        POHeader.Poh_frm_mon = 0;
                        POHeader.Poh_frm_yer = 0;
                        POHeader.Poh_job_no = "PURCHASE RETURN";
                        POHeader.Poh_ope = _inventoryHeader.Ith_sbu;
                        POHeader.Poh_oth_tot = 0;
                        POHeader.Poh_pay_term = null;
                        POHeader.Poh_port_of_orig = string.Empty;
                        POHeader.Poh_preferd_eta = DateTime.MinValue.Date;
                        POHeader.Poh_profit_cd = _inventoryHeader.Ith_pc;
                        POHeader.Poh_ref = "INTR";
                        POHeader.Poh_remarks = "PURCHASE RETURN";
                        POHeader.Poh_reprint = false;
                        POHeader.Poh_sent_add = string.Empty;
                        POHeader.Poh_sent_by = string.Empty;
                        POHeader.Poh_sent_to_vendor = false;
                        POHeader.Poh_sent_via = string.Empty;
                        POHeader.Poh_seq_no = _inventoryHeader.Ith_seq_no;
                        POHeader.Poh_stus = "F";
                        POHeader.Poh_sub_tot = 0;
                        POHeader.Poh_sub_tp = "R";
                        POHeader.Poh_supp = _inventoryHeader.Ith_bus_entity;

                        POHeader.Poh_tax_chg = false;
                        POHeader.Poh_tax_tot = 0;
                        POHeader.Poh_to_mon = 0;
                        POHeader.Poh_to_yer = 0;
                        POHeader.Poh_to_yer = 0;
                        POHeader.Poh_tot = 0;
                        POHeader.Poh_tp = "L";
                        POHeader.Poh_trans_term = string.Empty;
                        POHeader.Poh_cre_by = _inventoryHeader.Ith_cre_by;
                        Int32 _poline = 1;


                        foreach (ReptPickSerials _p in _reptPickSerials)
                        {
                            MasterItem _mIt = _inventoryDAL.GetItem(_inventoryHeader.Ith_com, _p.Tus_itm_cd);
                            DataTable _POLine = _inventoryDAL.GetPOLine(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _grnno, _p.Tus_ser_id);
                            if (_POLine != null && _POLine.Rows.Count > 0)
                            {
                                _poline = _POLine.Rows[0].Field<Int32>("itb_base_refline");
                            }
                            else _poline += 1;
                            {
                                _p.Tus_base_itm_line = _poline;
                            }

                            //updated by akila 218/02/28
                            if (POItems != null && POItems.Count > 0)
                            {
                                var _existingItems = POItems.Where(x => x.Pod_act_unit_price == _p.Tus_unit_cost && x.Pod_itm_cd == _p.Tus_itm_cd && x.Pod_itm_stus == _p.Tus_itm_stus && x.Pod_line_no == _p.Tus_base_itm_line && x.Pod_seq_no == POHeader.Poh_seq_no).ToList();
                                if (_existingItems != null && _existingItems.Count > 0)
                                {
                                    POItems.Where(x => x.Pod_act_unit_price == _p.Tus_unit_cost && x.Pod_itm_cd == _p.Tus_itm_cd && x.Pod_itm_stus == _p.Tus_itm_stus && x.Pod_line_no == _p.Tus_base_itm_line && x.Pod_seq_no == POHeader.Poh_seq_no).ToList()
                                    .ForEach(y =>
                                    {
                                        y.Pod_qty += _p.Tus_qty;
                                        y.Pod_line_amt = (y.Pod_act_unit_price * y.Pod_qty);
                                        y.Pod_line_val = (y.Pod_act_unit_price * y.Pod_qty);
                                    });
                                }
                                else
                                {
                                    PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                                    #region Fill PO Items Object
                                    POItem.Pod_act_unit_price = _p.Tus_unit_cost;
                                    POItem.Pod_dis_amt = 0;
                                    POItem.Pod_dis_rt = 0;
                                    POItem.Pod_grn_bal = 0;
                                    POItem.Pod_item_desc = _mIt.Mi_longdesc;
                                    POItem.Pod_itm_cd = _p.Tus_itm_cd;
                                    POItem.Pod_itm_stus = _p.Tus_itm_stus;
                                    POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
                                    POItem.Pod_kit_itm_cd = string.Empty;
                                    POItem.Pod_kit_line_no = 0;
                                    POItem.Pod_lc_bal = 0;
                                    POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
                                    POItem.Pod_line_no = _p.Tus_base_itm_line;
                                    POItem.Pod_line_tax = 0;
                                    POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
                                    POItem.Pod_nbt = 0;
                                    POItem.Pod_nbt_before = 0;
                                    POItem.Pod_pi_bal = 0;
                                    POItem.Pod_qty = _p.Tus_qty;
                                    POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                                    POItem.Pod_seq_no = POHeader.Poh_seq_no;
                                    POItem.Pod_si_bal = 0;
                                    POItem.Pod_tot_tax_before = 0;
                                    POItem.Pod_unit_price = _p.Tus_unit_cost;
                                    POItem.Pod_uom = _mIt.Mi_itm_uom;
                                    POItem.Pod_vat = 0;
                                    POItem.Pod_vat_before = 0;
                                    #endregion
                                    POItems.Add(POItem);
                                }
                            }
                            else
                            {
                                PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                                #region Fill PO Items Object
                                POItem.Pod_act_unit_price = _p.Tus_unit_cost;
                                POItem.Pod_dis_amt = 0;
                                POItem.Pod_dis_rt = 0;
                                POItem.Pod_grn_bal = 0;
                                POItem.Pod_item_desc = _mIt.Mi_longdesc;
                                POItem.Pod_itm_cd = _p.Tus_itm_cd;
                                POItem.Pod_itm_stus = _p.Tus_itm_stus;
                                POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
                                POItem.Pod_kit_itm_cd = string.Empty;
                                POItem.Pod_kit_line_no = 0;
                                POItem.Pod_lc_bal = 0;
                                POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
                                POItem.Pod_line_no = _p.Tus_base_itm_line;
                                POItem.Pod_line_tax = 0;
                                POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
                                POItem.Pod_nbt = 0;
                                POItem.Pod_nbt_before = 0;
                                POItem.Pod_pi_bal = 0;
                                POItem.Pod_qty = _p.Tus_qty;
                                POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                                POItem.Pod_seq_no = POHeader.Poh_seq_no;
                                POItem.Pod_si_bal = 0;
                                POItem.Pod_tot_tax_before = 0;
                                POItem.Pod_unit_price = _p.Tus_unit_cost;
                                POItem.Pod_uom = _mIt.Mi_itm_uom;
                                POItem.Pod_vat = 0;
                                POItem.Pod_vat_before = 0;
                                #endregion
                                POItems.Add(POItem);
                            }

                            //PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                            //#region Fill PO Items Object
                            //POItem.Pod_act_unit_price = _p.Tus_unit_cost;
                            //POItem.Pod_dis_amt = 0;
                            //POItem.Pod_dis_rt = 0;
                            //POItem.Pod_grn_bal = 0;
                            //POItem.Pod_item_desc = _mIt.Mi_longdesc;
                            //POItem.Pod_itm_cd = _p.Tus_itm_cd;
                            //POItem.Pod_itm_stus = _p.Tus_itm_stus;
                            //POItem.Pod_itm_tp = _mIt.Mi_itm_tp;
                            //POItem.Pod_kit_itm_cd = string.Empty;
                            //POItem.Pod_kit_line_no = 0;
                            //POItem.Pod_lc_bal = 0;
                            //POItem.Pod_line_amt = _p.Tus_unit_cost * _p.Tus_qty;
                            //POItem.Pod_line_no = _p.Tus_base_itm_line;
                            //POItem.Pod_line_tax = 0;
                            //POItem.Pod_line_val = _p.Tus_unit_cost * _p.Tus_qty;
                            //POItem.Pod_nbt = 0;
                            //POItem.Pod_nbt_before = 0;
                            //POItem.Pod_pi_bal = 0;
                            //POItem.Pod_qty = _p.Tus_qty;
                            //POItem.Pod_ref_no = POHeader.Poh_seq_no.ToString();
                            //POItem.Pod_seq_no = POHeader.Poh_seq_no;
                            //POItem.Pod_si_bal = 0;
                            //POItem.Pod_tot_tax_before = 0;
                            //POItem.Pod_unit_price = _p.Tus_unit_cost;
                            //POItem.Pod_uom = _mIt.Mi_itm_uom;
                            //POItem.Pod_vat = 0;
                            //POItem.Pod_vat_before = 0;
                            //#endregion
                            //POItems.Add(POItem);
                            _inventoryDAL.UpdateAODOUTPickItem(_p.Tus_orig_grnno, _p.Tus_ser_id);

                        }

                        try
                        {
                            _inventoryDAL.SaveNewPO(POHeader);
                        }
                        catch (Exception)
                        {

                            if (string.IsNullOrEmpty(_inventoryHeader.Ith_bus_entity))
                            {
                                _effect = -1;
                                _message = "Process Terminated ! supplier details not found !";
                                goto AB;
                            }
                        }
                        foreach (PurchaseOrderDetail _POItems in POItems) _inventoryDAL.SaveNewPOItem(_POItems);
                        MasterAutoNumber _AutoNo = new MasterAutoNumber();
                        _AutoNo.Aut_cate_cd = _inventoryHeader.Ith_com;
                        _AutoNo.Aut_cate_tp = "COM";
                        _AutoNo.Aut_direction = null;
                        _AutoNo.Aut_modify_dt = null;
                        _AutoNo.Aut_moduleid = "PRT";
                        _AutoNo.Aut_start_char = "PRT";
                        _AutoNo.Aut_year = null;
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(POHeader.Poh_seq_no), _documentNo);
                        _inventoryDAL.UpdateAutoNumber(_AutoNo);
                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(POHeader.Poh_seq_no), _documentNo);
                        string _doc = string.Empty;
                        UpdateInventoryAutoNumber(_inventoryHeader, _AutoNo, "-", out _doc);
                        _inventoryHeader.Ith_oth_docno = _documentNo;
                        _inventoryHeader.Ith_doc_tp = "PRN";
                        _inventoryAuto.Aut_moduleid = "PRN";
                        _inventoryAuto.Aut_start_char = "PRN";
                        _inventoryAuto.Aut_direction = 0;
                        if (_isInvalidManualDocType) if (!string.IsNullOrEmpty(_inventoryHeader.Ith_anal_2)) if (_inventoryHeader.Ith_anal_2 == "PRN") _inventoryHeader.Ith_anal_1 = "0";
                        _effect = SaveOutwardScanSerial(_inventoryHeader, _reptPickSerials, _reptPickSerialsSub, null, false);
                        UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _tempInventoryDoc);
                        if (_effect != -1) _effect = 1;
                        if (_isInvalidManualDocType == false && !string.IsNullOrEmpty(_inventoryHeader.Ith_manual_ref) && _inventoryHeader.Ith_is_manual == true) _FMSinventoryDAL.UpdateManualDocNo(_inventoryHeader.Ith_loc, "MDOC_PRN", Convert.ToInt32(_inventoryHeader.Ith_manual_ref), _tempInventoryDoc);
                    }
                    if (_documentType == "NON")
                    { _effect = -1; break; }
                    if (string.IsNullOrEmpty(_documentType))
                    { _effect = -1; break; }
                    if (_effect == -1)
                    { break; }
                    if (!string.IsNullOrEmpty(_tempInventoryDoc)) if (string.IsNullOrEmpty(_genInvDoc)) _genInvDoc = _tempInventoryDoc; else _genInvDoc += "," + _tempInventoryDoc;
                    if (!string.IsNullOrEmpty(_tempSalesDoc)) if (string.IsNullOrEmpty(_genSalDoc)) _genSalDoc = _tempSalesDoc; else _genSalDoc += "," + _tempInventoryDoc;
                        #endregion
                }


                //int _reqDataUpdate = 0;
                if (_effect != -1)
                {
                    #region Req Balance Update update by Lakshan 2016 Sep 08
                    /*  MasterLocationNew _masterLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                   {
                       Ml_loc_cd = _inventoryHeader.Ith_loc,
                       Ml_com_cd = _inventoryHeader.Ith_com,
                       Ml_act = 1
                   }).FirstOrDefault();
                    if (!string.IsNullOrEmpty(_inventoryHeader.Ith_oth_docno))
                    {
                        var _byItemStatus = from l in _reptPickSerials
                                            group l by new { l.Tus_itm_cd, l.Tus_itm_stus, l.Tus_base_doc_no, l.Tus_base_itm_line }
                                                into item
                                                select new
                                                {
                                                    Tus_itm_cd = item.Key.Tus_itm_cd,
                                                    Tus_itm_stus = item.Key.Tus_itm_stus,
                                                    Tus_base_doc_no = item.Key.Tus_base_doc_no,
                                                    Tus_base_itm_line = item.Key.Tus_base_itm_line,
                                                    Tus_qty = item.Sum(p => p.Tus_qty)
                                                };
                        if (_byItemStatus != null)
                            if (_byItemStatus.Count() > 0)
                            {
                                foreach (var p in _byItemStatus)
                                {
                                    string _requestno = p.Tus_base_doc_no;
                                    string _company = _inventoryHeader.Ith_com;
                                    string _location = _trlocation;
                                    string _itemcode = p.Tus_itm_cd;
                                    string _itemstatus = p.Tus_itm_stus;
                                    decimal _qty = p.Tus_qty;
                                    string _docstatus = "F";
                                    string _user = _inventoryHeader.Ith_cre_by;
                                    Int32 _lineNo = p.Tus_base_itm_line;
                                    if (_masterLoc.Ml_is_serial == 0 && (_inventoryHeader.Ith_sub_tp == "EX" || _inventoryHeader.Ith_sub_tp == "RE" || _inventoryHeader.Ith_sub_tp == "BOI"))
                                    {
                                        _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalanceBond(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
                                    }
                                    else
                                    {
                                        _reqDataUpdate = _inventoryDAL.UpdateRequestItemBalance(_requestno, _company, _location, _itemcode, _itemstatus, _qty, _docstatus, _user, _lineNo);
                                    }

                                }
                                var _docs = _byItemStatus.Select(x => x.Tus_base_doc_no).Distinct();
                                if (_docs != null) if (_docs.Count() > 0) foreach (string _request in _docs) _inventoryDAL.UpdateRequestHeader(_request.Trim(), _inventoryHeader.Ith_cre_by);
                            }
                    }*/
                    #endregion

                    foreach (int seqno in _reptPickSerials.Select(x => x.Tus_usrseq_no).Distinct().ToList()) _inventoryRepDAL.DeleteTempPickObjs(seqno);
                }
                #endregion

                //kapila 11/7/2017 (update request status=F)
                if (!string.IsNullOrEmpty(_requestNo))   //kapila 14/7/2017

                    if (_effect != -1 && _requestNo.Contains("GRAN"))
                    {
                        if (_inventoryHeader.GRAN_UpdateReqStatus == true) // add by tharanga 
                        {
                            var _result = _reptPickSerials.GroupBy(x => new { x.Tus_base_doc_no }).Select(g => new { g.Key.Tus_base_doc_no });
                            foreach (var GRNno in _result)
                            {
                                _inventoryDAL.UpdateReqStatusByReqNo(GRNno.Tus_base_doc_no, _inventoryHeader.Ith_cre_by);
                            }

                        }
                        else
                        {
                            _inventoryDAL.UpdateReqStatusByReqNo(_requestNo, _inventoryHeader.Ith_cre_by);
                        }

                    }

                #region Validate Int Req Itm add by Lakshan 9/08/2016
                if (_effect != -1 && _reqBalBefSave > 0 && !_requestNo.Contains("GRAN"))
                {
                    #region Get multiple document balance Lakshan 06 Oct 2016
                    decimal _reqBalAftSave = 0;
                    foreach (var _hdrSeq in _tempPickHdrTemp)
                    {
                        _reqBalAftSave = _reqBalAftSave = +_inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_hdrSeq.Tuh_usrseq_no);
                    }
                    // decimal _reqBalAftSave = _inventoryDAL.GetIntReqBalanceAvailableByTempPickSeq(_tempPickSeqNo);
                    #endregion

                    decimal _reqNetBal = _reqBalBefSave - _reqBalAftSave;
                    if (_updatedQty != _reqNetBal)
                    {
                        _effect = -1;
                        //   _message = "Precess Terminated. Request item update incorrect !";
                        _message = "Precess Terminated. Request item has no inventory balance !";
                    }
                }
                #endregion

                #region Save Trans action Details by Lakshan
                if (_effect != -1)
                {
                    if (_traList != null)
                    {
                        foreach (Transport item in _traList)
                        {
                            if (item.Slip_no_auto_gen)
                            {
                                if (item.MstAuto != null)
                                {
                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(item.MstAuto.Aut_moduleid, item.MstAuto.Aut_direction, item.MstAuto.Aut_start_char, item.MstAuto.Aut_cate_tp,
                                        item.MstAuto.Aut_cate_cd, item.MstAuto.Aut_modify_dt, item.MstAuto.Aut_year).Aut_number;
                                    string _documentNo = _inventoryHeader.Ith_loc + "-" + item.Mbe_curr_slip_cd + "-" + "CO" + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(item.MstAuto);
                                    item.Itrn_ref_no = _documentNo;
                                }
                            }
                            item.Itrn_ref_doc = _genInvDoc;
                            item.Itrn_trns_no = _inventoryHeader.Ith_doc_no;
                            _inventoryDAL.Save_Int_Transport(item); //Change from _generalDAL to inventoryDAL  - 16/05/2018
                        }
                    }
                }

                #endregion

                if (_effect != -1)
                {
                    #region Job Request Generation by Lakshan 03 Sep 2016
                    MasterLocationNew _mstOutLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                    {
                        Ml_loc_cd = _inventoryHeader.Ith_loc,
                        Ml_com_cd = _inventoryHeader.Ith_com,
                        Ml_act = 1
                    }).FirstOrDefault();

                    MasterLocationNew _mstloc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                    {
                        Ml_loc_cd = _inventoryHeader.Ith_oth_loc,
                        Ml_com_cd = _inventoryHeader.Ith_oth_com,
                        Ml_act = 1
                    }).FirstOrDefault();
                    if (_mstloc != null)
                    {
                        if (_mstloc.Ml_loc_tp == "SERC" && _mstloc.Ml_is_online == 1 && _inventoryHeader.Ith_direct != true)
                        {
                            //AS per the Sanjeewa 15 Oct 2016
                            List<InventoryRequestItem> _intReqItmList = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(_inventoryHeader.Ith_oth_docno);
                            bool _reAva = false;
                            if (_intReqItmList != null)
                            {
                                if (_intReqItmList.Count > 0)
                                {
                                    _reAva = true;
                                }
                            }
                            if (!_reAva)
                            {
                                if (_mstOutLoc.Ml_loc_tp != "SERS") //AS per the kapila 29/9/2016 if (_mstOutLoc.Ml_loc_tp != "SERC")
                                {
                                    #region Make Req Hdr
                                    Int32 ReqSeqNo = 0;
                                    ReqSeqNo = _custServiceDAL.GetJobSerialID();   // _inventoryDAL.GetReqSerialID(); 13/5/2016
                                    Service_Req_Hdr _serReqHdr = new Service_Req_Hdr();
                                    _serReqHdr.Srb_seq_no = ReqSeqNo;
                                    _serReqHdr.Srb_reqno = _genInvDoc;
                                    _serReqHdr.Srb_dt = _inventoryHeader.Ith_doc_date;
                                    _serReqHdr.Srb_com = _inventoryHeader.Ith_com;
                                    _serReqHdr.Srb_jobcat = "WW";
                                    _serReqHdr.Srb_jobtp = "I";
                                    _serReqHdr.Srb_jobstp = "RCC";
                                    _serReqHdr.Srb_manualref = _inventoryHeader.Ith_manual_ref;
                                    _serReqHdr.Srb_otherref = "";
                                    _serReqHdr.Srb_refno = _inventoryHeader.Ith_oth_docno;
                                    _serReqHdr.Srb_jobstage = 1;
                                    _serReqHdr.Srb_rmk = _inventoryHeader.Ith_remarks;
                                    _serReqHdr.Srb_prority = "NORMAL";
                                    _serReqHdr.Srb_st_dt = _inventoryHeader.Ith_doc_date;
                                    _serReqHdr.Srb_ed_dt = _inventoryHeader.Ith_doc_date;
                                    _serReqHdr.Srb_noofprint = 0;
                                    _serReqHdr.Srb_lastprintby = "";
                                    _serReqHdr.Srb_orderno = "";
                                    _serReqHdr.Srb_custexptdt = _inventoryHeader.Ith_doc_date;
                                    _serReqHdr.Srb_substage = "";
                                    _serReqHdr.Srb_cust_cd = _inventoryHeader.Ith_loc;
                                    _serReqHdr.Srb_stus = "P";
                                    _serReqHdr.Srb_cust_name = _mstloc.Ml_loc_desc;
                                    _serReqHdr.Srb_add1 = _mstloc.Ml_add1;
                                    _serReqHdr.Srb_add2 = _mstloc.Ml_add2;
                                    DataTable _dtIncGrp = _inventoryDAL.GetBusEntityDataByAccCode(_inventoryHeader.Ith_oth_com, _inventoryHeader.Ith_oth_loc);
                                    if (_dtIncGrp == null)
                                    {
                                        _effect = -1;
                                        _message = "Process Terminated ! Income group data not found !" + "Location : " + _inventoryHeader.Ith_oth_loc;
                                    }
                                    if (_dtIncGrp.Rows.Count == 0)
                                    {
                                        _effect = -1;
                                        _message = "Process Terminated ! Income group data not found !";
                                    }
                                    if (_dtIncGrp.Rows.Count > 0)
                                    {
                                        _serReqHdr.Srb_b_cust_cd = _dtIncGrp.Rows[0]["mbe_income_grup"].ToString();
                                        _serReqHdr.Srb_b_cust_name = _dtIncGrp.Rows[0]["mbe_name"].ToString();
                                        _serReqHdr.Srb_b_mobino = _dtIncGrp.Rows[0]["mbe_mob"].ToString();
                                        _serReqHdr.Srb_b_add1 = _dtIncGrp.Rows[0]["mbe_add1"].ToString();
                                        _serReqHdr.Srb_b_add2 = _dtIncGrp.Rows[0]["mbe_add2"].ToString();
                                        _serReqHdr.Srb_b_phno = _dtIncGrp.Rows[0]["mbe_tel"].ToString();
                                        _serReqHdr.Srb_b_email = _dtIncGrp.Rows[0]["mbe_email"].ToString();
                                    }
                                    //  _serReqHdr.Srb_b_cust_cd = _inventoryHeader.Ith_loc;
                                    // _serReqHdr.Srb_b_cust_name = _mstloc.Ml_loc_desc;
                                    // _serReqHdr.Srb_b_add1 = _mstloc.Ml_add1;
                                    _serReqHdr.Srb_cre_by = _inventoryHeader.Ith_cre_by;
                                    _serReqHdr.Srb_cre_dt = DateTime.Now;
                                    _serReqHdr.Srb_mod_by = _inventoryHeader.Ith_mod_by;
                                    _serReqHdr.Srb_mod_dt = DateTime.Now;
                                    #endregion
                                    if (_effect != -1)
                                    {
                                        int res = _custServiceDAL.SaveRequestHeader(_serReqHdr);
                                        #region MyRegion
                                        if (res > 0)
                                        {
                                            List<InventorySerialN> _intSer = _inventoryDAL.Get_INT_SER_DATA((new InventorySerialN()
                                            {
                                                Ins_com = _inventoryHeader.Ith_com,
                                                Ins_loc = _inventoryHeader.Ith_loc,
                                                Ins_doc_no = _genInvDoc
                                            }));
                                            List<Service_Req_Det> _serReqDetList = new List<Service_Req_Det>();
                                            List<MasterItemWarrantyPeriod> _warrPeriodList = new List<MasterItemWarrantyPeriod>();
                                            MasterItem _mstItem = new MasterItem();
                                            foreach (var _ser in _intSer)
                                            {
                                                Service_Req_Det _serReqDet = new Service_Req_Det();
                                                _serReqDet.Jrd_seq_no = _serReqHdr.Srb_seq_no;
                                                _serReqDet.Jrd_reqno = _genInvDoc;
                                                _serReqDet.Jrd_reqline = _ser.Ins_ser_line;
                                                _serReqDet.Jrd_sjobno = _genInvDoc + ".1";
                                                _serReqDet.Jrd_loc = _inventoryHeader.Ith_oth_loc;
                                                _serReqDet.Jrd_pc = string.IsNullOrEmpty(_inventoryHeader.Ith_pc) ? _inventoryHeader.Ith_oth_loc : _inventoryHeader.Ith_oth_loc;
                                                _serReqDet.Jrd_itm_cd = _ser.Ins_itm_cd;
                                                _serReqDet.Jrd_itm_stus = _ser.Ins_itm_stus;
                                                _mstItem = _generalDAL.GetItemMaster(_ser.Ins_itm_cd);
                                                if (_mstItem != null)
                                                {
                                                    _serReqDet.Jrd_itm_desc = _mstItem.Mi_shortdesc;
                                                    _serReqDet.Jrd_brand = _mstItem.Mi_brand;
                                                    _serReqDet.Jrd_model = _mstItem.Mi_model;
                                                    _serReqDet.Jrd_warr_stus = _mstItem.Mi_warr ? 1 : 0;
                                                }
                                                _serReqDet.Jrd_itm_cost = _ser.Ins_unit_cost;
                                                _serReqDet.Jrd_ser1 = _ser.Ins_ser_1;
                                                _serReqDet.Jrd_ser2 = _ser.Ins_ser_2;
                                                _serReqDet.Jrd_warr = _ser.Ins_warr_no;
                                                _warrPeriodList = _generalDAL.getitemWarranty(_serReqDet.Jrd_itm_cd);
                                                if (_warrPeriodList != null)
                                                {
                                                    var v = _warrPeriodList.Where(c => c.Mwp_itm_cd == _ser.Ins_itm_cd && c.Mwp_itm_stus == _ser.Ins_itm_stus).FirstOrDefault();
                                                    if (v != null)
                                                    {
                                                        _serReqDet.Jrd_chg_warr_rmk = v.Mwp_rmk;
                                                        _serReqDet.Jrd_warrperiod = v.Mwp_val;
                                                        _serReqDet.Jrd_warrrmk = v.Mwp_rmk;
                                                    }
                                                }
                                                _serReqDet.Jrd_chg_warr_stdt = _ser.Ins_doc_dt;
                                                _serReqDet.Jrd_warrstartdt = _ser.Ins_doc_dt;
                                                _serReqDet.Jrd_iswrn = 0;

                                                _serReqDet.Jrd_isstockupdate = 1;
                                                // _serReqDet.Jrd_regno ="";
                                                //_serReqDet.Jrd_milage = "";
                                                //_serReqDet.Jrd_warr_stus = 1;
                                                // _serReqDet.Jrd_onloan = _ser.Ins_loc;
                                                _serReqDet.Jrd_warrreplace = 0;
                                                _serReqDet.Jrd_aodissueloc = _inventoryHeader.Ith_loc;
                                                _serReqDet.Jrd_aodissuedt = _ser.Ins_doc_dt;
                                                _serReqDet.Jrd_aodissueno = _genInvDoc;
                                                _serReqDet.Jrd_stage = 1;
                                                _serReqDet.Jrd_com = _ser.Ins_com;
                                                _serReqDet.Jrd_used = 0;
                                                _serReqDet.Jrd_jobno = "";
                                                _serReqDet.Jrd_jobline = 0;
                                                _serReqDetList.Add(_serReqDet);
                                            }
                                            foreach (var v in _serReqDetList)
                                            {
                                                res = _custServiceDAL.SaveRequestDetail(v);
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                    #endregion
                }
                if (_effect != -1)
                {
                    #region Add by Lakshan to insert JOB for KD operation
                    //MasterLocationNew _mstDispLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                    //{
                    //    Ml_loc_cd = _inventoryHeader.Ith_loc,
                    //    Ml_com_cd = _inventoryHeader.Ith_com,
                    //    Ml_act = 1
                    //}).FirstOrDefault();

                    //MasterLocationNew _mstInpLoc = _generalDAL.GetMasterLocations(new MasterLocationNew()
                    //{
                    //    Ml_loc_cd = _inventoryHeader.Ith_oth_loc,
                    //    Ml_com_cd = _inventoryHeader.Ith_oth_com,
                    //    Ml_act = 1
                    //}).FirstOrDefault();
                    //if (_mstDispLoc.Ml_loc_tp == "KD")
                    //{
                    //    ServiceJobHeader _serJobHdr = new ServiceJobHeader();
                    //    _salesDAL.Save_Job_Header(_serJobHdr);
                    //}
                    #endregion
                }
                #region Validate Aod Save by Lakshan 06/Sep/2016
                #region Cheak Batch
                if (_effect != -1)
                {
                    List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                    _BATCH = _inventoryDAL.GETInventorybatch(_inventoryHeader.Ith_com, _inventoryHeader.Ith_seq_no.ToString());
                    bool _count = _inventoryDAL.checkBatch_ser(_inventoryHeader.Ith_seq_no);
                    if (_BATCH.Count == 0)
                    {
                        _effect = -1;
                        _message = "Process Terminated ! Inventory Balance not updated ";
                    }
                    if (_effect != -1)
                    {
                        if (_count == false)
                        {
                            bool _chkBatch = true;
                            MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc);
                            if (_mstLocation != null)
                            {
                                if (!_mstLocation.Ml_is_serial)
                                {
                                    if (string.IsNullOrEmpty(_inventoryHeader.Ith_loading_point) || _inventoryHeader.Ith_loading_point == "N/A")
                                    {
                                        _chkBatch = false;
                                    }
                                }
                            }
                            if (_chkBatch)
                            {
                                _effect = -1;
                                _message = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                            }
                        }
                    }
                }
                #endregion
                #region Cheak int Itm
                if (_effect != -1)
                {
                    bool _intItmErr = _inventoryDAL.check_int_itm(_inventoryHeader.Ith_seq_no);
                    if (_intItmErr == false)
                    {
                        _effect = -1;
                        _message = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                    }
                }
                #endregion

                #region Check Serials
                if (_effect == 1)
                {
                    //Added by Chamal to check serial ID duplicate 05-Sep-2016
                    List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                    _serList = _inventoryDAL.GetSerialsByDocument(_inventoryHeader.Ith_seq_no, null);

                    var _varSer = from c in _serList
                                  group c by c.Tus_ser_id into grp
                                  where grp.Count() > 1
                                  select new { SerialID = grp.Key, Count = grp.Count() };
                    if (_varSer != null && _varSer.Count() > 0)
                    {
                        string _errorSerialID = string.Empty;
                        foreach (var item in _varSer)
                        {
                            if (string.IsNullOrEmpty(_errorSerialID))
                            {
                                _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                            }
                            else
                            {
                                _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                            }
                        }
                        _effect = -1;
                        _message = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        _genInventoryDocument = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        _genInvDoc = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    }
                }
                #endregion

                #region validate serial count and batch count
                if (_batchQty != _serQty)
                {
                    _effect = -1;
                    _message = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                }
                #endregion

                #region validate reservation update 07 Nov 2016
                if (_effect == 1 && _inventoryHeader.TMP_IS_RES_UPDATE)
                {
                    if (_resUpdateErr)
                    {
                        _effect = -1;
                        _message = " Reservation data not update correctly !";
                    }
                }
                #endregion

                #region validate location balance update correctly 27 Nov 2016
                if (_inventoryHeader.TMP_CHK_LOC_BAL && _effect == 1)
                {
                    foreach (var _itemVal in _locBalanceDataList)
                    {
                        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                        {
                            Inl_com = _itemVal.Inl_com,
                            Inl_loc = _itemVal.Inl_loc,
                            Inl_itm_cd = _itemVal.Inl_itm_cd,
                            Inl_itm_stus = _itemVal.Inl_itm_stus
                        });
                        _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                        _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_bef_save - _itemVal.Inl_qty_aft_save;
                        if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                        {
                            _itemVal.Inl_err_ava = 1;
                        }
                    }
                    var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                    if (_balUpdteErr != null)
                    {
                        if (_balUpdteErr.Count > 0)
                        {
                            _effect = -1;
                            _message = "Process Terminated ! Inventory Balance not updated [LOC]";
                        }
                    }
                }
                #endregion

                #region validate UOM MAC
                if (_inventoryHeader.TMP_SAVE_PKG_DATA)
                {
                    string _mcCom = _inventoryHeader.Ith_com;
                    List<InventoryItem> _mcIntItmList = _inventoryDAL.GET_INT_ITM_DATA_BY_SEQNO(_inventoryHeader.Ith_seq_no);
                    MasterItem _mcItm = new MasterItem();
                    foreach (var _iti in _mcIntItmList)
                    {
                        bool _mcIsModConvBase = false;
                        _mcItm = _inventoryDAL.GetItem(_mcCom, _iti.Iti_item_code);
                        List<UnitConvert> _unitConvert = _inventoryDAL.GET_UNIT_CONVERTER_DATA(new UnitConvert()
                        {
                            mmu_model = _mcItm.Mi_model,
                            mmu_com = _mcCom
                        });
                        if (_unitConvert.Count > 0)
                        {
                            var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
                            if (_mcModel != null)
                            {
                                _mcIsModConvBase = true;
                            }
                        }
                        if (_mcIsModConvBase)
                        {
                            var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
                            decimal _mcPkgQty = Math.Round(_iti.Iti_qty / _mcModel.mmu_qty, 2);
                            if (_iti.Iti_pkg_uom_qty != _mcPkgQty)
                            {
                                _effect = -1;
                                _message = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
                            }
                        }
                        else
                        {
                            if (_iti.Iti_pkg_uom_qty != _iti.Iti_pkg_uom_qty)
                            {
                                _effect = -1;
                                _message = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
                            }
                        }
                    }
                }
                #endregion
                #endregion
            AB:
                if (_effect != -1)
                {
                    if (withcoonection == false)
                    {
                        _inventoryDAL.TransactionCommit();
                        _salesDAL.TransactionCommit();
                        _inventoryRepDAL.TransactionCommit();
                        _generalDAL.TransactionCommit();
                        _custServiceDAL.TransactionCommit();
                        _FMSinventoryDAL.TransactionCommit();
                    }
                }
                else
                {
                    _genInvDoc = string.Empty;
                    _genSalDoc = string.Empty;
                    _effect = -1;
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _custServiceDAL.TransactionRollback();
                    _FMSinventoryDAL.TransactionRollback();
                }
            }
            catch (Exception ex)
            {
                // _message = ex.Message;
                _message = string.IsNullOrEmpty(_message) ? ex.Message : _message;
                _genInvDoc = string.Empty;
                _genSalDoc = string.Empty;
                _effect = -1;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _FMSinventoryDAL.TransactionRollback();
            }
            _genMessage = string.IsNullOrEmpty(_message) ? _genMessage : _message;
            _genInventoryDocument = _genInvDoc;
            _genSalesDocument = _genSalDoc;
            return _effect;
        }

        public Int32 UpdateCustDecHdr(string com, string _docno, string modBy, string session)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            int effect = 0;
            try 
            {
                effect = _inventoryDAL.UpdateCustDecHdr(com, _docno,modBy,session);
                if (effect > 0)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                }

            }
            catch(Exception e)
            {
                effect = 0;
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }
            return effect;
        }

        //Dulaj 2018/Oct/17
        public Int32 DeleteKitItemsBySeq(Int32 seq)
        {
            Int32 result = 0;
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            try
            {
                result = _inventoryDAL.DeleteKitItemsBySeq(seq);
                if (result > 0)
                {
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                }
                else
                {
                    _inventoryDAL.ConnectionClose();
                    _inventoryDAL.TransactionRollback();
                }
            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                // _docNo = ex.Message;
            }
            return result;
        }
        //Dulaj 2018-Aug-03
        public DataTable GetItemCost(string com, string loc, string itemStatus, string itemCode)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetItemCost(com, loc, itemStatus, itemCode);
        }
        public Int32 SaveSatProjectKitDetails(SatProjectKitDetails satKit)
        {
            Int32 _effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _effect = _inventoryDAL.SaveSatProjectKitDetails(satKit);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        public List<SatProjectKitDetails> GetSatKitItems(string boqno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetSatKitItems(boqno);
        }
        public DataTable getItemCostByJobNo(string jobNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemCostByJobNo(jobNo);
        }

        //Dulaj 2018/Dec/13
       private bool IsRestrictedAutoAodIn(string _company, MasterLocation fromLoc, MasterLocation toLoc)
       {
            bool restricted = false;
            int count = 0;
           //_inventoryDAL = new InventoryDAL();
            //Check LocationWise Restriction
            DataTable resTbl = _inventoryDAL.GetAutoAODRestrictionDef(_company, "LOC",fromLoc.Ml_loc_cd,toLoc.Ml_loc_cd);            
            if(resTbl==null)
            {
                resTbl = new DataTable();
            }
            else
            {
                if(resTbl.Rows.Count>0)
                {
                    count = count + 1;
                }
            }
            if (resTbl.Rows.Count == 0)
            {              
                    //Check locationtype Restriction
                    resTbl = _inventoryDAL.GetAutoAODRestrictionDef(_company, "TP", fromLoc.Ml_loc_tp, toLoc.Ml_loc_tp);
                    if (resTbl == null)
                    {
                        resTbl = new DataTable();
                    }
                    else
                    {
                        if (resTbl.Rows.Count > 0)
                        {
                            count = count + 1;
                        }
                    }
                    if (resTbl.Rows.Count == 0)
                    {
                    //
                    //Check Chnal Restriction
                    DataTable fromChnl = _inventoryDAL.GetLocationChannel(_company, fromLoc.Ml_loc_cd);
                    DataTable toChnl = _inventoryDAL.GetLocationChannel(_company, toLoc.Ml_loc_cd);
                    //MLI_VAL
                    if (fromChnl != null && toChnl != null && fromChnl.Rows.Count > 0 && toChnl.Rows.Count > 0)
                    {
                        resTbl = _inventoryDAL.GetAutoAODRestrictionDef(_company, "CHNL", fromChnl.Rows[0]["MLI_VAL"].ToString(), toChnl.Rows[0]["MLI_VAL"].ToString());
                    }
                    else
                    {
                        resTbl = null;
                    }
                    if (resTbl == null)
                    {
                        resTbl = new DataTable();
                    }
                    else
                    {
                        if (resTbl.Rows.Count > 0)
                        {
                            count = count + 1;
                        }
                    }
                }
            }
           if(count>0)
           {
               restricted = true;
           }
            //
            return restricted;
       }
       //Dulaj 2019/Jan/22
       public Int32 ItemPurchaseRestriction(string com, MasterItem itm, decimal qty, string itemStatus, out string _err)
       {
           _inventoryDAL = new InventoryDAL();
           _err = "";
           Int32 resType = 0;
           string paraStats = "";
           try
           {
               #region Type 01 PURRESTEOL
               DataTable mstSysPara = new DataTable();
               mstSysPara = _inventoryDAL.getMstSysPara(com, "COM", com, "PURRESTEOL", "COM");
               bool checkDiscontinueItm = false;
               if (mstSysPara != null)
               {
                   if (mstSysPara.Rows.Count > 0)
                   {
                       checkDiscontinueItm = true;
                       if (itm.Mi_is_discont == 1)
                       {
                           resType = 1;// DISCONTINUE ITEMS
                           _err = "Item " + itm.Mi_cd.Trim() + " is discontinue item. Cannot make new purchase. Pls. contact inventory dept.";
                       }
                   }
               }
               #endregion

               #region Restriction02 PURRESTAGE
               if (resType != 1)
               {
                   mstSysPara = _inventoryDAL.getMstSysPara(com, "COM", com, "PURRESTAGE", "COM");
               }
               else
               {
                   mstSysPara = new DataTable();
               }
               if (mstSysPara != null)
               {
                   if (mstSysPara.Rows.Count > 0)
                   {

                       foreach (DataRow dr in mstSysPara.Rows)
                       {
                           paraStats = "";
                           string stats = dr["msp_rest_cate_cd"].ToString();
                           int age = Convert.ToInt32(dr["msp_rest_val"].ToString());
                           List<string> statsLists = stats.Split(',').ToList();
                           foreach (string st in statsLists)
                           {
                               paraStats = st + "," + paraStats;
                           }
                           if (!(string.IsNullOrEmpty(paraStats)))
                           {
                               paraStats = paraStats.Substring(0, paraStats.Length - 1);
                           }

                           //For All Items Status
                           //Serialized Items                            
                           if (itm.Mi_is_ser1 == 1 || itm.Mi_is_ser1 == 0)
                           {
                               //SerialLocation
                               DataTable serItms = _inventoryDAL.GetSerialItmAge(com, itm.Mi_cd, paraStats, DateTime.Now.AddDays(-age));
                               if (serItms.Rows.Count > 0)
                               {
                                   resType = 2;// DISCONTINUE ITEMS
                                   _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                                   return resType;
                               }
                               else
                               {//Non Serial location
                                   serItms = _inventoryDAL.GetSerialNonSerialItmAgeBatch(com, itm.Mi_cd, paraStats, DateTime.Now.AddDays(-age));
                                   if (serItms.Rows.Count > 0)
                                   {
                                       resType = 2;// DISCONTINUE ITEMS
                                       _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                                       return resType;
                                   }
                               }
                           }
                           else
                           {
                               DataTable nonSerItms = _inventoryDAL.GetNonSerialItmAge(com, itm.Mi_cd, paraStats, DateTime.Now.AddDays(-age));
                               if (nonSerItms != null)
                               {
                                   if (nonSerItms.Rows.Count > 0)
                                   {
                                       resType = 2;// DISCONTINUE ITEMS
                                       _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                                       return resType;
                                   }
                               }
                           }

                           if (resType != 2)
                           {
                               //GIT VALIDATION
                               DataTable itmsGit = _inventoryDAL.GetGITItmAge(com, itm.Mi_cd, "", age);
                               if (itmsGit != null)
                               {
                                   if (itmsGit.Rows.Count > 0)
                                   {
                                       resType = 2;// DISCONTINUE ITEMS
                                       _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                                       return resType;
                                   }
                               }
                           }

                       }
                   }
               }
               #endregion

               #region Restriction03 PURNRESTAGE
               if (resType != 1 && resType != 2)
               {
                   mstSysPara = _inventoryDAL.getMstSysPara(com, "COM", com, "PURNRESTAGE", "COM");
               }
               else
               {
                   mstSysPara = new DataTable();
               }
               if (mstSysPara != null)
               {
                   if (mstSysPara.Rows.Count > 0)
                   {
                       int age = Convert.ToInt32(mstSysPara.Rows[0]["msp_rest_val"].ToString());
                       string stats = mstSysPara.Rows[0]["msp_rest_cate_cd"].ToString();
                       List<string> statsLists = stats.Split(',').ToList();
                       foreach (string st in statsLists)
                       {
                           paraStats = st + "," + paraStats;
                       }
                       if (!(string.IsNullOrEmpty(paraStats)))
                       {
                           paraStats = paraStats.Substring(0, paraStats.Length - 1);
                       }
                       //For All Items Status
                       //Serialized Items                            
                       if (itm.Mi_is_ser1 == 1 || itm.Mi_is_ser1 == 0)
                       {
                           //SerialLocation
                           DataTable serItms = _inventoryDAL.GetSerialItmAge(com, itm.Mi_cd, "", DateTime.Now.AddDays(-age));
                           if (serItms.Rows.Count > 0)
                           {
                               resType = 3;// DISCONTINUE ITEMS
                               _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                           }
                           else
                           {//Non Serial location
                               serItms = _inventoryDAL.GetSerialNonSerialItmAgeBatch(com, itm.Mi_cd, "", DateTime.Now.AddDays(-age));
                               if (serItms.Rows.Count > 0)
                               {
                                   resType = 3;// DISCONTINUE ITEMS
                                   _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                               }
                           }
                       }
                       else
                       {//Decimal
                           DataTable nonSerItms = _inventoryDAL.GetNonSerialItmAge(com, itm.Mi_cd, "", DateTime.Now.AddDays(-age));
                           if (nonSerItms != null)
                           {
                               if (nonSerItms.Rows.Count > 0)
                               {
                                   resType = 3;// DISCONTINUE ITEMS
                                   _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                               }
                           }
                       }

                       if (resType != 3)
                       {
                           //GIT VALIDATION
                           DataTable itmsGit = _inventoryDAL.GetGITItmAge(com, itm.Mi_cd, "", age);
                           if (itmsGit != null)
                           {
                               if (itmsGit.Rows.Count > 0)
                               {
                                   resType = 3;// DISCONTINUE ITEMS
                                   _err = "Item " + itm.Mi_cd + " is over <" + age + "> aging item. Cannot make new purchase. Pls. contact inventory dept.";
                               }
                           }
                       }
                   }
               }
               #endregion
           }
           catch (Exception _errex)
           {

           }
           return resType;
       }
       public Int16 deletePickedManualDocDetail(string _refNo, string _Loc, string _user, string _Status)
       {
           _FMSinventoryDAL = new FMS_InventoryDAL();
           _FMSinventoryDAL.ConnectionOpen();
           Int16 X = _FMSinventoryDAL.deletePickedManualDocDetail(_refNo, _Loc, _user, _Status);
           _FMSinventoryDAL.ConnectionOpen();
           return X;
       }
       
    }

}

using System; 
using System.Data; 

namespace FF.BusinessObjects 
{

//===========================================================================================================
// This code is generated by Code gen V.1 
// All rights reserved.
// Suneththaraka02@gmail.com 
// Computer :- ITPD11  | User :- suneth On 04-Sep-2015 12:37:30
//===========================================================================================================

public class sar_pb_def 
{
public Int32 Spd_seq    { get; set; } 
public String Spd_com    { get; set; } 
public String Spd_circular    { get; set; } 
public String Spd_base_pb    { get; set; } 
public String Spd_base_pblvl    { get; set; } 
public String Spd_pb    { get; set; } 
public String Spd_pblvl    { get; set; } 
public String Spd_type    { get; set; } 
public DateTime Spd_from    { get; set; } 
public DateTime Spd_to    { get; set; } 
public Int32 Spd_act    { get; set; } 
public String Spd_cre_by    { get; set; } 
public DateTime Spd_cre_when    { get; set; } 
public String Spd_mod_by    { get; set; } 
public DateTime Spd_mod_when    { get; set; }
public String Spd_cate { get; set; }
public Int32 SPD_PRICE_TYPE { get; set; }


public static sar_pb_def Converter(DataRow row)
{
    return new sar_pb_def
    {
        Spd_seq = row["SPD_SEQ"] == DBNull.Value ? 0 : Convert.ToInt32(row["SPD_SEQ"].ToString()),
        Spd_com = row["SPD_COM"] == DBNull.Value ? string.Empty : row["SPD_COM"].ToString(),
        Spd_circular = row["SPD_CIRCULAR"] == DBNull.Value ? string.Empty : row["SPD_CIRCULAR"].ToString(),
        Spd_base_pb = row["SPD_BASE_PB"] == DBNull.Value ? string.Empty : row["SPD_BASE_PB"].ToString(),
        Spd_base_pblvl = row["SPD_BASE_PBLVL"] == DBNull.Value ? string.Empty : row["SPD_BASE_PBLVL"].ToString(),
        Spd_pb = row["SPD_PB"] == DBNull.Value ? string.Empty : row["SPD_PB"].ToString(),
        Spd_pblvl = row["SPD_PBLVL"] == DBNull.Value ? string.Empty : row["SPD_PBLVL"].ToString(),
        Spd_type = row["SPD_TYPE"] == DBNull.Value ? string.Empty : row["SPD_TYPE"].ToString(),
        Spd_from = row["SPD_FROM"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["SPD_FROM"].ToString()),
        Spd_to = row["SPD_TO"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["SPD_TO"].ToString()),
        Spd_act = row["SPD_ACT"] == DBNull.Value ? 0 : Convert.ToInt32(row["SPD_ACT"].ToString()),
        Spd_cre_by = row["SPD_CRE_BY"] == DBNull.Value ? string.Empty : row["SPD_CRE_BY"].ToString(),
        Spd_cre_when = row["SPD_CRE_WHEN"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["SPD_CRE_WHEN"].ToString()),
        Spd_mod_by = row["SPD_MOD_BY"] == DBNull.Value ? string.Empty : row["SPD_MOD_BY"].ToString(),
        Spd_mod_when = row["SPD_MOD_WHEN"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["SPD_MOD_WHEN"].ToString()),
        Spd_cate = row["SPD_CATE"] == DBNull.Value ? string.Empty : row["SPD_CATE"].ToString(),
        SPD_PRICE_TYPE = row["spd_price_type"] == DBNull.Value ? 0 : Convert.ToInt32(row["spd_price_type"].ToString())
    };
}
public static sar_pb_def Convertermew(DataRow row)
{
    return new sar_pb_def
    {

        Spd_pb = row["SPD_PB"] == DBNull.Value ? string.Empty : row["SPD_PB"].ToString(),
        Spd_pblvl = row["SPD_PBLVL"] == DBNull.Value ? string.Empty : row["SPD_PBLVL"].ToString(),
        Spd_cate = row["SPD_CATE"] == DBNull.Value ? string.Empty : row["SPD_CATE"].ToString(),
        Spd_base_pb = row["SPD_BASE_PB"] == DBNull.Value ? string.Empty : row["SPD_BASE_PB"].ToString(),
        Spd_base_pblvl = row["SPD_BASE_PBLVL"] == DBNull.Value ? string.Empty : row["SPD_BASE_PBLVL"].ToString(),
        SPD_PRICE_TYPE = row["spd_price_type"] == DBNull.Value ? 0 : Convert.ToInt32(row["spd_price_type"].ToString())
        
      
    };
}
} 
} 

